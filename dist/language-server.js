"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod4) => function __require() {
  return mod4 || (0, cb[__getOwnPropNames(cb)[0]])((mod4 = { exports: {} }).exports, mod4), mod4.exports;
};
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __copyProps = (to, from2, except, desc) => {
  if (from2 && typeof from2 === "object" || typeof from2 === "function") {
    for (let key of __getOwnPropNames(from2))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod4, isNodeMode, target) => (target = mod4 != null ? __create(__getProtoOf(mod4)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod4 || !mod4.__esModule ? __defProp(target, "default", { value: mod4, enumerable: true }) : target,
  mod4
));

// ../../shims/importMeta.js
var importMeta;
var init_importMeta = __esm({
  "../../shims/importMeta.js"() {
    "use strict";
    importMeta = {
      url: `file://${process.cwd()}/node_modules`
    };
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/utils/is.js
var require_is = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/utils/is.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.thenable = exports2.typedArray = exports2.stringArray = exports2.array = exports2.func = exports2.error = exports2.number = exports2.string = exports2.boolean = void 0;
    function boolean(value) {
      return value === true || value === false;
    }
    exports2.boolean = boolean;
    function string3(value) {
      return typeof value === "string" || value instanceof String;
    }
    exports2.string = string3;
    function number(value) {
      return typeof value === "number" || value instanceof Number;
    }
    exports2.number = number;
    function error(value) {
      return value instanceof Error;
    }
    exports2.error = error;
    function func(value) {
      return typeof value === "function";
    }
    exports2.func = func;
    function array2(value) {
      return Array.isArray(value);
    }
    exports2.array = array2;
    function stringArray(value) {
      return array2(value) && value.every((elem) => string3(elem));
    }
    exports2.stringArray = stringArray;
    function typedArray(value, check) {
      return Array.isArray(value) && value.every(check);
    }
    exports2.typedArray = typedArray;
    function thenable(value) {
      return value && func(value.then);
    }
    exports2.thenable = thenable;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/is.js
var require_is2 = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/is.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringArray = exports2.array = exports2.func = exports2.error = exports2.number = exports2.string = exports2.boolean = void 0;
    function boolean(value) {
      return value === true || value === false;
    }
    exports2.boolean = boolean;
    function string3(value) {
      return typeof value === "string" || value instanceof String;
    }
    exports2.string = string3;
    function number(value) {
      return typeof value === "number" || value instanceof Number;
    }
    exports2.number = number;
    function error(value) {
      return value instanceof Error;
    }
    exports2.error = error;
    function func(value) {
      return typeof value === "function";
    }
    exports2.func = func;
    function array2(value) {
      return Array.isArray(value);
    }
    exports2.array = array2;
    function stringArray(value) {
      return array2(value) && value.every((elem) => string3(elem));
    }
    exports2.stringArray = stringArray;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messages.js
var require_messages = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messages.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Message = exports2.NotificationType9 = exports2.NotificationType8 = exports2.NotificationType7 = exports2.NotificationType6 = exports2.NotificationType5 = exports2.NotificationType4 = exports2.NotificationType3 = exports2.NotificationType2 = exports2.NotificationType1 = exports2.NotificationType0 = exports2.NotificationType = exports2.RequestType9 = exports2.RequestType8 = exports2.RequestType7 = exports2.RequestType6 = exports2.RequestType5 = exports2.RequestType4 = exports2.RequestType3 = exports2.RequestType2 = exports2.RequestType1 = exports2.RequestType = exports2.RequestType0 = exports2.AbstractMessageSignature = exports2.ParameterStructures = exports2.ResponseError = exports2.ErrorCodes = void 0;
    var is = require_is2();
    var ErrorCodes;
    (function(ErrorCodes2) {
      ErrorCodes2.ParseError = -32700;
      ErrorCodes2.InvalidRequest = -32600;
      ErrorCodes2.MethodNotFound = -32601;
      ErrorCodes2.InvalidParams = -32602;
      ErrorCodes2.InternalError = -32603;
      ErrorCodes2.jsonrpcReservedErrorRangeStart = -32099;
      ErrorCodes2.serverErrorStart = -32099;
      ErrorCodes2.MessageWriteError = -32099;
      ErrorCodes2.MessageReadError = -32098;
      ErrorCodes2.PendingResponseRejected = -32097;
      ErrorCodes2.ConnectionInactive = -32096;
      ErrorCodes2.ServerNotInitialized = -32002;
      ErrorCodes2.UnknownErrorCode = -32001;
      ErrorCodes2.jsonrpcReservedErrorRangeEnd = -32e3;
      ErrorCodes2.serverErrorEnd = -32e3;
    })(ErrorCodes || (exports2.ErrorCodes = ErrorCodes = {}));
    var ResponseError = class _ResponseError extends Error {
      constructor(code2, message, data) {
        super(message);
        this.code = is.number(code2) ? code2 : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, _ResponseError.prototype);
      }
      toJson() {
        const result = {
          code: this.code,
          message: this.message
        };
        if (this.data !== void 0) {
          result.data = this.data;
        }
        return result;
      }
    };
    exports2.ResponseError = ResponseError;
    var ParameterStructures = class _ParameterStructures {
      constructor(kind) {
        this.kind = kind;
      }
      static is(value) {
        return value === _ParameterStructures.auto || value === _ParameterStructures.byName || value === _ParameterStructures.byPosition;
      }
      toString() {
        return this.kind;
      }
    };
    exports2.ParameterStructures = ParameterStructures;
    ParameterStructures.auto = new ParameterStructures("auto");
    ParameterStructures.byPosition = new ParameterStructures("byPosition");
    ParameterStructures.byName = new ParameterStructures("byName");
    var AbstractMessageSignature = class {
      constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
      }
      get parameterStructures() {
        return ParameterStructures.auto;
      }
    };
    exports2.AbstractMessageSignature = AbstractMessageSignature;
    var RequestType0 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    };
    exports2.RequestType0 = RequestType0;
    var RequestType = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.RequestType = RequestType;
    var RequestType1 = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.RequestType1 = RequestType1;
    var RequestType2 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    };
    exports2.RequestType2 = RequestType2;
    var RequestType3 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    };
    exports2.RequestType3 = RequestType3;
    var RequestType4 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    };
    exports2.RequestType4 = RequestType4;
    var RequestType5 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    };
    exports2.RequestType5 = RequestType5;
    var RequestType6 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    };
    exports2.RequestType6 = RequestType6;
    var RequestType7 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    };
    exports2.RequestType7 = RequestType7;
    var RequestType8 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    };
    exports2.RequestType8 = RequestType8;
    var RequestType9 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    };
    exports2.RequestType9 = RequestType9;
    var NotificationType = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.NotificationType = NotificationType;
    var NotificationType0 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 0);
      }
    };
    exports2.NotificationType0 = NotificationType0;
    var NotificationType1 = class extends AbstractMessageSignature {
      constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
      }
      get parameterStructures() {
        return this._parameterStructures;
      }
    };
    exports2.NotificationType1 = NotificationType1;
    var NotificationType2 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 2);
      }
    };
    exports2.NotificationType2 = NotificationType2;
    var NotificationType3 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 3);
      }
    };
    exports2.NotificationType3 = NotificationType3;
    var NotificationType4 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 4);
      }
    };
    exports2.NotificationType4 = NotificationType4;
    var NotificationType5 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 5);
      }
    };
    exports2.NotificationType5 = NotificationType5;
    var NotificationType6 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 6);
      }
    };
    exports2.NotificationType6 = NotificationType6;
    var NotificationType7 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 7);
      }
    };
    exports2.NotificationType7 = NotificationType7;
    var NotificationType8 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 8);
      }
    };
    exports2.NotificationType8 = NotificationType8;
    var NotificationType9 = class extends AbstractMessageSignature {
      constructor(method) {
        super(method, 9);
      }
    };
    exports2.NotificationType9 = NotificationType9;
    var Message;
    (function(Message2) {
      function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
      }
      Message2.isRequest = isRequest;
      function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
      }
      Message2.isNotification = isNotification;
      function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
      }
      Message2.isResponse = isResponse;
    })(Message || (exports2.Message = Message = {}));
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/linkedMap.js
var require_linkedMap = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/linkedMap.js"(exports2) {
    "use strict";
    init_importMeta();
    var _a;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LRUCache = exports2.LinkedMap = exports2.Touch = void 0;
    var Touch;
    (function(Touch2) {
      Touch2.None = 0;
      Touch2.First = 1;
      Touch2.AsOld = Touch2.First;
      Touch2.Last = 2;
      Touch2.AsNew = Touch2.Last;
    })(Touch || (exports2.Touch = Touch = {}));
    var LinkedMap = class {
      constructor() {
        this[_a] = "LinkedMap";
        this._map = /* @__PURE__ */ new Map();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state = 0;
      }
      clear() {
        this._map.clear();
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
        this._state++;
      }
      isEmpty() {
        return !this._head && !this._tail;
      }
      get size() {
        return this._size;
      }
      get first() {
        return this._head?.value;
      }
      get last() {
        return this._tail?.value;
      }
      has(key) {
        return this._map.has(key);
      }
      get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        if (touch !== Touch.None) {
          this.touch(item, touch);
        }
        return item.value;
      }
      set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
          item.value = value;
          if (touch !== Touch.None) {
            this.touch(item, touch);
          }
        } else {
          item = { key, value, next: void 0, previous: void 0 };
          switch (touch) {
            case Touch.None:
              this.addItemLast(item);
              break;
            case Touch.First:
              this.addItemFirst(item);
              break;
            case Touch.Last:
              this.addItemLast(item);
              break;
            default:
              this.addItemLast(item);
              break;
          }
          this._map.set(key, item);
          this._size++;
        }
        return this;
      }
      delete(key) {
        return !!this.remove(key);
      }
      remove(key) {
        const item = this._map.get(key);
        if (!item) {
          return void 0;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      shift() {
        if (!this._head && !this._tail) {
          return void 0;
        }
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
      }
      forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
          if (thisArg) {
            callbackfn.bind(thisArg)(current.value, current.key, this);
          } else {
            callbackfn(current.value, current.key, this);
          }
          if (this._state !== state) {
            throw new Error(`LinkedMap got modified during iteration.`);
          }
          current = current.next;
        }
      }
      keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: current.key, done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: current.value, done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
          [Symbol.iterator]: () => {
            return iterator;
          },
          next: () => {
            if (this._state !== state) {
              throw new Error(`LinkedMap got modified during iteration.`);
            }
            if (current) {
              const result = { value: [current.key, current.value], done: false };
              current = current.next;
              return result;
            } else {
              return { value: void 0, done: true };
            }
          }
        };
        return iterator;
      }
      [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
      }
      trimOld(newSize) {
        if (newSize >= this.size) {
          return;
        }
        if (newSize === 0) {
          this.clear();
          return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
          this._map.delete(current.key);
          current = current.next;
          currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
          current.previous = void 0;
        }
        this._state++;
      }
      addItemFirst(item) {
        if (!this._head && !this._tail) {
          this._tail = item;
        } else if (!this._head) {
          throw new Error("Invalid list");
        } else {
          item.next = this._head;
          this._head.previous = item;
        }
        this._head = item;
        this._state++;
      }
      addItemLast(item) {
        if (!this._head && !this._tail) {
          this._head = item;
        } else if (!this._tail) {
          throw new Error("Invalid list");
        } else {
          item.previous = this._tail;
          this._tail.next = item;
        }
        this._tail = item;
        this._state++;
      }
      removeItem(item) {
        if (item === this._head && item === this._tail) {
          this._head = void 0;
          this._tail = void 0;
        } else if (item === this._head) {
          if (!item.next) {
            throw new Error("Invalid list");
          }
          item.next.previous = void 0;
          this._head = item.next;
        } else if (item === this._tail) {
          if (!item.previous) {
            throw new Error("Invalid list");
          }
          item.previous.next = void 0;
          this._tail = item.previous;
        } else {
          const next = item.next;
          const previous = item.previous;
          if (!next || !previous) {
            throw new Error("Invalid list");
          }
          next.previous = previous;
          previous.next = next;
        }
        item.next = void 0;
        item.previous = void 0;
        this._state++;
      }
      touch(item, touch) {
        if (!this._head || !this._tail) {
          throw new Error("Invalid list");
        }
        if (touch !== Touch.First && touch !== Touch.Last) {
          return;
        }
        if (touch === Touch.First) {
          if (item === this._head) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._tail) {
            previous.next = void 0;
            this._tail = previous;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.previous = void 0;
          item.next = this._head;
          this._head.previous = item;
          this._head = item;
          this._state++;
        } else if (touch === Touch.Last) {
          if (item === this._tail) {
            return;
          }
          const next = item.next;
          const previous = item.previous;
          if (item === this._head) {
            next.previous = void 0;
            this._head = next;
          } else {
            next.previous = previous;
            previous.next = next;
          }
          item.next = void 0;
          item.previous = this._tail;
          this._tail.next = item;
          this._tail = item;
          this._state++;
        }
      }
      toJSON() {
        const data = [];
        this.forEach((value, key) => {
          data.push([key, value]);
        });
        return data;
      }
      fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
          this.set(key, value);
        }
      }
    };
    exports2.LinkedMap = LinkedMap;
    var LRUCache2 = class extends LinkedMap {
      constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
      }
      get limit() {
        return this._limit;
      }
      set limit(limit) {
        this._limit = limit;
        this.checkTrim();
      }
      get ratio() {
        return this._ratio;
      }
      set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
      }
      get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
      }
      peek(key) {
        return super.get(key, Touch.None);
      }
      set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
      }
      checkTrim() {
        if (this.size > this._limit) {
          this.trimOld(Math.round(this._limit * this._ratio));
        }
      }
    };
    exports2.LRUCache = LRUCache2;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/disposable.js
var require_disposable = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/disposable.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Disposable = void 0;
    var Disposable;
    (function(Disposable2) {
      function create(func) {
        return {
          dispose: func
        };
      }
      Disposable2.create = create;
    })(Disposable || (exports2.Disposable = Disposable = {}));
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/ral.js
var require_ral = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/ral.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var _ral;
    function RAL() {
      if (_ral === void 0) {
        throw new Error(`No runtime abstraction layer installed`);
      }
      return _ral;
    }
    (function(RAL2) {
      function install(ral) {
        if (ral === void 0) {
          throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
      }
      RAL2.install = install;
    })(RAL || (RAL = {}));
    exports2.default = RAL;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js
var require_events = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Emitter = exports2.Event = void 0;
    var ral_1 = require_ral();
    var Event;
    (function(Event2) {
      const _disposable = { dispose() {
      } };
      Event2.None = function() {
        return _disposable;
      };
    })(Event || (exports2.Event = Event = {}));
    var CallbackList = class {
      add(callback, context = null, bucket) {
        if (!this._callbacks) {
          this._callbacks = [];
          this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
          bucket.push({ dispose: () => this.remove(callback, context) });
        }
      }
      remove(callback, context = null) {
        if (!this._callbacks) {
          return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
          if (this._callbacks[i] === callback) {
            if (this._contexts[i] === context) {
              this._callbacks.splice(i, 1);
              this._contexts.splice(i, 1);
              return;
            } else {
              foundCallbackWithDifferentContext = true;
            }
          }
        }
        if (foundCallbackWithDifferentContext) {
          throw new Error("When adding a listener with a context, you should remove it with the same context");
        }
      }
      invoke(...args) {
        if (!this._callbacks) {
          return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
          try {
            ret.push(callbacks[i].apply(contexts[i], args));
          } catch (e) {
            (0, ral_1.default)().console.error(e);
          }
        }
        return ret;
      }
      isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
      }
      dispose() {
        this._callbacks = void 0;
        this._contexts = void 0;
      }
    };
    var Emitter = class _Emitter {
      constructor(_options) {
        this._options = _options;
      }
      /**
       * For the public to allow to subscribe
       * to events from this Emitter
       */
      get event() {
        if (!this._event) {
          this._event = (listener, thisArgs, disposables) => {
            if (!this._callbacks) {
              this._callbacks = new CallbackList();
            }
            if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
              this._options.onFirstListenerAdd(this);
            }
            this._callbacks.add(listener, thisArgs);
            const result = {
              dispose: () => {
                if (!this._callbacks) {
                  return;
                }
                this._callbacks.remove(listener, thisArgs);
                result.dispose = _Emitter._noop;
                if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                  this._options.onLastListenerRemove(this);
                }
              }
            };
            if (Array.isArray(disposables)) {
              disposables.push(result);
            }
            return result;
          };
        }
        return this._event;
      }
      /**
       * To be kept private to fire an event to
       * subscribers
       */
      fire(event) {
        if (this._callbacks) {
          this._callbacks.invoke.call(this._callbacks, event);
        }
      }
      dispose() {
        if (this._callbacks) {
          this._callbacks.dispose();
          this._callbacks = void 0;
        }
      }
    };
    exports2.Emitter = Emitter;
    Emitter._noop = function() {
    };
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js
var require_cancellation = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CancellationTokenSource = exports2.CancellationToken = void 0;
    var ral_1 = require_ral();
    var Is = require_is2();
    var events_1 = require_events();
    var CancellationToken;
    (function(CancellationToken2) {
      CancellationToken2.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
      });
      CancellationToken2.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
      });
      function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken2.None || candidate === CancellationToken2.Cancelled || Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested);
      }
      CancellationToken2.is = is;
    })(CancellationToken || (exports2.CancellationToken = CancellationToken = {}));
    var shortcutEvent = Object.freeze(function(callback, context) {
      const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
      return { dispose() {
        handle.dispose();
      } };
    });
    var MutableToken = class {
      constructor() {
        this._isCancelled = false;
      }
      cancel() {
        if (!this._isCancelled) {
          this._isCancelled = true;
          if (this._emitter) {
            this._emitter.fire(void 0);
            this.dispose();
          }
        }
      }
      get isCancellationRequested() {
        return this._isCancelled;
      }
      get onCancellationRequested() {
        if (this._isCancelled) {
          return shortcutEvent;
        }
        if (!this._emitter) {
          this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
      }
      dispose() {
        if (this._emitter) {
          this._emitter.dispose();
          this._emitter = void 0;
        }
      }
    };
    var CancellationTokenSource = class {
      get token() {
        if (!this._token) {
          this._token = new MutableToken();
        }
        return this._token;
      }
      cancel() {
        if (!this._token) {
          this._token = CancellationToken.Cancelled;
        } else {
          this._token.cancel();
        }
      }
      dispose() {
        if (!this._token) {
          this._token = CancellationToken.None;
        } else if (this._token instanceof MutableToken) {
          this._token.dispose();
        }
      }
    };
    exports2.CancellationTokenSource = CancellationTokenSource;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js
var require_sharedArrayCancellation = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SharedArrayReceiverStrategy = exports2.SharedArraySenderStrategy = void 0;
    var cancellation_1 = require_cancellation();
    var CancellationState;
    (function(CancellationState2) {
      CancellationState2.Continue = 0;
      CancellationState2.Cancelled = 1;
    })(CancellationState || (CancellationState = {}));
    var SharedArraySenderStrategy = class {
      constructor() {
        this.buffers = /* @__PURE__ */ new Map();
      }
      enableCancellation(request) {
        if (request.id === null) {
          return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
      }
      async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === void 0) {
          return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
      }
      cleanup(id) {
        this.buffers.delete(id);
      }
      dispose() {
        this.buffers.clear();
      }
    };
    exports2.SharedArraySenderStrategy = SharedArraySenderStrategy;
    var SharedArrayBufferCancellationToken = class {
      constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
      }
      get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
      }
      get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
      }
    };
    var SharedArrayBufferCancellationTokenSource = class {
      constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
      }
      cancel() {
      }
      dispose() {
      }
    };
    var SharedArrayReceiverStrategy = class {
      constructor() {
        this.kind = "request";
      }
      createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === void 0) {
          return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
      }
    };
    exports2.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/semaphore.js
var require_semaphore = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/semaphore.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Semaphore = void 0;
    var ral_1 = require_ral();
    var Semaphore = class {
      constructor(capacity = 1) {
        if (capacity <= 0) {
          throw new Error("Capacity must be greater than 0");
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
      }
      lock(thunk) {
        return new Promise((resolve, reject) => {
          this._waiting.push({ thunk, resolve, reject });
          this.runNext();
        });
      }
      get active() {
        return this._active;
      }
      runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
          return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
      }
      doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
          return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
          throw new Error(`To many thunks active`);
        }
        try {
          const result = next.thunk();
          if (result instanceof Promise) {
            result.then((value) => {
              this._active--;
              next.resolve(value);
              this.runNext();
            }, (err) => {
              this._active--;
              next.reject(err);
              this.runNext();
            });
          } else {
            this._active--;
            next.resolve(result);
            this.runNext();
          }
        } catch (err) {
          this._active--;
          next.reject(err);
          this.runNext();
        }
      }
    };
    exports2.Semaphore = Semaphore;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageReader.js
var require_messageReader = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageReader.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ReadableStreamMessageReader = exports2.AbstractMessageReader = exports2.MessageReader = void 0;
    var ral_1 = require_ral();
    var Is = require_is2();
    var events_1 = require_events();
    var semaphore_1 = require_semaphore();
    var MessageReader;
    (function(MessageReader2) {
      function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) && Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
      }
      MessageReader2.is = is;
    })(MessageReader || (exports2.MessageReader = MessageReader = {}));
    var AbstractMessageReader = class {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error) {
        this.errorEmitter.fire(this.asError(error));
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      get onPartialMessage() {
        return this.partialMessageEmitter.event;
      }
      firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
      }
      asError(error) {
        if (error instanceof Error) {
          return error;
        } else {
          return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : "unknown"}`);
        }
      }
    };
    exports2.AbstractMessageReader = AbstractMessageReader;
    var ResolvedMessageReaderOptions;
    (function(ResolvedMessageReaderOptions2) {
      function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = /* @__PURE__ */ new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = /* @__PURE__ */ new Map();
        if (options === void 0 || typeof options === "string") {
          charset = options ?? "utf-8";
        } else {
          charset = options.charset ?? "utf-8";
          if (options.contentDecoder !== void 0) {
            contentDecoder = options.contentDecoder;
            contentDecoders.set(contentDecoder.name, contentDecoder);
          }
          if (options.contentDecoders !== void 0) {
            for (const decoder of options.contentDecoders) {
              contentDecoders.set(decoder.name, decoder);
            }
          }
          if (options.contentTypeDecoder !== void 0) {
            contentTypeDecoder = options.contentTypeDecoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
          }
          if (options.contentTypeDecoders !== void 0) {
            for (const decoder of options.contentTypeDecoders) {
              contentTypeDecoders.set(decoder.name, decoder);
            }
          }
        }
        if (contentTypeDecoder === void 0) {
          contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
          contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
      }
      ResolvedMessageReaderOptions2.fromOptions = fromOptions;
    })(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
    var ReadableStreamMessageReader = class extends AbstractMessageReader {
      constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 1e4;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
      }
      set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
      }
      get partialMessageTimeout() {
        return this._partialMessageTimeout;
      }
      listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = void 0;
        this.callback = callback;
        const result = this.readable.onData((data) => {
          this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
      }
      onData(data) {
        try {
          this.buffer.append(data);
          while (true) {
            if (this.nextMessageLength === -1) {
              const headers = this.buffer.tryReadHeaders(true);
              if (!headers) {
                return;
              }
              const contentLength = headers.get("content-length");
              if (!contentLength) {
                this.fireError(new Error(`Header must provide a Content-Length property.
${JSON.stringify(Object.fromEntries(headers))}`));
                return;
              }
              const length3 = parseInt(contentLength);
              if (isNaN(length3)) {
                this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                return;
              }
              this.nextMessageLength = length3;
            }
            const body = this.buffer.tryReadBody(this.nextMessageLength);
            if (body === void 0) {
              this.setPartialMessageTimer();
              return;
            }
            this.clearPartialMessageTimer();
            this.nextMessageLength = -1;
            this.readSemaphore.lock(async () => {
              const bytes = this.options.contentDecoder !== void 0 ? await this.options.contentDecoder.decode(body) : body;
              const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
              this.callback(message);
            }).catch((error) => {
              this.fireError(error);
            });
          }
        } catch (error) {
          this.fireError(error);
        }
      }
      clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
          this.partialMessageTimer.dispose();
          this.partialMessageTimer = void 0;
        }
      }
      setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
          return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
          this.partialMessageTimer = void 0;
          if (token === this.messageToken) {
            this.firePartialMessage({ messageToken: token, waitingTime: timeout });
            this.setPartialMessageTimer();
          }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
      }
    };
    exports2.ReadableStreamMessageReader = ReadableStreamMessageReader;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageWriter.js
var require_messageWriter = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageWriter.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteableStreamMessageWriter = exports2.AbstractMessageWriter = exports2.MessageWriter = void 0;
    var ral_1 = require_ral();
    var Is = require_is2();
    var semaphore_1 = require_semaphore();
    var events_1 = require_events();
    var ContentLength = "Content-Length: ";
    var CRLF = "\r\n";
    var MessageWriter;
    (function(MessageWriter2) {
      function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) && Is.func(candidate.onError) && Is.func(candidate.write);
      }
      MessageWriter2.is = is;
    })(MessageWriter || (exports2.MessageWriter = MessageWriter = {}));
    var AbstractMessageWriter = class {
      constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
      }
      dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
      }
      get onError() {
        return this.errorEmitter.event;
      }
      fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
      }
      get onClose() {
        return this.closeEmitter.event;
      }
      fireClose() {
        this.closeEmitter.fire(void 0);
      }
      asError(error) {
        if (error instanceof Error) {
          return error;
        } else {
          return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : "unknown"}`);
        }
      }
    };
    exports2.AbstractMessageWriter = AbstractMessageWriter;
    var ResolvedMessageWriterOptions;
    (function(ResolvedMessageWriterOptions2) {
      function fromOptions(options) {
        if (options === void 0 || typeof options === "string") {
          return { charset: options ?? "utf-8", contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        } else {
          return { charset: options.charset ?? "utf-8", contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
      }
      ResolvedMessageWriterOptions2.fromOptions = fromOptions;
    })(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
    var WriteableStreamMessageWriter = class extends AbstractMessageWriter {
      constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
      }
      async write(msg) {
        return this.writeSemaphore.lock(async () => {
          const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
            if (this.options.contentEncoder !== void 0) {
              return this.options.contentEncoder.encode(buffer);
            } else {
              return buffer;
            }
          });
          return payload.then((buffer) => {
            const headers = [];
            headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
            headers.push(CRLF);
            return this.doWrite(msg, headers, buffer);
          }, (error) => {
            this.fireError(error);
            throw error;
          });
        });
      }
      async doWrite(msg, headers, data) {
        try {
          await this.writable.write(headers.join(""), "ascii");
          return this.writable.write(data);
        } catch (error) {
          this.handleError(error, msg);
          return Promise.reject(error);
        }
      }
      handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
      }
      end() {
        this.writable.end();
      }
    };
    exports2.WriteableStreamMessageWriter = WriteableStreamMessageWriter;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js
var require_messageBuffer = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/messageBuffer.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbstractMessageBuffer = void 0;
    var CR = 13;
    var LF = 10;
    var CRLF = "\r\n";
    var AbstractMessageBuffer = class {
      constructor(encoding = "utf-8") {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
      }
      get encoding() {
        return this._encoding;
      }
      append(chunk) {
        const toAppend = typeof chunk === "string" ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
      }
      tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
          return void 0;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
          const chunk = this._chunks[chunkIndex];
          offset = 0;
          column: while (offset < chunk.length) {
            const value = chunk[offset];
            switch (value) {
              case CR:
                switch (state) {
                  case 0:
                    state = 1;
                    break;
                  case 2:
                    state = 3;
                    break;
                  default:
                    state = 0;
                }
                break;
              case LF:
                switch (state) {
                  case 1:
                    state = 2;
                    break;
                  case 3:
                    state = 4;
                    offset++;
                    break row;
                  default:
                    state = 0;
                }
                break;
              default:
                state = 0;
            }
            offset++;
          }
          chunkBytesRead += chunk.byteLength;
          chunkIndex++;
        }
        if (state !== 4) {
          return void 0;
        }
        const buffer = this._read(chunkBytesRead + offset);
        const result = /* @__PURE__ */ new Map();
        const headers = this.toString(buffer, "ascii").split(CRLF);
        if (headers.length < 2) {
          return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
          const header = headers[i];
          const index2 = header.indexOf(":");
          if (index2 === -1) {
            throw new Error(`Message header must separate key and value using ':'
${header}`);
          }
          const key = header.substr(0, index2);
          const value = header.substr(index2 + 1).trim();
          result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
      }
      tryReadBody(length3) {
        if (this._totalLength < length3) {
          return void 0;
        }
        return this._read(length3);
      }
      get numberOfBytes() {
        return this._totalLength;
      }
      _read(byteCount) {
        if (byteCount === 0) {
          return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
          throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
          const chunk = this._chunks[0];
          this._chunks.shift();
          this._totalLength -= byteCount;
          return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
          const chunk = this._chunks[0];
          const result2 = this.asNative(chunk, byteCount);
          this._chunks[0] = chunk.slice(byteCount);
          this._totalLength -= byteCount;
          return result2;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
          const chunk = this._chunks[chunkIndex];
          if (chunk.byteLength > byteCount) {
            const chunkPart = chunk.slice(0, byteCount);
            result.set(chunkPart, resultOffset);
            resultOffset += byteCount;
            this._chunks[chunkIndex] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            byteCount -= byteCount;
          } else {
            result.set(chunk, resultOffset);
            resultOffset += chunk.byteLength;
            this._chunks.shift();
            this._totalLength -= chunk.byteLength;
            byteCount -= chunk.byteLength;
          }
        }
        return result;
      }
    };
    exports2.AbstractMessageBuffer = AbstractMessageBuffer;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/connection.js
var require_connection = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/connection.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createMessageConnection = exports2.ConnectionOptions = exports2.MessageStrategy = exports2.CancellationStrategy = exports2.CancellationSenderStrategy = exports2.CancellationReceiverStrategy = exports2.RequestCancellationReceiverStrategy = exports2.IdCancellationReceiverStrategy = exports2.ConnectionStrategy = exports2.ConnectionError = exports2.ConnectionErrors = exports2.LogTraceNotification = exports2.SetTraceNotification = exports2.TraceFormat = exports2.TraceValues = exports2.Trace = exports2.NullLogger = exports2.ProgressType = exports2.ProgressToken = void 0;
    var ral_1 = require_ral();
    var Is = require_is2();
    var messages_1 = require_messages();
    var linkedMap_1 = require_linkedMap();
    var events_1 = require_events();
    var cancellation_1 = require_cancellation();
    var CancelNotification;
    (function(CancelNotification2) {
      CancelNotification2.type = new messages_1.NotificationType("$/cancelRequest");
    })(CancelNotification || (CancelNotification = {}));
    var ProgressToken;
    (function(ProgressToken2) {
      function is(value) {
        return typeof value === "string" || typeof value === "number";
      }
      ProgressToken2.is = is;
    })(ProgressToken || (exports2.ProgressToken = ProgressToken = {}));
    var ProgressNotification;
    (function(ProgressNotification2) {
      ProgressNotification2.type = new messages_1.NotificationType("$/progress");
    })(ProgressNotification || (ProgressNotification = {}));
    var ProgressType = class {
      constructor() {
      }
    };
    exports2.ProgressType = ProgressType;
    var StarRequestHandler;
    (function(StarRequestHandler2) {
      function is(value) {
        return Is.func(value);
      }
      StarRequestHandler2.is = is;
    })(StarRequestHandler || (StarRequestHandler = {}));
    exports2.NullLogger = Object.freeze({
      error: () => {
      },
      warn: () => {
      },
      info: () => {
      },
      log: () => {
      }
    });
    var Trace;
    (function(Trace2) {
      Trace2[Trace2["Off"] = 0] = "Off";
      Trace2[Trace2["Messages"] = 1] = "Messages";
      Trace2[Trace2["Compact"] = 2] = "Compact";
      Trace2[Trace2["Verbose"] = 3] = "Verbose";
    })(Trace || (exports2.Trace = Trace = {}));
    var TraceValues;
    (function(TraceValues2) {
      TraceValues2.Off = "off";
      TraceValues2.Messages = "messages";
      TraceValues2.Compact = "compact";
      TraceValues2.Verbose = "verbose";
    })(TraceValues || (exports2.TraceValues = TraceValues = {}));
    (function(Trace2) {
      function fromString(value) {
        if (!Is.string(value)) {
          return Trace2.Off;
        }
        value = value.toLowerCase();
        switch (value) {
          case "off":
            return Trace2.Off;
          case "messages":
            return Trace2.Messages;
          case "compact":
            return Trace2.Compact;
          case "verbose":
            return Trace2.Verbose;
          default:
            return Trace2.Off;
        }
      }
      Trace2.fromString = fromString;
      function toString(value) {
        switch (value) {
          case Trace2.Off:
            return "off";
          case Trace2.Messages:
            return "messages";
          case Trace2.Compact:
            return "compact";
          case Trace2.Verbose:
            return "verbose";
          default:
            return "off";
        }
      }
      Trace2.toString = toString;
    })(Trace || (exports2.Trace = Trace = {}));
    var TraceFormat;
    (function(TraceFormat2) {
      TraceFormat2["Text"] = "text";
      TraceFormat2["JSON"] = "json";
    })(TraceFormat || (exports2.TraceFormat = TraceFormat = {}));
    (function(TraceFormat2) {
      function fromString(value) {
        if (!Is.string(value)) {
          return TraceFormat2.Text;
        }
        value = value.toLowerCase();
        if (value === "json") {
          return TraceFormat2.JSON;
        } else {
          return TraceFormat2.Text;
        }
      }
      TraceFormat2.fromString = fromString;
    })(TraceFormat || (exports2.TraceFormat = TraceFormat = {}));
    var SetTraceNotification;
    (function(SetTraceNotification2) {
      SetTraceNotification2.type = new messages_1.NotificationType("$/setTrace");
    })(SetTraceNotification || (exports2.SetTraceNotification = SetTraceNotification = {}));
    var LogTraceNotification;
    (function(LogTraceNotification2) {
      LogTraceNotification2.type = new messages_1.NotificationType("$/logTrace");
    })(LogTraceNotification || (exports2.LogTraceNotification = LogTraceNotification = {}));
    var ConnectionErrors;
    (function(ConnectionErrors2) {
      ConnectionErrors2[ConnectionErrors2["Closed"] = 1] = "Closed";
      ConnectionErrors2[ConnectionErrors2["Disposed"] = 2] = "Disposed";
      ConnectionErrors2[ConnectionErrors2["AlreadyListening"] = 3] = "AlreadyListening";
    })(ConnectionErrors || (exports2.ConnectionErrors = ConnectionErrors = {}));
    var ConnectionError = class _ConnectionError extends Error {
      constructor(code2, message) {
        super(message);
        this.code = code2;
        Object.setPrototypeOf(this, _ConnectionError.prototype);
      }
    };
    exports2.ConnectionError = ConnectionError;
    var ConnectionStrategy;
    (function(ConnectionStrategy2) {
      function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
      }
      ConnectionStrategy2.is = is;
    })(ConnectionStrategy || (exports2.ConnectionStrategy = ConnectionStrategy = {}));
    var IdCancellationReceiverStrategy;
    (function(IdCancellationReceiverStrategy2) {
      function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === void 0 || candidate.kind === "id") && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === void 0 || Is.func(candidate.dispose));
      }
      IdCancellationReceiverStrategy2.is = is;
    })(IdCancellationReceiverStrategy || (exports2.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
    var RequestCancellationReceiverStrategy;
    (function(RequestCancellationReceiverStrategy2) {
      function is(value) {
        const candidate = value;
        return candidate && candidate.kind === "request" && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === void 0 || Is.func(candidate.dispose));
      }
      RequestCancellationReceiverStrategy2.is = is;
    })(RequestCancellationReceiverStrategy || (exports2.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
    var CancellationReceiverStrategy;
    (function(CancellationReceiverStrategy2) {
      CancellationReceiverStrategy2.Message = Object.freeze({
        createCancellationTokenSource(_) {
          return new cancellation_1.CancellationTokenSource();
        }
      });
      function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
      }
      CancellationReceiverStrategy2.is = is;
    })(CancellationReceiverStrategy || (exports2.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
    var CancellationSenderStrategy;
    (function(CancellationSenderStrategy2) {
      CancellationSenderStrategy2.Message = Object.freeze({
        sendCancellation(conn, id) {
          return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) {
        }
      });
      function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
      }
      CancellationSenderStrategy2.is = is;
    })(CancellationSenderStrategy || (exports2.CancellationSenderStrategy = CancellationSenderStrategy = {}));
    var CancellationStrategy;
    (function(CancellationStrategy2) {
      CancellationStrategy2.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
      });
      function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
      }
      CancellationStrategy2.is = is;
    })(CancellationStrategy || (exports2.CancellationStrategy = CancellationStrategy = {}));
    var MessageStrategy;
    (function(MessageStrategy2) {
      function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
      }
      MessageStrategy2.is = is;
    })(MessageStrategy || (exports2.MessageStrategy = MessageStrategy = {}));
    var ConnectionOptions;
    (function(ConnectionOptions2) {
      function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
      }
      ConnectionOptions2.is = is;
    })(ConnectionOptions || (exports2.ConnectionOptions = ConnectionOptions = {}));
    var ConnectionState;
    (function(ConnectionState2) {
      ConnectionState2[ConnectionState2["New"] = 1] = "New";
      ConnectionState2[ConnectionState2["Listening"] = 2] = "Listening";
      ConnectionState2[ConnectionState2["Closed"] = 3] = "Closed";
      ConnectionState2[ConnectionState2["Disposed"] = 4] = "Disposed";
    })(ConnectionState || (ConnectionState = {}));
    function createMessageConnection(messageReader, messageWriter, _logger, options) {
      const logger = _logger !== void 0 ? _logger : exports2.NullLogger;
      let sequenceNumber = 0;
      let notificationSequenceNumber = 0;
      let unknownResponseSequenceNumber = 0;
      const version = "2.0";
      let starRequestHandler = void 0;
      const requestHandlers = /* @__PURE__ */ new Map();
      let starNotificationHandler = void 0;
      const notificationHandlers = /* @__PURE__ */ new Map();
      const progressHandlers = /* @__PURE__ */ new Map();
      let timer;
      let messageQueue = new linkedMap_1.LinkedMap();
      let responsePromises = /* @__PURE__ */ new Map();
      let knownCanceledRequests = /* @__PURE__ */ new Set();
      let requestTokens = /* @__PURE__ */ new Map();
      let trace = Trace.Off;
      let traceFormat = TraceFormat.Text;
      let tracer;
      let state = ConnectionState.New;
      const errorEmitter = new events_1.Emitter();
      const closeEmitter = new events_1.Emitter();
      const unhandledNotificationEmitter = new events_1.Emitter();
      const unhandledProgressEmitter = new events_1.Emitter();
      const disposeEmitter = new events_1.Emitter();
      const cancellationStrategy = options && options.cancellationStrategy ? options.cancellationStrategy : CancellationStrategy.Message;
      function createRequestQueueKey(id) {
        if (id === null) {
          throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return "req-" + id.toString();
      }
      function createResponseQueueKey(id) {
        if (id === null) {
          return "res-unknown-" + (++unknownResponseSequenceNumber).toString();
        } else {
          return "res-" + id.toString();
        }
      }
      function createNotificationQueueKey() {
        return "not-" + (++notificationSequenceNumber).toString();
      }
      function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
          queue.set(createRequestQueueKey(message.id), message);
        } else if (messages_1.Message.isResponse(message)) {
          queue.set(createResponseQueueKey(message.id), message);
        } else {
          queue.set(createNotificationQueueKey(), message);
        }
      }
      function cancelUndispatched(_message) {
        return void 0;
      }
      function isListening() {
        return state === ConnectionState.Listening;
      }
      function isClosed() {
        return state === ConnectionState.Closed;
      }
      function isDisposed() {
        return state === ConnectionState.Disposed;
      }
      function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
          state = ConnectionState.Closed;
          closeEmitter.fire(void 0);
        }
      }
      function readErrorHandler(error) {
        errorEmitter.fire([error, void 0, void 0]);
      }
      function writeErrorHandler(data) {
        errorEmitter.fire(data);
      }
      messageReader.onClose(closeHandler);
      messageReader.onError(readErrorHandler);
      messageWriter.onClose(closeHandler);
      messageWriter.onError(writeErrorHandler);
      function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
          return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
          timer = void 0;
          processMessageQueue();
        });
      }
      function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
          handleRequest(message);
        } else if (messages_1.Message.isNotification(message)) {
          handleNotification(message);
        } else if (messages_1.Message.isResponse(message)) {
          handleResponse(message);
        } else {
          handleInvalidMessage(message);
        }
      }
      function processMessageQueue() {
        if (messageQueue.size === 0) {
          return;
        }
        const message = messageQueue.shift();
        try {
          const messageStrategy = options?.messageStrategy;
          if (MessageStrategy.is(messageStrategy)) {
            messageStrategy.handleMessage(message, handleMessage);
          } else {
            handleMessage(message);
          }
        } finally {
          triggerMessageQueue();
        }
      }
      const callback = (message) => {
        try {
          if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            const key = createRequestQueueKey(cancelId);
            const toCancel = messageQueue.get(key);
            if (messages_1.Message.isRequest(toCancel)) {
              const strategy = options?.connectionStrategy;
              const response = strategy && strategy.cancelUndispatched ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
              if (response && (response.error !== void 0 || response.result !== void 0)) {
                messageQueue.delete(key);
                requestTokens.delete(cancelId);
                response.id = toCancel.id;
                traceSendingResponse(response, message.method, Date.now());
                messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                return;
              }
            }
            const cancellationToken = requestTokens.get(cancelId);
            if (cancellationToken !== void 0) {
              cancellationToken.cancel();
              traceReceivedNotification(message);
              return;
            } else {
              knownCanceledRequests.add(cancelId);
            }
          }
          addMessageToQueue(messageQueue, message);
        } finally {
          triggerMessageQueue();
        }
      };
      function handleRequest(requestMessage) {
        if (isDisposed()) {
          return;
        }
        function reply(resultOrError, method, startTime2) {
          const message = {
            jsonrpc: version,
            id: requestMessage.id
          };
          if (resultOrError instanceof messages_1.ResponseError) {
            message.error = resultOrError.toJson();
          } else {
            message.result = resultOrError === void 0 ? null : resultOrError;
          }
          traceSendingResponse(message, method, startTime2);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime2) {
          const message = {
            jsonrpc: version,
            id: requestMessage.id,
            error: error.toJson()
          };
          traceSendingResponse(message, method, startTime2);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime2) {
          if (result === void 0) {
            result = null;
          }
          const message = {
            jsonrpc: version,
            id: requestMessage.id,
            result
          };
          traceSendingResponse(message, method, startTime2);
          messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
          type = element.type;
          requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
          const tokenKey = requestMessage.id ?? String(Date.now());
          const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver) ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey) : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
          if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
            cancellationSource.cancel();
          }
          if (requestMessage.id !== null) {
            requestTokens.set(tokenKey, cancellationSource);
          }
          try {
            let handlerResult;
            if (requestHandler) {
              if (requestMessage.params === void 0) {
                if (type !== void 0 && type.numberOfParams !== 0) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(cancellationSource.token);
              } else if (Array.isArray(requestMessage.params)) {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byName) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                  return;
                }
                handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
              }
            } else if (starRequestHandler) {
              handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
            }
            const promise = handlerResult;
            if (!handlerResult) {
              requestTokens.delete(tokenKey);
              replySuccess(handlerResult, requestMessage.method, startTime);
            } else if (promise.then) {
              promise.then((resultOrError) => {
                requestTokens.delete(tokenKey);
                reply(resultOrError, requestMessage.method, startTime);
              }, (error) => {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                  replyError(error, requestMessage.method, startTime);
                } else if (error && Is.string(error.message)) {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                } else {
                  replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
              });
            } else {
              requestTokens.delete(tokenKey);
              reply(handlerResult, requestMessage.method, startTime);
            }
          } catch (error) {
            requestTokens.delete(tokenKey);
            if (error instanceof messages_1.ResponseError) {
              reply(error, requestMessage.method, startTime);
            } else if (error && Is.string(error.message)) {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
            } else {
              replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
            }
          }
        } else {
          replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
      }
      function handleResponse(responseMessage) {
        if (isDisposed()) {
          return;
        }
        if (responseMessage.id === null) {
          if (responseMessage.error) {
            logger.error(`Received response message without id: Error is: 
${JSON.stringify(responseMessage.error, void 0, 4)}`);
          } else {
            logger.error(`Received response message without id. No further error information provided.`);
          }
        } else {
          const key = responseMessage.id;
          const responsePromise = responsePromises.get(key);
          traceReceivedResponse(responseMessage, responsePromise);
          if (responsePromise !== void 0) {
            responsePromises.delete(key);
            try {
              if (responseMessage.error) {
                const error = responseMessage.error;
                responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
              } else if (responseMessage.result !== void 0) {
                responsePromise.resolve(responseMessage.result);
              } else {
                throw new Error("Should never happen.");
              }
            } catch (error) {
              if (error.message) {
                logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
              } else {
                logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
              }
            }
          }
        }
      }
      function handleNotification(message) {
        if (isDisposed()) {
          return;
        }
        let type = void 0;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
          const cancelId = message.params.id;
          knownCanceledRequests.delete(cancelId);
          traceReceivedNotification(message);
          return;
        } else {
          const element = notificationHandlers.get(message.method);
          if (element) {
            notificationHandler = element.handler;
            type = element.type;
          }
        }
        if (notificationHandler || starNotificationHandler) {
          try {
            traceReceivedNotification(message);
            if (notificationHandler) {
              if (message.params === void 0) {
                if (type !== void 0) {
                  if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                  }
                }
                notificationHandler();
              } else if (Array.isArray(message.params)) {
                const params = message.params;
                if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                  notificationHandler({ token: params[0], value: params[1] });
                } else {
                  if (type !== void 0) {
                    if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                      logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                    }
                    if (type.numberOfParams !== message.params.length) {
                      logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                    }
                  }
                  notificationHandler(...params);
                }
              } else {
                if (type !== void 0 && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                  logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                }
                notificationHandler(message.params);
              }
            } else if (starNotificationHandler) {
              starNotificationHandler(message.method, message.params);
            }
          } catch (error) {
            if (error.message) {
              logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
            } else {
              logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
            }
          }
        } else {
          unhandledNotificationEmitter.fire(message);
        }
      }
      function handleInvalidMessage(message) {
        if (!message) {
          logger.error("Received empty message.");
          return;
        }
        logger.error(`Received message which is neither a response nor a notification message:
${JSON.stringify(message, null, 4)}`);
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
          const key = responseMessage.id;
          const responseHandler = responsePromises.get(key);
          if (responseHandler) {
            responseHandler.reject(new Error("The received response has neither a result nor an error property."));
          }
        }
      }
      function stringifyTrace(params) {
        if (params === void 0 || params === null) {
          return void 0;
        }
        switch (trace) {
          case Trace.Verbose:
            return JSON.stringify(params, null, 4);
          case Trace.Compact:
            return JSON.stringify(params);
          default:
            return void 0;
        }
      }
      function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("send-request", message);
        }
      }
      function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Sending notification '${message.method}'.`, data);
        } else {
          logLSPMessage("send-notification", message);
        }
      }
      function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        } else {
          logLSPMessage("send-response", message);
        }
      }
      function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
            data = `Params: ${stringifyTrace(message.params)}

`;
          }
          tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        } else {
          logLSPMessage("receive-request", message);
        }
      }
      function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.params) {
              data = `Params: ${stringifyTrace(message.params)}

`;
            } else {
              data = "No parameters provided.\n\n";
            }
          }
          tracer.log(`Received notification '${message.method}'.`, data);
        } else {
          logLSPMessage("receive-notification", message);
        }
      }
      function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        if (traceFormat === TraceFormat.Text) {
          let data = void 0;
          if (trace === Trace.Verbose || trace === Trace.Compact) {
            if (message.error && message.error.data) {
              data = `Error data: ${stringifyTrace(message.error.data)}

`;
            } else {
              if (message.result) {
                data = `Result: ${stringifyTrace(message.result)}

`;
              } else if (message.error === void 0) {
                data = "No result returned.\n\n";
              }
            }
          }
          if (responsePromise) {
            const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : "";
            tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
          } else {
            tracer.log(`Received response ${message.id} without active response promise.`, data);
          }
        } else {
          logLSPMessage("receive-response", message);
        }
      }
      function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
          return;
        }
        const lspMessage = {
          isLSPMessage: true,
          type,
          message,
          timestamp: Date.now()
        };
        tracer.log(lspMessage);
      }
      function throwIfClosedOrDisposed() {
        if (isClosed()) {
          throw new ConnectionError(ConnectionErrors.Closed, "Connection is closed.");
        }
        if (isDisposed()) {
          throw new ConnectionError(ConnectionErrors.Disposed, "Connection is disposed.");
        }
      }
      function throwIfListening() {
        if (isListening()) {
          throw new ConnectionError(ConnectionErrors.AlreadyListening, "Connection is already listening");
        }
      }
      function throwIfNotListening() {
        if (!isListening()) {
          throw new Error("Call listen() first.");
        }
      }
      function undefinedToNull(param) {
        if (param === void 0) {
          return null;
        } else {
          return param;
        }
      }
      function nullToUndefined(param) {
        if (param === null) {
          return void 0;
        } else {
          return param;
        }
      }
      function isNamedParam(param) {
        return param !== void 0 && param !== null && !Array.isArray(param) && typeof param === "object";
      }
      function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
          case messages_1.ParameterStructures.auto:
            if (isNamedParam(param)) {
              return nullToUndefined(param);
            } else {
              return [undefinedToNull(param)];
            }
          case messages_1.ParameterStructures.byName:
            if (!isNamedParam(param)) {
              throw new Error(`Received parameters by name but param is not an object literal.`);
            }
            return nullToUndefined(param);
          case messages_1.ParameterStructures.byPosition:
            return [undefinedToNull(param)];
          default:
            throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
      }
      function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
          case 0:
            result = void 0;
            break;
          case 1:
            result = computeSingleParam(type.parameterStructures, params[0]);
            break;
          default:
            result = [];
            for (let i = 0; i < params.length && i < numberOfParams; i++) {
              result.push(undefinedToNull(params[i]));
            }
            if (params.length < numberOfParams) {
              for (let i = params.length; i < numberOfParams; i++) {
                result.push(null);
              }
            }
            break;
        }
        return result;
      }
      const connection2 = {
        sendNotification: (type, ...args) => {
          throwIfClosedOrDisposed();
          let method;
          let messageParams;
          if (Is.string(type)) {
            method = type;
            const first = args[0];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first)) {
              paramStart = 1;
              parameterStructures = first;
            }
            let paramEnd = args.length;
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
          }
          const notificationMessage = {
            jsonrpc: version,
            method,
            params: messageParams
          };
          traceSendingNotification(notificationMessage);
          return messageWriter.write(notificationMessage).catch((error) => {
            logger.error(`Sending notification failed.`);
            throw error;
          });
        },
        onNotification: (type, handler) => {
          throwIfClosedOrDisposed();
          let method;
          if (Is.func(type)) {
            starNotificationHandler = type;
          } else if (handler) {
            if (Is.string(type)) {
              method = type;
              notificationHandlers.set(type, { type: void 0, handler });
            } else {
              method = type.method;
              notificationHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method !== void 0) {
                notificationHandlers.delete(method);
              } else {
                starNotificationHandler = void 0;
              }
            }
          };
        },
        onProgress: (_type, token, handler) => {
          if (progressHandlers.has(token)) {
            throw new Error(`Progress handler for token ${token} already registered`);
          }
          progressHandlers.set(token, handler);
          return {
            dispose: () => {
              progressHandlers.delete(token);
            }
          };
        },
        sendProgress: (_type, token, value) => {
          return connection2.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
          throwIfClosedOrDisposed();
          throwIfNotListening();
          let method;
          let messageParams;
          let token = void 0;
          if (Is.string(type)) {
            method = type;
            const first = args[0];
            const last = args[args.length - 1];
            let paramStart = 0;
            let parameterStructures = messages_1.ParameterStructures.auto;
            if (messages_1.ParameterStructures.is(first)) {
              paramStart = 1;
              parameterStructures = first;
            }
            let paramEnd = args.length;
            if (cancellation_1.CancellationToken.is(last)) {
              paramEnd = paramEnd - 1;
              token = last;
            }
            const numberOfParams = paramEnd - paramStart;
            switch (numberOfParams) {
              case 0:
                messageParams = void 0;
                break;
              case 1:
                messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                break;
              default:
                if (parameterStructures === messages_1.ParameterStructures.byName) {
                  throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                }
                messageParams = args.slice(paramStart, paramEnd).map((value) => undefinedToNull(value));
                break;
            }
          } else {
            const params = args;
            method = type.method;
            messageParams = computeMessageParams(type, params);
            const numberOfParams = type.numberOfParams;
            token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : void 0;
          }
          const id = sequenceNumber++;
          let disposable;
          if (token) {
            disposable = token.onCancellationRequested(() => {
              const p = cancellationStrategy.sender.sendCancellation(connection2, id);
              if (p === void 0) {
                logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                return Promise.resolve();
              } else {
                return p.catch(() => {
                  logger.log(`Sending cancellation messages for id ${id} failed`);
                });
              }
            });
          }
          const requestMessage = {
            jsonrpc: version,
            id,
            method,
            params: messageParams
          };
          traceSendingRequest(requestMessage);
          if (typeof cancellationStrategy.sender.enableCancellation === "function") {
            cancellationStrategy.sender.enableCancellation(requestMessage);
          }
          return new Promise(async (resolve, reject) => {
            const resolveWithCleanup = (r) => {
              resolve(r);
              cancellationStrategy.sender.cleanup(id);
              disposable?.dispose();
            };
            const rejectWithCleanup = (r) => {
              reject(r);
              cancellationStrategy.sender.cleanup(id);
              disposable?.dispose();
            };
            const responsePromise = { method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
            try {
              await messageWriter.write(requestMessage);
              responsePromises.set(id, responsePromise);
            } catch (error) {
              logger.error(`Sending request failed.`);
              responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : "Unknown reason"));
              throw error;
            }
          });
        },
        onRequest: (type, handler) => {
          throwIfClosedOrDisposed();
          let method = null;
          if (StarRequestHandler.is(type)) {
            method = void 0;
            starRequestHandler = type;
          } else if (Is.string(type)) {
            method = null;
            if (handler !== void 0) {
              method = type;
              requestHandlers.set(type, { handler, type: void 0 });
            }
          } else {
            if (handler !== void 0) {
              method = type.method;
              requestHandlers.set(type.method, { type, handler });
            }
          }
          return {
            dispose: () => {
              if (method === null) {
                return;
              }
              if (method !== void 0) {
                requestHandlers.delete(method);
              } else {
                starRequestHandler = void 0;
              }
            }
          };
        },
        hasPendingResponse: () => {
          return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
          let _sendNotification = false;
          let _traceFormat = TraceFormat.Text;
          if (sendNotificationOrTraceOptions !== void 0) {
            if (Is.boolean(sendNotificationOrTraceOptions)) {
              _sendNotification = sendNotificationOrTraceOptions;
            } else {
              _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
              _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
            }
          }
          trace = _value;
          traceFormat = _traceFormat;
          if (trace === Trace.Off) {
            tracer = void 0;
          } else {
            tracer = _tracer;
          }
          if (_sendNotification && !isClosed() && !isDisposed()) {
            await connection2.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
          }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
          messageWriter.end();
        },
        dispose: () => {
          if (isDisposed()) {
            return;
          }
          state = ConnectionState.Disposed;
          disposeEmitter.fire(void 0);
          const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, "Pending response rejected since connection got disposed");
          for (const promise of responsePromises.values()) {
            promise.reject(error);
          }
          responsePromises = /* @__PURE__ */ new Map();
          requestTokens = /* @__PURE__ */ new Map();
          knownCanceledRequests = /* @__PURE__ */ new Set();
          messageQueue = new linkedMap_1.LinkedMap();
          if (Is.func(messageWriter.dispose)) {
            messageWriter.dispose();
          }
          if (Is.func(messageReader.dispose)) {
            messageReader.dispose();
          }
        },
        listen: () => {
          throwIfClosedOrDisposed();
          throwIfListening();
          state = ConnectionState.Listening;
          messageReader.listen(callback);
        },
        inspect: () => {
          (0, ral_1.default)().console.log("inspect");
        }
      };
      connection2.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
          return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : void 0);
      });
      connection2.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
          handler(params.value);
        } else {
          unhandledProgressEmitter.fire(params);
        }
      });
      return connection2;
    }
    exports2.createMessageConnection = createMessageConnection;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/api.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/api.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProgressType = exports2.ProgressToken = exports2.createMessageConnection = exports2.NullLogger = exports2.ConnectionOptions = exports2.ConnectionStrategy = exports2.AbstractMessageBuffer = exports2.WriteableStreamMessageWriter = exports2.AbstractMessageWriter = exports2.MessageWriter = exports2.ReadableStreamMessageReader = exports2.AbstractMessageReader = exports2.MessageReader = exports2.SharedArrayReceiverStrategy = exports2.SharedArraySenderStrategy = exports2.CancellationToken = exports2.CancellationTokenSource = exports2.Emitter = exports2.Event = exports2.Disposable = exports2.LRUCache = exports2.Touch = exports2.LinkedMap = exports2.ParameterStructures = exports2.NotificationType9 = exports2.NotificationType8 = exports2.NotificationType7 = exports2.NotificationType6 = exports2.NotificationType5 = exports2.NotificationType4 = exports2.NotificationType3 = exports2.NotificationType2 = exports2.NotificationType1 = exports2.NotificationType0 = exports2.NotificationType = exports2.ErrorCodes = exports2.ResponseError = exports2.RequestType9 = exports2.RequestType8 = exports2.RequestType7 = exports2.RequestType6 = exports2.RequestType5 = exports2.RequestType4 = exports2.RequestType3 = exports2.RequestType2 = exports2.RequestType1 = exports2.RequestType0 = exports2.RequestType = exports2.Message = exports2.RAL = void 0;
    exports2.MessageStrategy = exports2.CancellationStrategy = exports2.CancellationSenderStrategy = exports2.CancellationReceiverStrategy = exports2.ConnectionError = exports2.ConnectionErrors = exports2.LogTraceNotification = exports2.SetTraceNotification = exports2.TraceFormat = exports2.TraceValues = exports2.Trace = void 0;
    var messages_1 = require_messages();
    Object.defineProperty(exports2, "Message", { enumerable: true, get: function() {
      return messages_1.Message;
    } });
    Object.defineProperty(exports2, "RequestType", { enumerable: true, get: function() {
      return messages_1.RequestType;
    } });
    Object.defineProperty(exports2, "RequestType0", { enumerable: true, get: function() {
      return messages_1.RequestType0;
    } });
    Object.defineProperty(exports2, "RequestType1", { enumerable: true, get: function() {
      return messages_1.RequestType1;
    } });
    Object.defineProperty(exports2, "RequestType2", { enumerable: true, get: function() {
      return messages_1.RequestType2;
    } });
    Object.defineProperty(exports2, "RequestType3", { enumerable: true, get: function() {
      return messages_1.RequestType3;
    } });
    Object.defineProperty(exports2, "RequestType4", { enumerable: true, get: function() {
      return messages_1.RequestType4;
    } });
    Object.defineProperty(exports2, "RequestType5", { enumerable: true, get: function() {
      return messages_1.RequestType5;
    } });
    Object.defineProperty(exports2, "RequestType6", { enumerable: true, get: function() {
      return messages_1.RequestType6;
    } });
    Object.defineProperty(exports2, "RequestType7", { enumerable: true, get: function() {
      return messages_1.RequestType7;
    } });
    Object.defineProperty(exports2, "RequestType8", { enumerable: true, get: function() {
      return messages_1.RequestType8;
    } });
    Object.defineProperty(exports2, "RequestType9", { enumerable: true, get: function() {
      return messages_1.RequestType9;
    } });
    Object.defineProperty(exports2, "ResponseError", { enumerable: true, get: function() {
      return messages_1.ResponseError;
    } });
    Object.defineProperty(exports2, "ErrorCodes", { enumerable: true, get: function() {
      return messages_1.ErrorCodes;
    } });
    Object.defineProperty(exports2, "NotificationType", { enumerable: true, get: function() {
      return messages_1.NotificationType;
    } });
    Object.defineProperty(exports2, "NotificationType0", { enumerable: true, get: function() {
      return messages_1.NotificationType0;
    } });
    Object.defineProperty(exports2, "NotificationType1", { enumerable: true, get: function() {
      return messages_1.NotificationType1;
    } });
    Object.defineProperty(exports2, "NotificationType2", { enumerable: true, get: function() {
      return messages_1.NotificationType2;
    } });
    Object.defineProperty(exports2, "NotificationType3", { enumerable: true, get: function() {
      return messages_1.NotificationType3;
    } });
    Object.defineProperty(exports2, "NotificationType4", { enumerable: true, get: function() {
      return messages_1.NotificationType4;
    } });
    Object.defineProperty(exports2, "NotificationType5", { enumerable: true, get: function() {
      return messages_1.NotificationType5;
    } });
    Object.defineProperty(exports2, "NotificationType6", { enumerable: true, get: function() {
      return messages_1.NotificationType6;
    } });
    Object.defineProperty(exports2, "NotificationType7", { enumerable: true, get: function() {
      return messages_1.NotificationType7;
    } });
    Object.defineProperty(exports2, "NotificationType8", { enumerable: true, get: function() {
      return messages_1.NotificationType8;
    } });
    Object.defineProperty(exports2, "NotificationType9", { enumerable: true, get: function() {
      return messages_1.NotificationType9;
    } });
    Object.defineProperty(exports2, "ParameterStructures", { enumerable: true, get: function() {
      return messages_1.ParameterStructures;
    } });
    var linkedMap_1 = require_linkedMap();
    Object.defineProperty(exports2, "LinkedMap", { enumerable: true, get: function() {
      return linkedMap_1.LinkedMap;
    } });
    Object.defineProperty(exports2, "LRUCache", { enumerable: true, get: function() {
      return linkedMap_1.LRUCache;
    } });
    Object.defineProperty(exports2, "Touch", { enumerable: true, get: function() {
      return linkedMap_1.Touch;
    } });
    var disposable_1 = require_disposable();
    Object.defineProperty(exports2, "Disposable", { enumerable: true, get: function() {
      return disposable_1.Disposable;
    } });
    var events_1 = require_events();
    Object.defineProperty(exports2, "Event", { enumerable: true, get: function() {
      return events_1.Event;
    } });
    Object.defineProperty(exports2, "Emitter", { enumerable: true, get: function() {
      return events_1.Emitter;
    } });
    var cancellation_1 = require_cancellation();
    Object.defineProperty(exports2, "CancellationTokenSource", { enumerable: true, get: function() {
      return cancellation_1.CancellationTokenSource;
    } });
    Object.defineProperty(exports2, "CancellationToken", { enumerable: true, get: function() {
      return cancellation_1.CancellationToken;
    } });
    var sharedArrayCancellation_1 = require_sharedArrayCancellation();
    Object.defineProperty(exports2, "SharedArraySenderStrategy", { enumerable: true, get: function() {
      return sharedArrayCancellation_1.SharedArraySenderStrategy;
    } });
    Object.defineProperty(exports2, "SharedArrayReceiverStrategy", { enumerable: true, get: function() {
      return sharedArrayCancellation_1.SharedArrayReceiverStrategy;
    } });
    var messageReader_1 = require_messageReader();
    Object.defineProperty(exports2, "MessageReader", { enumerable: true, get: function() {
      return messageReader_1.MessageReader;
    } });
    Object.defineProperty(exports2, "AbstractMessageReader", { enumerable: true, get: function() {
      return messageReader_1.AbstractMessageReader;
    } });
    Object.defineProperty(exports2, "ReadableStreamMessageReader", { enumerable: true, get: function() {
      return messageReader_1.ReadableStreamMessageReader;
    } });
    var messageWriter_1 = require_messageWriter();
    Object.defineProperty(exports2, "MessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.MessageWriter;
    } });
    Object.defineProperty(exports2, "AbstractMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.AbstractMessageWriter;
    } });
    Object.defineProperty(exports2, "WriteableStreamMessageWriter", { enumerable: true, get: function() {
      return messageWriter_1.WriteableStreamMessageWriter;
    } });
    var messageBuffer_1 = require_messageBuffer();
    Object.defineProperty(exports2, "AbstractMessageBuffer", { enumerable: true, get: function() {
      return messageBuffer_1.AbstractMessageBuffer;
    } });
    var connection_1 = require_connection();
    Object.defineProperty(exports2, "ConnectionStrategy", { enumerable: true, get: function() {
      return connection_1.ConnectionStrategy;
    } });
    Object.defineProperty(exports2, "ConnectionOptions", { enumerable: true, get: function() {
      return connection_1.ConnectionOptions;
    } });
    Object.defineProperty(exports2, "NullLogger", { enumerable: true, get: function() {
      return connection_1.NullLogger;
    } });
    Object.defineProperty(exports2, "createMessageConnection", { enumerable: true, get: function() {
      return connection_1.createMessageConnection;
    } });
    Object.defineProperty(exports2, "ProgressToken", { enumerable: true, get: function() {
      return connection_1.ProgressToken;
    } });
    Object.defineProperty(exports2, "ProgressType", { enumerable: true, get: function() {
      return connection_1.ProgressType;
    } });
    Object.defineProperty(exports2, "Trace", { enumerable: true, get: function() {
      return connection_1.Trace;
    } });
    Object.defineProperty(exports2, "TraceValues", { enumerable: true, get: function() {
      return connection_1.TraceValues;
    } });
    Object.defineProperty(exports2, "TraceFormat", { enumerable: true, get: function() {
      return connection_1.TraceFormat;
    } });
    Object.defineProperty(exports2, "SetTraceNotification", { enumerable: true, get: function() {
      return connection_1.SetTraceNotification;
    } });
    Object.defineProperty(exports2, "LogTraceNotification", { enumerable: true, get: function() {
      return connection_1.LogTraceNotification;
    } });
    Object.defineProperty(exports2, "ConnectionErrors", { enumerable: true, get: function() {
      return connection_1.ConnectionErrors;
    } });
    Object.defineProperty(exports2, "ConnectionError", { enumerable: true, get: function() {
      return connection_1.ConnectionError;
    } });
    Object.defineProperty(exports2, "CancellationReceiverStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationReceiverStrategy;
    } });
    Object.defineProperty(exports2, "CancellationSenderStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationSenderStrategy;
    } });
    Object.defineProperty(exports2, "CancellationStrategy", { enumerable: true, get: function() {
      return connection_1.CancellationStrategy;
    } });
    Object.defineProperty(exports2, "MessageStrategy", { enumerable: true, get: function() {
      return connection_1.MessageStrategy;
    } });
    var ral_1 = require_ral();
    exports2.RAL = ral_1.default;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/node/ril.js
var require_ril = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/node/ril.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    var util_1 = require("util");
    var api_1 = require_api();
    var MessageBuffer = class _MessageBuffer extends api_1.AbstractMessageBuffer {
      constructor(encoding = "utf-8") {
        super(encoding);
      }
      emptyBuffer() {
        return _MessageBuffer.emptyBuffer;
      }
      fromString(value, encoding) {
        return Buffer.from(value, encoding);
      }
      toString(value, encoding) {
        if (value instanceof Buffer) {
          return value.toString(encoding);
        } else {
          return new util_1.TextDecoder(encoding).decode(value);
        }
      }
      asNative(buffer, length3) {
        if (length3 === void 0) {
          return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
        } else {
          return buffer instanceof Buffer ? buffer.slice(0, length3) : Buffer.from(buffer, 0, length3);
        }
      }
      allocNative(length3) {
        return Buffer.allocUnsafe(length3);
      }
    };
    MessageBuffer.emptyBuffer = Buffer.allocUnsafe(0);
    var ReadableStreamWrapper = class {
      constructor(stream2) {
        this.stream = stream2;
      }
      onClose(listener) {
        this.stream.on("close", listener);
        return api_1.Disposable.create(() => this.stream.off("close", listener));
      }
      onError(listener) {
        this.stream.on("error", listener);
        return api_1.Disposable.create(() => this.stream.off("error", listener));
      }
      onEnd(listener) {
        this.stream.on("end", listener);
        return api_1.Disposable.create(() => this.stream.off("end", listener));
      }
      onData(listener) {
        this.stream.on("data", listener);
        return api_1.Disposable.create(() => this.stream.off("data", listener));
      }
    };
    var WritableStreamWrapper = class {
      constructor(stream2) {
        this.stream = stream2;
      }
      onClose(listener) {
        this.stream.on("close", listener);
        return api_1.Disposable.create(() => this.stream.off("close", listener));
      }
      onError(listener) {
        this.stream.on("error", listener);
        return api_1.Disposable.create(() => this.stream.off("error", listener));
      }
      onEnd(listener) {
        this.stream.on("end", listener);
        return api_1.Disposable.create(() => this.stream.off("end", listener));
      }
      write(data, encoding) {
        return new Promise((resolve, reject) => {
          const callback = (error) => {
            if (error === void 0 || error === null) {
              resolve();
            } else {
              reject(error);
            }
          };
          if (typeof data === "string") {
            this.stream.write(data, encoding, callback);
          } else {
            this.stream.write(data, callback);
          }
        });
      }
      end() {
        this.stream.end();
      }
    };
    var _ril = Object.freeze({
      messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
      }),
      applicationJson: Object.freeze({
        encoder: Object.freeze({
          name: "application/json",
          encode: (msg, options) => {
            try {
              return Promise.resolve(Buffer.from(JSON.stringify(msg, void 0, 0), options.charset));
            } catch (err) {
              return Promise.reject(err);
            }
          }
        }),
        decoder: Object.freeze({
          name: "application/json",
          decode: (buffer, options) => {
            try {
              if (buffer instanceof Buffer) {
                return Promise.resolve(JSON.parse(buffer.toString(options.charset)));
              } else {
                return Promise.resolve(JSON.parse(new util_1.TextDecoder(options.charset).decode(buffer)));
              }
            } catch (err) {
              return Promise.reject(err);
            }
          }
        })
      }),
      stream: Object.freeze({
        asReadableStream: (stream2) => new ReadableStreamWrapper(stream2),
        asWritableStream: (stream2) => new WritableStreamWrapper(stream2)
      }),
      console,
      timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
          const handle = setTimeout(callback, ms, ...args);
          return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
          const handle = setImmediate(callback, ...args);
          return { dispose: () => clearImmediate(handle) };
        },
        setInterval(callback, ms, ...args) {
          const handle = setInterval(callback, ms, ...args);
          return { dispose: () => clearInterval(handle) };
        }
      })
    });
    function RIL() {
      return _ril;
    }
    (function(RIL2) {
      function install() {
        api_1.RAL.install(_ril);
      }
      RIL2.install = install;
    })(RIL || (RIL = {}));
    exports2.default = RIL;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/node/main.js
var require_main = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/node/main.js"(exports2) {
    "use strict";
    init_importMeta();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createMessageConnection = exports2.createServerSocketTransport = exports2.createClientSocketTransport = exports2.createServerPipeTransport = exports2.createClientPipeTransport = exports2.generateRandomPipeName = exports2.StreamMessageWriter = exports2.StreamMessageReader = exports2.SocketMessageWriter = exports2.SocketMessageReader = exports2.PortMessageWriter = exports2.PortMessageReader = exports2.IPCMessageWriter = exports2.IPCMessageReader = void 0;
    var ril_1 = require_ril();
    ril_1.default.install();
    var path3 = require("path");
    var os = require("os");
    var crypto_1 = require("crypto");
    var net_1 = require("net");
    var api_1 = require_api();
    __exportStar(require_api(), exports2);
    var IPCMessageReader = class extends api_1.AbstractMessageReader {
      constructor(process2) {
        super();
        this.process = process2;
        let eventEmitter = this.process;
        eventEmitter.on("error", (error) => this.fireError(error));
        eventEmitter.on("close", () => this.fireClose());
      }
      listen(callback) {
        this.process.on("message", callback);
        return api_1.Disposable.create(() => this.process.off("message", callback));
      }
    };
    exports2.IPCMessageReader = IPCMessageReader;
    var IPCMessageWriter = class extends api_1.AbstractMessageWriter {
      constructor(process2) {
        super();
        this.process = process2;
        this.errorCount = 0;
        const eventEmitter = this.process;
        eventEmitter.on("error", (error) => this.fireError(error));
        eventEmitter.on("close", () => this.fireClose);
      }
      write(msg) {
        try {
          if (typeof this.process.send === "function") {
            this.process.send(msg, void 0, void 0, (error) => {
              if (error) {
                this.errorCount++;
                this.handleError(error, msg);
              } else {
                this.errorCount = 0;
              }
            });
          }
          return Promise.resolve();
        } catch (error) {
          this.handleError(error, msg);
          return Promise.reject(error);
        }
      }
      handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
      }
      end() {
      }
    };
    exports2.IPCMessageWriter = IPCMessageWriter;
    var PortMessageReader = class extends api_1.AbstractMessageReader {
      constructor(port) {
        super();
        this.onData = new api_1.Emitter();
        port.on("close", () => this.fireClose);
        port.on("error", (error) => this.fireError(error));
        port.on("message", (message) => {
          this.onData.fire(message);
        });
      }
      listen(callback) {
        return this.onData.event(callback);
      }
    };
    exports2.PortMessageReader = PortMessageReader;
    var PortMessageWriter = class extends api_1.AbstractMessageWriter {
      constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.on("close", () => this.fireClose());
        port.on("error", (error) => this.fireError(error));
      }
      write(msg) {
        try {
          this.port.postMessage(msg);
          return Promise.resolve();
        } catch (error) {
          this.handleError(error, msg);
          return Promise.reject(error);
        }
      }
      handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
      }
      end() {
      }
    };
    exports2.PortMessageWriter = PortMessageWriter;
    var SocketMessageReader = class extends api_1.ReadableStreamMessageReader {
      constructor(socket, encoding = "utf-8") {
        super((0, ril_1.default)().stream.asReadableStream(socket), encoding);
      }
    };
    exports2.SocketMessageReader = SocketMessageReader;
    var SocketMessageWriter = class extends api_1.WriteableStreamMessageWriter {
      constructor(socket, options) {
        super((0, ril_1.default)().stream.asWritableStream(socket), options);
        this.socket = socket;
      }
      dispose() {
        super.dispose();
        this.socket.destroy();
      }
    };
    exports2.SocketMessageWriter = SocketMessageWriter;
    var StreamMessageReader = class extends api_1.ReadableStreamMessageReader {
      constructor(readable, encoding) {
        super((0, ril_1.default)().stream.asReadableStream(readable), encoding);
      }
    };
    exports2.StreamMessageReader = StreamMessageReader;
    var StreamMessageWriter = class extends api_1.WriteableStreamMessageWriter {
      constructor(writable, options) {
        super((0, ril_1.default)().stream.asWritableStream(writable), options);
      }
    };
    exports2.StreamMessageWriter = StreamMessageWriter;
    var XDG_RUNTIME_DIR = process.env["XDG_RUNTIME_DIR"];
    var safeIpcPathLengths = /* @__PURE__ */ new Map([
      ["linux", 107],
      ["darwin", 103]
    ]);
    function generateRandomPipeName() {
      const randomSuffix = (0, crypto_1.randomBytes)(21).toString("hex");
      if (process.platform === "win32") {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
      }
      let result;
      if (XDG_RUNTIME_DIR) {
        result = path3.join(XDG_RUNTIME_DIR, `vscode-ipc-${randomSuffix}.sock`);
      } else {
        result = path3.join(os.tmpdir(), `vscode-${randomSuffix}.sock`);
      }
      const limit = safeIpcPathLengths.get(process.platform);
      if (limit !== void 0 && result.length > limit) {
        (0, ril_1.default)().console.warn(`WARNING: IPC handle "${result}" is longer than ${limit} characters.`);
      }
      return result;
    }
    exports2.generateRandomPipeName = generateRandomPipeName;
    function createClientPipeTransport(pipeName, encoding = "utf-8") {
      let connectResolve;
      const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
      });
      return new Promise((resolve, reject) => {
        let server = (0, net_1.createServer)((socket) => {
          server.close();
          connectResolve([
            new SocketMessageReader(socket, encoding),
            new SocketMessageWriter(socket, encoding)
          ]);
        });
        server.on("error", reject);
        server.listen(pipeName, () => {
          server.removeListener("error", reject);
          resolve({
            onConnected: () => {
              return connected;
            }
          });
        });
      });
    }
    exports2.createClientPipeTransport = createClientPipeTransport;
    function createServerPipeTransport(pipeName, encoding = "utf-8") {
      const socket = (0, net_1.createConnection)(pipeName);
      return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
      ];
    }
    exports2.createServerPipeTransport = createServerPipeTransport;
    function createClientSocketTransport(port, encoding = "utf-8") {
      let connectResolve;
      const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
      });
      return new Promise((resolve, reject) => {
        const server = (0, net_1.createServer)((socket) => {
          server.close();
          connectResolve([
            new SocketMessageReader(socket, encoding),
            new SocketMessageWriter(socket, encoding)
          ]);
        });
        server.on("error", reject);
        server.listen(port, "127.0.0.1", () => {
          server.removeListener("error", reject);
          resolve({
            onConnected: () => {
              return connected;
            }
          });
        });
      });
    }
    exports2.createClientSocketTransport = createClientSocketTransport;
    function createServerSocketTransport(port, encoding = "utf-8") {
      const socket = (0, net_1.createConnection)(port, "127.0.0.1");
      return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
      ];
    }
    exports2.createServerSocketTransport = createServerSocketTransport;
    function isReadableStream(value) {
      const candidate = value;
      return candidate.read !== void 0 && candidate.addListener !== void 0;
    }
    function isWritableStream(value) {
      const candidate = value;
      return candidate.write !== void 0 && candidate.addListener !== void 0;
    }
    function createMessageConnection(input, output, logger, options) {
      if (!logger) {
        logger = api_1.NullLogger;
      }
      const reader = isReadableStream(input) ? new StreamMessageReader(input) : input;
      const writer = isWritableStream(output) ? new StreamMessageWriter(output) : output;
      if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
      }
      return (0, api_1.createMessageConnection)(reader, writer, logger, options);
    }
    exports2.createMessageConnection = createMessageConnection;
  }
});

// ../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/node.js
var require_node = __commonJS({
  "../../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/node.js"(exports2, module2) {
    "use strict";
    init_importMeta();
    module2.exports = require_main();
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/umd/main.js
var require_main2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/umd/main.js"(exports2, module2) {
    init_importMeta();
    (function(factory) {
      if (typeof module2 === "object" && typeof module2.exports === "object") {
        var v = factory(require, exports2);
        if (v !== void 0) module2.exports = v;
      } else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
      }
    })(function(require2, exports3) {
      "use strict";
      Object.defineProperty(exports3, "__esModule", { value: true });
      exports3.TextDocument = exports3.EOL = exports3.WorkspaceFolder = exports3.InlineCompletionContext = exports3.SelectedCompletionInfo = exports3.InlineCompletionTriggerKind = exports3.InlineCompletionList = exports3.InlineCompletionItem = exports3.StringValue = exports3.InlayHint = exports3.InlayHintLabelPart = exports3.InlayHintKind = exports3.InlineValueContext = exports3.InlineValueEvaluatableExpression = exports3.InlineValueVariableLookup = exports3.InlineValueText = exports3.SemanticTokens = exports3.SemanticTokenModifiers = exports3.SemanticTokenTypes = exports3.SelectionRange = exports3.DocumentLink = exports3.FormattingOptions = exports3.CodeLens = exports3.CodeAction = exports3.CodeActionContext = exports3.CodeActionTriggerKind = exports3.CodeActionKind = exports3.DocumentSymbol = exports3.WorkspaceSymbol = exports3.SymbolInformation = exports3.SymbolTag = exports3.SymbolKind = exports3.DocumentHighlight = exports3.DocumentHighlightKind = exports3.SignatureInformation = exports3.ParameterInformation = exports3.Hover = exports3.MarkedString = exports3.CompletionList = exports3.CompletionItem = exports3.CompletionItemLabelDetails = exports3.InsertTextMode = exports3.InsertReplaceEdit = exports3.CompletionItemTag = exports3.InsertTextFormat = exports3.CompletionItemKind = exports3.MarkupContent = exports3.MarkupKind = exports3.TextDocumentItem = exports3.OptionalVersionedTextDocumentIdentifier = exports3.VersionedTextDocumentIdentifier = exports3.TextDocumentIdentifier = exports3.WorkspaceChange = exports3.WorkspaceEdit = exports3.DeleteFile = exports3.RenameFile = exports3.CreateFile = exports3.TextDocumentEdit = exports3.AnnotatedTextEdit = exports3.ChangeAnnotationIdentifier = exports3.ChangeAnnotation = exports3.TextEdit = exports3.Command = exports3.Diagnostic = exports3.CodeDescription = exports3.DiagnosticTag = exports3.DiagnosticSeverity = exports3.DiagnosticRelatedInformation = exports3.FoldingRange = exports3.FoldingRangeKind = exports3.ColorPresentation = exports3.ColorInformation = exports3.Color = exports3.LocationLink = exports3.Location = exports3.Range = exports3.Position = exports3.uinteger = exports3.integer = exports3.URI = exports3.DocumentUri = void 0;
      var DocumentUri;
      (function(DocumentUri2) {
        function is(value) {
          return typeof value === "string";
        }
        DocumentUri2.is = is;
      })(DocumentUri || (exports3.DocumentUri = DocumentUri = {}));
      var URI;
      (function(URI2) {
        function is(value) {
          return typeof value === "string";
        }
        URI2.is = is;
      })(URI || (exports3.URI = URI = {}));
      var integer;
      (function(integer2) {
        integer2.MIN_VALUE = -2147483648;
        integer2.MAX_VALUE = 2147483647;
        function is(value) {
          return typeof value === "number" && integer2.MIN_VALUE <= value && value <= integer2.MAX_VALUE;
        }
        integer2.is = is;
      })(integer || (exports3.integer = integer = {}));
      var uinteger;
      (function(uinteger2) {
        uinteger2.MIN_VALUE = 0;
        uinteger2.MAX_VALUE = 2147483647;
        function is(value) {
          return typeof value === "number" && uinteger2.MIN_VALUE <= value && value <= uinteger2.MAX_VALUE;
        }
        uinteger2.is = is;
      })(uinteger || (exports3.uinteger = uinteger = {}));
      var Position;
      (function(Position2) {
        function create(line, character) {
          if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
          }
          if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
          }
          return { line, character };
        }
        Position2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
        }
        Position2.is = is;
      })(Position || (exports3.Position = Position = {}));
      var Range;
      (function(Range2) {
        function create(one, two, three, four) {
          if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
          } else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
          } else {
            throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
          }
        }
        Range2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
        }
        Range2.is = is;
      })(Range || (exports3.Range = Range = {}));
      var Location;
      (function(Location2) {
        function create(uri, range) {
          return { uri, range };
        }
        Location2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
        }
        Location2.is = is;
      })(Location || (exports3.Location = Location = {}));
      var LocationLink;
      (function(LocationLink2) {
        function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
          return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
        }
        LocationLink2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri) && Range.is(candidate.targetSelectionRange) && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
        }
        LocationLink2.is = is;
      })(LocationLink || (exports3.LocationLink = LocationLink = {}));
      var Color;
      (function(Color2) {
        function create(red, green, blue, alpha) {
          return {
            red,
            green,
            blue,
            alpha
          };
        }
        Color2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1) && Is.numberRange(candidate.green, 0, 1) && Is.numberRange(candidate.blue, 0, 1) && Is.numberRange(candidate.alpha, 0, 1);
        }
        Color2.is = is;
      })(Color || (exports3.Color = Color = {}));
      var ColorInformation;
      (function(ColorInformation2) {
        function create(range, color) {
          return {
            range,
            color
          };
        }
        ColorInformation2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
        }
        ColorInformation2.is = is;
      })(ColorInformation || (exports3.ColorInformation = ColorInformation = {}));
      var ColorPresentation;
      (function(ColorPresentation2) {
        function create(label, textEdit, additionalTextEdits) {
          return {
            label,
            textEdit,
            additionalTextEdits
          };
        }
        ColorPresentation2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate)) && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
        }
        ColorPresentation2.is = is;
      })(ColorPresentation || (exports3.ColorPresentation = ColorPresentation = {}));
      var FoldingRangeKind;
      (function(FoldingRangeKind2) {
        FoldingRangeKind2.Comment = "comment";
        FoldingRangeKind2.Imports = "imports";
        FoldingRangeKind2.Region = "region";
      })(FoldingRangeKind || (exports3.FoldingRangeKind = FoldingRangeKind = {}));
      var FoldingRange;
      (function(FoldingRange2) {
        function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
          var result = {
            startLine,
            endLine
          };
          if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
          }
          if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
          }
          if (Is.defined(kind)) {
            result.kind = kind;
          }
          if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
          }
          return result;
        }
        FoldingRange2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine) && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter)) && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter)) && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
        }
        FoldingRange2.is = is;
      })(FoldingRange || (exports3.FoldingRange = FoldingRange = {}));
      var DiagnosticRelatedInformation;
      (function(DiagnosticRelatedInformation2) {
        function create(location, message) {
          return {
            location,
            message
          };
        }
        DiagnosticRelatedInformation2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
        }
        DiagnosticRelatedInformation2.is = is;
      })(DiagnosticRelatedInformation || (exports3.DiagnosticRelatedInformation = DiagnosticRelatedInformation = {}));
      var DiagnosticSeverity;
      (function(DiagnosticSeverity2) {
        DiagnosticSeverity2.Error = 1;
        DiagnosticSeverity2.Warning = 2;
        DiagnosticSeverity2.Information = 3;
        DiagnosticSeverity2.Hint = 4;
      })(DiagnosticSeverity || (exports3.DiagnosticSeverity = DiagnosticSeverity = {}));
      var DiagnosticTag;
      (function(DiagnosticTag2) {
        DiagnosticTag2.Unnecessary = 1;
        DiagnosticTag2.Deprecated = 2;
      })(DiagnosticTag || (exports3.DiagnosticTag = DiagnosticTag = {}));
      var CodeDescription;
      (function(CodeDescription2) {
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.string(candidate.href);
        }
        CodeDescription2.is = is;
      })(CodeDescription || (exports3.CodeDescription = CodeDescription = {}));
      var Diagnostic2;
      (function(Diagnostic3) {
        function create(range, message, severity, code2, source, relatedInformation) {
          var result = { range, message };
          if (Is.defined(severity)) {
            result.severity = severity;
          }
          if (Is.defined(code2)) {
            result.code = code2;
          }
          if (Is.defined(source)) {
            result.source = source;
          }
          if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
          }
          return result;
        }
        Diagnostic3.create = create;
        function is(value) {
          var _a;
          var candidate = value;
          return Is.defined(candidate) && Range.is(candidate.range) && Is.string(candidate.message) && (Is.number(candidate.severity) || Is.undefined(candidate.severity)) && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code)) && (Is.undefined(candidate.codeDescription) || Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)) && (Is.string(candidate.source) || Is.undefined(candidate.source)) && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
        }
        Diagnostic3.is = is;
      })(Diagnostic2 || (exports3.Diagnostic = Diagnostic2 = {}));
      var Command;
      (function(Command2) {
        function create(title, command) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          var result = { title, command };
          if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
          }
          return result;
        }
        Command2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
        }
        Command2.is = is;
      })(Command || (exports3.Command = Command = {}));
      var TextEdit;
      (function(TextEdit2) {
        function replace(range, newText) {
          return { range, newText };
        }
        TextEdit2.replace = replace;
        function insert(position2, newText) {
          return { range: { start: position2, end: position2 }, newText };
        }
        TextEdit2.insert = insert;
        function del(range) {
          return { range, newText: "" };
        }
        TextEdit2.del = del;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.string(candidate.newText) && Range.is(candidate.range);
        }
        TextEdit2.is = is;
      })(TextEdit || (exports3.TextEdit = TextEdit = {}));
      var ChangeAnnotation;
      (function(ChangeAnnotation2) {
        function create(label, needsConfirmation, description) {
          var result = { label };
          if (needsConfirmation !== void 0) {
            result.needsConfirmation = needsConfirmation;
          }
          if (description !== void 0) {
            result.description = description;
          }
          return result;
        }
        ChangeAnnotation2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Is.string(candidate.label) && (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
        }
        ChangeAnnotation2.is = is;
      })(ChangeAnnotation || (exports3.ChangeAnnotation = ChangeAnnotation = {}));
      var ChangeAnnotationIdentifier;
      (function(ChangeAnnotationIdentifier2) {
        function is(value) {
          var candidate = value;
          return Is.string(candidate);
        }
        ChangeAnnotationIdentifier2.is = is;
      })(ChangeAnnotationIdentifier || (exports3.ChangeAnnotationIdentifier = ChangeAnnotationIdentifier = {}));
      var AnnotatedTextEdit;
      (function(AnnotatedTextEdit2) {
        function replace(range, newText, annotation) {
          return { range, newText, annotationId: annotation };
        }
        AnnotatedTextEdit2.replace = replace;
        function insert(position2, newText, annotation) {
          return { range: { start: position2, end: position2 }, newText, annotationId: annotation };
        }
        AnnotatedTextEdit2.insert = insert;
        function del(range, annotation) {
          return { range, newText: "", annotationId: annotation };
        }
        AnnotatedTextEdit2.del = del;
        function is(value) {
          var candidate = value;
          return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        AnnotatedTextEdit2.is = is;
      })(AnnotatedTextEdit || (exports3.AnnotatedTextEdit = AnnotatedTextEdit = {}));
      var TextDocumentEdit;
      (function(TextDocumentEdit2) {
        function create(textDocument, edits) {
          return { textDocument, edits };
        }
        TextDocumentEdit2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument) && Array.isArray(candidate.edits);
        }
        TextDocumentEdit2.is = is;
      })(TextDocumentEdit || (exports3.TextDocumentEdit = TextDocumentEdit = {}));
      var CreateFile;
      (function(CreateFile2) {
        function create(uri, options, annotation) {
          var result = {
            kind: "create",
            uri
          };
          if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
          }
          if (annotation !== void 0) {
            result.annotationId = annotation;
          }
          return result;
        }
        CreateFile2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && candidate.kind === "create" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        CreateFile2.is = is;
      })(CreateFile || (exports3.CreateFile = CreateFile = {}));
      var RenameFile;
      (function(RenameFile2) {
        function create(oldUri, newUri, options, annotation) {
          var result = {
            kind: "rename",
            oldUri,
            newUri
          };
          if (options !== void 0 && (options.overwrite !== void 0 || options.ignoreIfExists !== void 0)) {
            result.options = options;
          }
          if (annotation !== void 0) {
            result.annotationId = annotation;
          }
          return result;
        }
        RenameFile2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && candidate.kind === "rename" && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === void 0 || (candidate.options.overwrite === void 0 || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === void 0 || Is.boolean(candidate.options.ignoreIfExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        RenameFile2.is = is;
      })(RenameFile || (exports3.RenameFile = RenameFile = {}));
      var DeleteFile;
      (function(DeleteFile2) {
        function create(uri, options, annotation) {
          var result = {
            kind: "delete",
            uri
          };
          if (options !== void 0 && (options.recursive !== void 0 || options.ignoreIfNotExists !== void 0)) {
            result.options = options;
          }
          if (annotation !== void 0) {
            result.annotationId = annotation;
          }
          return result;
        }
        DeleteFile2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && candidate.kind === "delete" && Is.string(candidate.uri) && (candidate.options === void 0 || (candidate.options.recursive === void 0 || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === void 0 || Is.boolean(candidate.options.ignoreIfNotExists))) && (candidate.annotationId === void 0 || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        DeleteFile2.is = is;
      })(DeleteFile || (exports3.DeleteFile = DeleteFile = {}));
      var WorkspaceEdit;
      (function(WorkspaceEdit2) {
        function is(value) {
          var candidate = value;
          return candidate && (candidate.changes !== void 0 || candidate.documentChanges !== void 0) && (candidate.documentChanges === void 0 || candidate.documentChanges.every(function(change) {
            if (Is.string(change.kind)) {
              return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
            } else {
              return TextDocumentEdit.is(change);
            }
          }));
        }
        WorkspaceEdit2.is = is;
      })(WorkspaceEdit || (exports3.WorkspaceEdit = WorkspaceEdit = {}));
      var TextEditChangeImpl = (
        /** @class */
        function() {
          function TextEditChangeImpl2(edits, changeAnnotations) {
            this.edits = edits;
            this.changeAnnotations = changeAnnotations;
          }
          TextEditChangeImpl2.prototype.insert = function(position2, newText, annotation) {
            var edit;
            var id;
            if (annotation === void 0) {
              edit = TextEdit.insert(position2, newText);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.insert(position2, newText, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.insert(position2, newText, id);
            }
            this.edits.push(edit);
            if (id !== void 0) {
              return id;
            }
          };
          TextEditChangeImpl2.prototype.replace = function(range, newText, annotation) {
            var edit;
            var id;
            if (annotation === void 0) {
              edit = TextEdit.replace(range, newText);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.replace(range, newText, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.replace(range, newText, id);
            }
            this.edits.push(edit);
            if (id !== void 0) {
              return id;
            }
          };
          TextEditChangeImpl2.prototype.delete = function(range, annotation) {
            var edit;
            var id;
            if (annotation === void 0) {
              edit = TextEdit.del(range);
            } else if (ChangeAnnotationIdentifier.is(annotation)) {
              id = annotation;
              edit = AnnotatedTextEdit.del(range, annotation);
            } else {
              this.assertChangeAnnotations(this.changeAnnotations);
              id = this.changeAnnotations.manage(annotation);
              edit = AnnotatedTextEdit.del(range, id);
            }
            this.edits.push(edit);
            if (id !== void 0) {
              return id;
            }
          };
          TextEditChangeImpl2.prototype.add = function(edit) {
            this.edits.push(edit);
          };
          TextEditChangeImpl2.prototype.all = function() {
            return this.edits;
          };
          TextEditChangeImpl2.prototype.clear = function() {
            this.edits.splice(0, this.edits.length);
          };
          TextEditChangeImpl2.prototype.assertChangeAnnotations = function(value) {
            if (value === void 0) {
              throw new Error("Text edit change is not configured to manage change annotations.");
            }
          };
          return TextEditChangeImpl2;
        }()
      );
      var ChangeAnnotations = (
        /** @class */
        function() {
          function ChangeAnnotations2(annotations) {
            this._annotations = annotations === void 0 ? /* @__PURE__ */ Object.create(null) : annotations;
            this._counter = 0;
            this._size = 0;
          }
          ChangeAnnotations2.prototype.all = function() {
            return this._annotations;
          };
          Object.defineProperty(ChangeAnnotations2.prototype, "size", {
            get: function() {
              return this._size;
            },
            enumerable: false,
            configurable: true
          });
          ChangeAnnotations2.prototype.manage = function(idOrAnnotation, annotation) {
            var id;
            if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
              id = idOrAnnotation;
            } else {
              id = this.nextId();
              annotation = idOrAnnotation;
            }
            if (this._annotations[id] !== void 0) {
              throw new Error("Id ".concat(id, " is already in use."));
            }
            if (annotation === void 0) {
              throw new Error("No annotation provided for id ".concat(id));
            }
            this._annotations[id] = annotation;
            this._size++;
            return id;
          };
          ChangeAnnotations2.prototype.nextId = function() {
            this._counter++;
            return this._counter.toString();
          };
          return ChangeAnnotations2;
        }()
      );
      var WorkspaceChange = (
        /** @class */
        function() {
          function WorkspaceChange2(workspaceEdit) {
            var _this = this;
            this._textEditChanges = /* @__PURE__ */ Object.create(null);
            if (workspaceEdit !== void 0) {
              this._workspaceEdit = workspaceEdit;
              if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach(function(change) {
                  if (TextDocumentEdit.is(change)) {
                    var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                    _this._textEditChanges[change.textDocument.uri] = textEditChange;
                  }
                });
              } else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach(function(key) {
                  var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                  _this._textEditChanges[key] = textEditChange;
                });
              }
            } else {
              this._workspaceEdit = {};
            }
          }
          Object.defineProperty(WorkspaceChange2.prototype, "edit", {
            /**
             * Returns the underlying {@link WorkspaceEdit} literal
             * use to be returned from a workspace edit operation like rename.
             */
            get: function() {
              this.initDocumentChanges();
              if (this._changeAnnotations !== void 0) {
                if (this._changeAnnotations.size === 0) {
                  this._workspaceEdit.changeAnnotations = void 0;
                } else {
                  this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                }
              }
              return this._workspaceEdit;
            },
            enumerable: false,
            configurable: true
          });
          WorkspaceChange2.prototype.getTextEditChange = function(key) {
            if (OptionalVersionedTextDocumentIdentifier.is(key)) {
              this.initDocumentChanges();
              if (this._workspaceEdit.documentChanges === void 0) {
                throw new Error("Workspace edit is not configured for document changes.");
              }
              var textDocument = { uri: key.uri, version: key.version };
              var result = this._textEditChanges[textDocument.uri];
              if (!result) {
                var edits = [];
                var textDocumentEdit = {
                  textDocument,
                  edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
              }
              return result;
            } else {
              this.initChanges();
              if (this._workspaceEdit.changes === void 0) {
                throw new Error("Workspace edit is not configured for normal text edit changes.");
              }
              var result = this._textEditChanges[key];
              if (!result) {
                var edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
              }
              return result;
            }
          };
          WorkspaceChange2.prototype.initDocumentChanges = function() {
            if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
              this._changeAnnotations = new ChangeAnnotations();
              this._workspaceEdit.documentChanges = [];
              this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
          };
          WorkspaceChange2.prototype.initChanges = function() {
            if (this._workspaceEdit.documentChanges === void 0 && this._workspaceEdit.changes === void 0) {
              this._workspaceEdit.changes = /* @__PURE__ */ Object.create(null);
            }
          };
          WorkspaceChange2.prototype.createFile = function(uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === void 0) {
              operation = CreateFile.create(uri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = CreateFile.create(uri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== void 0) {
              return id;
            }
          };
          WorkspaceChange2.prototype.renameFile = function(oldUri, newUri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === void 0) {
              operation = RenameFile.create(oldUri, newUri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = RenameFile.create(oldUri, newUri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== void 0) {
              return id;
            }
          };
          WorkspaceChange2.prototype.deleteFile = function(uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === void 0) {
              throw new Error("Workspace edit is not configured for document changes.");
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
              annotation = optionsOrAnnotation;
            } else {
              options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === void 0) {
              operation = DeleteFile.create(uri, options);
            } else {
              id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
              operation = DeleteFile.create(uri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== void 0) {
              return id;
            }
          };
          return WorkspaceChange2;
        }()
      );
      exports3.WorkspaceChange = WorkspaceChange;
      var TextDocumentIdentifier;
      (function(TextDocumentIdentifier2) {
        function create(uri) {
          return { uri };
        }
        TextDocumentIdentifier2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.uri);
        }
        TextDocumentIdentifier2.is = is;
      })(TextDocumentIdentifier || (exports3.TextDocumentIdentifier = TextDocumentIdentifier = {}));
      var VersionedTextDocumentIdentifier;
      (function(VersionedTextDocumentIdentifier2) {
        function create(uri, version) {
          return { uri, version };
        }
        VersionedTextDocumentIdentifier2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
        }
        VersionedTextDocumentIdentifier2.is = is;
      })(VersionedTextDocumentIdentifier || (exports3.VersionedTextDocumentIdentifier = VersionedTextDocumentIdentifier = {}));
      var OptionalVersionedTextDocumentIdentifier;
      (function(OptionalVersionedTextDocumentIdentifier2) {
        function create(uri, version) {
          return { uri, version };
        }
        OptionalVersionedTextDocumentIdentifier2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
        }
        OptionalVersionedTextDocumentIdentifier2.is = is;
      })(OptionalVersionedTextDocumentIdentifier || (exports3.OptionalVersionedTextDocumentIdentifier = OptionalVersionedTextDocumentIdentifier = {}));
      var TextDocumentItem;
      (function(TextDocumentItem2) {
        function create(uri, languageId, version, text) {
          return { uri, languageId, version, text };
        }
        TextDocumentItem2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
        }
        TextDocumentItem2.is = is;
      })(TextDocumentItem || (exports3.TextDocumentItem = TextDocumentItem = {}));
      var MarkupKind;
      (function(MarkupKind2) {
        MarkupKind2.PlainText = "plaintext";
        MarkupKind2.Markdown = "markdown";
        function is(value) {
          var candidate = value;
          return candidate === MarkupKind2.PlainText || candidate === MarkupKind2.Markdown;
        }
        MarkupKind2.is = is;
      })(MarkupKind || (exports3.MarkupKind = MarkupKind = {}));
      var MarkupContent;
      (function(MarkupContent2) {
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
        }
        MarkupContent2.is = is;
      })(MarkupContent || (exports3.MarkupContent = MarkupContent = {}));
      var CompletionItemKind;
      (function(CompletionItemKind2) {
        CompletionItemKind2.Text = 1;
        CompletionItemKind2.Method = 2;
        CompletionItemKind2.Function = 3;
        CompletionItemKind2.Constructor = 4;
        CompletionItemKind2.Field = 5;
        CompletionItemKind2.Variable = 6;
        CompletionItemKind2.Class = 7;
        CompletionItemKind2.Interface = 8;
        CompletionItemKind2.Module = 9;
        CompletionItemKind2.Property = 10;
        CompletionItemKind2.Unit = 11;
        CompletionItemKind2.Value = 12;
        CompletionItemKind2.Enum = 13;
        CompletionItemKind2.Keyword = 14;
        CompletionItemKind2.Snippet = 15;
        CompletionItemKind2.Color = 16;
        CompletionItemKind2.File = 17;
        CompletionItemKind2.Reference = 18;
        CompletionItemKind2.Folder = 19;
        CompletionItemKind2.EnumMember = 20;
        CompletionItemKind2.Constant = 21;
        CompletionItemKind2.Struct = 22;
        CompletionItemKind2.Event = 23;
        CompletionItemKind2.Operator = 24;
        CompletionItemKind2.TypeParameter = 25;
      })(CompletionItemKind || (exports3.CompletionItemKind = CompletionItemKind = {}));
      var InsertTextFormat;
      (function(InsertTextFormat2) {
        InsertTextFormat2.PlainText = 1;
        InsertTextFormat2.Snippet = 2;
      })(InsertTextFormat || (exports3.InsertTextFormat = InsertTextFormat = {}));
      var CompletionItemTag;
      (function(CompletionItemTag2) {
        CompletionItemTag2.Deprecated = 1;
      })(CompletionItemTag || (exports3.CompletionItemTag = CompletionItemTag = {}));
      var InsertReplaceEdit;
      (function(InsertReplaceEdit2) {
        function create(newText, insert, replace) {
          return { newText, insert, replace };
        }
        InsertReplaceEdit2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
        }
        InsertReplaceEdit2.is = is;
      })(InsertReplaceEdit || (exports3.InsertReplaceEdit = InsertReplaceEdit = {}));
      var InsertTextMode;
      (function(InsertTextMode2) {
        InsertTextMode2.asIs = 1;
        InsertTextMode2.adjustIndentation = 2;
      })(InsertTextMode || (exports3.InsertTextMode = InsertTextMode = {}));
      var CompletionItemLabelDetails;
      (function(CompletionItemLabelDetails2) {
        function is(value) {
          var candidate = value;
          return candidate && (Is.string(candidate.detail) || candidate.detail === void 0) && (Is.string(candidate.description) || candidate.description === void 0);
        }
        CompletionItemLabelDetails2.is = is;
      })(CompletionItemLabelDetails || (exports3.CompletionItemLabelDetails = CompletionItemLabelDetails = {}));
      var CompletionItem;
      (function(CompletionItem2) {
        function create(label) {
          return { label };
        }
        CompletionItem2.create = create;
      })(CompletionItem || (exports3.CompletionItem = CompletionItem = {}));
      var CompletionList;
      (function(CompletionList2) {
        function create(items, isIncomplete) {
          return { items: items ? items : [], isIncomplete: !!isIncomplete };
        }
        CompletionList2.create = create;
      })(CompletionList || (exports3.CompletionList = CompletionList = {}));
      var MarkedString;
      (function(MarkedString2) {
        function fromPlainText(plainText) {
          return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
        }
        MarkedString2.fromPlainText = fromPlainText;
        function is(value) {
          var candidate = value;
          return Is.string(candidate) || Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value);
        }
        MarkedString2.is = is;
      })(MarkedString || (exports3.MarkedString = MarkedString = {}));
      var Hover;
      (function(Hover2) {
        function is(value) {
          var candidate = value;
          return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) || MarkedString.is(candidate.contents) || Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));
        }
        Hover2.is = is;
      })(Hover || (exports3.Hover = Hover = {}));
      var ParameterInformation;
      (function(ParameterInformation2) {
        function create(label, documentation) {
          return documentation ? { label, documentation } : { label };
        }
        ParameterInformation2.create = create;
      })(ParameterInformation || (exports3.ParameterInformation = ParameterInformation = {}));
      var SignatureInformation;
      (function(SignatureInformation2) {
        function create(label, documentation) {
          var parameters = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            parameters[_i - 2] = arguments[_i];
          }
          var result = { label };
          if (Is.defined(documentation)) {
            result.documentation = documentation;
          }
          if (Is.defined(parameters)) {
            result.parameters = parameters;
          } else {
            result.parameters = [];
          }
          return result;
        }
        SignatureInformation2.create = create;
      })(SignatureInformation || (exports3.SignatureInformation = SignatureInformation = {}));
      var DocumentHighlightKind;
      (function(DocumentHighlightKind2) {
        DocumentHighlightKind2.Text = 1;
        DocumentHighlightKind2.Read = 2;
        DocumentHighlightKind2.Write = 3;
      })(DocumentHighlightKind || (exports3.DocumentHighlightKind = DocumentHighlightKind = {}));
      var DocumentHighlight;
      (function(DocumentHighlight2) {
        function create(range, kind) {
          var result = { range };
          if (Is.number(kind)) {
            result.kind = kind;
          }
          return result;
        }
        DocumentHighlight2.create = create;
      })(DocumentHighlight || (exports3.DocumentHighlight = DocumentHighlight = {}));
      var SymbolKind;
      (function(SymbolKind2) {
        SymbolKind2.File = 1;
        SymbolKind2.Module = 2;
        SymbolKind2.Namespace = 3;
        SymbolKind2.Package = 4;
        SymbolKind2.Class = 5;
        SymbolKind2.Method = 6;
        SymbolKind2.Property = 7;
        SymbolKind2.Field = 8;
        SymbolKind2.Constructor = 9;
        SymbolKind2.Enum = 10;
        SymbolKind2.Interface = 11;
        SymbolKind2.Function = 12;
        SymbolKind2.Variable = 13;
        SymbolKind2.Constant = 14;
        SymbolKind2.String = 15;
        SymbolKind2.Number = 16;
        SymbolKind2.Boolean = 17;
        SymbolKind2.Array = 18;
        SymbolKind2.Object = 19;
        SymbolKind2.Key = 20;
        SymbolKind2.Null = 21;
        SymbolKind2.EnumMember = 22;
        SymbolKind2.Struct = 23;
        SymbolKind2.Event = 24;
        SymbolKind2.Operator = 25;
        SymbolKind2.TypeParameter = 26;
      })(SymbolKind || (exports3.SymbolKind = SymbolKind = {}));
      var SymbolTag;
      (function(SymbolTag2) {
        SymbolTag2.Deprecated = 1;
      })(SymbolTag || (exports3.SymbolTag = SymbolTag = {}));
      var SymbolInformation;
      (function(SymbolInformation2) {
        function create(name, kind, range, uri, containerName) {
          var result = {
            name,
            kind,
            location: { uri, range }
          };
          if (containerName) {
            result.containerName = containerName;
          }
          return result;
        }
        SymbolInformation2.create = create;
      })(SymbolInformation || (exports3.SymbolInformation = SymbolInformation = {}));
      var WorkspaceSymbol;
      (function(WorkspaceSymbol2) {
        function create(name, kind, uri, range) {
          return range !== void 0 ? { name, kind, location: { uri, range } } : { name, kind, location: { uri } };
        }
        WorkspaceSymbol2.create = create;
      })(WorkspaceSymbol || (exports3.WorkspaceSymbol = WorkspaceSymbol = {}));
      var DocumentSymbol;
      (function(DocumentSymbol2) {
        function create(name, detail, kind, range, selectionRange, children) {
          var result = {
            name,
            detail,
            kind,
            range,
            selectionRange
          };
          if (children !== void 0) {
            result.children = children;
          }
          return result;
        }
        DocumentSymbol2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && Is.string(candidate.name) && Is.number(candidate.kind) && Range.is(candidate.range) && Range.is(candidate.selectionRange) && (candidate.detail === void 0 || Is.string(candidate.detail)) && (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) && (candidate.children === void 0 || Array.isArray(candidate.children)) && (candidate.tags === void 0 || Array.isArray(candidate.tags));
        }
        DocumentSymbol2.is = is;
      })(DocumentSymbol || (exports3.DocumentSymbol = DocumentSymbol = {}));
      var CodeActionKind;
      (function(CodeActionKind2) {
        CodeActionKind2.Empty = "";
        CodeActionKind2.QuickFix = "quickfix";
        CodeActionKind2.Refactor = "refactor";
        CodeActionKind2.RefactorExtract = "refactor.extract";
        CodeActionKind2.RefactorInline = "refactor.inline";
        CodeActionKind2.RefactorRewrite = "refactor.rewrite";
        CodeActionKind2.Source = "source";
        CodeActionKind2.SourceOrganizeImports = "source.organizeImports";
        CodeActionKind2.SourceFixAll = "source.fixAll";
      })(CodeActionKind || (exports3.CodeActionKind = CodeActionKind = {}));
      var CodeActionTriggerKind;
      (function(CodeActionTriggerKind2) {
        CodeActionTriggerKind2.Invoked = 1;
        CodeActionTriggerKind2.Automatic = 2;
      })(CodeActionTriggerKind || (exports3.CodeActionTriggerKind = CodeActionTriggerKind = {}));
      var CodeActionContext;
      (function(CodeActionContext2) {
        function create(diagnostics, only, triggerKind) {
          var result = { diagnostics };
          if (only !== void 0 && only !== null) {
            result.only = only;
          }
          if (triggerKind !== void 0 && triggerKind !== null) {
            result.triggerKind = triggerKind;
          }
          return result;
        }
        CodeActionContext2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic2.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string)) && (candidate.triggerKind === void 0 || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
        }
        CodeActionContext2.is = is;
      })(CodeActionContext || (exports3.CodeActionContext = CodeActionContext = {}));
      var CodeAction;
      (function(CodeAction2) {
        function create(title, kindOrCommandOrEdit, kind) {
          var result = { title };
          var checkKind = true;
          if (typeof kindOrCommandOrEdit === "string") {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
          } else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
          } else {
            result.edit = kindOrCommandOrEdit;
          }
          if (checkKind && kind !== void 0) {
            result.kind = kind;
          }
          return result;
        }
        CodeAction2.create = create;
        function is(value) {
          var candidate = value;
          return candidate && Is.string(candidate.title) && (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic2.is)) && (candidate.kind === void 0 || Is.string(candidate.kind)) && (candidate.edit !== void 0 || candidate.command !== void 0) && (candidate.command === void 0 || Command.is(candidate.command)) && (candidate.isPreferred === void 0 || Is.boolean(candidate.isPreferred)) && (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));
        }
        CodeAction2.is = is;
      })(CodeAction || (exports3.CodeAction = CodeAction = {}));
      var CodeLens;
      (function(CodeLens2) {
        function create(range, data) {
          var result = { range };
          if (Is.defined(data)) {
            result.data = data;
          }
          return result;
        }
        CodeLens2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
        }
        CodeLens2.is = is;
      })(CodeLens || (exports3.CodeLens = CodeLens = {}));
      var FormattingOptions;
      (function(FormattingOptions2) {
        function create(tabSize, insertSpaces) {
          return { tabSize, insertSpaces };
        }
        FormattingOptions2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
        }
        FormattingOptions2.is = is;
      })(FormattingOptions || (exports3.FormattingOptions = FormattingOptions = {}));
      var DocumentLink;
      (function(DocumentLink2) {
        function create(range, target, data) {
          return { range, target, data };
        }
        DocumentLink2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
        }
        DocumentLink2.is = is;
      })(DocumentLink || (exports3.DocumentLink = DocumentLink = {}));
      var SelectionRange;
      (function(SelectionRange2) {
        function create(range, parent) {
          return { range, parent };
        }
        SelectionRange2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === void 0 || SelectionRange2.is(candidate.parent));
        }
        SelectionRange2.is = is;
      })(SelectionRange || (exports3.SelectionRange = SelectionRange = {}));
      var SemanticTokenTypes;
      (function(SemanticTokenTypes2) {
        SemanticTokenTypes2["namespace"] = "namespace";
        SemanticTokenTypes2["type"] = "type";
        SemanticTokenTypes2["class"] = "class";
        SemanticTokenTypes2["enum"] = "enum";
        SemanticTokenTypes2["interface"] = "interface";
        SemanticTokenTypes2["struct"] = "struct";
        SemanticTokenTypes2["typeParameter"] = "typeParameter";
        SemanticTokenTypes2["parameter"] = "parameter";
        SemanticTokenTypes2["variable"] = "variable";
        SemanticTokenTypes2["property"] = "property";
        SemanticTokenTypes2["enumMember"] = "enumMember";
        SemanticTokenTypes2["event"] = "event";
        SemanticTokenTypes2["function"] = "function";
        SemanticTokenTypes2["method"] = "method";
        SemanticTokenTypes2["macro"] = "macro";
        SemanticTokenTypes2["keyword"] = "keyword";
        SemanticTokenTypes2["modifier"] = "modifier";
        SemanticTokenTypes2["comment"] = "comment";
        SemanticTokenTypes2["string"] = "string";
        SemanticTokenTypes2["number"] = "number";
        SemanticTokenTypes2["regexp"] = "regexp";
        SemanticTokenTypes2["operator"] = "operator";
        SemanticTokenTypes2["decorator"] = "decorator";
      })(SemanticTokenTypes || (exports3.SemanticTokenTypes = SemanticTokenTypes = {}));
      var SemanticTokenModifiers;
      (function(SemanticTokenModifiers2) {
        SemanticTokenModifiers2["declaration"] = "declaration";
        SemanticTokenModifiers2["definition"] = "definition";
        SemanticTokenModifiers2["readonly"] = "readonly";
        SemanticTokenModifiers2["static"] = "static";
        SemanticTokenModifiers2["deprecated"] = "deprecated";
        SemanticTokenModifiers2["abstract"] = "abstract";
        SemanticTokenModifiers2["async"] = "async";
        SemanticTokenModifiers2["modification"] = "modification";
        SemanticTokenModifiers2["documentation"] = "documentation";
        SemanticTokenModifiers2["defaultLibrary"] = "defaultLibrary";
      })(SemanticTokenModifiers || (exports3.SemanticTokenModifiers = SemanticTokenModifiers = {}));
      var SemanticTokens;
      (function(SemanticTokens2) {
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && (candidate.resultId === void 0 || typeof candidate.resultId === "string") && Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === "number");
        }
        SemanticTokens2.is = is;
      })(SemanticTokens || (exports3.SemanticTokens = SemanticTokens = {}));
      var InlineValueText;
      (function(InlineValueText2) {
        function create(range, text) {
          return { range, text };
        }
        InlineValueText2.create = create;
        function is(value) {
          var candidate = value;
          return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
        }
        InlineValueText2.is = is;
      })(InlineValueText || (exports3.InlineValueText = InlineValueText = {}));
      var InlineValueVariableLookup;
      (function(InlineValueVariableLookup2) {
        function create(range, variableName, caseSensitiveLookup) {
          return { range, variableName, caseSensitiveLookup };
        }
        InlineValueVariableLookup2.create = create;
        function is(value) {
          var candidate = value;
          return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup) && (Is.string(candidate.variableName) || candidate.variableName === void 0);
        }
        InlineValueVariableLookup2.is = is;
      })(InlineValueVariableLookup || (exports3.InlineValueVariableLookup = InlineValueVariableLookup = {}));
      var InlineValueEvaluatableExpression;
      (function(InlineValueEvaluatableExpression2) {
        function create(range, expression) {
          return { range, expression };
        }
        InlineValueEvaluatableExpression2.create = create;
        function is(value) {
          var candidate = value;
          return candidate !== void 0 && candidate !== null && Range.is(candidate.range) && (Is.string(candidate.expression) || candidate.expression === void 0);
        }
        InlineValueEvaluatableExpression2.is = is;
      })(InlineValueEvaluatableExpression || (exports3.InlineValueEvaluatableExpression = InlineValueEvaluatableExpression = {}));
      var InlineValueContext;
      (function(InlineValueContext2) {
        function create(frameId, stoppedLocation) {
          return { frameId, stoppedLocation };
        }
        InlineValueContext2.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Range.is(value.stoppedLocation);
        }
        InlineValueContext2.is = is;
      })(InlineValueContext || (exports3.InlineValueContext = InlineValueContext = {}));
      var InlayHintKind;
      (function(InlayHintKind2) {
        InlayHintKind2.Type = 1;
        InlayHintKind2.Parameter = 2;
        function is(value) {
          return value === 1 || value === 2;
        }
        InlayHintKind2.is = is;
      })(InlayHintKind || (exports3.InlayHintKind = InlayHintKind = {}));
      var InlayHintLabelPart;
      (function(InlayHintLabelPart2) {
        function create(value) {
          return { value };
        }
        InlayHintLabelPart2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.location === void 0 || Location.is(candidate.location)) && (candidate.command === void 0 || Command.is(candidate.command));
        }
        InlayHintLabelPart2.is = is;
      })(InlayHintLabelPart || (exports3.InlayHintLabelPart = InlayHintLabelPart = {}));
      var InlayHint;
      (function(InlayHint2) {
        function create(position2, label, kind) {
          var result = { position: position2, label };
          if (kind !== void 0) {
            result.kind = kind;
          }
          return result;
        }
        InlayHint2.create = create;
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && Position.is(candidate.position) && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is)) && (candidate.kind === void 0 || InlayHintKind.is(candidate.kind)) && candidate.textEdits === void 0 || Is.typedArray(candidate.textEdits, TextEdit.is) && (candidate.tooltip === void 0 || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip)) && (candidate.paddingLeft === void 0 || Is.boolean(candidate.paddingLeft)) && (candidate.paddingRight === void 0 || Is.boolean(candidate.paddingRight));
        }
        InlayHint2.is = is;
      })(InlayHint || (exports3.InlayHint = InlayHint = {}));
      var StringValue;
      (function(StringValue2) {
        function createSnippet(value) {
          return { kind: "snippet", value };
        }
        StringValue2.createSnippet = createSnippet;
      })(StringValue || (exports3.StringValue = StringValue = {}));
      var InlineCompletionItem;
      (function(InlineCompletionItem2) {
        function create(insertText, filterText, range, command) {
          return { insertText, filterText, range, command };
        }
        InlineCompletionItem2.create = create;
      })(InlineCompletionItem || (exports3.InlineCompletionItem = InlineCompletionItem = {}));
      var InlineCompletionList;
      (function(InlineCompletionList2) {
        function create(items) {
          return { items };
        }
        InlineCompletionList2.create = create;
      })(InlineCompletionList || (exports3.InlineCompletionList = InlineCompletionList = {}));
      var InlineCompletionTriggerKind;
      (function(InlineCompletionTriggerKind2) {
        InlineCompletionTriggerKind2.Invoked = 0;
        InlineCompletionTriggerKind2.Automatic = 1;
      })(InlineCompletionTriggerKind || (exports3.InlineCompletionTriggerKind = InlineCompletionTriggerKind = {}));
      var SelectedCompletionInfo;
      (function(SelectedCompletionInfo2) {
        function create(range, text) {
          return { range, text };
        }
        SelectedCompletionInfo2.create = create;
      })(SelectedCompletionInfo || (exports3.SelectedCompletionInfo = SelectedCompletionInfo = {}));
      var InlineCompletionContext;
      (function(InlineCompletionContext2) {
        function create(triggerKind, selectedCompletionInfo) {
          return { triggerKind, selectedCompletionInfo };
        }
        InlineCompletionContext2.create = create;
      })(InlineCompletionContext || (exports3.InlineCompletionContext = InlineCompletionContext = {}));
      var WorkspaceFolder;
      (function(WorkspaceFolder2) {
        function is(value) {
          var candidate = value;
          return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
        }
        WorkspaceFolder2.is = is;
      })(WorkspaceFolder || (exports3.WorkspaceFolder = WorkspaceFolder = {}));
      exports3.EOL = ["\n", "\r\n", "\r"];
      var TextDocument2;
      (function(TextDocument3) {
        function create(uri, languageId, version, content) {
          return new FullTextDocument2(uri, languageId, version, content);
        }
        TextDocument3.create = create;
        function is(value) {
          var candidate = value;
          return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount) && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
        }
        TextDocument3.is = is;
        function applyEdits(document, edits) {
          var text = document.getText();
          var sortedEdits = mergeSort2(edits, function(a, b) {
            var diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
              return a.range.start.character - b.range.start.character;
            }
            return diff;
          });
          var lastModifiedOffset = text.length;
          for (var i = sortedEdits.length - 1; i >= 0; i--) {
            var e = sortedEdits[i];
            var startOffset = document.offsetAt(e.range.start);
            var endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
              text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            } else {
              throw new Error("Overlapping edit");
            }
            lastModifiedOffset = startOffset;
          }
          return text;
        }
        TextDocument3.applyEdits = applyEdits;
        function mergeSort2(data, compare5) {
          if (data.length <= 1) {
            return data;
          }
          var p = data.length / 2 | 0;
          var left = data.slice(0, p);
          var right = data.slice(p);
          mergeSort2(left, compare5);
          mergeSort2(right, compare5);
          var leftIdx = 0;
          var rightIdx = 0;
          var i = 0;
          while (leftIdx < left.length && rightIdx < right.length) {
            var ret = compare5(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
              data[i++] = left[leftIdx++];
            } else {
              data[i++] = right[rightIdx++];
            }
          }
          while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
          }
          while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
          }
          return data;
        }
      })(TextDocument2 || (exports3.TextDocument = TextDocument2 = {}));
      var FullTextDocument2 = (
        /** @class */
        function() {
          function FullTextDocument3(uri, languageId, version, content) {
            this._uri = uri;
            this._languageId = languageId;
            this._version = version;
            this._content = content;
            this._lineOffsets = void 0;
          }
          Object.defineProperty(FullTextDocument3.prototype, "uri", {
            get: function() {
              return this._uri;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FullTextDocument3.prototype, "languageId", {
            get: function() {
              return this._languageId;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(FullTextDocument3.prototype, "version", {
            get: function() {
              return this._version;
            },
            enumerable: false,
            configurable: true
          });
          FullTextDocument3.prototype.getText = function(range) {
            if (range) {
              var start = this.offsetAt(range.start);
              var end = this.offsetAt(range.end);
              return this._content.substring(start, end);
            }
            return this._content;
          };
          FullTextDocument3.prototype.update = function(event, version) {
            this._content = event.text;
            this._version = version;
            this._lineOffsets = void 0;
          };
          FullTextDocument3.prototype.getLineOffsets = function() {
            if (this._lineOffsets === void 0) {
              var lineOffsets = [];
              var text = this._content;
              var isLineStart = true;
              for (var i = 0; i < text.length; i++) {
                if (isLineStart) {
                  lineOffsets.push(i);
                  isLineStart = false;
                }
                var ch = text.charAt(i);
                isLineStart = ch === "\r" || ch === "\n";
                if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
                  i++;
                }
              }
              if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
              }
              this._lineOffsets = lineOffsets;
            }
            return this._lineOffsets;
          };
          FullTextDocument3.prototype.positionAt = function(offset) {
            offset = Math.max(Math.min(offset, this._content.length), 0);
            var lineOffsets = this.getLineOffsets();
            var low = 0, high = lineOffsets.length;
            if (high === 0) {
              return Position.create(0, offset);
            }
            while (low < high) {
              var mid = Math.floor((low + high) / 2);
              if (lineOffsets[mid] > offset) {
                high = mid;
              } else {
                low = mid + 1;
              }
            }
            var line = low - 1;
            return Position.create(line, offset - lineOffsets[line]);
          };
          FullTextDocument3.prototype.offsetAt = function(position2) {
            var lineOffsets = this.getLineOffsets();
            if (position2.line >= lineOffsets.length) {
              return this._content.length;
            } else if (position2.line < 0) {
              return 0;
            }
            var lineOffset = lineOffsets[position2.line];
            var nextLineOffset = position2.line + 1 < lineOffsets.length ? lineOffsets[position2.line + 1] : this._content.length;
            return Math.max(Math.min(lineOffset + position2.character, nextLineOffset), lineOffset);
          };
          Object.defineProperty(FullTextDocument3.prototype, "lineCount", {
            get: function() {
              return this.getLineOffsets().length;
            },
            enumerable: false,
            configurable: true
          });
          return FullTextDocument3;
        }()
      );
      var Is;
      (function(Is2) {
        var toString = Object.prototype.toString;
        function defined(value) {
          return typeof value !== "undefined";
        }
        Is2.defined = defined;
        function undefined2(value) {
          return typeof value === "undefined";
        }
        Is2.undefined = undefined2;
        function boolean(value) {
          return value === true || value === false;
        }
        Is2.boolean = boolean;
        function string3(value) {
          return toString.call(value) === "[object String]";
        }
        Is2.string = string3;
        function number(value) {
          return toString.call(value) === "[object Number]";
        }
        Is2.number = number;
        function numberRange(value, min, max2) {
          return toString.call(value) === "[object Number]" && min <= value && value <= max2;
        }
        Is2.numberRange = numberRange;
        function integer2(value) {
          return toString.call(value) === "[object Number]" && -2147483648 <= value && value <= 2147483647;
        }
        Is2.integer = integer2;
        function uinteger2(value) {
          return toString.call(value) === "[object Number]" && 0 <= value && value <= 2147483647;
        }
        Is2.uinteger = uinteger2;
        function func(value) {
          return toString.call(value) === "[object Function]";
        }
        Is2.func = func;
        function objectLiteral(value) {
          return value !== null && typeof value === "object";
        }
        Is2.objectLiteral = objectLiteral;
        function typedArray(value, check) {
          return Array.isArray(value) && value.every(check);
        }
        Is2.typedArray = typedArray;
      })(Is || (Is = {}));
    });
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/messages.js
var require_messages2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/messages.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProtocolNotificationType = exports2.ProtocolNotificationType0 = exports2.ProtocolRequestType = exports2.ProtocolRequestType0 = exports2.RegistrationType = exports2.MessageDirection = void 0;
    var vscode_jsonrpc_1 = require_main();
    var MessageDirection;
    (function(MessageDirection2) {
      MessageDirection2["clientToServer"] = "clientToServer";
      MessageDirection2["serverToClient"] = "serverToClient";
      MessageDirection2["both"] = "both";
    })(MessageDirection || (exports2.MessageDirection = MessageDirection = {}));
    var RegistrationType = class {
      constructor(method) {
        this.method = method;
      }
    };
    exports2.RegistrationType = RegistrationType;
    var ProtocolRequestType0 = class extends vscode_jsonrpc_1.RequestType0 {
      constructor(method) {
        super(method);
      }
    };
    exports2.ProtocolRequestType0 = ProtocolRequestType0;
    var ProtocolRequestType = class extends vscode_jsonrpc_1.RequestType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    };
    exports2.ProtocolRequestType = ProtocolRequestType;
    var ProtocolNotificationType0 = class extends vscode_jsonrpc_1.NotificationType0 {
      constructor(method) {
        super(method);
      }
    };
    exports2.ProtocolNotificationType0 = ProtocolNotificationType0;
    var ProtocolNotificationType = class extends vscode_jsonrpc_1.NotificationType {
      constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
      }
    };
    exports2.ProtocolNotificationType = ProtocolNotificationType;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js
var require_is3 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/utils/is.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.objectLiteral = exports2.typedArray = exports2.stringArray = exports2.array = exports2.func = exports2.error = exports2.number = exports2.string = exports2.boolean = void 0;
    function boolean(value) {
      return value === true || value === false;
    }
    exports2.boolean = boolean;
    function string3(value) {
      return typeof value === "string" || value instanceof String;
    }
    exports2.string = string3;
    function number(value) {
      return typeof value === "number" || value instanceof Number;
    }
    exports2.number = number;
    function error(value) {
      return value instanceof Error;
    }
    exports2.error = error;
    function func(value) {
      return typeof value === "function";
    }
    exports2.func = func;
    function array2(value) {
      return Array.isArray(value);
    }
    exports2.array = array2;
    function stringArray(value) {
      return array2(value) && value.every((elem) => string3(elem));
    }
    exports2.stringArray = stringArray;
    function typedArray(value, check) {
      return Array.isArray(value) && value.every(check);
    }
    exports2.typedArray = typedArray;
    function objectLiteral(value) {
      return value !== null && typeof value === "object";
    }
    exports2.objectLiteral = objectLiteral;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js
var require_protocol_implementation = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ImplementationRequest = void 0;
    var messages_1 = require_messages2();
    var ImplementationRequest;
    (function(ImplementationRequest2) {
      ImplementationRequest2.method = "textDocument/implementation";
      ImplementationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      ImplementationRequest2.type = new messages_1.ProtocolRequestType(ImplementationRequest2.method);
    })(ImplementationRequest || (exports2.ImplementationRequest = ImplementationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js
var require_protocol_typeDefinition = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeDefinitionRequest = void 0;
    var messages_1 = require_messages2();
    var TypeDefinitionRequest;
    (function(TypeDefinitionRequest2) {
      TypeDefinitionRequest2.method = "textDocument/typeDefinition";
      TypeDefinitionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeDefinitionRequest2.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest2.method);
    })(TypeDefinitionRequest || (exports2.TypeDefinitionRequest = TypeDefinitionRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js
var require_protocol_workspaceFolder = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DidChangeWorkspaceFoldersNotification = exports2.WorkspaceFoldersRequest = void 0;
    var messages_1 = require_messages2();
    var WorkspaceFoldersRequest;
    (function(WorkspaceFoldersRequest2) {
      WorkspaceFoldersRequest2.method = "workspace/workspaceFolders";
      WorkspaceFoldersRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      WorkspaceFoldersRequest2.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest2.method);
    })(WorkspaceFoldersRequest || (exports2.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
    var DidChangeWorkspaceFoldersNotification;
    (function(DidChangeWorkspaceFoldersNotification2) {
      DidChangeWorkspaceFoldersNotification2.method = "workspace/didChangeWorkspaceFolders";
      DidChangeWorkspaceFoldersNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeWorkspaceFoldersNotification2.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification2.method);
    })(DidChangeWorkspaceFoldersNotification || (exports2.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js
var require_protocol_configuration = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfigurationRequest = void 0;
    var messages_1 = require_messages2();
    var ConfigurationRequest;
    (function(ConfigurationRequest2) {
      ConfigurationRequest2.method = "workspace/configuration";
      ConfigurationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      ConfigurationRequest2.type = new messages_1.ProtocolRequestType(ConfigurationRequest2.method);
    })(ConfigurationRequest || (exports2.ConfigurationRequest = ConfigurationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js
var require_protocol_colorProvider = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ColorPresentationRequest = exports2.DocumentColorRequest = void 0;
    var messages_1 = require_messages2();
    var DocumentColorRequest;
    (function(DocumentColorRequest2) {
      DocumentColorRequest2.method = "textDocument/documentColor";
      DocumentColorRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentColorRequest2.type = new messages_1.ProtocolRequestType(DocumentColorRequest2.method);
    })(DocumentColorRequest || (exports2.DocumentColorRequest = DocumentColorRequest = {}));
    var ColorPresentationRequest;
    (function(ColorPresentationRequest2) {
      ColorPresentationRequest2.method = "textDocument/colorPresentation";
      ColorPresentationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      ColorPresentationRequest2.type = new messages_1.ProtocolRequestType(ColorPresentationRequest2.method);
    })(ColorPresentationRequest || (exports2.ColorPresentationRequest = ColorPresentationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js
var require_protocol_foldingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FoldingRangeRefreshRequest = exports2.FoldingRangeRequest = void 0;
    var messages_1 = require_messages2();
    var FoldingRangeRequest;
    (function(FoldingRangeRequest2) {
      FoldingRangeRequest2.method = "textDocument/foldingRange";
      FoldingRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      FoldingRangeRequest2.type = new messages_1.ProtocolRequestType(FoldingRangeRequest2.method);
    })(FoldingRangeRequest || (exports2.FoldingRangeRequest = FoldingRangeRequest = {}));
    var FoldingRangeRefreshRequest;
    (function(FoldingRangeRefreshRequest2) {
      FoldingRangeRefreshRequest2.method = `workspace/foldingRange/refresh`;
      FoldingRangeRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      FoldingRangeRefreshRequest2.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest2.method);
    })(FoldingRangeRefreshRequest || (exports2.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js
var require_protocol_declaration = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeclarationRequest = void 0;
    var messages_1 = require_messages2();
    var DeclarationRequest;
    (function(DeclarationRequest2) {
      DeclarationRequest2.method = "textDocument/declaration";
      DeclarationRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DeclarationRequest2.type = new messages_1.ProtocolRequestType(DeclarationRequest2.method);
    })(DeclarationRequest || (exports2.DeclarationRequest = DeclarationRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js
var require_protocol_selectionRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SelectionRangeRequest = void 0;
    var messages_1 = require_messages2();
    var SelectionRangeRequest;
    (function(SelectionRangeRequest2) {
      SelectionRangeRequest2.method = "textDocument/selectionRange";
      SelectionRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      SelectionRangeRequest2.type = new messages_1.ProtocolRequestType(SelectionRangeRequest2.method);
    })(SelectionRangeRequest || (exports2.SelectionRangeRequest = SelectionRangeRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js
var require_protocol_progress = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkDoneProgressCancelNotification = exports2.WorkDoneProgressCreateRequest = exports2.WorkDoneProgress = void 0;
    var vscode_jsonrpc_1 = require_main();
    var messages_1 = require_messages2();
    var WorkDoneProgress;
    (function(WorkDoneProgress2) {
      WorkDoneProgress2.type = new vscode_jsonrpc_1.ProgressType();
      function is(value) {
        return value === WorkDoneProgress2.type;
      }
      WorkDoneProgress2.is = is;
    })(WorkDoneProgress || (exports2.WorkDoneProgress = WorkDoneProgress = {}));
    var WorkDoneProgressCreateRequest;
    (function(WorkDoneProgressCreateRequest2) {
      WorkDoneProgressCreateRequest2.method = "window/workDoneProgress/create";
      WorkDoneProgressCreateRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      WorkDoneProgressCreateRequest2.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest2.method);
    })(WorkDoneProgressCreateRequest || (exports2.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
    var WorkDoneProgressCancelNotification;
    (function(WorkDoneProgressCancelNotification2) {
      WorkDoneProgressCancelNotification2.method = "window/workDoneProgress/cancel";
      WorkDoneProgressCancelNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkDoneProgressCancelNotification2.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification2.method);
    })(WorkDoneProgressCancelNotification || (exports2.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js
var require_protocol_callHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallHierarchyOutgoingCallsRequest = exports2.CallHierarchyIncomingCallsRequest = exports2.CallHierarchyPrepareRequest = void 0;
    var messages_1 = require_messages2();
    var CallHierarchyPrepareRequest;
    (function(CallHierarchyPrepareRequest2) {
      CallHierarchyPrepareRequest2.method = "textDocument/prepareCallHierarchy";
      CallHierarchyPrepareRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest2.method);
    })(CallHierarchyPrepareRequest || (exports2.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
    var CallHierarchyIncomingCallsRequest;
    (function(CallHierarchyIncomingCallsRequest2) {
      CallHierarchyIncomingCallsRequest2.method = "callHierarchy/incomingCalls";
      CallHierarchyIncomingCallsRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyIncomingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest2.method);
    })(CallHierarchyIncomingCallsRequest || (exports2.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
    var CallHierarchyOutgoingCallsRequest;
    (function(CallHierarchyOutgoingCallsRequest2) {
      CallHierarchyOutgoingCallsRequest2.method = "callHierarchy/outgoingCalls";
      CallHierarchyOutgoingCallsRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CallHierarchyOutgoingCallsRequest2.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest2.method);
    })(CallHierarchyOutgoingCallsRequest || (exports2.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js
var require_protocol_semanticTokens = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SemanticTokensRefreshRequest = exports2.SemanticTokensRangeRequest = exports2.SemanticTokensDeltaRequest = exports2.SemanticTokensRequest = exports2.SemanticTokensRegistrationType = exports2.TokenFormat = void 0;
    var messages_1 = require_messages2();
    var TokenFormat;
    (function(TokenFormat2) {
      TokenFormat2.Relative = "relative";
    })(TokenFormat || (exports2.TokenFormat = TokenFormat = {}));
    var SemanticTokensRegistrationType;
    (function(SemanticTokensRegistrationType2) {
      SemanticTokensRegistrationType2.method = "textDocument/semanticTokens";
      SemanticTokensRegistrationType2.type = new messages_1.RegistrationType(SemanticTokensRegistrationType2.method);
    })(SemanticTokensRegistrationType || (exports2.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
    var SemanticTokensRequest;
    (function(SemanticTokensRequest2) {
      SemanticTokensRequest2.method = "textDocument/semanticTokens/full";
      SemanticTokensRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRequest2.method);
      SemanticTokensRequest2.registrationMethod = SemanticTokensRegistrationType.method;
    })(SemanticTokensRequest || (exports2.SemanticTokensRequest = SemanticTokensRequest = {}));
    var SemanticTokensDeltaRequest;
    (function(SemanticTokensDeltaRequest2) {
      SemanticTokensDeltaRequest2.method = "textDocument/semanticTokens/full/delta";
      SemanticTokensDeltaRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensDeltaRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest2.method);
      SemanticTokensDeltaRequest2.registrationMethod = SemanticTokensRegistrationType.method;
    })(SemanticTokensDeltaRequest || (exports2.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
    var SemanticTokensRangeRequest;
    (function(SemanticTokensRangeRequest2) {
      SemanticTokensRangeRequest2.method = "textDocument/semanticTokens/range";
      SemanticTokensRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      SemanticTokensRangeRequest2.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest2.method);
      SemanticTokensRangeRequest2.registrationMethod = SemanticTokensRegistrationType.method;
    })(SemanticTokensRangeRequest || (exports2.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
    var SemanticTokensRefreshRequest;
    (function(SemanticTokensRefreshRequest2) {
      SemanticTokensRefreshRequest2.method = `workspace/semanticTokens/refresh`;
      SemanticTokensRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      SemanticTokensRefreshRequest2.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest2.method);
    })(SemanticTokensRefreshRequest || (exports2.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js
var require_protocol_showDocument = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ShowDocumentRequest = void 0;
    var messages_1 = require_messages2();
    var ShowDocumentRequest;
    (function(ShowDocumentRequest2) {
      ShowDocumentRequest2.method = "window/showDocument";
      ShowDocumentRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowDocumentRequest2.type = new messages_1.ProtocolRequestType(ShowDocumentRequest2.method);
    })(ShowDocumentRequest || (exports2.ShowDocumentRequest = ShowDocumentRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js
var require_protocol_linkedEditingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LinkedEditingRangeRequest = void 0;
    var messages_1 = require_messages2();
    var LinkedEditingRangeRequest;
    (function(LinkedEditingRangeRequest2) {
      LinkedEditingRangeRequest2.method = "textDocument/linkedEditingRange";
      LinkedEditingRangeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      LinkedEditingRangeRequest2.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest2.method);
    })(LinkedEditingRangeRequest || (exports2.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js
var require_protocol_fileOperations = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WillDeleteFilesRequest = exports2.DidDeleteFilesNotification = exports2.DidRenameFilesNotification = exports2.WillRenameFilesRequest = exports2.DidCreateFilesNotification = exports2.WillCreateFilesRequest = exports2.FileOperationPatternKind = void 0;
    var messages_1 = require_messages2();
    var FileOperationPatternKind;
    (function(FileOperationPatternKind2) {
      FileOperationPatternKind2.file = "file";
      FileOperationPatternKind2.folder = "folder";
    })(FileOperationPatternKind || (exports2.FileOperationPatternKind = FileOperationPatternKind = {}));
    var WillCreateFilesRequest;
    (function(WillCreateFilesRequest2) {
      WillCreateFilesRequest2.method = "workspace/willCreateFiles";
      WillCreateFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WillCreateFilesRequest2.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest2.method);
    })(WillCreateFilesRequest || (exports2.WillCreateFilesRequest = WillCreateFilesRequest = {}));
    var DidCreateFilesNotification;
    (function(DidCreateFilesNotification2) {
      DidCreateFilesNotification2.method = "workspace/didCreateFiles";
      DidCreateFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCreateFilesNotification2.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification2.method);
    })(DidCreateFilesNotification || (exports2.DidCreateFilesNotification = DidCreateFilesNotification = {}));
    var WillRenameFilesRequest;
    (function(WillRenameFilesRequest2) {
      WillRenameFilesRequest2.method = "workspace/willRenameFiles";
      WillRenameFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WillRenameFilesRequest2.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest2.method);
    })(WillRenameFilesRequest || (exports2.WillRenameFilesRequest = WillRenameFilesRequest = {}));
    var DidRenameFilesNotification;
    (function(DidRenameFilesNotification2) {
      DidRenameFilesNotification2.method = "workspace/didRenameFiles";
      DidRenameFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidRenameFilesNotification2.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification2.method);
    })(DidRenameFilesNotification || (exports2.DidRenameFilesNotification = DidRenameFilesNotification = {}));
    var DidDeleteFilesNotification;
    (function(DidDeleteFilesNotification2) {
      DidDeleteFilesNotification2.method = "workspace/didDeleteFiles";
      DidDeleteFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidDeleteFilesNotification2.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification2.method);
    })(DidDeleteFilesNotification || (exports2.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
    var WillDeleteFilesRequest;
    (function(WillDeleteFilesRequest2) {
      WillDeleteFilesRequest2.method = "workspace/willDeleteFiles";
      WillDeleteFilesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WillDeleteFilesRequest2.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest2.method);
    })(WillDeleteFilesRequest || (exports2.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js
var require_protocol_moniker = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MonikerRequest = exports2.MonikerKind = exports2.UniquenessLevel = void 0;
    var messages_1 = require_messages2();
    var UniquenessLevel;
    (function(UniquenessLevel2) {
      UniquenessLevel2.document = "document";
      UniquenessLevel2.project = "project";
      UniquenessLevel2.group = "group";
      UniquenessLevel2.scheme = "scheme";
      UniquenessLevel2.global = "global";
    })(UniquenessLevel || (exports2.UniquenessLevel = UniquenessLevel = {}));
    var MonikerKind;
    (function(MonikerKind2) {
      MonikerKind2.$import = "import";
      MonikerKind2.$export = "export";
      MonikerKind2.local = "local";
    })(MonikerKind || (exports2.MonikerKind = MonikerKind = {}));
    var MonikerRequest;
    (function(MonikerRequest2) {
      MonikerRequest2.method = "textDocument/moniker";
      MonikerRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      MonikerRequest2.type = new messages_1.ProtocolRequestType(MonikerRequest2.method);
    })(MonikerRequest || (exports2.MonikerRequest = MonikerRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js
var require_protocol_typeHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeHierarchySubtypesRequest = exports2.TypeHierarchySupertypesRequest = exports2.TypeHierarchyPrepareRequest = void 0;
    var messages_1 = require_messages2();
    var TypeHierarchyPrepareRequest;
    (function(TypeHierarchyPrepareRequest2) {
      TypeHierarchyPrepareRequest2.method = "textDocument/prepareTypeHierarchy";
      TypeHierarchyPrepareRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchyPrepareRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest2.method);
    })(TypeHierarchyPrepareRequest || (exports2.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
    var TypeHierarchySupertypesRequest;
    (function(TypeHierarchySupertypesRequest2) {
      TypeHierarchySupertypesRequest2.method = "typeHierarchy/supertypes";
      TypeHierarchySupertypesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchySupertypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest2.method);
    })(TypeHierarchySupertypesRequest || (exports2.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
    var TypeHierarchySubtypesRequest;
    (function(TypeHierarchySubtypesRequest2) {
      TypeHierarchySubtypesRequest2.method = "typeHierarchy/subtypes";
      TypeHierarchySubtypesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      TypeHierarchySubtypesRequest2.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest2.method);
    })(TypeHierarchySubtypesRequest || (exports2.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js
var require_protocol_inlineValue = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlineValueRefreshRequest = exports2.InlineValueRequest = void 0;
    var messages_1 = require_messages2();
    var InlineValueRequest;
    (function(InlineValueRequest2) {
      InlineValueRequest2.method = "textDocument/inlineValue";
      InlineValueRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      InlineValueRequest2.type = new messages_1.ProtocolRequestType(InlineValueRequest2.method);
    })(InlineValueRequest || (exports2.InlineValueRequest = InlineValueRequest = {}));
    var InlineValueRefreshRequest;
    (function(InlineValueRefreshRequest2) {
      InlineValueRefreshRequest2.method = `workspace/inlineValue/refresh`;
      InlineValueRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      InlineValueRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest2.method);
    })(InlineValueRefreshRequest || (exports2.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js
var require_protocol_inlayHint = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlayHintRefreshRequest = exports2.InlayHintResolveRequest = exports2.InlayHintRequest = void 0;
    var messages_1 = require_messages2();
    var InlayHintRequest;
    (function(InlayHintRequest2) {
      InlayHintRequest2.method = "textDocument/inlayHint";
      InlayHintRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      InlayHintRequest2.type = new messages_1.ProtocolRequestType(InlayHintRequest2.method);
    })(InlayHintRequest || (exports2.InlayHintRequest = InlayHintRequest = {}));
    var InlayHintResolveRequest;
    (function(InlayHintResolveRequest2) {
      InlayHintResolveRequest2.method = "inlayHint/resolve";
      InlayHintResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      InlayHintResolveRequest2.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest2.method);
    })(InlayHintResolveRequest || (exports2.InlayHintResolveRequest = InlayHintResolveRequest = {}));
    var InlayHintRefreshRequest;
    (function(InlayHintRefreshRequest2) {
      InlayHintRefreshRequest2.method = `workspace/inlayHint/refresh`;
      InlayHintRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      InlayHintRefreshRequest2.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest2.method);
    })(InlayHintRefreshRequest || (exports2.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js
var require_protocol_diagnostic = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DiagnosticRefreshRequest = exports2.WorkspaceDiagnosticRequest = exports2.DocumentDiagnosticRequest = exports2.DocumentDiagnosticReportKind = exports2.DiagnosticServerCancellationData = void 0;
    var vscode_jsonrpc_1 = require_main();
    var Is = require_is3();
    var messages_1 = require_messages2();
    var DiagnosticServerCancellationData;
    (function(DiagnosticServerCancellationData2) {
      function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
      }
      DiagnosticServerCancellationData2.is = is;
    })(DiagnosticServerCancellationData || (exports2.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
    var DocumentDiagnosticReportKind;
    (function(DocumentDiagnosticReportKind2) {
      DocumentDiagnosticReportKind2.Full = "full";
      DocumentDiagnosticReportKind2.Unchanged = "unchanged";
    })(DocumentDiagnosticReportKind || (exports2.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
    var DocumentDiagnosticRequest;
    (function(DocumentDiagnosticRequest2) {
      DocumentDiagnosticRequest2.method = "textDocument/diagnostic";
      DocumentDiagnosticRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentDiagnosticRequest2.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest2.method);
      DocumentDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(DocumentDiagnosticRequest || (exports2.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
    var WorkspaceDiagnosticRequest;
    (function(WorkspaceDiagnosticRequest2) {
      WorkspaceDiagnosticRequest2.method = "workspace/diagnostic";
      WorkspaceDiagnosticRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceDiagnosticRequest2.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest2.method);
      WorkspaceDiagnosticRequest2.partialResult = new vscode_jsonrpc_1.ProgressType();
    })(WorkspaceDiagnosticRequest || (exports2.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
    var DiagnosticRefreshRequest;
    (function(DiagnosticRefreshRequest2) {
      DiagnosticRefreshRequest2.method = `workspace/diagnostic/refresh`;
      DiagnosticRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      DiagnosticRefreshRequest2.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest2.method);
    })(DiagnosticRefreshRequest || (exports2.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js
var require_protocol_notebook = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DidCloseNotebookDocumentNotification = exports2.DidSaveNotebookDocumentNotification = exports2.DidChangeNotebookDocumentNotification = exports2.NotebookCellArrayChange = exports2.DidOpenNotebookDocumentNotification = exports2.NotebookDocumentSyncRegistrationType = exports2.NotebookDocument = exports2.NotebookCell = exports2.ExecutionSummary = exports2.NotebookCellKind = void 0;
    var vscode_languageserver_types_1 = require_main2();
    var Is = require_is3();
    var messages_1 = require_messages2();
    var NotebookCellKind;
    (function(NotebookCellKind2) {
      NotebookCellKind2.Markup = 1;
      NotebookCellKind2.Code = 2;
      function is(value) {
        return value === 1 || value === 2;
      }
      NotebookCellKind2.is = is;
    })(NotebookCellKind || (exports2.NotebookCellKind = NotebookCellKind = {}));
    var ExecutionSummary;
    (function(ExecutionSummary2) {
      function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
          result.success = success;
        }
        return result;
      }
      ExecutionSummary2.create = create;
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === void 0 || Is.boolean(candidate.success));
      }
      ExecutionSummary2.is = is;
      function equals(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
      }
      ExecutionSummary2.equals = equals;
    })(ExecutionSummary || (exports2.ExecutionSummary = ExecutionSummary = {}));
    var NotebookCell;
    (function(NotebookCell2) {
      function create(kind, document) {
        return { kind, document };
      }
      NotebookCell2.create = create;
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) && (candidate.metadata === void 0 || Is.objectLiteral(candidate.metadata));
      }
      NotebookCell2.is = is;
      function diff(one, two) {
        const result = /* @__PURE__ */ new Set();
        if (one.document !== two.document) {
          result.add("document");
        }
        if (one.kind !== two.kind) {
          result.add("kind");
        }
        if (one.executionSummary !== two.executionSummary) {
          result.add("executionSummary");
        }
        if ((one.metadata !== void 0 || two.metadata !== void 0) && !equalsMetadata(one.metadata, two.metadata)) {
          result.add("metadata");
        }
        if ((one.executionSummary !== void 0 || two.executionSummary !== void 0) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
          result.add("executionSummary");
        }
        return result;
      }
      NotebookCell2.diff = diff;
      function equalsMetadata(one, other) {
        if (one === other) {
          return true;
        }
        if (one === null || one === void 0 || other === null || other === void 0) {
          return false;
        }
        if (typeof one !== typeof other) {
          return false;
        }
        if (typeof one !== "object") {
          return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
          return false;
        }
        if (oneArray && otherArray) {
          if (one.length !== other.length) {
            return false;
          }
          for (let i = 0; i < one.length; i++) {
            if (!equalsMetadata(one[i], other[i])) {
              return false;
            }
          }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
          const oneKeys = Object.keys(one);
          const otherKeys = Object.keys(other);
          if (oneKeys.length !== otherKeys.length) {
            return false;
          }
          oneKeys.sort();
          otherKeys.sort();
          if (!equalsMetadata(oneKeys, otherKeys)) {
            return false;
          }
          for (let i = 0; i < oneKeys.length; i++) {
            const prop = oneKeys[i];
            if (!equalsMetadata(one[prop], other[prop])) {
              return false;
            }
          }
        }
        return true;
      }
    })(NotebookCell || (exports2.NotebookCell = NotebookCell = {}));
    var NotebookDocument;
    (function(NotebookDocument2) {
      function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
      }
      NotebookDocument2.create = create;
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
      }
      NotebookDocument2.is = is;
    })(NotebookDocument || (exports2.NotebookDocument = NotebookDocument = {}));
    var NotebookDocumentSyncRegistrationType;
    (function(NotebookDocumentSyncRegistrationType2) {
      NotebookDocumentSyncRegistrationType2.method = "notebookDocument/sync";
      NotebookDocumentSyncRegistrationType2.messageDirection = messages_1.MessageDirection.clientToServer;
      NotebookDocumentSyncRegistrationType2.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType2.method);
    })(NotebookDocumentSyncRegistrationType || (exports2.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
    var DidOpenNotebookDocumentNotification;
    (function(DidOpenNotebookDocumentNotification2) {
      DidOpenNotebookDocumentNotification2.method = "notebookDocument/didOpen";
      DidOpenNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidOpenNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification2.method);
      DidOpenNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(DidOpenNotebookDocumentNotification || (exports2.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
    var NotebookCellArrayChange;
    (function(NotebookCellArrayChange2) {
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === void 0 || Is.typedArray(candidate.cells, NotebookCell.is));
      }
      NotebookCellArrayChange2.is = is;
      function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== void 0) {
          result.cells = cells;
        }
        return result;
      }
      NotebookCellArrayChange2.create = create;
    })(NotebookCellArrayChange || (exports2.NotebookCellArrayChange = NotebookCellArrayChange = {}));
    var DidChangeNotebookDocumentNotification;
    (function(DidChangeNotebookDocumentNotification2) {
      DidChangeNotebookDocumentNotification2.method = "notebookDocument/didChange";
      DidChangeNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification2.method);
      DidChangeNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(DidChangeNotebookDocumentNotification || (exports2.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
    var DidSaveNotebookDocumentNotification;
    (function(DidSaveNotebookDocumentNotification2) {
      DidSaveNotebookDocumentNotification2.method = "notebookDocument/didSave";
      DidSaveNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidSaveNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification2.method);
      DidSaveNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(DidSaveNotebookDocumentNotification || (exports2.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
    var DidCloseNotebookDocumentNotification;
    (function(DidCloseNotebookDocumentNotification2) {
      DidCloseNotebookDocumentNotification2.method = "notebookDocument/didClose";
      DidCloseNotebookDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCloseNotebookDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification2.method);
      DidCloseNotebookDocumentNotification2.registrationMethod = NotebookDocumentSyncRegistrationType.method;
    })(DidCloseNotebookDocumentNotification || (exports2.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js
var require_protocol_inlineCompletion = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlineCompletionRequest = void 0;
    var messages_1 = require_messages2();
    var InlineCompletionRequest;
    (function(InlineCompletionRequest2) {
      InlineCompletionRequest2.method = "textDocument/inlineCompletion";
      InlineCompletionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      InlineCompletionRequest2.type = new messages_1.ProtocolRequestType(InlineCompletionRequest2.method);
    })(InlineCompletionRequest || (exports2.InlineCompletionRequest = InlineCompletionRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.js
var require_protocol = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/protocol.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkspaceSymbolRequest = exports2.CodeActionResolveRequest = exports2.CodeActionRequest = exports2.DocumentSymbolRequest = exports2.DocumentHighlightRequest = exports2.ReferencesRequest = exports2.DefinitionRequest = exports2.SignatureHelpRequest = exports2.SignatureHelpTriggerKind = exports2.HoverRequest = exports2.CompletionResolveRequest = exports2.CompletionRequest = exports2.CompletionTriggerKind = exports2.PublishDiagnosticsNotification = exports2.WatchKind = exports2.RelativePattern = exports2.FileChangeType = exports2.DidChangeWatchedFilesNotification = exports2.WillSaveTextDocumentWaitUntilRequest = exports2.WillSaveTextDocumentNotification = exports2.TextDocumentSaveReason = exports2.DidSaveTextDocumentNotification = exports2.DidCloseTextDocumentNotification = exports2.DidChangeTextDocumentNotification = exports2.TextDocumentContentChangeEvent = exports2.DidOpenTextDocumentNotification = exports2.TextDocumentSyncKind = exports2.TelemetryEventNotification = exports2.LogMessageNotification = exports2.ShowMessageRequest = exports2.ShowMessageNotification = exports2.MessageType = exports2.DidChangeConfigurationNotification = exports2.ExitNotification = exports2.ShutdownRequest = exports2.InitializedNotification = exports2.InitializeErrorCodes = exports2.InitializeRequest = exports2.WorkDoneProgressOptions = exports2.TextDocumentRegistrationOptions = exports2.StaticRegistrationOptions = exports2.PositionEncodingKind = exports2.FailureHandlingKind = exports2.ResourceOperationKind = exports2.UnregistrationRequest = exports2.RegistrationRequest = exports2.DocumentSelector = exports2.NotebookCellTextDocumentFilter = exports2.NotebookDocumentFilter = exports2.TextDocumentFilter = void 0;
    exports2.MonikerRequest = exports2.MonikerKind = exports2.UniquenessLevel = exports2.WillDeleteFilesRequest = exports2.DidDeleteFilesNotification = exports2.WillRenameFilesRequest = exports2.DidRenameFilesNotification = exports2.WillCreateFilesRequest = exports2.DidCreateFilesNotification = exports2.FileOperationPatternKind = exports2.LinkedEditingRangeRequest = exports2.ShowDocumentRequest = exports2.SemanticTokensRegistrationType = exports2.SemanticTokensRefreshRequest = exports2.SemanticTokensRangeRequest = exports2.SemanticTokensDeltaRequest = exports2.SemanticTokensRequest = exports2.TokenFormat = exports2.CallHierarchyPrepareRequest = exports2.CallHierarchyOutgoingCallsRequest = exports2.CallHierarchyIncomingCallsRequest = exports2.WorkDoneProgressCancelNotification = exports2.WorkDoneProgressCreateRequest = exports2.WorkDoneProgress = exports2.SelectionRangeRequest = exports2.DeclarationRequest = exports2.FoldingRangeRefreshRequest = exports2.FoldingRangeRequest = exports2.ColorPresentationRequest = exports2.DocumentColorRequest = exports2.ConfigurationRequest = exports2.DidChangeWorkspaceFoldersNotification = exports2.WorkspaceFoldersRequest = exports2.TypeDefinitionRequest = exports2.ImplementationRequest = exports2.ApplyWorkspaceEditRequest = exports2.ExecuteCommandRequest = exports2.PrepareRenameRequest = exports2.RenameRequest = exports2.PrepareSupportDefaultBehavior = exports2.DocumentOnTypeFormattingRequest = exports2.DocumentRangesFormattingRequest = exports2.DocumentRangeFormattingRequest = exports2.DocumentFormattingRequest = exports2.DocumentLinkResolveRequest = exports2.DocumentLinkRequest = exports2.CodeLensRefreshRequest = exports2.CodeLensResolveRequest = exports2.CodeLensRequest = exports2.WorkspaceSymbolResolveRequest = void 0;
    exports2.InlineCompletionRequest = exports2.DidCloseNotebookDocumentNotification = exports2.DidSaveNotebookDocumentNotification = exports2.DidChangeNotebookDocumentNotification = exports2.NotebookCellArrayChange = exports2.DidOpenNotebookDocumentNotification = exports2.NotebookDocumentSyncRegistrationType = exports2.NotebookDocument = exports2.NotebookCell = exports2.ExecutionSummary = exports2.NotebookCellKind = exports2.DiagnosticRefreshRequest = exports2.WorkspaceDiagnosticRequest = exports2.DocumentDiagnosticRequest = exports2.DocumentDiagnosticReportKind = exports2.DiagnosticServerCancellationData = exports2.InlayHintRefreshRequest = exports2.InlayHintResolveRequest = exports2.InlayHintRequest = exports2.InlineValueRefreshRequest = exports2.InlineValueRequest = exports2.TypeHierarchySupertypesRequest = exports2.TypeHierarchySubtypesRequest = exports2.TypeHierarchyPrepareRequest = void 0;
    var messages_1 = require_messages2();
    var vscode_languageserver_types_1 = require_main2();
    var Is = require_is3();
    var protocol_implementation_1 = require_protocol_implementation();
    Object.defineProperty(exports2, "ImplementationRequest", { enumerable: true, get: function() {
      return protocol_implementation_1.ImplementationRequest;
    } });
    var protocol_typeDefinition_1 = require_protocol_typeDefinition();
    Object.defineProperty(exports2, "TypeDefinitionRequest", { enumerable: true, get: function() {
      return protocol_typeDefinition_1.TypeDefinitionRequest;
    } });
    var protocol_workspaceFolder_1 = require_protocol_workspaceFolder();
    Object.defineProperty(exports2, "WorkspaceFoldersRequest", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.WorkspaceFoldersRequest;
    } });
    Object.defineProperty(exports2, "DidChangeWorkspaceFoldersNotification", { enumerable: true, get: function() {
      return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification;
    } });
    var protocol_configuration_1 = require_protocol_configuration();
    Object.defineProperty(exports2, "ConfigurationRequest", { enumerable: true, get: function() {
      return protocol_configuration_1.ConfigurationRequest;
    } });
    var protocol_colorProvider_1 = require_protocol_colorProvider();
    Object.defineProperty(exports2, "DocumentColorRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.DocumentColorRequest;
    } });
    Object.defineProperty(exports2, "ColorPresentationRequest", { enumerable: true, get: function() {
      return protocol_colorProvider_1.ColorPresentationRequest;
    } });
    var protocol_foldingRange_1 = require_protocol_foldingRange();
    Object.defineProperty(exports2, "FoldingRangeRequest", { enumerable: true, get: function() {
      return protocol_foldingRange_1.FoldingRangeRequest;
    } });
    Object.defineProperty(exports2, "FoldingRangeRefreshRequest", { enumerable: true, get: function() {
      return protocol_foldingRange_1.FoldingRangeRefreshRequest;
    } });
    var protocol_declaration_1 = require_protocol_declaration();
    Object.defineProperty(exports2, "DeclarationRequest", { enumerable: true, get: function() {
      return protocol_declaration_1.DeclarationRequest;
    } });
    var protocol_selectionRange_1 = require_protocol_selectionRange();
    Object.defineProperty(exports2, "SelectionRangeRequest", { enumerable: true, get: function() {
      return protocol_selectionRange_1.SelectionRangeRequest;
    } });
    var protocol_progress_1 = require_protocol_progress();
    Object.defineProperty(exports2, "WorkDoneProgress", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgress;
    } });
    Object.defineProperty(exports2, "WorkDoneProgressCreateRequest", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCreateRequest;
    } });
    Object.defineProperty(exports2, "WorkDoneProgressCancelNotification", { enumerable: true, get: function() {
      return protocol_progress_1.WorkDoneProgressCancelNotification;
    } });
    var protocol_callHierarchy_1 = require_protocol_callHierarchy();
    Object.defineProperty(exports2, "CallHierarchyIncomingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest;
    } });
    Object.defineProperty(exports2, "CallHierarchyOutgoingCallsRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest;
    } });
    Object.defineProperty(exports2, "CallHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_callHierarchy_1.CallHierarchyPrepareRequest;
    } });
    var protocol_semanticTokens_1 = require_protocol_semanticTokens();
    Object.defineProperty(exports2, "TokenFormat", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.TokenFormat;
    } });
    Object.defineProperty(exports2, "SemanticTokensRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensDeltaRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensDeltaRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRangeRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRangeRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRefreshRequest", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRefreshRequest;
    } });
    Object.defineProperty(exports2, "SemanticTokensRegistrationType", { enumerable: true, get: function() {
      return protocol_semanticTokens_1.SemanticTokensRegistrationType;
    } });
    var protocol_showDocument_1 = require_protocol_showDocument();
    Object.defineProperty(exports2, "ShowDocumentRequest", { enumerable: true, get: function() {
      return protocol_showDocument_1.ShowDocumentRequest;
    } });
    var protocol_linkedEditingRange_1 = require_protocol_linkedEditingRange();
    Object.defineProperty(exports2, "LinkedEditingRangeRequest", { enumerable: true, get: function() {
      return protocol_linkedEditingRange_1.LinkedEditingRangeRequest;
    } });
    var protocol_fileOperations_1 = require_protocol_fileOperations();
    Object.defineProperty(exports2, "FileOperationPatternKind", { enumerable: true, get: function() {
      return protocol_fileOperations_1.FileOperationPatternKind;
    } });
    Object.defineProperty(exports2, "DidCreateFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidCreateFilesNotification;
    } });
    Object.defineProperty(exports2, "WillCreateFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillCreateFilesRequest;
    } });
    Object.defineProperty(exports2, "DidRenameFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidRenameFilesNotification;
    } });
    Object.defineProperty(exports2, "WillRenameFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillRenameFilesRequest;
    } });
    Object.defineProperty(exports2, "DidDeleteFilesNotification", { enumerable: true, get: function() {
      return protocol_fileOperations_1.DidDeleteFilesNotification;
    } });
    Object.defineProperty(exports2, "WillDeleteFilesRequest", { enumerable: true, get: function() {
      return protocol_fileOperations_1.WillDeleteFilesRequest;
    } });
    var protocol_moniker_1 = require_protocol_moniker();
    Object.defineProperty(exports2, "UniquenessLevel", { enumerable: true, get: function() {
      return protocol_moniker_1.UniquenessLevel;
    } });
    Object.defineProperty(exports2, "MonikerKind", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerKind;
    } });
    Object.defineProperty(exports2, "MonikerRequest", { enumerable: true, get: function() {
      return protocol_moniker_1.MonikerRequest;
    } });
    var protocol_typeHierarchy_1 = require_protocol_typeHierarchy();
    Object.defineProperty(exports2, "TypeHierarchyPrepareRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest;
    } });
    Object.defineProperty(exports2, "TypeHierarchySubtypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest;
    } });
    Object.defineProperty(exports2, "TypeHierarchySupertypesRequest", { enumerable: true, get: function() {
      return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest;
    } });
    var protocol_inlineValue_1 = require_protocol_inlineValue();
    Object.defineProperty(exports2, "InlineValueRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRequest;
    } });
    Object.defineProperty(exports2, "InlineValueRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlineValue_1.InlineValueRefreshRequest;
    } });
    var protocol_inlayHint_1 = require_protocol_inlayHint();
    Object.defineProperty(exports2, "InlayHintRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRequest;
    } });
    Object.defineProperty(exports2, "InlayHintResolveRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintResolveRequest;
    } });
    Object.defineProperty(exports2, "InlayHintRefreshRequest", { enumerable: true, get: function() {
      return protocol_inlayHint_1.InlayHintRefreshRequest;
    } });
    var protocol_diagnostic_1 = require_protocol_diagnostic();
    Object.defineProperty(exports2, "DiagnosticServerCancellationData", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DiagnosticServerCancellationData;
    } });
    Object.defineProperty(exports2, "DocumentDiagnosticReportKind", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DocumentDiagnosticReportKind;
    } });
    Object.defineProperty(exports2, "DocumentDiagnosticRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DocumentDiagnosticRequest;
    } });
    Object.defineProperty(exports2, "WorkspaceDiagnosticRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.WorkspaceDiagnosticRequest;
    } });
    Object.defineProperty(exports2, "DiagnosticRefreshRequest", { enumerable: true, get: function() {
      return protocol_diagnostic_1.DiagnosticRefreshRequest;
    } });
    var protocol_notebook_1 = require_protocol_notebook();
    Object.defineProperty(exports2, "NotebookCellKind", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCellKind;
    } });
    Object.defineProperty(exports2, "ExecutionSummary", { enumerable: true, get: function() {
      return protocol_notebook_1.ExecutionSummary;
    } });
    Object.defineProperty(exports2, "NotebookCell", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCell;
    } });
    Object.defineProperty(exports2, "NotebookDocument", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookDocument;
    } });
    Object.defineProperty(exports2, "NotebookDocumentSyncRegistrationType", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookDocumentSyncRegistrationType;
    } });
    Object.defineProperty(exports2, "DidOpenNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidOpenNotebookDocumentNotification;
    } });
    Object.defineProperty(exports2, "NotebookCellArrayChange", { enumerable: true, get: function() {
      return protocol_notebook_1.NotebookCellArrayChange;
    } });
    Object.defineProperty(exports2, "DidChangeNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidChangeNotebookDocumentNotification;
    } });
    Object.defineProperty(exports2, "DidSaveNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidSaveNotebookDocumentNotification;
    } });
    Object.defineProperty(exports2, "DidCloseNotebookDocumentNotification", { enumerable: true, get: function() {
      return protocol_notebook_1.DidCloseNotebookDocumentNotification;
    } });
    var protocol_inlineCompletion_1 = require_protocol_inlineCompletion();
    Object.defineProperty(exports2, "InlineCompletionRequest", { enumerable: true, get: function() {
      return protocol_inlineCompletion_1.InlineCompletionRequest;
    } });
    var TextDocumentFilter;
    (function(TextDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
      }
      TextDocumentFilter2.is = is;
    })(TextDocumentFilter || (exports2.TextDocumentFilter = TextDocumentFilter = {}));
    var NotebookDocumentFilter;
    (function(NotebookDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
      }
      NotebookDocumentFilter2.is = is;
    })(NotebookDocumentFilter || (exports2.NotebookDocumentFilter = NotebookDocumentFilter = {}));
    var NotebookCellTextDocumentFilter;
    (function(NotebookCellTextDocumentFilter2) {
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook)) && (candidate.language === void 0 || Is.string(candidate.language));
      }
      NotebookCellTextDocumentFilter2.is = is;
    })(NotebookCellTextDocumentFilter || (exports2.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
    var DocumentSelector;
    (function(DocumentSelector2) {
      function is(value) {
        if (!Array.isArray(value)) {
          return false;
        }
        for (let elem of value) {
          if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
            return false;
          }
        }
        return true;
      }
      DocumentSelector2.is = is;
    })(DocumentSelector || (exports2.DocumentSelector = DocumentSelector = {}));
    var RegistrationRequest;
    (function(RegistrationRequest2) {
      RegistrationRequest2.method = "client/registerCapability";
      RegistrationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      RegistrationRequest2.type = new messages_1.ProtocolRequestType(RegistrationRequest2.method);
    })(RegistrationRequest || (exports2.RegistrationRequest = RegistrationRequest = {}));
    var UnregistrationRequest;
    (function(UnregistrationRequest2) {
      UnregistrationRequest2.method = "client/unregisterCapability";
      UnregistrationRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      UnregistrationRequest2.type = new messages_1.ProtocolRequestType(UnregistrationRequest2.method);
    })(UnregistrationRequest || (exports2.UnregistrationRequest = UnregistrationRequest = {}));
    var ResourceOperationKind;
    (function(ResourceOperationKind2) {
      ResourceOperationKind2.Create = "create";
      ResourceOperationKind2.Rename = "rename";
      ResourceOperationKind2.Delete = "delete";
    })(ResourceOperationKind || (exports2.ResourceOperationKind = ResourceOperationKind = {}));
    var FailureHandlingKind;
    (function(FailureHandlingKind2) {
      FailureHandlingKind2.Abort = "abort";
      FailureHandlingKind2.Transactional = "transactional";
      FailureHandlingKind2.TextOnlyTransactional = "textOnlyTransactional";
      FailureHandlingKind2.Undo = "undo";
    })(FailureHandlingKind || (exports2.FailureHandlingKind = FailureHandlingKind = {}));
    var PositionEncodingKind;
    (function(PositionEncodingKind2) {
      PositionEncodingKind2.UTF8 = "utf-8";
      PositionEncodingKind2.UTF16 = "utf-16";
      PositionEncodingKind2.UTF32 = "utf-32";
    })(PositionEncodingKind || (exports2.PositionEncodingKind = PositionEncodingKind = {}));
    var StaticRegistrationOptions;
    (function(StaticRegistrationOptions2) {
      function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
      }
      StaticRegistrationOptions2.hasId = hasId;
    })(StaticRegistrationOptions || (exports2.StaticRegistrationOptions = StaticRegistrationOptions = {}));
    var TextDocumentRegistrationOptions;
    (function(TextDocumentRegistrationOptions2) {
      function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
      }
      TextDocumentRegistrationOptions2.is = is;
    })(TextDocumentRegistrationOptions || (exports2.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
    var WorkDoneProgressOptions;
    (function(WorkDoneProgressOptions2) {
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === void 0 || Is.boolean(candidate.workDoneProgress));
      }
      WorkDoneProgressOptions2.is = is;
      function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
      }
      WorkDoneProgressOptions2.hasWorkDoneProgress = hasWorkDoneProgress;
    })(WorkDoneProgressOptions || (exports2.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
    var InitializeRequest;
    (function(InitializeRequest2) {
      InitializeRequest2.method = "initialize";
      InitializeRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      InitializeRequest2.type = new messages_1.ProtocolRequestType(InitializeRequest2.method);
    })(InitializeRequest || (exports2.InitializeRequest = InitializeRequest = {}));
    var InitializeErrorCodes;
    (function(InitializeErrorCodes2) {
      InitializeErrorCodes2.unknownProtocolVersion = 1;
    })(InitializeErrorCodes || (exports2.InitializeErrorCodes = InitializeErrorCodes = {}));
    var InitializedNotification;
    (function(InitializedNotification2) {
      InitializedNotification2.method = "initialized";
      InitializedNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      InitializedNotification2.type = new messages_1.ProtocolNotificationType(InitializedNotification2.method);
    })(InitializedNotification || (exports2.InitializedNotification = InitializedNotification = {}));
    var ShutdownRequest;
    (function(ShutdownRequest2) {
      ShutdownRequest2.method = "shutdown";
      ShutdownRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      ShutdownRequest2.type = new messages_1.ProtocolRequestType0(ShutdownRequest2.method);
    })(ShutdownRequest || (exports2.ShutdownRequest = ShutdownRequest = {}));
    var ExitNotification;
    (function(ExitNotification2) {
      ExitNotification2.method = "exit";
      ExitNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      ExitNotification2.type = new messages_1.ProtocolNotificationType0(ExitNotification2.method);
    })(ExitNotification || (exports2.ExitNotification = ExitNotification = {}));
    var DidChangeConfigurationNotification;
    (function(DidChangeConfigurationNotification2) {
      DidChangeConfigurationNotification2.method = "workspace/didChangeConfiguration";
      DidChangeConfigurationNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeConfigurationNotification2.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification2.method);
    })(DidChangeConfigurationNotification || (exports2.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
    var MessageType;
    (function(MessageType2) {
      MessageType2.Error = 1;
      MessageType2.Warning = 2;
      MessageType2.Info = 3;
      MessageType2.Log = 4;
      MessageType2.Debug = 5;
    })(MessageType || (exports2.MessageType = MessageType = {}));
    var ShowMessageNotification;
    (function(ShowMessageNotification2) {
      ShowMessageNotification2.method = "window/showMessage";
      ShowMessageNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowMessageNotification2.type = new messages_1.ProtocolNotificationType(ShowMessageNotification2.method);
    })(ShowMessageNotification || (exports2.ShowMessageNotification = ShowMessageNotification = {}));
    var ShowMessageRequest;
    (function(ShowMessageRequest2) {
      ShowMessageRequest2.method = "window/showMessageRequest";
      ShowMessageRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      ShowMessageRequest2.type = new messages_1.ProtocolRequestType(ShowMessageRequest2.method);
    })(ShowMessageRequest || (exports2.ShowMessageRequest = ShowMessageRequest = {}));
    var LogMessageNotification;
    (function(LogMessageNotification2) {
      LogMessageNotification2.method = "window/logMessage";
      LogMessageNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
      LogMessageNotification2.type = new messages_1.ProtocolNotificationType(LogMessageNotification2.method);
    })(LogMessageNotification || (exports2.LogMessageNotification = LogMessageNotification = {}));
    var TelemetryEventNotification;
    (function(TelemetryEventNotification2) {
      TelemetryEventNotification2.method = "telemetry/event";
      TelemetryEventNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
      TelemetryEventNotification2.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification2.method);
    })(TelemetryEventNotification || (exports2.TelemetryEventNotification = TelemetryEventNotification = {}));
    var TextDocumentSyncKind;
    (function(TextDocumentSyncKind2) {
      TextDocumentSyncKind2.None = 0;
      TextDocumentSyncKind2.Full = 1;
      TextDocumentSyncKind2.Incremental = 2;
    })(TextDocumentSyncKind || (exports2.TextDocumentSyncKind = TextDocumentSyncKind = {}));
    var DidOpenTextDocumentNotification;
    (function(DidOpenTextDocumentNotification2) {
      DidOpenTextDocumentNotification2.method = "textDocument/didOpen";
      DidOpenTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidOpenTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification2.method);
    })(DidOpenTextDocumentNotification || (exports2.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
    var TextDocumentContentChangeEvent;
    (function(TextDocumentContentChangeEvent2) {
      function isIncremental(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
      }
      TextDocumentContentChangeEvent2.isIncremental = isIncremental;
      function isFull(event) {
        let candidate = event;
        return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
      }
      TextDocumentContentChangeEvent2.isFull = isFull;
    })(TextDocumentContentChangeEvent || (exports2.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
    var DidChangeTextDocumentNotification;
    (function(DidChangeTextDocumentNotification2) {
      DidChangeTextDocumentNotification2.method = "textDocument/didChange";
      DidChangeTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification2.method);
    })(DidChangeTextDocumentNotification || (exports2.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
    var DidCloseTextDocumentNotification;
    (function(DidCloseTextDocumentNotification2) {
      DidCloseTextDocumentNotification2.method = "textDocument/didClose";
      DidCloseTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidCloseTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification2.method);
    })(DidCloseTextDocumentNotification || (exports2.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
    var DidSaveTextDocumentNotification;
    (function(DidSaveTextDocumentNotification2) {
      DidSaveTextDocumentNotification2.method = "textDocument/didSave";
      DidSaveTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification2.method);
    })(DidSaveTextDocumentNotification || (exports2.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
    var TextDocumentSaveReason;
    (function(TextDocumentSaveReason2) {
      TextDocumentSaveReason2.Manual = 1;
      TextDocumentSaveReason2.AfterDelay = 2;
      TextDocumentSaveReason2.FocusOut = 3;
    })(TextDocumentSaveReason || (exports2.TextDocumentSaveReason = TextDocumentSaveReason = {}));
    var WillSaveTextDocumentNotification;
    (function(WillSaveTextDocumentNotification2) {
      WillSaveTextDocumentNotification2.method = "textDocument/willSave";
      WillSaveTextDocumentNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      WillSaveTextDocumentNotification2.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification2.method);
    })(WillSaveTextDocumentNotification || (exports2.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
    var WillSaveTextDocumentWaitUntilRequest;
    (function(WillSaveTextDocumentWaitUntilRequest2) {
      WillSaveTextDocumentWaitUntilRequest2.method = "textDocument/willSaveWaitUntil";
      WillSaveTextDocumentWaitUntilRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WillSaveTextDocumentWaitUntilRequest2.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest2.method);
    })(WillSaveTextDocumentWaitUntilRequest || (exports2.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
    var DidChangeWatchedFilesNotification;
    (function(DidChangeWatchedFilesNotification2) {
      DidChangeWatchedFilesNotification2.method = "workspace/didChangeWatchedFiles";
      DidChangeWatchedFilesNotification2.messageDirection = messages_1.MessageDirection.clientToServer;
      DidChangeWatchedFilesNotification2.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification2.method);
    })(DidChangeWatchedFilesNotification || (exports2.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
    var FileChangeType;
    (function(FileChangeType2) {
      FileChangeType2.Created = 1;
      FileChangeType2.Changed = 2;
      FileChangeType2.Deleted = 3;
    })(FileChangeType || (exports2.FileChangeType = FileChangeType = {}));
    var RelativePattern;
    (function(RelativePattern2) {
      function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
      }
      RelativePattern2.is = is;
    })(RelativePattern || (exports2.RelativePattern = RelativePattern = {}));
    var WatchKind;
    (function(WatchKind2) {
      WatchKind2.Create = 1;
      WatchKind2.Change = 2;
      WatchKind2.Delete = 4;
    })(WatchKind || (exports2.WatchKind = WatchKind = {}));
    var PublishDiagnosticsNotification;
    (function(PublishDiagnosticsNotification2) {
      PublishDiagnosticsNotification2.method = "textDocument/publishDiagnostics";
      PublishDiagnosticsNotification2.messageDirection = messages_1.MessageDirection.serverToClient;
      PublishDiagnosticsNotification2.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification2.method);
    })(PublishDiagnosticsNotification || (exports2.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
    var CompletionTriggerKind;
    (function(CompletionTriggerKind2) {
      CompletionTriggerKind2.Invoked = 1;
      CompletionTriggerKind2.TriggerCharacter = 2;
      CompletionTriggerKind2.TriggerForIncompleteCompletions = 3;
    })(CompletionTriggerKind || (exports2.CompletionTriggerKind = CompletionTriggerKind = {}));
    var CompletionRequest;
    (function(CompletionRequest2) {
      CompletionRequest2.method = "textDocument/completion";
      CompletionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CompletionRequest2.type = new messages_1.ProtocolRequestType(CompletionRequest2.method);
    })(CompletionRequest || (exports2.CompletionRequest = CompletionRequest = {}));
    var CompletionResolveRequest;
    (function(CompletionResolveRequest2) {
      CompletionResolveRequest2.method = "completionItem/resolve";
      CompletionResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CompletionResolveRequest2.type = new messages_1.ProtocolRequestType(CompletionResolveRequest2.method);
    })(CompletionResolveRequest || (exports2.CompletionResolveRequest = CompletionResolveRequest = {}));
    var HoverRequest;
    (function(HoverRequest2) {
      HoverRequest2.method = "textDocument/hover";
      HoverRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      HoverRequest2.type = new messages_1.ProtocolRequestType(HoverRequest2.method);
    })(HoverRequest || (exports2.HoverRequest = HoverRequest = {}));
    var SignatureHelpTriggerKind;
    (function(SignatureHelpTriggerKind2) {
      SignatureHelpTriggerKind2.Invoked = 1;
      SignatureHelpTriggerKind2.TriggerCharacter = 2;
      SignatureHelpTriggerKind2.ContentChange = 3;
    })(SignatureHelpTriggerKind || (exports2.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
    var SignatureHelpRequest;
    (function(SignatureHelpRequest2) {
      SignatureHelpRequest2.method = "textDocument/signatureHelp";
      SignatureHelpRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      SignatureHelpRequest2.type = new messages_1.ProtocolRequestType(SignatureHelpRequest2.method);
    })(SignatureHelpRequest || (exports2.SignatureHelpRequest = SignatureHelpRequest = {}));
    var DefinitionRequest;
    (function(DefinitionRequest2) {
      DefinitionRequest2.method = "textDocument/definition";
      DefinitionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DefinitionRequest2.type = new messages_1.ProtocolRequestType(DefinitionRequest2.method);
    })(DefinitionRequest || (exports2.DefinitionRequest = DefinitionRequest = {}));
    var ReferencesRequest;
    (function(ReferencesRequest2) {
      ReferencesRequest2.method = "textDocument/references";
      ReferencesRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      ReferencesRequest2.type = new messages_1.ProtocolRequestType(ReferencesRequest2.method);
    })(ReferencesRequest || (exports2.ReferencesRequest = ReferencesRequest = {}));
    var DocumentHighlightRequest;
    (function(DocumentHighlightRequest2) {
      DocumentHighlightRequest2.method = "textDocument/documentHighlight";
      DocumentHighlightRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentHighlightRequest2.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest2.method);
    })(DocumentHighlightRequest || (exports2.DocumentHighlightRequest = DocumentHighlightRequest = {}));
    var DocumentSymbolRequest;
    (function(DocumentSymbolRequest2) {
      DocumentSymbolRequest2.method = "textDocument/documentSymbol";
      DocumentSymbolRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentSymbolRequest2.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest2.method);
    })(DocumentSymbolRequest || (exports2.DocumentSymbolRequest = DocumentSymbolRequest = {}));
    var CodeActionRequest;
    (function(CodeActionRequest2) {
      CodeActionRequest2.method = "textDocument/codeAction";
      CodeActionRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeActionRequest2.type = new messages_1.ProtocolRequestType(CodeActionRequest2.method);
    })(CodeActionRequest || (exports2.CodeActionRequest = CodeActionRequest = {}));
    var CodeActionResolveRequest;
    (function(CodeActionResolveRequest2) {
      CodeActionResolveRequest2.method = "codeAction/resolve";
      CodeActionResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeActionResolveRequest2.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest2.method);
    })(CodeActionResolveRequest || (exports2.CodeActionResolveRequest = CodeActionResolveRequest = {}));
    var WorkspaceSymbolRequest;
    (function(WorkspaceSymbolRequest2) {
      WorkspaceSymbolRequest2.method = "workspace/symbol";
      WorkspaceSymbolRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceSymbolRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest2.method);
    })(WorkspaceSymbolRequest || (exports2.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
    var WorkspaceSymbolResolveRequest;
    (function(WorkspaceSymbolResolveRequest2) {
      WorkspaceSymbolResolveRequest2.method = "workspaceSymbol/resolve";
      WorkspaceSymbolResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      WorkspaceSymbolResolveRequest2.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest2.method);
    })(WorkspaceSymbolResolveRequest || (exports2.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
    var CodeLensRequest;
    (function(CodeLensRequest2) {
      CodeLensRequest2.method = "textDocument/codeLens";
      CodeLensRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeLensRequest2.type = new messages_1.ProtocolRequestType(CodeLensRequest2.method);
    })(CodeLensRequest || (exports2.CodeLensRequest = CodeLensRequest = {}));
    var CodeLensResolveRequest;
    (function(CodeLensResolveRequest2) {
      CodeLensResolveRequest2.method = "codeLens/resolve";
      CodeLensResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      CodeLensResolveRequest2.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest2.method);
    })(CodeLensResolveRequest || (exports2.CodeLensResolveRequest = CodeLensResolveRequest = {}));
    var CodeLensRefreshRequest;
    (function(CodeLensRefreshRequest2) {
      CodeLensRefreshRequest2.method = `workspace/codeLens/refresh`;
      CodeLensRefreshRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      CodeLensRefreshRequest2.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest2.method);
    })(CodeLensRefreshRequest || (exports2.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
    var DocumentLinkRequest;
    (function(DocumentLinkRequest2) {
      DocumentLinkRequest2.method = "textDocument/documentLink";
      DocumentLinkRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentLinkRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkRequest2.method);
    })(DocumentLinkRequest || (exports2.DocumentLinkRequest = DocumentLinkRequest = {}));
    var DocumentLinkResolveRequest;
    (function(DocumentLinkResolveRequest2) {
      DocumentLinkResolveRequest2.method = "documentLink/resolve";
      DocumentLinkResolveRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentLinkResolveRequest2.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest2.method);
    })(DocumentLinkResolveRequest || (exports2.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
    var DocumentFormattingRequest;
    (function(DocumentFormattingRequest2) {
      DocumentFormattingRequest2.method = "textDocument/formatting";
      DocumentFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest2.method);
    })(DocumentFormattingRequest || (exports2.DocumentFormattingRequest = DocumentFormattingRequest = {}));
    var DocumentRangeFormattingRequest;
    (function(DocumentRangeFormattingRequest2) {
      DocumentRangeFormattingRequest2.method = "textDocument/rangeFormatting";
      DocumentRangeFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentRangeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest2.method);
    })(DocumentRangeFormattingRequest || (exports2.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
    var DocumentRangesFormattingRequest;
    (function(DocumentRangesFormattingRequest2) {
      DocumentRangesFormattingRequest2.method = "textDocument/rangesFormatting";
      DocumentRangesFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentRangesFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest2.method);
    })(DocumentRangesFormattingRequest || (exports2.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
    var DocumentOnTypeFormattingRequest;
    (function(DocumentOnTypeFormattingRequest2) {
      DocumentOnTypeFormattingRequest2.method = "textDocument/onTypeFormatting";
      DocumentOnTypeFormattingRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      DocumentOnTypeFormattingRequest2.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest2.method);
    })(DocumentOnTypeFormattingRequest || (exports2.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
    var PrepareSupportDefaultBehavior;
    (function(PrepareSupportDefaultBehavior2) {
      PrepareSupportDefaultBehavior2.Identifier = 1;
    })(PrepareSupportDefaultBehavior || (exports2.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
    var RenameRequest;
    (function(RenameRequest2) {
      RenameRequest2.method = "textDocument/rename";
      RenameRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      RenameRequest2.type = new messages_1.ProtocolRequestType(RenameRequest2.method);
    })(RenameRequest || (exports2.RenameRequest = RenameRequest = {}));
    var PrepareRenameRequest;
    (function(PrepareRenameRequest2) {
      PrepareRenameRequest2.method = "textDocument/prepareRename";
      PrepareRenameRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      PrepareRenameRequest2.type = new messages_1.ProtocolRequestType(PrepareRenameRequest2.method);
    })(PrepareRenameRequest || (exports2.PrepareRenameRequest = PrepareRenameRequest = {}));
    var ExecuteCommandRequest;
    (function(ExecuteCommandRequest2) {
      ExecuteCommandRequest2.method = "workspace/executeCommand";
      ExecuteCommandRequest2.messageDirection = messages_1.MessageDirection.clientToServer;
      ExecuteCommandRequest2.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest2.method);
    })(ExecuteCommandRequest || (exports2.ExecuteCommandRequest = ExecuteCommandRequest = {}));
    var ApplyWorkspaceEditRequest;
    (function(ApplyWorkspaceEditRequest2) {
      ApplyWorkspaceEditRequest2.method = "workspace/applyEdit";
      ApplyWorkspaceEditRequest2.messageDirection = messages_1.MessageDirection.serverToClient;
      ApplyWorkspaceEditRequest2.type = new messages_1.ProtocolRequestType("workspace/applyEdit");
    })(ApplyWorkspaceEditRequest || (exports2.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/connection.js
var require_connection2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/connection.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createProtocolConnection = void 0;
    var vscode_jsonrpc_1 = require_main();
    function createProtocolConnection(input, output, logger, options) {
      if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
      }
      return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
    }
    exports2.createProtocolConnection = createProtocolConnection;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/api.js
var require_api2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/common/api.js"(exports2) {
    "use strict";
    init_importMeta();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LSPErrorCodes = exports2.createProtocolConnection = void 0;
    __exportStar(require_main(), exports2);
    __exportStar(require_main2(), exports2);
    __exportStar(require_messages2(), exports2);
    __exportStar(require_protocol(), exports2);
    var connection_1 = require_connection2();
    Object.defineProperty(exports2, "createProtocolConnection", { enumerable: true, get: function() {
      return connection_1.createProtocolConnection;
    } });
    var LSPErrorCodes;
    (function(LSPErrorCodes2) {
      LSPErrorCodes2.lspReservedErrorRangeStart = -32899;
      LSPErrorCodes2.RequestFailed = -32803;
      LSPErrorCodes2.ServerCancelled = -32802;
      LSPErrorCodes2.ContentModified = -32801;
      LSPErrorCodes2.RequestCancelled = -32800;
      LSPErrorCodes2.lspReservedErrorRangeEnd = -32800;
    })(LSPErrorCodes || (exports2.LSPErrorCodes = LSPErrorCodes = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/node/main.js
var require_main3 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/lib/node/main.js"(exports2) {
    "use strict";
    init_importMeta();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createProtocolConnection = void 0;
    var node_1 = require_node();
    __exportStar(require_node(), exports2);
    __exportStar(require_api2(), exports2);
    function createProtocolConnection(input, output, logger, options) {
      return (0, node_1.createMessageConnection)(input, output, logger, options);
    }
    exports2.createProtocolConnection = createProtocolConnection;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/utils/uuid.js
var require_uuid = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/utils/uuid.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.generateUuid = exports2.parse = exports2.isUUID = exports2.v4 = exports2.empty = void 0;
    var ValueUUID = class {
      constructor(_value) {
        this._value = _value;
      }
      asHex() {
        return this._value;
      }
      equals(other) {
        return this.asHex() === other.asHex();
      }
    };
    var V4UUID = class _V4UUID extends ValueUUID {
      static _oneOf(array2) {
        return array2[Math.floor(array2.length * Math.random())];
      }
      static _randomHex() {
        return _V4UUID._oneOf(_V4UUID._chars);
      }
      constructor() {
        super([
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          "-",
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          "-",
          "4",
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          "-",
          _V4UUID._oneOf(_V4UUID._timeHighBits),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          "-",
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex(),
          _V4UUID._randomHex()
        ].join(""));
      }
    };
    V4UUID._chars = ["0", "1", "2", "3", "4", "5", "6", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    V4UUID._timeHighBits = ["8", "9", "a", "b"];
    exports2.empty = new ValueUUID("00000000-0000-0000-0000-000000000000");
    function v4() {
      return new V4UUID();
    }
    exports2.v4 = v4;
    var _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    function isUUID(value) {
      return _UUIDPattern.test(value);
    }
    exports2.isUUID = isUUID;
    function parse(value) {
      if (!isUUID(value)) {
        throw new Error("invalid uuid");
      }
      return new ValueUUID(value);
    }
    exports2.parse = parse;
    function generateUuid() {
      return v4().asHex();
    }
    exports2.generateUuid = generateUuid;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/progress.js
var require_progress = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/progress.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.attachPartialResult = exports2.ProgressFeature = exports2.attachWorkDone = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var uuid_1 = require_uuid();
    var WorkDoneProgressReporterImpl = class _WorkDoneProgressReporterImpl {
      constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
        _WorkDoneProgressReporterImpl.Instances.set(this._token, this);
      }
      begin(title, percentage, message, cancellable) {
        let param = {
          kind: "begin",
          title,
          percentage,
          message,
          cancellable
        };
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
      }
      report(arg0, arg1) {
        let param = {
          kind: "report"
        };
        if (typeof arg0 === "number") {
          param.percentage = arg0;
          if (arg1 !== void 0) {
            param.message = arg1;
          }
        } else {
          param.message = arg0;
        }
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
      }
      done() {
        _WorkDoneProgressReporterImpl.Instances.delete(this._token);
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: "end" });
      }
    };
    WorkDoneProgressReporterImpl.Instances = /* @__PURE__ */ new Map();
    var WorkDoneProgressServerReporterImpl = class extends WorkDoneProgressReporterImpl {
      constructor(connection2, token) {
        super(connection2, token);
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
      }
      get token() {
        return this._source.token;
      }
      done() {
        this._source.dispose();
        super.done();
      }
      cancel() {
        this._source.cancel();
      }
    };
    var NullProgressReporter = class {
      constructor() {
      }
      begin() {
      }
      report() {
      }
      done() {
      }
    };
    var NullProgressServerReporter = class extends NullProgressReporter {
      constructor() {
        super();
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
      }
      get token() {
        return this._source.token;
      }
      done() {
        this._source.dispose();
      }
      cancel() {
        this._source.cancel();
      }
    };
    function attachWorkDone(connection2, params) {
      if (params === void 0 || params.workDoneToken === void 0) {
        return new NullProgressReporter();
      }
      const token = params.workDoneToken;
      delete params.workDoneToken;
      return new WorkDoneProgressReporterImpl(connection2, token);
    }
    exports2.attachWorkDone = attachWorkDone;
    var ProgressFeature = (Base) => {
      return class extends Base {
        constructor() {
          super();
          this._progressSupported = false;
        }
        initialize(capabilities) {
          super.initialize(capabilities);
          if (capabilities?.window?.workDoneProgress === true) {
            this._progressSupported = true;
            this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
              let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
              if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                progress.cancel();
              }
            });
          }
        }
        attachWorkDoneProgress(token) {
          if (token === void 0) {
            return new NullProgressReporter();
          } else {
            return new WorkDoneProgressReporterImpl(this.connection, token);
          }
        }
        createWorkDoneProgress() {
          if (this._progressSupported) {
            const token = (0, uuid_1.generateUuid)();
            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
              const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
              return result;
            });
          } else {
            return Promise.resolve(new NullProgressServerReporter());
          }
        }
      };
    };
    exports2.ProgressFeature = ProgressFeature;
    var ResultProgress;
    (function(ResultProgress2) {
      ResultProgress2.type = new vscode_languageserver_protocol_1.ProgressType();
    })(ResultProgress || (ResultProgress = {}));
    var ResultProgressReporterImpl = class {
      constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
      }
      report(data) {
        this._connection.sendProgress(ResultProgress.type, this._token, data);
      }
    };
    function attachPartialResult(connection2, params) {
      if (params === void 0 || params.partialResultToken === void 0) {
        return void 0;
      }
      const token = params.partialResultToken;
      delete params.partialResultToken;
      return new ResultProgressReporterImpl(connection2, token);
    }
    exports2.attachPartialResult = attachPartialResult;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/configuration.js
var require_configuration = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/configuration.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ConfigurationFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var Is = require_is();
    var ConfigurationFeature = (Base) => {
      return class extends Base {
        getConfiguration(arg) {
          if (!arg) {
            return this._getConfiguration({});
          } else if (Is.string(arg)) {
            return this._getConfiguration({ section: arg });
          } else {
            return this._getConfiguration(arg);
          }
        }
        _getConfiguration(arg) {
          let params = {
            items: Array.isArray(arg) ? arg : [arg]
          };
          return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
            if (Array.isArray(result)) {
              return Array.isArray(arg) ? result : result[0];
            } else {
              return Array.isArray(arg) ? [] : null;
            }
          });
        }
      };
    };
    exports2.ConfigurationFeature = ConfigurationFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/workspaceFolder.js
var require_workspaceFolder = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/workspaceFolder.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WorkspaceFoldersFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var WorkspaceFoldersFeature = (Base) => {
      return class extends Base {
        constructor() {
          super();
          this._notificationIsAutoRegistered = false;
        }
        initialize(capabilities) {
          super.initialize(capabilities);
          let workspaceCapabilities = capabilities.workspace;
          if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
            this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
            this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
              this._onDidChangeWorkspaceFolders.fire(params.event);
            });
          }
        }
        fillServerCapabilities(capabilities) {
          super.fillServerCapabilities(capabilities);
          const changeNotifications = capabilities.workspace?.workspaceFolders?.changeNotifications;
          this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === "string";
        }
        getWorkspaceFolders() {
          return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
        }
        get onDidChangeWorkspaceFolders() {
          if (!this._onDidChangeWorkspaceFolders) {
            throw new Error("Client doesn't support sending workspace folder change events.");
          }
          if (!this._notificationIsAutoRegistered && !this._unregistration) {
            this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
          }
          return this._onDidChangeWorkspaceFolders.event;
        }
      };
    };
    exports2.WorkspaceFoldersFeature = WorkspaceFoldersFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/callHierarchy.js
var require_callHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/callHierarchy.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CallHierarchyFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var CallHierarchyFeature = (Base) => {
      return class extends Base {
        get callHierarchy() {
          return {
            onPrepare: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
              });
            },
            onIncomingCalls: (handler) => {
              const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            },
            onOutgoingCalls: (handler) => {
              const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            }
          };
        }
      };
    };
    exports2.CallHierarchyFeature = CallHierarchyFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/semanticTokens.js
var require_semanticTokens = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/semanticTokens.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SemanticTokensBuilder = exports2.SemanticTokensDiff = exports2.SemanticTokensFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var SemanticTokensFeature = (Base) => {
      return class extends Base {
        get semanticTokens() {
          return {
            refresh: () => {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
            },
            on: (handler) => {
              const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            },
            onDelta: (handler) => {
              const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            },
            onRange: (handler) => {
              const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            }
          };
        }
      };
    };
    exports2.SemanticTokensFeature = SemanticTokensFeature;
    var SemanticTokensDiff = class {
      constructor(originalSequence, modifiedSequence) {
        this.originalSequence = originalSequence;
        this.modifiedSequence = modifiedSequence;
      }
      computeDiff() {
        const originalLength = this.originalSequence.length;
        const modifiedLength = this.modifiedSequence.length;
        let startIndex = 0;
        while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {
          startIndex++;
        }
        if (startIndex < modifiedLength && startIndex < originalLength) {
          let originalEndIndex = originalLength - 1;
          let modifiedEndIndex = modifiedLength - 1;
          while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {
            originalEndIndex--;
            modifiedEndIndex--;
          }
          if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
            originalEndIndex++;
            modifiedEndIndex++;
          }
          const deleteCount = originalEndIndex - startIndex + 1;
          const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);
          if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
            return [
              { start: startIndex, deleteCount: deleteCount - 1 }
            ];
          } else {
            return [
              { start: startIndex, deleteCount, data: newData }
            ];
          }
        } else if (startIndex < modifiedLength) {
          return [
            { start: startIndex, deleteCount: 0, data: this.modifiedSequence.slice(startIndex) }
          ];
        } else if (startIndex < originalLength) {
          return [
            { start: startIndex, deleteCount: originalLength - startIndex }
          ];
        } else {
          return [];
        }
      }
    };
    exports2.SemanticTokensDiff = SemanticTokensDiff;
    var SemanticTokensBuilder = class {
      constructor() {
        this._prevData = void 0;
        this.initialize();
      }
      initialize() {
        this._id = Date.now();
        this._prevLine = 0;
        this._prevChar = 0;
        this._data = [];
        this._dataLen = 0;
      }
      push(line, char, length3, tokenType, tokenModifiers) {
        let pushLine = line;
        let pushChar = char;
        if (this._dataLen > 0) {
          pushLine -= this._prevLine;
          if (pushLine === 0) {
            pushChar -= this._prevChar;
          }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length3;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
      }
      get id() {
        return this._id.toString();
      }
      previousResult(id) {
        if (this.id === id) {
          this._prevData = this._data;
        }
        this.initialize();
      }
      build() {
        this._prevData = void 0;
        return {
          resultId: this.id,
          data: this._data
        };
      }
      canBuildEdits() {
        return this._prevData !== void 0;
      }
      buildEdits() {
        if (this._prevData !== void 0) {
          return {
            resultId: this.id,
            edits: new SemanticTokensDiff(this._prevData, this._data).computeDiff()
          };
        } else {
          return this.build();
        }
      }
    };
    exports2.SemanticTokensBuilder = SemanticTokensBuilder;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/showDocument.js
var require_showDocument = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/showDocument.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ShowDocumentFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var ShowDocumentFeature = (Base) => {
      return class extends Base {
        showDocument(params) {
          return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
        }
      };
    };
    exports2.ShowDocumentFeature = ShowDocumentFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/fileOperations.js
var require_fileOperations = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/fileOperations.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FileOperationsFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var FileOperationsFeature = (Base) => {
      return class extends Base {
        onDidCreateFiles(handler) {
          return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
            handler(params);
          });
        }
        onDidRenameFiles(handler) {
          return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
            handler(params);
          });
        }
        onDidDeleteFiles(handler) {
          return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
            handler(params);
          });
        }
        onWillCreateFiles(handler) {
          return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
            return handler(params, cancel);
          });
        }
        onWillRenameFiles(handler) {
          return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
            return handler(params, cancel);
          });
        }
        onWillDeleteFiles(handler) {
          return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
            return handler(params, cancel);
          });
        }
      };
    };
    exports2.FileOperationsFeature = FileOperationsFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/linkedEditingRange.js
var require_linkedEditingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/linkedEditingRange.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LinkedEditingRangeFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var LinkedEditingRangeFeature = (Base) => {
      return class extends Base {
        onLinkedEditingRange(handler) {
          return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
          });
        }
      };
    };
    exports2.LinkedEditingRangeFeature = LinkedEditingRangeFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/typeHierarchy.js
var require_typeHierarchy = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/typeHierarchy.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeHierarchyFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var TypeHierarchyFeature = (Base) => {
      return class extends Base {
        get typeHierarchy() {
          return {
            onPrepare: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), void 0);
              });
            },
            onSupertypes: (handler) => {
              const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            },
            onSubtypes: (handler) => {
              const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            }
          };
        }
      };
    };
    exports2.TypeHierarchyFeature = TypeHierarchyFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlineValue.js
var require_inlineValue = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlineValue.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlineValueFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var InlineValueFeature = (Base) => {
      return class extends Base {
        get inlineValue() {
          return {
            refresh: () => {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);
            },
            on: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params));
              });
            }
          };
        }
      };
    };
    exports2.InlineValueFeature = InlineValueFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/foldingRange.js
var require_foldingRange = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/foldingRange.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FoldingRangeFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var FoldingRangeFeature = (Base) => {
      return class extends Base {
        get foldingRange() {
          return {
            refresh: () => {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type);
            },
            on: (handler) => {
              const type = vscode_languageserver_protocol_1.FoldingRangeRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            }
          };
        }
      };
    };
    exports2.FoldingRangeFeature = FoldingRangeFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlayHint.js
var require_inlayHint = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlayHint.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlayHintFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var InlayHintFeature = (Base) => {
      return class extends Base {
        get inlayHint() {
          return {
            refresh: () => {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);
            },
            on: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params));
              });
            },
            resolve: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel) => {
                return handler(params, cancel);
              });
            }
          };
        }
      };
    };
    exports2.InlayHintFeature = InlayHintFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/diagnostic.js
var require_diagnostic = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/diagnostic.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DiagnosticFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var DiagnosticFeature = (Base) => {
      return class extends Base {
        get diagnostics() {
          return {
            refresh: () => {
              return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);
            },
            on: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));
              });
            },
            onWorkspace: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));
              });
            }
          };
        }
      };
    };
    exports2.DiagnosticFeature = DiagnosticFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/textDocuments.js
var require_textDocuments = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/textDocuments.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TextDocuments = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var TextDocuments2 = class {
      /**
       * Create a new text document manager.
       */
      constructor(configuration) {
        this._configuration = configuration;
        this._syncedDocuments = /* @__PURE__ */ new Map();
        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
      }
      /**
       * An event that fires when a text document managed by this manager
       * has been opened.
       */
      get onDidOpen() {
        return this._onDidOpen.event;
      }
      /**
       * An event that fires when a text document managed by this manager
       * has been opened or the content changes.
       */
      get onDidChangeContent() {
        return this._onDidChangeContent.event;
      }
      /**
       * An event that fires when a text document managed by this manager
       * will be saved.
       */
      get onWillSave() {
        return this._onWillSave.event;
      }
      /**
       * Sets a handler that will be called if a participant wants to provide
       * edits during a text document save.
       */
      onWillSaveWaitUntil(handler) {
        this._willSaveWaitUntil = handler;
      }
      /**
       * An event that fires when a text document managed by this manager
       * has been saved.
       */
      get onDidSave() {
        return this._onDidSave.event;
      }
      /**
       * An event that fires when a text document managed by this manager
       * has been closed.
       */
      get onDidClose() {
        return this._onDidClose.event;
      }
      /**
       * Returns the document for the given URI. Returns undefined if
       * the document is not managed by this instance.
       *
       * @param uri The text document's URI to retrieve.
       * @return the text document or `undefined`.
       */
      get(uri) {
        return this._syncedDocuments.get(uri);
      }
      /**
       * Returns all text documents managed by this instance.
       *
       * @return all text documents.
       */
      all() {
        return Array.from(this._syncedDocuments.values());
      }
      /**
       * Returns the URIs of all text documents managed by this instance.
       *
       * @return the URI's of all text documents.
       */
      keys() {
        return Array.from(this._syncedDocuments.keys());
      }
      /**
       * Listens for `low level` notification on the given connection to
       * update the text documents managed by this instance.
       *
       * Please note that the connection only provides handlers not an event model. Therefore
       * listening on a connection will overwrite the following handlers on a connection:
       * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
       * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
       *
       * Use the corresponding events on the TextDocuments instance instead.
       *
       * @param connection The connection to listen on.
       */
      listen(connection2) {
        connection2.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
        const disposables = [];
        disposables.push(connection2.onDidOpenTextDocument((event) => {
          const td = event.textDocument;
          const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
          this._syncedDocuments.set(td.uri, document);
          const toFire = Object.freeze({ document });
          this._onDidOpen.fire(toFire);
          this._onDidChangeContent.fire(toFire);
        }));
        disposables.push(connection2.onDidChangeTextDocument((event) => {
          const td = event.textDocument;
          const changes = event.contentChanges;
          if (changes.length === 0) {
            return;
          }
          const { version } = td;
          if (version === null || version === void 0) {
            throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
          }
          let syncedDocument = this._syncedDocuments.get(td.uri);
          if (syncedDocument !== void 0) {
            syncedDocument = this._configuration.update(syncedDocument, changes, version);
            this._syncedDocuments.set(td.uri, syncedDocument);
            this._onDidChangeContent.fire(Object.freeze({ document: syncedDocument }));
          }
        }));
        disposables.push(connection2.onDidCloseTextDocument((event) => {
          let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
          if (syncedDocument !== void 0) {
            this._syncedDocuments.delete(event.textDocument.uri);
            this._onDidClose.fire(Object.freeze({ document: syncedDocument }));
          }
        }));
        disposables.push(connection2.onWillSaveTextDocument((event) => {
          let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
          if (syncedDocument !== void 0) {
            this._onWillSave.fire(Object.freeze({ document: syncedDocument, reason: event.reason }));
          }
        }));
        disposables.push(connection2.onWillSaveTextDocumentWaitUntil((event, token) => {
          let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
          if (syncedDocument !== void 0 && this._willSaveWaitUntil) {
            return this._willSaveWaitUntil(Object.freeze({ document: syncedDocument, reason: event.reason }), token);
          } else {
            return [];
          }
        }));
        disposables.push(connection2.onDidSaveTextDocument((event) => {
          let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
          if (syncedDocument !== void 0) {
            this._onDidSave.fire(Object.freeze({ document: syncedDocument }));
          }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => {
          disposables.forEach((disposable) => disposable.dispose());
        });
      }
    };
    exports2.TextDocuments = TextDocuments2;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/notebook.js
var require_notebook = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/notebook.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NotebookDocuments = exports2.NotebookSyncFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var textDocuments_1 = require_textDocuments();
    var NotebookSyncFeature = (Base) => {
      return class extends Base {
        get synchronization() {
          return {
            onDidOpenNotebookDocument: (handler) => {
              return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params) => {
                handler(params);
              });
            },
            onDidChangeNotebookDocument: (handler) => {
              return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params) => {
                handler(params);
              });
            },
            onDidSaveNotebookDocument: (handler) => {
              return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params) => {
                handler(params);
              });
            },
            onDidCloseNotebookDocument: (handler) => {
              return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params) => {
                handler(params);
              });
            }
          };
        }
      };
    };
    exports2.NotebookSyncFeature = NotebookSyncFeature;
    var CellTextDocumentConnection = class _CellTextDocumentConnection {
      onDidOpenTextDocument(handler) {
        this.openHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => {
          this.openHandler = void 0;
        });
      }
      openTextDocument(params) {
        this.openHandler && this.openHandler(params);
      }
      onDidChangeTextDocument(handler) {
        this.changeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => {
          this.changeHandler = handler;
        });
      }
      changeTextDocument(params) {
        this.changeHandler && this.changeHandler(params);
      }
      onDidCloseTextDocument(handler) {
        this.closeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => {
          this.closeHandler = void 0;
        });
      }
      closeTextDocument(params) {
        this.closeHandler && this.closeHandler(params);
      }
      onWillSaveTextDocument() {
        return _CellTextDocumentConnection.NULL_DISPOSE;
      }
      onWillSaveTextDocumentWaitUntil() {
        return _CellTextDocumentConnection.NULL_DISPOSE;
      }
      onDidSaveTextDocument() {
        return _CellTextDocumentConnection.NULL_DISPOSE;
      }
    };
    CellTextDocumentConnection.NULL_DISPOSE = Object.freeze({ dispose: () => {
    } });
    var NotebookDocuments = class {
      constructor(configurationOrTextDocuments) {
        if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {
          this._cellTextDocuments = configurationOrTextDocuments;
        } else {
          this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);
        }
        this.notebookDocuments = /* @__PURE__ */ new Map();
        this.notebookCellMap = /* @__PURE__ */ new Map();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidChange = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
      }
      get cellTextDocuments() {
        return this._cellTextDocuments;
      }
      getCellTextDocument(cell) {
        return this._cellTextDocuments.get(cell.document);
      }
      getNotebookDocument(uri) {
        return this.notebookDocuments.get(uri);
      }
      getNotebookCell(uri) {
        const value = this.notebookCellMap.get(uri);
        return value && value[0];
      }
      findNotebookDocumentForCell(cell) {
        const key = typeof cell === "string" ? cell : cell.document;
        const value = this.notebookCellMap.get(key);
        return value && value[1];
      }
      get onDidOpen() {
        return this._onDidOpen.event;
      }
      get onDidSave() {
        return this._onDidSave.event;
      }
      get onDidChange() {
        return this._onDidChange.event;
      }
      get onDidClose() {
        return this._onDidClose.event;
      }
      /**
       * Listens for `low level` notification on the given connection to
       * update the notebook documents managed by this instance.
       *
       * Please note that the connection only provides handlers not an event model. Therefore
       * listening on a connection will overwrite the following handlers on a connection:
       * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,
       *  and `onDidCloseNotebookDocument`.
       *
       * @param connection The connection to listen on.
       */
      listen(connection2) {
        const cellTextDocumentConnection = new CellTextDocumentConnection();
        const disposables = [];
        disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));
        disposables.push(connection2.notebooks.synchronization.onDidOpenNotebookDocument((params) => {
          this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);
          for (const cellTextDocument of params.cellTextDocuments) {
            cellTextDocumentConnection.openTextDocument({ textDocument: cellTextDocument });
          }
          this.updateCellMap(params.notebookDocument);
          this._onDidOpen.fire(params.notebookDocument);
        }));
        disposables.push(connection2.notebooks.synchronization.onDidChangeNotebookDocument((params) => {
          const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
          if (notebookDocument === void 0) {
            return;
          }
          notebookDocument.version = params.notebookDocument.version;
          const oldMetadata = notebookDocument.metadata;
          let metadataChanged = false;
          const change = params.change;
          if (change.metadata !== void 0) {
            metadataChanged = true;
            notebookDocument.metadata = change.metadata;
          }
          const opened = [];
          const closed = [];
          const data = [];
          const text = [];
          if (change.cells !== void 0) {
            const changedCells = change.cells;
            if (changedCells.structure !== void 0) {
              const array2 = changedCells.structure.array;
              notebookDocument.cells.splice(array2.start, array2.deleteCount, ...array2.cells !== void 0 ? array2.cells : []);
              if (changedCells.structure.didOpen !== void 0) {
                for (const open of changedCells.structure.didOpen) {
                  cellTextDocumentConnection.openTextDocument({ textDocument: open });
                  opened.push(open.uri);
                }
              }
              if (changedCells.structure.didClose) {
                for (const close of changedCells.structure.didClose) {
                  cellTextDocumentConnection.closeTextDocument({ textDocument: close });
                  closed.push(close.uri);
                }
              }
            }
            if (changedCells.data !== void 0) {
              const cellUpdates = new Map(changedCells.data.map((cell) => [cell.document, cell]));
              for (let i = 0; i <= notebookDocument.cells.length; i++) {
                const change2 = cellUpdates.get(notebookDocument.cells[i].document);
                if (change2 !== void 0) {
                  const old = notebookDocument.cells.splice(i, 1, change2);
                  data.push({ old: old[0], new: change2 });
                  cellUpdates.delete(change2.document);
                  if (cellUpdates.size === 0) {
                    break;
                  }
                }
              }
            }
            if (changedCells.textContent !== void 0) {
              for (const cellTextDocument of changedCells.textContent) {
                cellTextDocumentConnection.changeTextDocument({ textDocument: cellTextDocument.document, contentChanges: cellTextDocument.changes });
                text.push(cellTextDocument.document.uri);
              }
            }
          }
          this.updateCellMap(notebookDocument);
          const changeEvent = { notebookDocument };
          if (metadataChanged) {
            changeEvent.metadata = { old: oldMetadata, new: notebookDocument.metadata };
          }
          const added = [];
          for (const open of opened) {
            added.push(this.getNotebookCell(open));
          }
          const removed = [];
          for (const close of closed) {
            removed.push(this.getNotebookCell(close));
          }
          const textContent = [];
          for (const change2 of text) {
            textContent.push(this.getNotebookCell(change2));
          }
          if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {
            changeEvent.cells = { added, removed, changed: { data, textContent } };
          }
          if (changeEvent.metadata !== void 0 || changeEvent.cells !== void 0) {
            this._onDidChange.fire(changeEvent);
          }
        }));
        disposables.push(connection2.notebooks.synchronization.onDidSaveNotebookDocument((params) => {
          const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
          if (notebookDocument === void 0) {
            return;
          }
          this._onDidSave.fire(notebookDocument);
        }));
        disposables.push(connection2.notebooks.synchronization.onDidCloseNotebookDocument((params) => {
          const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
          if (notebookDocument === void 0) {
            return;
          }
          this._onDidClose.fire(notebookDocument);
          for (const cellTextDocument of params.cellTextDocuments) {
            cellTextDocumentConnection.closeTextDocument({ textDocument: cellTextDocument });
          }
          this.notebookDocuments.delete(params.notebookDocument.uri);
          for (const cell of notebookDocument.cells) {
            this.notebookCellMap.delete(cell.document);
          }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => {
          disposables.forEach((disposable) => disposable.dispose());
        });
      }
      updateCellMap(notebookDocument) {
        for (const cell of notebookDocument.cells) {
          this.notebookCellMap.set(cell.document, [cell, notebookDocument]);
        }
      }
    };
    exports2.NotebookDocuments = NotebookDocuments;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/moniker.js
var require_moniker = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/moniker.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MonikerFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var MonikerFeature = (Base) => {
      return class extends Base {
        get moniker() {
          return {
            on: (handler) => {
              const type = vscode_languageserver_protocol_1.MonikerRequest.type;
              return this.connection.onRequest(type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
              });
            }
          };
        }
      };
    };
    exports2.MonikerFeature = MonikerFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/server.js
var require_server = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/server.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConnection = exports2.combineFeatures = exports2.combineNotebooksFeatures = exports2.combineLanguagesFeatures = exports2.combineWorkspaceFeatures = exports2.combineWindowFeatures = exports2.combineClientFeatures = exports2.combineTracerFeatures = exports2.combineTelemetryFeatures = exports2.combineConsoleFeatures = exports2._NotebooksImpl = exports2._LanguagesImpl = exports2.BulkUnregistration = exports2.BulkRegistration = exports2.ErrorMessageTracker = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var Is = require_is();
    var UUID = require_uuid();
    var progress_1 = require_progress();
    var configuration_1 = require_configuration();
    var workspaceFolder_1 = require_workspaceFolder();
    var callHierarchy_1 = require_callHierarchy();
    var semanticTokens_1 = require_semanticTokens();
    var showDocument_1 = require_showDocument();
    var fileOperations_1 = require_fileOperations();
    var linkedEditingRange_1 = require_linkedEditingRange();
    var typeHierarchy_1 = require_typeHierarchy();
    var inlineValue_1 = require_inlineValue();
    var foldingRange_1 = require_foldingRange();
    var inlayHint_1 = require_inlayHint();
    var diagnostic_1 = require_diagnostic();
    var notebook_1 = require_notebook();
    var moniker_1 = require_moniker();
    function null2Undefined(value) {
      if (value === null) {
        return void 0;
      }
      return value;
    }
    var ErrorMessageTracker = class {
      constructor() {
        this._messages = /* @__PURE__ */ Object.create(null);
      }
      /**
       * Add a message to the tracker.
       *
       * @param message The message to add.
       */
      add(message) {
        let count = this._messages[message];
        if (!count) {
          count = 0;
        }
        count++;
        this._messages[message] = count;
      }
      /**
       * Send all tracked messages to the connection's window.
       *
       * @param connection The connection established between client and server.
       */
      sendErrors(connection2) {
        Object.keys(this._messages).forEach((message) => {
          connection2.window.showErrorMessage(message);
        });
      }
    };
    exports2.ErrorMessageTracker = ErrorMessageTracker;
    var RemoteConsoleImpl = class {
      constructor() {
      }
      rawAttach(connection2) {
        this._rawConnection = connection2;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      fillServerCapabilities(_capabilities) {
      }
      initialize(_capabilities) {
      }
      error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
      }
      warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
      }
      info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
      }
      log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
      }
      debug(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Debug, message);
      }
      send(type, message) {
        if (this._rawConnection) {
          this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message }).catch(() => {
            (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);
          });
        }
      }
    };
    var _RemoteWindowImpl = class {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
      showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
      showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
      }
    };
    var RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
    var BulkRegistration;
    (function(BulkRegistration2) {
      function create() {
        return new BulkRegistrationImpl();
      }
      BulkRegistration2.create = create;
    })(BulkRegistration || (exports2.BulkRegistration = BulkRegistration = {}));
    var BulkRegistrationImpl = class {
      constructor() {
        this._registrations = [];
        this._registered = /* @__PURE__ */ new Set();
      }
      add(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        if (this._registered.has(method)) {
          throw new Error(`${method} is already added to this registration`);
        }
        const id = UUID.generateUuid();
        this._registrations.push({
          id,
          method,
          registerOptions: registerOptions || {}
        });
        this._registered.add(method);
      }
      asRegistrationParams() {
        return {
          registrations: this._registrations
        };
      }
    };
    var BulkUnregistration;
    (function(BulkUnregistration2) {
      function create() {
        return new BulkUnregistrationImpl(void 0, []);
      }
      BulkUnregistration2.create = create;
    })(BulkUnregistration || (exports2.BulkUnregistration = BulkUnregistration = {}));
    var BulkUnregistrationImpl = class {
      constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = /* @__PURE__ */ new Map();
        unregistrations.forEach((unregistration) => {
          this._unregistrations.set(unregistration.method, unregistration);
        });
      }
      get isAttached() {
        return !!this._connection;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
      }
      dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
          unregistrations.push(unregistration);
        }
        let params = {
          unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
          this._connection.console.info(`Bulk unregistration failed.`);
        });
      }
      disposeSingle(arg) {
        const method = Is.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
          return false;
        }
        let params = {
          unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
          this._unregistrations.delete(method);
        }, (_error) => {
          this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
        });
        return true;
      }
    };
    var RemoteClientImpl = class {
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
          return this.registerMany(typeOrRegistrations);
        } else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
          return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        } else {
          return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
      }
      registerSingle1(unregistration, type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
          registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
          unregistration.attach(this.connection);
        }
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
          unregistration.add({ id, method });
          return unregistration;
        }, (_error) => {
          this.connection.console.info(`Registering request handler for ${method} failed.`);
          return Promise.reject(_error);
        });
      }
      registerSingle2(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
          registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
          return vscode_languageserver_protocol_1.Disposable.create(() => {
            this.unregisterSingle(id, method).catch(() => {
              this.connection.console.info(`Un-registering capability with id ${id} failed.`);
            });
          });
        }, (_error) => {
          this.connection.console.info(`Registering request handler for ${method} failed.`);
          return Promise.reject(_error);
        });
      }
      unregisterSingle(id, method) {
        let params = {
          unregisterations: [{ id, method }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
          this.connection.console.info(`Un-registering request handler for ${id} failed.`);
        });
      }
      registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
          return new BulkUnregistrationImpl(this._connection, params.registrations.map((registration) => {
            return { id: registration.id, method: registration.method };
          }));
        }, (_error) => {
          this.connection.console.info(`Bulk registration failed.`);
          return Promise.reject(_error);
        });
      }
    };
    var _RemoteWorkspaceImpl = class {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      applyEdit(paramOrEdit) {
        function isApplyWorkspaceEditParams(value) {
          return value && !!value.edit;
        }
        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
      }
    };
    var RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));
    var TracerImpl = class {
      constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      set trace(value) {
        this._trace = value;
      }
      log(message, verbose) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
          return;
        }
        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
          message,
          verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : void 0
        }).catch(() => {
        });
      }
    };
    var TelemetryImpl = class {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      logEvent(data) {
        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(() => {
          this.connection.console.log(`Sending TelemetryEventNotification failed`);
        });
      }
    };
    var _LanguagesImpl = class {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
      }
      attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
      }
    };
    exports2._LanguagesImpl = _LanguagesImpl;
    var LanguagesImpl = (0, foldingRange_1.FoldingRangeFeature)((0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl)))))))));
    var _NotebooksImpl = class {
      constructor() {
      }
      attach(connection2) {
        this._connection = connection2;
      }
      get connection() {
        if (!this._connection) {
          throw new Error("Remote is not attached to a connection yet.");
        }
        return this._connection;
      }
      initialize(_capabilities) {
      }
      fillServerCapabilities(_capabilities) {
      }
      attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
      }
      attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
      }
    };
    exports2._NotebooksImpl = _NotebooksImpl;
    var NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);
    function combineConsoleFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineConsoleFeatures = combineConsoleFeatures;
    function combineTelemetryFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineTelemetryFeatures = combineTelemetryFeatures;
    function combineTracerFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineTracerFeatures = combineTracerFeatures;
    function combineClientFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineClientFeatures = combineClientFeatures;
    function combineWindowFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineWindowFeatures = combineWindowFeatures;
    function combineWorkspaceFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineWorkspaceFeatures = combineWorkspaceFeatures;
    function combineLanguagesFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineLanguagesFeatures = combineLanguagesFeatures;
    function combineNotebooksFeatures(one, two) {
      return function(Base) {
        return two(one(Base));
      };
    }
    exports2.combineNotebooksFeatures = combineNotebooksFeatures;
    function combineFeatures(one, two) {
      function combine(one2, two2, func) {
        if (one2 && two2) {
          return func(one2, two2);
        } else if (one2) {
          return one2;
        } else {
          return two2;
        }
      }
      let result = {
        __brand: "features",
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),
        languages: combine(one.languages, two.languages, combineLanguagesFeatures),
        notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)
      };
      return result;
    }
    exports2.combineFeatures = combineFeatures;
    function createConnection2(connectionFactory, watchDog, factories) {
      const logger = factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl();
      const connection2 = connectionFactory(logger);
      logger.rawAttach(connection2);
      const tracer = factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl();
      const telemetry = factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl();
      const client = factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl();
      const remoteWindow = factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl();
      const workspace = factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl();
      const languages = factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl();
      const notebooks = factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl();
      const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages, notebooks];
      function asPromise(value) {
        if (value instanceof Promise) {
          return value;
        } else if (Is.thenable(value)) {
          return new Promise((resolve, reject) => {
            value.then((resolved) => resolve(resolved), (error) => reject(error));
          });
        } else {
          return Promise.resolve(value);
        }
      }
      let shutdownHandler = void 0;
      let initializeHandler = void 0;
      let exitHandler = void 0;
      let protocolConnection = {
        listen: () => connection2.listen(),
        sendRequest: (type, ...params) => connection2.sendRequest(Is.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection2.onRequest(type, handler),
        sendNotification: (type, param) => {
          const method = Is.string(type) ? type : type.method;
          return connection2.sendNotification(method, param);
        },
        onNotification: (type, handler) => connection2.onNotification(type, handler),
        onProgress: connection2.onProgress,
        sendProgress: connection2.sendProgress,
        onInitialize: (handler) => {
          initializeHandler = handler;
          return {
            dispose: () => {
              initializeHandler = void 0;
            }
          };
        },
        onInitialized: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: (handler) => {
          shutdownHandler = handler;
          return {
            dispose: () => {
              shutdownHandler = void 0;
            }
          };
        },
        onExit: (handler) => {
          exitHandler = handler;
          return {
            dispose: () => {
              exitHandler = void 0;
            }
          };
        },
        get console() {
          return logger;
        },
        get telemetry() {
          return telemetry;
        },
        get tracer() {
          return tracer;
        },
        get client() {
          return client;
        },
        get window() {
          return remoteWindow;
        },
        get workspace() {
          return workspace;
        },
        get languages() {
          return languages;
        },
        get notebooks() {
          return notebooks;
        },
        onDidChangeConfiguration: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: void 0,
        onDidOpenTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: (handler) => connection2.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: (params) => connection2.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onCompletion: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCompletionResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDeclaration: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDefinition: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onTypeDefinition: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onImplementation: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onReferences: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentHighlight: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentSymbol: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onWorkspaceSymbol: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onWorkspaceSymbolResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),
        onCodeAction: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCodeActionResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onCodeLens: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onCodeLensResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDocumentRangeFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onDocumentOnTypeFormatting: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onRenameRequest: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        onPrepareRename: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentLinks: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onDocumentLinkResolve: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
          return handler(params, cancel);
        }),
        onDocumentColor: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onColorPresentation: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onFoldingRanges: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onSelectionRanges: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), (0, progress_1.attachPartialResult)(connection2, params));
        }),
        onExecuteCommand: (handler) => connection2.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
          return handler(params, cancel, (0, progress_1.attachWorkDone)(connection2, params), void 0);
        }),
        dispose: () => connection2.dispose()
      };
      for (let remote of allRemotes) {
        remote.attach(protocolConnection);
      }
      connection2.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
        watchDog.initialize(params);
        if (Is.string(params.trace)) {
          tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
          remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
          let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection2, params), void 0);
          return asPromise(result).then((value) => {
            if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
              return value;
            }
            let result2 = value;
            if (!result2) {
              result2 = { capabilities: {} };
            }
            let capabilities = result2.capabilities;
            if (!capabilities) {
              capabilities = {};
              result2.capabilities = capabilities;
            }
            if (capabilities.textDocumentSync === void 0 || capabilities.textDocumentSync === null) {
              capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
            } else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
              capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
            }
            for (let remote of allRemotes) {
              remote.fillServerCapabilities(capabilities);
            }
            return result2;
          });
        } else {
          let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
          for (let remote of allRemotes) {
            remote.fillServerCapabilities(result.capabilities);
          }
          return result;
        }
      });
      connection2.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        watchDog.shutdownReceived = true;
        if (shutdownHandler) {
          return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        } else {
          return void 0;
        }
      });
      connection2.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
          if (exitHandler) {
            exitHandler();
          }
        } finally {
          if (watchDog.shutdownReceived) {
            watchDog.exit(0);
          } else {
            watchDog.exit(1);
          }
        }
      });
      connection2.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
      });
      return protocolConnection;
    }
    exports2.createConnection = createConnection2;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/node/files.js
var require_files = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/node/files.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveModulePath = exports2.FileSystem = exports2.resolveGlobalYarnPath = exports2.resolveGlobalNodePath = exports2.resolve = exports2.uriToFilePath = void 0;
    var url = require("url");
    var path3 = require("path");
    var fs2 = require("fs");
    var child_process_1 = require("child_process");
    function uriToFilePath(uri) {
      let parsed = url.parse(uri);
      if (parsed.protocol !== "file:" || !parsed.path) {
        return void 0;
      }
      let segments = parsed.path.split("/");
      for (var i = 0, len = segments.length; i < len; i++) {
        segments[i] = decodeURIComponent(segments[i]);
      }
      if (process.platform === "win32" && segments.length > 1) {
        let first = segments[0];
        let second = segments[1];
        if (first.length === 0 && second.length > 1 && second[1] === ":") {
          segments.shift();
        }
      }
      return path3.normalize(segments.join("/"));
    }
    exports2.uriToFilePath = uriToFilePath;
    function isWindows() {
      return process.platform === "win32";
    }
    function resolve(moduleName, nodePath, cwd, tracer) {
      const nodePathKey = "NODE_PATH";
      const app = [
        "var p = process;",
        "p.on('message',function(m){",
        "if(m.c==='e'){",
        "p.exit(0);",
        "}",
        "else if(m.c==='rs'){",
        "try{",
        "var r=require.resolve(m.a);",
        "p.send({c:'r',s:true,r:r});",
        "}",
        "catch(err){",
        "p.send({c:'r',s:false});",
        "}",
        "}",
        "});"
      ].join("");
      return new Promise((resolve2, reject) => {
        let env = process.env;
        let newEnv = /* @__PURE__ */ Object.create(null);
        Object.keys(env).forEach((key) => newEnv[key] = env[key]);
        if (nodePath && fs2.existsSync(nodePath)) {
          if (newEnv[nodePathKey]) {
            newEnv[nodePathKey] = nodePath + path3.delimiter + newEnv[nodePathKey];
          } else {
            newEnv[nodePathKey] = nodePath;
          }
          if (tracer) {
            tracer(`NODE_PATH value is: ${newEnv[nodePathKey]}`);
          }
        }
        newEnv["ELECTRON_RUN_AS_NODE"] = "1";
        try {
          let cp = (0, child_process_1.fork)("", [], {
            cwd,
            env: newEnv,
            execArgv: ["-e", app]
          });
          if (cp.pid === void 0) {
            reject(new Error(`Starting process to resolve node module  ${moduleName} failed`));
            return;
          }
          cp.on("error", (error) => {
            reject(error);
          });
          cp.on("message", (message2) => {
            if (message2.c === "r") {
              cp.send({ c: "e" });
              if (message2.s) {
                resolve2(message2.r);
              } else {
                reject(new Error(`Failed to resolve module: ${moduleName}`));
              }
            }
          });
          let message = {
            c: "rs",
            a: moduleName
          };
          cp.send(message);
        } catch (error) {
          reject(error);
        }
      });
    }
    exports2.resolve = resolve;
    function resolveGlobalNodePath(tracer) {
      let npmCommand = "npm";
      const env = /* @__PURE__ */ Object.create(null);
      Object.keys(process.env).forEach((key) => env[key] = process.env[key]);
      env["NO_UPDATE_NOTIFIER"] = "true";
      const options = {
        encoding: "utf8",
        env
      };
      if (isWindows()) {
        npmCommand = "npm.cmd";
        options.shell = true;
      }
      let handler = () => {
      };
      try {
        process.on("SIGPIPE", handler);
        let stdout = (0, child_process_1.spawnSync)(npmCommand, ["config", "get", "prefix"], options).stdout;
        if (!stdout) {
          if (tracer) {
            tracer(`'npm config get prefix' didn't return a value.`);
          }
          return void 0;
        }
        let prefix = stdout.trim();
        if (tracer) {
          tracer(`'npm config get prefix' value is: ${prefix}`);
        }
        if (prefix.length > 0) {
          if (isWindows()) {
            return path3.join(prefix, "node_modules");
          } else {
            return path3.join(prefix, "lib", "node_modules");
          }
        }
        return void 0;
      } catch (err) {
        return void 0;
      } finally {
        process.removeListener("SIGPIPE", handler);
      }
    }
    exports2.resolveGlobalNodePath = resolveGlobalNodePath;
    function resolveGlobalYarnPath(tracer) {
      let yarnCommand = "yarn";
      let options = {
        encoding: "utf8"
      };
      if (isWindows()) {
        yarnCommand = "yarn.cmd";
        options.shell = true;
      }
      let handler = () => {
      };
      try {
        process.on("SIGPIPE", handler);
        let results = (0, child_process_1.spawnSync)(yarnCommand, ["global", "dir", "--json"], options);
        let stdout = results.stdout;
        if (!stdout) {
          if (tracer) {
            tracer(`'yarn global dir' didn't return a value.`);
            if (results.stderr) {
              tracer(results.stderr);
            }
          }
          return void 0;
        }
        let lines = stdout.trim().split(/\r?\n/);
        for (let line of lines) {
          try {
            let yarn = JSON.parse(line);
            if (yarn.type === "log") {
              return path3.join(yarn.data, "node_modules");
            }
          } catch (e) {
          }
        }
        return void 0;
      } catch (err) {
        return void 0;
      } finally {
        process.removeListener("SIGPIPE", handler);
      }
    }
    exports2.resolveGlobalYarnPath = resolveGlobalYarnPath;
    var FileSystem;
    (function(FileSystem2) {
      let _isCaseSensitive = void 0;
      function isCaseSensitive() {
        if (_isCaseSensitive !== void 0) {
          return _isCaseSensitive;
        }
        if (process.platform === "win32") {
          _isCaseSensitive = false;
        } else {
          _isCaseSensitive = !fs2.existsSync(__filename.toUpperCase()) || !fs2.existsSync(__filename.toLowerCase());
        }
        return _isCaseSensitive;
      }
      FileSystem2.isCaseSensitive = isCaseSensitive;
      function isParent(parent, child) {
        if (isCaseSensitive()) {
          return path3.normalize(child).indexOf(path3.normalize(parent)) === 0;
        } else {
          return path3.normalize(child).toLowerCase().indexOf(path3.normalize(parent).toLowerCase()) === 0;
        }
      }
      FileSystem2.isParent = isParent;
    })(FileSystem || (exports2.FileSystem = FileSystem = {}));
    function resolveModulePath(workspaceRoot, moduleName, nodePath, tracer) {
      if (nodePath) {
        if (!path3.isAbsolute(nodePath)) {
          nodePath = path3.join(workspaceRoot, nodePath);
        }
        return resolve(moduleName, nodePath, nodePath, tracer).then((value) => {
          if (FileSystem.isParent(nodePath, value)) {
            return value;
          } else {
            return Promise.reject(new Error(`Failed to load ${moduleName} from node path location.`));
          }
        }).then(void 0, (_error) => {
          return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
        });
      } else {
        return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
      }
    }
    exports2.resolveModulePath = resolveModulePath;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/node.js
var require_node2 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver-protocol@3.17.5/node_modules/vscode-languageserver-protocol/node.js"(exports2, module2) {
    "use strict";
    init_importMeta();
    module2.exports = require_main3();
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js
var require_inlineCompletion_proposed = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js"(exports2) {
    "use strict";
    init_importMeta();
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.InlineCompletionFeature = void 0;
    var vscode_languageserver_protocol_1 = require_main3();
    var InlineCompletionFeature = (Base) => {
      return class extends Base {
        get inlineCompletion() {
          return {
            on: (handler) => {
              return this.connection.onRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params));
              });
            }
          };
        }
      };
    };
    exports2.InlineCompletionFeature = InlineCompletionFeature;
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/api.js
var require_api3 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/common/api.js"(exports2) {
    "use strict";
    init_importMeta();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProposedFeatures = exports2.NotebookDocuments = exports2.TextDocuments = exports2.SemanticTokensBuilder = void 0;
    var semanticTokens_1 = require_semanticTokens();
    Object.defineProperty(exports2, "SemanticTokensBuilder", { enumerable: true, get: function() {
      return semanticTokens_1.SemanticTokensBuilder;
    } });
    var ic = require_inlineCompletion_proposed();
    __exportStar(require_main3(), exports2);
    var textDocuments_1 = require_textDocuments();
    Object.defineProperty(exports2, "TextDocuments", { enumerable: true, get: function() {
      return textDocuments_1.TextDocuments;
    } });
    var notebook_1 = require_notebook();
    Object.defineProperty(exports2, "NotebookDocuments", { enumerable: true, get: function() {
      return notebook_1.NotebookDocuments;
    } });
    __exportStar(require_server(), exports2);
    var ProposedFeatures2;
    (function(ProposedFeatures3) {
      ProposedFeatures3.all = {
        __brand: "features",
        languages: ic.InlineCompletionFeature
      };
    })(ProposedFeatures2 || (exports2.ProposedFeatures = ProposedFeatures2 = {}));
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/node/main.js
var require_main4 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/lib/node/main.js"(exports2) {
    "use strict";
    init_importMeta();
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConnection = exports2.Files = void 0;
    var node_util_1 = require("node:util");
    var Is = require_is();
    var server_1 = require_server();
    var fm = require_files();
    var node_1 = require_node2();
    __exportStar(require_node2(), exports2);
    __exportStar(require_api3(), exports2);
    var Files;
    (function(Files2) {
      Files2.uriToFilePath = fm.uriToFilePath;
      Files2.resolveGlobalNodePath = fm.resolveGlobalNodePath;
      Files2.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;
      Files2.resolve = fm.resolve;
      Files2.resolveModulePath = fm.resolveModulePath;
    })(Files || (exports2.Files = Files = {}));
    var _protocolConnection;
    function endProtocolConnection() {
      if (_protocolConnection === void 0) {
        return;
      }
      try {
        _protocolConnection.end();
      } catch (_err) {
      }
    }
    var _shutdownReceived = false;
    var exitTimer = void 0;
    function setupExitTimer() {
      const argName = "--clientProcessId";
      function runTimer(value) {
        try {
          let processId = parseInt(value);
          if (!isNaN(processId)) {
            exitTimer = setInterval(() => {
              try {
                process.kill(processId, 0);
              } catch (ex) {
                endProtocolConnection();
                process.exit(_shutdownReceived ? 0 : 1);
              }
            }, 3e3);
          }
        } catch (e) {
        }
      }
      for (let i = 2; i < process.argv.length; i++) {
        let arg = process.argv[i];
        if (arg === argName && i + 1 < process.argv.length) {
          runTimer(process.argv[i + 1]);
          return;
        } else {
          let args = arg.split("=");
          if (args[0] === argName) {
            runTimer(args[1]);
          }
        }
      }
    }
    setupExitTimer();
    var watchDog = {
      initialize: (params) => {
        const processId = params.processId;
        if (Is.number(processId) && exitTimer === void 0) {
          setInterval(() => {
            try {
              process.kill(processId, 0);
            } catch (ex) {
              process.exit(_shutdownReceived ? 0 : 1);
            }
          }, 3e3);
        }
      },
      get shutdownReceived() {
        return _shutdownReceived;
      },
      set shutdownReceived(value) {
        _shutdownReceived = value;
      },
      exit: (code2) => {
        endProtocolConnection();
        process.exit(code2);
      }
    };
    function createConnection2(arg1, arg2, arg3, arg4) {
      let factories;
      let input;
      let output;
      let options;
      if (arg1 !== void 0 && arg1.__brand === "features") {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
      }
      if (node_1.ConnectionStrategy.is(arg1) || node_1.ConnectionOptions.is(arg1)) {
        options = arg1;
      } else {
        input = arg1;
        output = arg2;
        options = arg3;
      }
      return _createConnection(input, output, options, factories);
    }
    exports2.createConnection = createConnection2;
    function _createConnection(input, output, options, factories) {
      let stdio = false;
      if (!input && !output && process.argv.length > 2) {
        let port = void 0;
        let pipeName = void 0;
        let argv = process.argv.slice(2);
        for (let i = 0; i < argv.length; i++) {
          let arg = argv[i];
          if (arg === "--node-ipc") {
            input = new node_1.IPCMessageReader(process);
            output = new node_1.IPCMessageWriter(process);
            break;
          } else if (arg === "--stdio") {
            stdio = true;
            input = process.stdin;
            output = process.stdout;
            break;
          } else if (arg === "--socket") {
            port = parseInt(argv[i + 1]);
            break;
          } else if (arg === "--pipe") {
            pipeName = argv[i + 1];
            break;
          } else {
            var args = arg.split("=");
            if (args[0] === "--socket") {
              port = parseInt(args[1]);
              break;
            } else if (args[0] === "--pipe") {
              pipeName = args[1];
              break;
            }
          }
        }
        if (port) {
          let transport = (0, node_1.createServerSocketTransport)(port);
          input = transport[0];
          output = transport[1];
        } else if (pipeName) {
          let transport = (0, node_1.createServerPipeTransport)(pipeName);
          input = transport[0];
          output = transport[1];
        }
      }
      var commandLineMessage = "Use arguments of createConnection or set command line parameters: '--node-ipc', '--stdio' or '--socket={number}'";
      if (!input) {
        throw new Error("Connection input stream is not set. " + commandLineMessage);
      }
      if (!output) {
        throw new Error("Connection output stream is not set. " + commandLineMessage);
      }
      if (Is.func(input.read) && Is.func(input.on)) {
        let inputStream = input;
        inputStream.on("end", () => {
          endProtocolConnection();
          process.exit(_shutdownReceived ? 0 : 1);
        });
        inputStream.on("close", () => {
          endProtocolConnection();
          process.exit(_shutdownReceived ? 0 : 1);
        });
      }
      const connectionFactory = (logger) => {
        const result = (0, node_1.createProtocolConnection)(input, output, logger, options);
        if (stdio) {
          patchConsole(logger);
        }
        return result;
      };
      return (0, server_1.createConnection)(connectionFactory, watchDog, factories);
    }
    function patchConsole(logger) {
      function serialize(args) {
        return args.map((arg) => typeof arg === "string" ? arg : (0, node_util_1.inspect)(arg)).join(" ");
      }
      const counters = /* @__PURE__ */ new Map();
      console.assert = function assert(assertion, ...args) {
        if (assertion) {
          return;
        }
        if (args.length === 0) {
          logger.error("Assertion failed");
        } else {
          const [message, ...rest] = args;
          logger.error(`Assertion failed: ${message} ${serialize(rest)}`);
        }
      };
      console.count = function count(label = "default") {
        const message = String(label);
        let counter = counters.get(message) ?? 0;
        counter += 1;
        counters.set(message, counter);
        logger.log(`${message}: ${message}`);
      };
      console.countReset = function countReset(label) {
        if (label === void 0) {
          counters.clear();
        } else {
          counters.delete(String(label));
        }
      };
      console.debug = function debug(...args) {
        logger.log(serialize(args));
      };
      console.dir = function dir(arg, options) {
        logger.log((0, node_util_1.inspect)(arg, options));
      };
      console.log = function log(...args) {
        logger.log(serialize(args));
      };
      console.error = function error(...args) {
        logger.error(serialize(args));
      };
      console.trace = function trace(...args) {
        const stack = new Error().stack.replace(/(.+\n){2}/, "");
        let message = "Trace";
        if (args.length !== 0) {
          message += `: ${serialize(args)}`;
        }
        logger.log(`${message}
${stack}`);
      };
      console.warn = function warn(...args) {
        logger.warn(serialize(args));
      };
    }
  }
});

// ../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/node.js
var require_node3 = __commonJS({
  "../../node_modules/.pnpm/vscode-languageserver@9.0.1/node_modules/vscode-languageserver/node.js"(exports2, module2) {
    "use strict";
    init_importMeta();
    module2.exports = require_main4();
  }
});

// ../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/codegen.js
var DECLARATION_PATH, removeTrailingCharacters, capitalize, addJsExtension, addDtsExtension, getDeclarationPath, generateRootPackageJson, generateRootIndexJs, generateRootIndexDts, generateCollectionsIndexJs, generateCollectionsIndexDts;
var init_codegen = __esm({
  "../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/codegen.js"() {
    init_importMeta();
    DECLARATION_PATH = {
      collection: "collections",
      contract: "contracts"
    };
    removeTrailingCharacters = (source) => {
      return source.replace(/^(\s*|$)/mg, "");
    };
    capitalize = (text) => {
      return text[0].toUpperCase() + text.slice(1);
    };
    addJsExtension = (filename, options) => {
      switch (options.module) {
        case "esnext":
          return `${filename}.mjs`;
        case "commonjs":
          return `${filename}.js`;
      }
    };
    addDtsExtension = (filename, options) => {
      switch (options.module) {
        case "esnext":
          return `${filename}.d.mts`;
        case "commonjs":
          return `${filename}.d.ts`;
      }
    };
    getDeclarationPath = (decl, outDir) => {
      const doubleSlashesRemoved = outDir.replace("//", "/");
      const sanitizedOutDir = doubleSlashesRemoved.endsWith("/") ? doubleSlashesRemoved : `${doubleSlashesRemoved}/`;
      return `${sanitizedOutDir}${DECLARATION_PATH[decl.type]}/${decl.name}`;
    };
    generateRootPackageJson = (options) => {
      const json = {
        main: addJsExtension("index", options),
        types: addDtsExtension("index", options),
        exports: {
          ".": {
            require: "./index.js",
            import: "./index.mjs",
            types: "./index.d.ts"
          },
          "./collections": {
            require: "./collections/index.js",
            import: "./collections/index.mjs",
            types: "./collections/index.d.ts"
          }
        }
      };
      return json;
    };
    generateRootIndexJs = (declarations, options) => {
      switch (options.module) {
        case "esnext":
          return removeTrailingCharacters(`
      export * as collections from '${addJsExtension("./collections/index", options)}'
      ${declarations.map((decl) => {
            return `
          export { ${`extend${capitalize(decl.name)}Collection`} } from '${addJsExtension(`./collections/${decl.name}`, options)}'
        `;
          }).join("\n")}
    `);
        case "commonjs":
          return removeTrailingCharacters(`
      exports.collections = require('${addJsExtension("./collections/index", options)}')
      ${declarations.map((decl) => {
            return `
          exports.${`extend${capitalize(decl.name)}Collection`} = require('${addJsExtension(`./collections/${decl.name}`, options)}')
        `;
          })}
    `);
      }
    };
    generateRootIndexDts = (declarations, options) => {
      return removeTrailingCharacters(`
    export * as collections from '${addJsExtension("./collections/index", options)}'
    ${declarations.map((decl) => {
        return `
        export { ${`extend${capitalize(decl.name)}Collection`} } from '${addJsExtension(`./collections/${decl.name}`, options)}'
        export { ${capitalize(decl.name)} } from '${addJsExtension(`./collections/${decl.name}`, options)}'
      `;
      }).join("\n")}
  `);
    };
    generateCollectionsIndexJs = (declarations, options) => {
      if (declarations.length === 0) {
        switch (options.module) {
          case "esnext":
            return "export {}";
          case "commonjs":
            return "exports = {}";
        }
      }
      let source = "";
      for (const decl of declarations) {
        if (decl.type !== "collection") {
          continue;
        }
        const importPath = addJsExtension(`./${decl.name}`, options);
        switch (options.module) {
          case "esnext":
            source += `export { ${decl.name} } from '${importPath}'
`;
            break;
          case "commonjs":
            source += `exports['${decl.name}'] = require('${importPath}')['${decl.name}']
`;
            break;
        }
      }
      return source;
    };
    generateCollectionsIndexDts = (declarations, options) => {
      if (declarations.length === 0) {
        return "export {}";
      }
      let source = "";
      for (const decl of declarations) {
        if (decl.type !== "collection") {
          continue;
        }
        const importPath = addJsExtension(`./${decl.name}`, options);
        source += `export { ${decl.name} } from '${importPath}'
`;
      }
      return source;
    };
  }
});

// ../../node_modules/.pnpm/@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/compiler/dist/index.mjs
function newSTArray() {
  return [];
}
function unsafeFreezeThawImpl(xs) {
  return xs;
}
function copyImpl(xs) {
  return xs.slice();
}
function toCharCode(c) {
  return c.charCodeAt(0);
}
function fromCharCode(c) {
  return String.fromCharCode(c);
}
function toArrayWithKey(f) {
  return function(m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}
var import_node_fs, replicateFill, replicatePolyfill, replicateImpl, length, unconsImpl, indexImpl, findIndexImpl, _deleteAt, concat, sortByImpl, sliceImpl, zipWithImpl, anyImpl, unsafeIndexImpl, arrayMap, semigroupoidFn, identity, categoryFn, otherwise, flip, $$const, unit, $$Proxy, map, mapFlipped, $$void, voidLeft, functorArray, concatString, concatArray, reflectSymbol, semigroupString, semigroupArray, append, alt, identity2, apply, applyFirst, applySecond, pure, when, discard, bind, bindFlipped, discardUnit, $runtime_lazy, lazyFn, defer, fix, ap, topInt, bottomInt, topChar, bottomChar, topNumber, bottomNumber, unsafeCompareImpl, ordIntImpl, ordStringImpl, ordCharImpl, refEq, eqBooleanImpl, eqIntImpl, eqNumberImpl, eqCharImpl, eqStringImpl, eqArrayImpl, eqString, eqNumber, eqInt, eqChar, eqBoolean, eq, eq2, eqArray, notEq, LT, GT, EQ, intSub, intAdd, intMul, zero, semiringInt, sub, ringInt, negate, ordString, ordInt, ordChar, compare, max, top, boundedInt, boundedChar, bottom, showIntImpl, showNumberImpl, showCharImpl, showStringImpl, showArrayImpl, showString, showNumber, showInt, showChar, showBoolean, show, showArray, Inl, Inr, Product, NoArguments, from, identity3, Nothing, Just, maybe, isNothing, isJust, functorMaybe, map2, fromMaybe, fromJust, applyMaybe, bindMaybe, applicativeMaybe, Left, Right, functorEither, map3, either, applyEither, bindEither, applicativeEither, Identity, functorIdentity, applyIdentity, bindIdentity, applicativeIdentity, monadIdentity, intDegree, intDiv, intMod, commutativeRingInt, mod, euclideanRingInt, div, monoidString, mempty, Loop, Done, tailRecM, tailRec, monadRecIdentity, bifunctorStep, map_, pure_, bind_, foreach, $runtime_lazy2, functorST, monadST, bindST, applicativeST, $lazy_applyST, unsafeFreezeImpl, thawImpl, pushImpl, runSTFn1, runSTFn2, unsafeFreeze, thaw, withArray, push, boolConj, boolDisj, boolNot, tt, not, disj, heytingAlgebraBoolean, conj, foldrArray, foldlArray, empty, Tuple, snd, fst, bimap, Conj, semigroupConj, monoidConj, unsafeCoerce2, coerce, coerce2, unwrap, alaF, alaF2, foldr, traverse_, foldl, intercalate, foldMapDefaultR, foldableArray, foldMap, find, all, mkFn5, runFn2, runFn3, runFn4, unfoldrArrayImpl, unfoldr1ArrayImpl, fromJust2, unfoldable1Array, fromJust3, unfoldr, unfoldableArray, $$void2, intercalate1, map4, map22, fromJust4, when2, append2, zipWith, zip, unsafeIndex, unsafeIndex1, uncons, sortBy, sort, snoc, slice, replicate, $$null, intercalate2, index, head, foldl2, findIndex, find2, elemIndex, notElem2, elem2, deleteAt, deleteBy, cons, some, many, any2, nubByEq, unionBy, union, bottom1, top1, toEnum, fromEnum, toEnumWithDefaults, defaultSucc, defaultPred, charToEnum, enumChar, boundedEnumChar, toCharCode2, fromCharCode2, fromNumberImpl, toNumber, isFiniteImpl, floor, pow, top2, bottom2, fromNumber, unsafeClamp, floor2, unsafeIndex2, elemIndex2, NUMCAT_LU, NUMCAT_LL, NUMCAT_LT, NUMCAT_LM, NUMCAT_LO, NUMCAT_MN, NUMCAT_MC, NUMCAT_ME, NUMCAT_ND, NUMCAT_NL, NUMCAT_NO, NUMCAT_PC, NUMCAT_PD, NUMCAT_PS, NUMCAT_PE, NUMCAT_PI, NUMCAT_PF, NUMCAT_PO, NUMCAT_SM, NUMCAT_SC, NUMCAT_SK, NUMCAT_SO, NUMCAT_ZS, NUMCAT_ZL, NUMCAT_ZP, NUMCAT_CC, NUMCAT_CF, NUMCAT_CS, NUMCAT_CO, NUMCAT_CN, numSpaceBlocks, numLat1Blocks, numConvBlocks, numBlocks, gencatZS, rule1, spacechars, gencatZP, rule162, gencatZL, rule161, gencatSO, rule13, rule170, rule171, gencatSM, rule6, gencatSK, rule10, gencatSC, rule3, gencatPS, rule4, gencatPO, rule2, gencatPI, rule15, gencatPF, rule19, gencatPE, rule5, gencatPD, rule7, gencatPC, rule11, gencatNO, rule17, gencatNL, rule128, rule168, rule169, gencatND, rule8, gencatMN, rule92, rule93, gencatME, rule119, gencatMC, rule124, gencatLU, nullrule, rule104, rule107, rule115, rule117, rule118, rule120, rule122, rule125, rule127, rule137, rule142, rule144, rule153, rule156, rule157, rule158, rule159, rule160, rule163, rule164, rule165, rule166, rule172, rule173, rule174, rule177, rule178, rule179, rule180, rule181, rule183, rule184, rule186, rule187, rule188, rule189, rule190, rule191, rule192, rule193, rule194, rule195, rule196, rule201, rule203, rule22, rule24, rule26, rule29, rule30, rule31, rule32, rule33, rule34, rule35, rule37, rule38, rule40, rule42, rule43, rule44, rule45, rule47, rule51, rule52, rule53, rule54, rule55, rule56, rule58, rule59, rule60, rule9, rule94, rule95, rule96, rule97, rule98, gencatLT, rule151, rule154, rule48, gencatLO, rule14, gencatLM, rule91, gencatLL, rule100, rule101, rule102, rule103, rule105, rule106, rule108, rule109, rule110, rule111, rule112, rule113, rule114, rule116, rule12, rule121, rule123, rule126, rule129, rule130, rule131, rule132, rule133, rule134, rule135, rule136, rule138, rule139, rule140, rule141, rule143, rule145, rule146, rule147, rule148, rule149, rule150, rule152, rule155, rule167, rule175, rule176, rule18, rule182, rule185, rule197, rule198, rule20, rule202, rule204, rule21, rule23, rule25, rule27, rule28, rule36, rule39, rule41, rule46, rule49, rule50, rule57, rule61, rule62, rule63, rule64, rule65, rule66, rule67, rule68, rule69, rule70, rule71, rule72, rule73, rule74, rule75, rule76, rule77, rule78, rule79, rule80, rule81, rule82, rule83, rule84, rule85, rule86, rule87, rule88, rule89, rule90, rule99, gencatCS, rule199, gencatCO, rule200, gencatCF, rule16, gencatCC, rule0, convchars, bsearch, blkCmp, getRule, caseConv, uTowlower, uTowupper, checkAttrS, uIswspace, allchars, checkAttr, uIswalnum, uIswalpha, uIswupper, compare2, zeroRec, rules, recCmp, findRule, lower, hasArrayFrom, hasStringIterator, hasFromCodePoint, hasCodePointAt, _unsafeCodePointAt0, _codePointAt, _countPrefix, _fromCodePointArray, _singleton, _take, _toCodePointArray, fromCharArray, toCharArray, singleton2, _toChar, length2, drop, splitAt, charAt, uncons2, toChar, stripPrefix, split, toLower, $$null2, $runtime_lazy3, fromEnum2, map5, unfoldr2, div2, mod2, compare3, CodePoint, unsurrogate, isTrail, isLead, uncons3, unconsButWithTuple, toCodePointArrayFallback, unsafeCodePointAt0Fallback, unsafeCodePointAt0, toCodePointArray, fromCharCode3, singletonFallback, fromCodePointArray, singleton3, takeFallback, take2, eqCodePoint, ordCodePoint, countTail, countFallback, countPrefix2, takeWhile, codePointFromChar, codePointAtFallback, codePointAt, boundedCodePoint, boundedEnumCodePoint, $lazy_enumCodePoint, fromEnum3, modifyFull, toLower2, modify3, toLowerSimple, toUpperSimple, isUpper, isSpace, isOctDigit, isDecDigit, isHexDigit, isAlphaNum, isAlpha, hexDigitToInt, intercalate3, map6, ucLower, splitLines, concatWith, intercalate4, map7, show2, max3, Diagnostic, ppSourceCode, ppPosition, ppMessage, getSourceCode, ppDiagnostic, genericEqNoArguments, genericEqArgument, genericEq$prime, genericEqConstructor, genericEqProduct, genericEqSum, genericEq, $runtime_lazy4, genericEqConstructor2, genericEqSum2, genericEqConstructor1, genericEqSum1, CommonJs, EsNext, JSString, JSUndefined, JSNull, JSNumber, JSBoolean, JSArray, JSObject, JSLiteral, JSIdentifier, JSCallExpression, JSArrowFunctionExpression, JSCode, JsObjectProperty1, JsObjectProperty2, JsImportSpecifier, JsSpecifiers, JSImportDeclaration, JSVariableDeclaration, JSExportNamedDeclaration, JSEmptyStatement, JsStatements, variable, $$undefined, string, statements, specifiers, objectProperty2$prime, object, $$null3, $$int, import_, importSpecifier2, importSpecifier1, identifier, objectProperty1, objectProperty2, genericJsTree, genericEq2, genericJsLiteral, genericJSObjectProperty, $$float, exportNamed, eqJsTree, $lazy_eqJsLiteral, $lazy_eqJsObjectProperty, eqJsObjectProperty, emptyStatement, code, call, $$boolean, arrowFunction, array, TsDeclareKeyword, TsConstKeyword, TsIdentifier, TsImportSpecifier, TsSpecifiers, TsTypeObjectProperty, TSTypeAny, TSTypeString, TSTypeLiteral, TSTypeQuery, TSTypeExtends, TSIntersectionType, TSCallExpression, TSTypeReference, TSFunctionType, TSTypeLitString, TSTypeLitBoolean, TSTypeLitUndefined, TSTypeLitNull, TSTypeLitArray, TSTypeLitNumber, TSTypeLitObject, TsTypeParameter, TsParameter, TSImportDeclaration, TSVariableDeclaration, TSTypeAliasDeclaration, TSExportNamedDeclaration, TSEmptyStatement, TsStatements, variable2, typeReference, typeQuery, typeParameter, typeObjectProperty, typeLiteral, typeLitUndefined, typeLitString, typeLitObject, typeLitNumber, typeLitNull, typeLitBoolean, typeLitArray, typeExtends, typeAny, typeAlias, statements2, specifiers2, parameter, intersectionType, import_2, importSpecifier22, importSpecifier, identifier2, functionType, exportNamed2, emptyStatement2, declareKeyword, constKeyword, map8, codegenIdent, codegenParameter, codegenType, codegenObjectProperty, codegenLiteral, intercalate5, append3, genericShowArgsNoArguments, genericShowArgs, genericShowConstructor, genericShow$prime, genericShowSum, genericShow, SourcePos, Span, NonEmpty, Nil, Cons, listMap, functorList, foldableList, map9, bimap2, uncons4, toUnfoldable, singleton5, reverse2, manyRec, some2, many2, foldM, filter, throwError, local, ask, lift, defer2, force, map10, ExceptT, runExceptT, mapExceptT, functorExceptT, monadExceptT, bindExceptT, applyExceptT, applicativeExceptT, monadThrowExceptT, unwrap2, runExcept, isArray, toList, cons$prime, Leaf, Node, unsafeNode, singleton8, unsafeBalancedNode, lookup, insert2, empty4, fromFoldable3, keys, genericShowConstructor2, genericEqConstructor3, genericEqSum3, TInteger, TNum, TUndefined, TNull, TString, TBoolean, TProperty, TArray, SecurityRateLimiting, SecurityLogging, Macro, LayoutItemComponent, PropertyName, ImmutableItem, IndexesItem, LNull, LUndefined, LInteger, LNum, LString, LBoolean, LProperty, LArray, PresetItem, RequireItem, TableItem, TableMetaItem, WritableItem, Getter, FunctionName, SecurityItem, FormItem, FiltersPresetsItem, FilterItem, ExtendsName, ELiteral, ELte, EGte, EAnd, EIn, ELt, EGt, EEq, EOr, EExists, ENot, Cond, LayoutItem, Required, CollectionTimestamps, CollectionTemporary, CollectionSearch, CollectionOwned, CollectionName, CollectionImmutableBool, CollectionImmutableList, CollectionIcon, ALiteral, AExpr, AttributeName, Attribute, Property, PEnum, PNum, PString, PInteger, PBoolean, PConst, PRef, PArray, PObject, FunctionItem, ActionItem, TableLayoutItem, PreferredItem, Collection, Program, genericTyp, showTyp, eqTyp, toUnfoldable4, map11, all4, find3, elem3, union3, union1, map1, Codegen, getPropertyName, getFunctionName, getCollectionName, getAttributeName, collectionPropertyM, collectionPropertyL, collectionProperties, cUnaryExpr, cTimestamps, cTemporary, cSecurity, cPropertyName, cPropertyNameL, cSearch, cTable, cTableMeta, cWritable, cPresets, cOwned, cLiteral, cIndexes, cImmutable, cIcon, cFunctions, cForm, cFiltersPresets, cFilters, cExposedFunctions, cCollectionName, cBinaryExpr, cExpr, cLayout, cRequired, cCollectionProperties, cActions, cTableLayout, cPreferred, cCollection, codegen, show3, show1, foldr2, ppTree, ppLiteral, ppImportSpecifier, ppSpecifiers, ppStatement, ppJavascript, show4, show12, foldr3, ppStatementSyntax, ppIdentifier, ppImportSpecifier2, ppSpecifiers2, ppTypeParameters, ppTypeParameter, ppType, ppLiteral2, ppStatement2, ppTypescript, ReaderT, withReaderT, runReaderT, monadTransReaderT, lift3, mapReaderT, functorReaderT, applyReaderT, bindReaderT, applicativeReaderT, monadReaderT, monadAskReaderT, monadReaderReaderT, monadThrowReaderT, notEq2, bindReaderT2, bind2, monadExceptT2, ask2, throwError2, applicativeReaderT2, when3, traverse_2, lookup3, pure2, elem4, find4, discard2, discard1, when1, discard22, pure1, show5, fromFoldable4, elem1, insert5, foldM3, map12, show13, local2, CollectionContext, Context, typeOf2, typeOfArray, makeDiagnostic, throwDiagnostic, sActions, sAttributes, sFiltersPresets, sFormLayout, sFunctions, sIndividualActions, sLayout, sSecurity, lookupProperty, sExpr, sTableLayout, sGetters, sRequired, lookupGetter, lookupCollection, literalPos, sArrayType, sFileProperty, sType, sBooleanProperty, sConstProperty, sEnumProperty, sNumberProperty, sStringProperty, extendContext, emptyContext, collectionHasProperty, sCheckIfPropertiesIsValid, sFilters, sForm, sImmutable, sIndexes, sSearch, sTable, sTableMeta, sPreferred, sWritable, sRefProperty, sProperty, sObjectProperty, sArrayProperty, sProperties, sCollection, sProgram, runSemantic, $runtime_lazy5, unwrap3, ParseState, ParseError, More, Lift, Stop, lazyParserT, functorParserT, applyParserT, bindParserT, bindFlipped2, applicativeParserT, monadParserT, monadRecParserT, monadThrowParseErrorParse, throwError3, altParserT, stateParserT, runParserT$prime, position, initialPos, runParserT, runParserT1, runParser, failWithPosition, fail2, plusParserT, alternativeParserT, alt2, defer3, voidLeft2, pure3, applySecond2, tailRecM3, bind3, mapFlipped2, map13, manyRec2, applyFirst2, empty6, withLazyErrorMessage, withErrorMessage, $$try2, skipMany1, skipMany, sepBy1, sepBy, option, optionMaybe, notFollowedBy, manyTill, many3, choice, between, asErrorMessage, bind4, pure4, alt3, foldr4, choice2, identity4, foldl3, AssocNone, AssocLeft, AssocRight, Infix, Prefix, Postfix, termP, splitOp, rassocP1, rassocP, nassocP, lassocP1, lassocP, makeParser, buildExprParser, fromEnum4, mod3, fromJust5, toEnum2, show14, show22, updatePosSingle, updatePosString, satisfyCodePoint, satisfy, eof, consumeWith, string2, $$char, anyChar, elem12, show15, notElem1, takeWhile4, whiteSpace, skipSpaces, satisfyCP, space, upper2, oneOf2, octDigit, noneOf, letter, hexDigit, digit, alphaNum, map14, convert, toLowerSimple2, toUpperSimple2, bind5, pure5, sort2, map15, applySecond3, compare4, append4, fix2, alt4, $$void3, voidLeft3, identity5, many4, map16, some3, foldl4, applyFirst3, show6, bind1, pure12, foldr5, map23, choice3, many1, toUnfoldable5, foldr12, unGenLanguageDef, theReservedNames, simpleSpace, oneLineComment, isReserved, isReservedName, inCommentSingle, multiLineComment, inCommentMulti, inComment, whiteSpace$prime, makeTokenParser, alt5, emptyDef, bind6, pure6, alt6, voidLeft4, map17, discard3, toUnfoldable6, applyFirst4, applySecond4, fix3, choice4, sourcePos, runParsers, lang, pBoolean, pCollectionOwned, pCollectionTimestamps, pCollectionIcon, pExtendsName, pMacro, pName, pAttributeName, pCollectionName, pFunctionName, pPropertyName, pGetter, pCollectionGetters, pListProperty, pCollectionFilters, pCollectionForm, pCollectionImmutable, pCollectionIndexes, pCollectionPresets, pCollectionTable, pCollectionTableMeta, pCollectionWritable, pLiteral, pExpr, pAttribute, pCollectionFunctions, pCond, pRequired, pCollectionRequired, pPropertyParser, pCollectionTemporary, getParserValue, pActionItem, pCollectionActions, pCollectionIndividualActions, pCollectionFiltersPresets, pCollectionSearch, pCollectionSecurity, pCollectionTableLayout, pLayoutItem, pCollectionFormLayout, pCollectionLayout, pPreferred, pPropertyType, pProperty, pCollectionProperties, pCollection, pProgram, contents, runParserProgram, Aff, _pure, _throwError, _liftEffect, makeAff, _sequential, f_OK, r_OK, w_OK, x_OK, copyFile_EXCL, copyFile_FICLONE, copyFile_FICLONE_FORCE, pure13, toUnfoldable7, map18, parseModule, compile$prime$prime, compile, checker;
var init_dist = __esm({
  "../../node_modules/.pnpm/@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/compiler/dist/index.mjs"() {
    init_importMeta();
    import_node_fs = require("node:fs");
    replicateFill = function(count, value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
    replicatePolyfill = function(count, value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
    replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
    length = function(xs) {
      return xs.length;
    };
    unconsImpl = function(empty7, next, xs) {
      return xs.length === 0 ? empty7({}) : next(xs[0])(xs.slice(1));
    };
    indexImpl = function(just, nothing, xs, i) {
      return i < 0 || i >= xs.length ? nothing : just(xs[i]);
    };
    findIndexImpl = function(just, nothing, f, xs) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (f(xs[i])) return just(i);
      }
      return nothing;
    };
    _deleteAt = function(just, nothing, i, l) {
      if (i < 0 || i >= l.length) return nothing;
      var l1 = l.slice();
      l1.splice(i, 1);
      return just(l1);
    };
    concat = function(xss) {
      if (xss.length <= 1e4) {
        return Array.prototype.concat.apply([], xss);
      }
      var result = [];
      for (var i = 0, l = xss.length; i < l; i++) {
        var xs = xss[i];
        for (var j = 0, m = xs.length; j < m; j++) {
          result.push(xs[j]);
        }
      }
      return result;
    };
    sortByImpl = /* @__PURE__ */ function() {
      function mergeFromTo(compare5, fromOrdering, xs1, xs2, from3, to) {
        var mid;
        var i;
        var j;
        var k;
        var x;
        var y;
        var c;
        mid = from3 + (to - from3 >> 1);
        if (mid - from3 > 1) mergeFromTo(compare5, fromOrdering, xs2, xs1, from3, mid);
        if (to - mid > 1) mergeFromTo(compare5, fromOrdering, xs2, xs1, mid, to);
        i = from3;
        j = mid;
        k = from3;
        while (i < mid && j < to) {
          x = xs2[i];
          y = xs2[j];
          c = fromOrdering(compare5(x)(y));
          if (c > 0) {
            xs1[k++] = y;
            ++j;
          } else {
            xs1[k++] = x;
            ++i;
          }
        }
        while (i < mid) {
          xs1[k++] = xs2[i++];
        }
        while (j < to) {
          xs1[k++] = xs2[j++];
        }
      }
      return function(compare5, fromOrdering, xs) {
        var out;
        if (xs.length < 2) return xs;
        out = xs.slice(0);
        mergeFromTo(compare5, fromOrdering, out, xs.slice(0), 0, xs.length);
        return out;
      };
    }();
    sliceImpl = function(s, e, l) {
      return l.slice(s, e);
    };
    zipWithImpl = function(f, xs, ys) {
      var l = xs.length < ys.length ? xs.length : ys.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(xs[i])(ys[i]);
      }
      return result;
    };
    anyImpl = function(p, xs) {
      var len = xs.length;
      for (var i = 0; i < len; i++) {
        if (p(xs[i])) return true;
      }
      return false;
    };
    unsafeIndexImpl = function(xs, n) {
      return xs[n];
    };
    arrayMap = function(f) {
      return function(arr) {
        var l = arr.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(arr[i]);
        }
        return result;
      };
    };
    semigroupoidFn = {
      compose: function(f) {
        return function(g) {
          return function(x) {
            return f(g(x));
          };
        };
      }
    };
    identity = function(dict) {
      return dict.identity;
    };
    categoryFn = {
      identity: function(x) {
        return x;
      },
      Semigroupoid0: function() {
        return semigroupoidFn;
      }
    };
    otherwise = true;
    flip = function(f) {
      return function(b) {
        return function(a) {
          return f(a)(b);
        };
      };
    };
    $$const = function(a) {
      return function(v) {
        return a;
      };
    };
    unit = void 0;
    $$Proxy = /* @__PURE__ */ function() {
      function $$Proxy2() {
      }
      ;
      $$Proxy2.value = new $$Proxy2();
      return $$Proxy2;
    }();
    map = function(dict) {
      return dict.map;
    };
    mapFlipped = function(dictFunctor) {
      var map19 = map(dictFunctor);
      return function(fa) {
        return function(f) {
          return map19(f)(fa);
        };
      };
    };
    $$void = function(dictFunctor) {
      return map(dictFunctor)($$const(unit));
    };
    voidLeft = function(dictFunctor) {
      var map19 = map(dictFunctor);
      return function(f) {
        return function(x) {
          return map19($$const(x))(f);
        };
      };
    };
    functorArray = {
      map: arrayMap
    };
    concatString = function(s1) {
      return function(s2) {
        return s1 + s2;
      };
    };
    concatArray = function(xs) {
      return function(ys) {
        if (xs.length === 0) return ys;
        if (ys.length === 0) return xs;
        return xs.concat(ys);
      };
    };
    reflectSymbol = function(dict) {
      return dict.reflectSymbol;
    };
    semigroupString = {
      append: concatString
    };
    semigroupArray = {
      append: concatArray
    };
    append = function(dict) {
      return dict.append;
    };
    alt = function(dict) {
      return dict.alt;
    };
    identity2 = /* @__PURE__ */ identity(categoryFn);
    apply = function(dict) {
      return dict.apply;
    };
    applyFirst = function(dictApply) {
      var apply1 = apply(dictApply);
      var map19 = map(dictApply.Functor0());
      return function(a) {
        return function(b) {
          return apply1(map19($$const)(a))(b);
        };
      };
    };
    applySecond = function(dictApply) {
      var apply1 = apply(dictApply);
      var map19 = map(dictApply.Functor0());
      return function(a) {
        return function(b) {
          return apply1(map19($$const(identity2))(a))(b);
        };
      };
    };
    pure = function(dict) {
      return dict.pure;
    };
    when = function(dictApplicative) {
      var pure14 = pure(dictApplicative);
      return function(v) {
        return function(v1) {
          if (v) {
            return v1;
          }
          ;
          if (!v) {
            return pure14(unit);
          }
          ;
          throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    };
    discard = function(dict) {
      return dict.discard;
    };
    bind = function(dict) {
      return dict.bind;
    };
    bindFlipped = function(dictBind) {
      return flip(bind(dictBind));
    };
    discardUnit = {
      discard: function(dictBind) {
        return bind(dictBind);
      }
    };
    $runtime_lazy = function(name2, moduleName, init3) {
      var state2 = 0;
      var val;
      return function(lineNumber) {
        if (state2 === 2) return val;
        if (state2 === 1) throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state2 = 1;
        val = init3();
        state2 = 2;
        return val;
      };
    };
    lazyFn = {
      defer: function(f) {
        return function(x) {
          return f(unit)(x);
        };
      }
    };
    defer = function(dict) {
      return dict.defer;
    };
    fix = function(dictLazy) {
      var defer1 = defer(dictLazy);
      return function(f) {
        var $lazy_go = $runtime_lazy("go", "Control.Lazy", function() {
          return defer1(function(v) {
            return f($lazy_go(25));
          });
        });
        var go = $lazy_go(25);
        return go;
      };
    };
    ap = function(dictMonad) {
      var bind7 = bind(dictMonad.Bind1());
      var pure7 = pure(dictMonad.Applicative0());
      return function(f) {
        return function(a) {
          return bind7(f)(function(f$prime) {
            return bind7(a)(function(a$prime) {
              return pure7(f$prime(a$prime));
            });
          });
        };
      };
    };
    topInt = 2147483647;
    bottomInt = -2147483648;
    topChar = String.fromCharCode(65535);
    bottomChar = String.fromCharCode(0);
    topNumber = Number.POSITIVE_INFINITY;
    bottomNumber = Number.NEGATIVE_INFINITY;
    unsafeCompareImpl = function(lt) {
      return function(eq3) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x === y ? eq3 : gt;
            };
          };
        };
      };
    };
    ordIntImpl = unsafeCompareImpl;
    ordStringImpl = unsafeCompareImpl;
    ordCharImpl = unsafeCompareImpl;
    refEq = function(r1) {
      return function(r2) {
        return r1 === r2;
      };
    };
    eqBooleanImpl = refEq;
    eqIntImpl = refEq;
    eqNumberImpl = refEq;
    eqCharImpl = refEq;
    eqStringImpl = refEq;
    eqArrayImpl = function(f) {
      return function(xs) {
        return function(ys) {
          if (xs.length !== ys.length) return false;
          for (var i = 0; i < xs.length; i++) {
            if (!f(xs[i])(ys[i])) return false;
          }
          return true;
        };
      };
    };
    eqString = {
      eq: eqStringImpl
    };
    eqNumber = {
      eq: eqNumberImpl
    };
    eqInt = {
      eq: eqIntImpl
    };
    eqChar = {
      eq: eqCharImpl
    };
    eqBoolean = {
      eq: eqBooleanImpl
    };
    eq = function(dict) {
      return dict.eq;
    };
    eq2 = /* @__PURE__ */ eq(eqBoolean);
    eqArray = function(dictEq) {
      return {
        eq: eqArrayImpl(eq(dictEq))
      };
    };
    notEq = function(dictEq) {
      var eq3 = eq(dictEq);
      return function(x) {
        return function(y) {
          return eq2(eq3(x)(y))(false);
        };
      };
    };
    LT = /* @__PURE__ */ function() {
      function LT2() {
      }
      ;
      LT2.value = new LT2();
      return LT2;
    }();
    GT = /* @__PURE__ */ function() {
      function GT2() {
      }
      ;
      GT2.value = new GT2();
      return GT2;
    }();
    EQ = /* @__PURE__ */ function() {
      function EQ2() {
      }
      ;
      EQ2.value = new EQ2();
      return EQ2;
    }();
    intSub = function(x) {
      return function(y) {
        return x - y | 0;
      };
    };
    intAdd = function(x) {
      return function(y) {
        return x + y | 0;
      };
    };
    intMul = function(x) {
      return function(y) {
        return x * y | 0;
      };
    };
    zero = function(dict) {
      return dict.zero;
    };
    semiringInt = {
      add: intAdd,
      zero: 0,
      mul: intMul,
      one: 1
    };
    sub = function(dict) {
      return dict.sub;
    };
    ringInt = {
      sub: intSub,
      Semiring0: function() {
        return semiringInt;
      }
    };
    negate = function(dictRing) {
      var sub1 = sub(dictRing);
      var zero2 = zero(dictRing.Semiring0());
      return function(a) {
        return sub1(zero2)(a);
      };
    };
    ordString = /* @__PURE__ */ function() {
      return {
        compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
        Eq0: function() {
          return eqString;
        }
      };
    }();
    ordInt = /* @__PURE__ */ function() {
      return {
        compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
        Eq0: function() {
          return eqInt;
        }
      };
    }();
    ordChar = /* @__PURE__ */ function() {
      return {
        compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
        Eq0: function() {
          return eqChar;
        }
      };
    }();
    compare = function(dict) {
      return dict.compare;
    };
    max = function(dictOrd) {
      var compare32 = compare(dictOrd);
      return function(x) {
        return function(y) {
          var v = compare32(x)(y);
          if (v instanceof LT) {
            return y;
          }
          ;
          if (v instanceof EQ) {
            return x;
          }
          ;
          if (v instanceof GT) {
            return x;
          }
          ;
          throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v.constructor.name]);
        };
      };
    };
    top = function(dict) {
      return dict.top;
    };
    boundedInt = {
      top: topInt,
      bottom: bottomInt,
      Ord0: function() {
        return ordInt;
      }
    };
    boundedChar = {
      top: topChar,
      bottom: bottomChar,
      Ord0: function() {
        return ordChar;
      }
    };
    bottom = function(dict) {
      return dict.bottom;
    };
    showIntImpl = function(n) {
      return n.toString();
    };
    showNumberImpl = function(n) {
      var str = n.toString();
      return isNaN(str + ".0") ? str : str + ".0";
    };
    showCharImpl = function(c) {
      var code2 = c.charCodeAt(0);
      if (code2 < 32 || code2 === 127) {
        switch (c) {
          case "\x07":
            return "'\\a'";
          case "\b":
            return "'\\b'";
          case "\f":
            return "'\\f'";
          case "\n":
            return "'\\n'";
          case "\r":
            return "'\\r'";
          case "	":
            return "'\\t'";
          case "\v":
            return "'\\v'";
        }
        return "'\\" + code2.toString(10) + "'";
      }
      return c === "'" || c === "\\" ? "'\\" + c + "'" : "'" + c + "'";
    };
    showStringImpl = function(s) {
      var l = s.length;
      return '"' + s.replace(
        /[\0-\x1F\x7F"\\]/g,
        // eslint-disable-line no-control-regex
        function(c, i) {
          switch (c) {
            case '"':
            case "\\":
              return "\\" + c;
            case "\x07":
              return "\\a";
            case "\b":
              return "\\b";
            case "\f":
              return "\\f";
            case "\n":
              return "\\n";
            case "\r":
              return "\\r";
            case "	":
              return "\\t";
            case "\v":
              return "\\v";
          }
          var k = i + 1;
          var empty7 = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
          return "\\" + c.charCodeAt(0).toString(10) + empty7;
        }
      ) + '"';
    };
    showArrayImpl = function(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return "[" + ss.join(",") + "]";
      };
    };
    showString = {
      show: showStringImpl
    };
    showNumber = {
      show: showNumberImpl
    };
    showInt = {
      show: showIntImpl
    };
    showChar = {
      show: showCharImpl
    };
    showBoolean = {
      show: function(v) {
        if (v) {
          return "true";
        }
        ;
        if (!v) {
          return "false";
        }
        ;
        throw new Error("Failed pattern match at Data.Show (line 29, column 1 - line 31, column 23): " + [v.constructor.name]);
      }
    };
    show = function(dict) {
      return dict.show;
    };
    showArray = function(dictShow) {
      return {
        show: showArrayImpl(show(dictShow))
      };
    };
    Inl = /* @__PURE__ */ function() {
      function Inl2(value0) {
        this.value0 = value0;
      }
      ;
      Inl2.create = function(value0) {
        return new Inl2(value0);
      };
      return Inl2;
    }();
    Inr = /* @__PURE__ */ function() {
      function Inr2(value0) {
        this.value0 = value0;
      }
      ;
      Inr2.create = function(value0) {
        return new Inr2(value0);
      };
      return Inr2;
    }();
    Product = /* @__PURE__ */ function() {
      function Product2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Product2.create = function(value0) {
        return function(value1) {
          return new Product2(value0, value1);
        };
      };
      return Product2;
    }();
    NoArguments = /* @__PURE__ */ function() {
      function NoArguments2() {
      }
      ;
      NoArguments2.value = new NoArguments2();
      return NoArguments2;
    }();
    from = function(dict) {
      return dict.from;
    };
    identity3 = /* @__PURE__ */ identity(categoryFn);
    Nothing = /* @__PURE__ */ function() {
      function Nothing2() {
      }
      ;
      Nothing2.value = new Nothing2();
      return Nothing2;
    }();
    Just = /* @__PURE__ */ function() {
      function Just2(value0) {
        this.value0 = value0;
      }
      ;
      Just2.create = function(value0) {
        return new Just2(value0);
      };
      return Just2;
    }();
    maybe = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v;
          }
          ;
          if (v2 instanceof Just) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
    isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
    functorMaybe = {
      map: function(v) {
        return function(v1) {
          if (v1 instanceof Just) {
            return new Just(v(v1.value0));
          }
          ;
          return Nothing.value;
        };
      }
    };
    map2 = /* @__PURE__ */ map(functorMaybe);
    fromMaybe = function(a) {
      return maybe(a)(identity3);
    };
    fromJust = function() {
      return function(v) {
        if (v instanceof Just) {
          return v.value0;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
      };
    };
    applyMaybe = {
      apply: function(v) {
        return function(v1) {
          if (v instanceof Just) {
            return map2(v.value0)(v1);
          }
          ;
          if (v instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorMaybe;
      }
    };
    bindMaybe = {
      bind: function(v) {
        return function(v1) {
          if (v instanceof Just) {
            return v1(v.value0);
          }
          ;
          if (v instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Apply0: function() {
        return applyMaybe;
      }
    };
    applicativeMaybe = /* @__PURE__ */ function() {
      return {
        pure: Just.create,
        Apply0: function() {
          return applyMaybe;
        }
      };
    }();
    Left = /* @__PURE__ */ function() {
      function Left2(value0) {
        this.value0 = value0;
      }
      ;
      Left2.create = function(value0) {
        return new Left2(value0);
      };
      return Left2;
    }();
    Right = /* @__PURE__ */ function() {
      function Right2(value0) {
        this.value0 = value0;
      }
      ;
      Right2.create = function(value0) {
        return new Right2(value0);
      };
      return Right2;
    }();
    functorEither = {
      map: function(f) {
        return function(m) {
          if (m instanceof Left) {
            return new Left(m.value0);
          }
          ;
          if (m instanceof Right) {
            return new Right(f(m.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
        };
      }
    };
    map3 = /* @__PURE__ */ map(functorEither);
    either = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Left) {
            return v(v2.value0);
          }
          ;
          if (v2 instanceof Right) {
            return v1(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    };
    applyEither = {
      apply: function(v) {
        return function(v1) {
          if (v instanceof Left) {
            return new Left(v.value0);
          }
          ;
          if (v instanceof Right) {
            return map3(v.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
        };
      },
      Functor0: function() {
        return functorEither;
      }
    };
    bindEither = {
      bind: /* @__PURE__ */ either(function(e) {
        return function(v) {
          return new Left(e);
        };
      })(function(a) {
        return function(f) {
          return f(a);
        };
      }),
      Apply0: function() {
        return applyEither;
      }
    };
    applicativeEither = /* @__PURE__ */ function() {
      return {
        pure: Right.create,
        Apply0: function() {
          return applyEither;
        }
      };
    }();
    Identity = function(x) {
      return x;
    };
    functorIdentity = {
      map: function(f) {
        return function(m) {
          return f(m);
        };
      }
    };
    applyIdentity = {
      apply: function(v) {
        return function(v1) {
          return v(v1);
        };
      },
      Functor0: function() {
        return functorIdentity;
      }
    };
    bindIdentity = {
      bind: function(v) {
        return function(f) {
          return f(v);
        };
      },
      Apply0: function() {
        return applyIdentity;
      }
    };
    applicativeIdentity = {
      pure: Identity,
      Apply0: function() {
        return applyIdentity;
      }
    };
    monadIdentity = {
      Applicative0: function() {
        return applicativeIdentity;
      },
      Bind1: function() {
        return bindIdentity;
      }
    };
    intDegree = function(x) {
      return Math.min(Math.abs(x), 2147483647);
    };
    intDiv = function(x) {
      return function(y) {
        if (y === 0) return 0;
        return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
      };
    };
    intMod = function(x) {
      return function(y) {
        if (y === 0) return 0;
        var yy = Math.abs(y);
        return (x % yy + yy) % yy;
      };
    };
    commutativeRingInt = {
      Ring0: function() {
        return ringInt;
      }
    };
    mod = function(dict) {
      return dict.mod;
    };
    euclideanRingInt = {
      degree: intDegree,
      div: intDiv,
      mod: intMod,
      CommutativeRing0: function() {
        return commutativeRingInt;
      }
    };
    div = function(dict) {
      return dict.div;
    };
    monoidString = {
      mempty: "",
      Semigroup0: function() {
        return semigroupString;
      }
    };
    mempty = function(dict) {
      return dict.mempty;
    };
    Loop = /* @__PURE__ */ function() {
      function Loop2(value0) {
        this.value0 = value0;
      }
      ;
      Loop2.create = function(value0) {
        return new Loop2(value0);
      };
      return Loop2;
    }();
    Done = /* @__PURE__ */ function() {
      function Done2(value0) {
        this.value0 = value0;
      }
      ;
      Done2.create = function(value0) {
        return new Done2(value0);
      };
      return Done2;
    }();
    tailRecM = function(dict) {
      return dict.tailRecM;
    };
    tailRec = function(f) {
      var go = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Loop) {
            $copy_v = f(v.value0);
            return;
          }
          ;
          if (v instanceof Done) {
            $tco_done = true;
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 103, column 3 - line 103, column 25): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return function($85) {
        return go(f($85));
      };
    };
    monadRecIdentity = {
      tailRecM: function(f) {
        var runIdentity = function(v) {
          return v;
        };
        var $86 = tailRec(function($88) {
          return runIdentity(f($88));
        });
        return function($87) {
          return Identity($86($87));
        };
      },
      Monad0: function() {
        return monadIdentity;
      }
    };
    bifunctorStep = {
      bimap: function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Loop) {
              return new Loop(v(v2.value0));
            }
            ;
            if (v2 instanceof Done) {
              return new Done(v1(v2.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 33, column 1 - line 35, column 34): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      }
    };
    map_ = function(f) {
      return function(a) {
        return function() {
          return f(a());
        };
      };
    };
    pure_ = function(a) {
      return function() {
        return a;
      };
    };
    bind_ = function(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    };
    foreach = function(as) {
      return function(f) {
        return function() {
          for (var i = 0, l = as.length; i < l; i++) {
            f(as[i])();
          }
        };
      };
    };
    $runtime_lazy2 = function(name2, moduleName, init3) {
      var state2 = 0;
      var val;
      return function(lineNumber) {
        if (state2 === 2) return val;
        if (state2 === 1) throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state2 = 1;
        val = init3();
        state2 = 2;
        return val;
      };
    };
    functorST = {
      map: map_
    };
    monadST = {
      Applicative0: function() {
        return applicativeST;
      },
      Bind1: function() {
        return bindST;
      }
    };
    bindST = {
      bind: bind_,
      Apply0: function() {
        return $lazy_applyST(0);
      }
    };
    applicativeST = {
      pure: pure_,
      Apply0: function() {
        return $lazy_applyST(0);
      }
    };
    $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
      return {
        apply: ap(monadST),
        Functor0: function() {
          return functorST;
        }
      };
    });
    unsafeFreezeImpl = unsafeFreezeThawImpl;
    thawImpl = copyImpl;
    pushImpl = function(a, xs) {
      return xs.push(a);
    };
    runSTFn1 = function runSTFn12(fn) {
      return function(a) {
        return function() {
          return fn(a);
        };
      };
    };
    runSTFn2 = function runSTFn22(fn) {
      return function(a) {
        return function(b) {
          return function() {
            return fn(a, b);
          };
        };
      };
    };
    unsafeFreeze = /* @__PURE__ */ runSTFn1(unsafeFreezeImpl);
    thaw = /* @__PURE__ */ runSTFn1(thawImpl);
    withArray = function(f) {
      return function(xs) {
        return function __do() {
          var result = thaw(xs)();
          f(result)();
          return unsafeFreeze(result)();
        };
      };
    };
    push = /* @__PURE__ */ runSTFn2(pushImpl);
    boolConj = function(b1) {
      return function(b2) {
        return b1 && b2;
      };
    };
    boolDisj = function(b1) {
      return function(b2) {
        return b1 || b2;
      };
    };
    boolNot = function(b) {
      return !b;
    };
    tt = function(dict) {
      return dict.tt;
    };
    not = function(dict) {
      return dict.not;
    };
    disj = function(dict) {
      return dict.disj;
    };
    heytingAlgebraBoolean = {
      ff: false,
      tt: true,
      implies: function(a) {
        return function(b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
        };
      },
      conj: boolConj,
      disj: boolDisj,
      not: boolNot
    };
    conj = function(dict) {
      return dict.conj;
    };
    foldrArray = function(f) {
      return function(init3) {
        return function(xs) {
          var acc = init3;
          var len = xs.length;
          for (var i = len - 1; i >= 0; i--) {
            acc = f(xs[i])(acc);
          }
          return acc;
        };
      };
    };
    foldlArray = function(f) {
      return function(init3) {
        return function(xs) {
          var acc = init3;
          var len = xs.length;
          for (var i = 0; i < len; i++) {
            acc = f(acc)(xs[i]);
          }
          return acc;
        };
      };
    };
    empty = function(dict) {
      return dict.empty;
    };
    Tuple = /* @__PURE__ */ function() {
      function Tuple2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Tuple2.create = function(value0) {
        return function(value1) {
          return new Tuple2(value0, value1);
        };
      };
      return Tuple2;
    }();
    snd = function(v) {
      return v.value1;
    };
    fst = function(v) {
      return v.value0;
    };
    bimap = function(dict) {
      return dict.bimap;
    };
    Conj = function(x) {
      return x;
    };
    semigroupConj = function(dictHeytingAlgebra) {
      var conj2 = conj(dictHeytingAlgebra);
      return {
        append: function(v) {
          return function(v1) {
            return conj2(v)(v1);
          };
        }
      };
    };
    monoidConj = function(dictHeytingAlgebra) {
      var semigroupConj1 = semigroupConj(dictHeytingAlgebra);
      return {
        mempty: tt(dictHeytingAlgebra),
        Semigroup0: function() {
          return semigroupConj1;
        }
      };
    };
    unsafeCoerce2 = function(x) {
      return x;
    };
    coerce = function() {
      return unsafeCoerce2;
    };
    coerce2 = /* @__PURE__ */ coerce();
    unwrap = function() {
      return coerce2;
    };
    alaF = function() {
      return function() {
        return function() {
          return function() {
            return function(v) {
              return coerce2;
            };
          };
        };
      };
    };
    alaF2 = /* @__PURE__ */ alaF()()()();
    foldr = function(dict) {
      return dict.foldr;
    };
    traverse_ = function(dictApplicative) {
      var applySecond5 = applySecond(dictApplicative.Apply0());
      var pure7 = pure(dictApplicative);
      return function(dictFoldable) {
        var foldr22 = foldr(dictFoldable);
        return function(f) {
          return foldr22(function($454) {
            return applySecond5(f($454));
          })(pure7(unit));
        };
      };
    };
    foldl = function(dict) {
      return dict.foldl;
    };
    intercalate = function(dictFoldable) {
      var foldl22 = foldl(dictFoldable);
      return function(dictMonoid) {
        var append5 = append(dictMonoid.Semigroup0());
        var mempty2 = mempty(dictMonoid);
        return function(sep2) {
          return function(xs) {
            var go = function(v) {
              return function(v1) {
                if (v.init) {
                  return {
                    init: false,
                    acc: v1
                  };
                }
                ;
                return {
                  init: false,
                  acc: append5(v.acc)(append5(sep2)(v1))
                };
              };
            };
            return foldl22(go)({
              init: true,
              acc: mempty2
            })(xs).acc;
          };
        };
      };
    };
    foldMapDefaultR = function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(dictMonoid) {
        var append5 = append(dictMonoid.Semigroup0());
        var mempty2 = mempty(dictMonoid);
        return function(f) {
          return foldr22(function(x) {
            return function(acc) {
              return append5(f(x))(acc);
            };
          })(mempty2);
        };
      };
    };
    foldableArray = {
      foldr: foldrArray,
      foldl: foldlArray,
      foldMap: function(dictMonoid) {
        return foldMapDefaultR(foldableArray)(dictMonoid);
      }
    };
    foldMap = function(dict) {
      return dict.foldMap;
    };
    find = function(dictFoldable) {
      var foldl22 = foldl(dictFoldable);
      return function(p) {
        var go = function(v) {
          return function(v1) {
            if (v instanceof Nothing && p(v1)) {
              return new Just(v1);
            }
            ;
            return v;
          };
        };
        return foldl22(go)(Nothing.value);
      };
    };
    all = function(dictFoldable) {
      var foldMap2 = foldMap(dictFoldable);
      return function(dictHeytingAlgebra) {
        return alaF2(Conj)(foldMap2(monoidConj(dictHeytingAlgebra)));
      };
    };
    mkFn5 = function(fn) {
      return function(a, b, c, d, e) {
        return fn(a)(b)(c)(d)(e);
      };
    };
    runFn2 = function(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    };
    runFn3 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    };
    runFn4 = function(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return function(d) {
              return fn(a, b, c, d);
            };
          };
        };
      };
    };
    unfoldrArrayImpl = function(isNothing2) {
      return function(fromJust6) {
        return function(fst2) {
          return function(snd2) {
            return function(f) {
              return function(b) {
                var result = [];
                var value = b;
                while (true) {
                  var maybe2 = f(value);
                  if (isNothing2(maybe2)) return result;
                  var tuple = fromJust6(maybe2);
                  result.push(fst2(tuple));
                  value = snd2(tuple);
                }
              };
            };
          };
        };
      };
    };
    unfoldr1ArrayImpl = function(isNothing2) {
      return function(fromJust6) {
        return function(fst2) {
          return function(snd2) {
            return function(f) {
              return function(b) {
                var result = [];
                var value = b;
                while (true) {
                  var tuple = f(value);
                  result.push(fst2(tuple));
                  var maybe2 = snd2(tuple);
                  if (isNothing2(maybe2)) return result;
                  value = fromJust6(maybe2);
                }
              };
            };
          };
        };
      };
    };
    fromJust2 = /* @__PURE__ */ fromJust();
    unfoldable1Array = {
      unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
    };
    fromJust3 = /* @__PURE__ */ fromJust();
    unfoldr = function(dict) {
      return dict.unfoldr;
    };
    unfoldableArray = {
      unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
      Unfoldable10: function() {
        return unfoldable1Array;
      }
    };
    $$void2 = /* @__PURE__ */ $$void(functorST);
    intercalate1 = /* @__PURE__ */ intercalate(foldableArray);
    map4 = /* @__PURE__ */ map(functorMaybe);
    map22 = /* @__PURE__ */ map(functorST);
    fromJust4 = /* @__PURE__ */ fromJust();
    when2 = /* @__PURE__ */ when(applicativeST);
    append2 = /* @__PURE__ */ append(semigroupArray);
    zipWith = /* @__PURE__ */ runFn3(zipWithImpl);
    zip = /* @__PURE__ */ function() {
      return zipWith(Tuple.create);
    }();
    unsafeIndex = function() {
      return runFn2(unsafeIndexImpl);
    };
    unsafeIndex1 = /* @__PURE__ */ unsafeIndex();
    uncons = /* @__PURE__ */ function() {
      return runFn3(unconsImpl)($$const(Nothing.value))(function(x) {
        return function(xs) {
          return new Just({
            head: x,
            tail: xs
          });
        };
      });
    }();
    sortBy = function(comp) {
      return runFn3(sortByImpl)(comp)(function(v) {
        if (v instanceof GT) {
          return 1;
        }
        ;
        if (v instanceof EQ) {
          return 0;
        }
        ;
        if (v instanceof LT) {
          return -1 | 0;
        }
        ;
        throw new Error("Failed pattern match at Data.Array (line 897, column 38 - line 900, column 11): " + [v.constructor.name]);
      });
    };
    sort = function(dictOrd) {
      var compare5 = compare(dictOrd);
      return function(xs) {
        return sortBy(compare5)(xs);
      };
    };
    snoc = function(xs) {
      return function(x) {
        return withArray(push(x))(xs)();
      };
    };
    slice = /* @__PURE__ */ runFn3(sliceImpl);
    replicate = /* @__PURE__ */ runFn2(replicateImpl);
    $$null = function(xs) {
      return length(xs) === 0;
    };
    intercalate2 = function(dictMonoid) {
      return intercalate1(dictMonoid);
    };
    index = /* @__PURE__ */ function() {
      return runFn4(indexImpl)(Just.create)(Nothing.value);
    }();
    head = function(xs) {
      return index(xs)(0);
    };
    foldl2 = /* @__PURE__ */ foldl(foldableArray);
    findIndex = /* @__PURE__ */ function() {
      return runFn4(findIndexImpl)(Just.create)(Nothing.value);
    }();
    find2 = function(f) {
      return function(xs) {
        return map4(unsafeIndex1(xs))(findIndex(f)(xs));
      };
    };
    elemIndex = function(dictEq) {
      var eq22 = eq(dictEq);
      return function(x) {
        return findIndex(function(v) {
          return eq22(v)(x);
        });
      };
    };
    notElem2 = function(dictEq) {
      var elemIndex1 = elemIndex(dictEq);
      return function(a) {
        return function(arr) {
          return isNothing(elemIndex1(a)(arr));
        };
      };
    };
    elem2 = function(dictEq) {
      var elemIndex1 = elemIndex(dictEq);
      return function(a) {
        return function(arr) {
          return isJust(elemIndex1(a)(arr));
        };
      };
    };
    deleteAt = /* @__PURE__ */ function() {
      return runFn4(_deleteAt)(Just.create)(Nothing.value);
    }();
    deleteBy = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2.length === 0) {
            return [];
          }
          ;
          return maybe(v2)(function(i) {
            return fromJust4(deleteAt(i)(v2));
          })(findIndex(v(v1))(v2));
        };
      };
    };
    cons = function(x) {
      return function(xs) {
        return append2([x])(xs);
      };
    };
    some = function(dictAlternative) {
      var apply1 = apply(dictAlternative.Applicative0().Apply0());
      var map32 = map(dictAlternative.Plus1().Alt0().Functor0());
      return function(dictLazy) {
        var defer42 = defer(dictLazy);
        return function(v) {
          return apply1(map32(cons)(v))(defer42(function(v1) {
            return many(dictAlternative)(dictLazy)(v);
          }));
        };
      };
    };
    many = function(dictAlternative) {
      var alt7 = alt(dictAlternative.Plus1().Alt0());
      var pure14 = pure(dictAlternative.Applicative0());
      return function(dictLazy) {
        return function(v) {
          return alt7(some(dictAlternative)(dictLazy)(v))(pure14([]));
        };
      };
    };
    any2 = /* @__PURE__ */ runFn2(anyImpl);
    nubByEq = function(eq22) {
      return function(xs) {
        return function __do() {
          var arr = newSTArray();
          foreach(xs)(function(x) {
            return function __do2() {
              var e = map22(function() {
                var $194 = any2(function(v) {
                  return eq22(v)(x);
                });
                return function($195) {
                  return !$194($195);
                };
              }())(unsafeFreeze(arr))();
              return when2(e)($$void2(push(x)(arr)))();
            };
          })();
          return unsafeFreeze(arr)();
        }();
      };
    };
    unionBy = function(eq22) {
      return function(xs) {
        return function(ys) {
          return append2(xs)(foldl2(flip(deleteBy(eq22)))(nubByEq(eq22)(ys))(xs));
        };
      };
    };
    union = function(dictEq) {
      return unionBy(eq(dictEq));
    };
    bottom1 = /* @__PURE__ */ bottom(boundedChar);
    top1 = /* @__PURE__ */ top(boundedChar);
    toEnum = function(dict) {
      return dict.toEnum;
    };
    fromEnum = function(dict) {
      return dict.fromEnum;
    };
    toEnumWithDefaults = function(dictBoundedEnum) {
      var toEnum1 = toEnum(dictBoundedEnum);
      var fromEnum1 = fromEnum(dictBoundedEnum);
      var bottom22 = bottom(dictBoundedEnum.Bounded0());
      return function(low) {
        return function(high) {
          return function(x) {
            var v = toEnum1(x);
            if (v instanceof Just) {
              return v.value0;
            }
            ;
            if (v instanceof Nothing) {
              var $140 = x < fromEnum1(bottom22);
              if ($140) {
                return low;
              }
              ;
              return high;
            }
            ;
            throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
          };
        };
      };
    };
    defaultSucc = function(toEnum$prime) {
      return function(fromEnum$prime) {
        return function(a) {
          return toEnum$prime(fromEnum$prime(a) + 1 | 0);
        };
      };
    };
    defaultPred = function(toEnum$prime) {
      return function(fromEnum$prime) {
        return function(a) {
          return toEnum$prime(fromEnum$prime(a) - 1 | 0);
        };
      };
    };
    charToEnum = function(v) {
      if (v >= toCharCode(bottom1) && v <= toCharCode(top1)) {
        return new Just(fromCharCode(v));
      }
      ;
      return Nothing.value;
    };
    enumChar = {
      succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
      pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
      Ord0: function() {
        return ordChar;
      }
    };
    boundedEnumChar = /* @__PURE__ */ function() {
      return {
        cardinality: toCharCode(top1) - toCharCode(bottom1) | 0,
        toEnum: charToEnum,
        fromEnum: toCharCode,
        Bounded0: function() {
          return boundedChar;
        },
        Enum1: function() {
          return enumChar;
        }
      };
    }();
    toCharCode2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
    fromCharCode2 = /* @__PURE__ */ toEnum(boundedEnumChar);
    fromNumberImpl = function(just) {
      return function(nothing) {
        return function(n) {
          return (n | 0) === n ? just(n) : nothing;
        };
      };
    };
    toNumber = function(n) {
      return n;
    };
    isFiniteImpl = isFinite;
    floor = Math.floor;
    pow = function(n) {
      return function(p) {
        return Math.pow(n, p);
      };
    };
    top2 = /* @__PURE__ */ top(boundedInt);
    bottom2 = /* @__PURE__ */ bottom(boundedInt);
    fromNumber = /* @__PURE__ */ function() {
      return fromNumberImpl(Just.create)(Nothing.value);
    }();
    unsafeClamp = function(x) {
      if (!isFiniteImpl(x)) {
        return 0;
      }
      ;
      if (x >= toNumber(top2)) {
        return top2;
      }
      ;
      if (x <= toNumber(bottom2)) {
        return bottom2;
      }
      ;
      if (otherwise) {
        return fromMaybe(0)(fromNumber(x));
      }
      ;
      throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
    };
    floor2 = function($39) {
      return unsafeClamp(floor($39));
    };
    unsafeIndex2 = /* @__PURE__ */ unsafeIndex();
    elemIndex2 = /* @__PURE__ */ elemIndex(eqInt);
    NUMCAT_LU = /* @__PURE__ */ function() {
      function NUMCAT_LU2() {
      }
      ;
      NUMCAT_LU2.value = new NUMCAT_LU2();
      return NUMCAT_LU2;
    }();
    NUMCAT_LL = /* @__PURE__ */ function() {
      function NUMCAT_LL2() {
      }
      ;
      NUMCAT_LL2.value = new NUMCAT_LL2();
      return NUMCAT_LL2;
    }();
    NUMCAT_LT = /* @__PURE__ */ function() {
      function NUMCAT_LT2() {
      }
      ;
      NUMCAT_LT2.value = new NUMCAT_LT2();
      return NUMCAT_LT2;
    }();
    NUMCAT_LM = /* @__PURE__ */ function() {
      function NUMCAT_LM2() {
      }
      ;
      NUMCAT_LM2.value = new NUMCAT_LM2();
      return NUMCAT_LM2;
    }();
    NUMCAT_LO = /* @__PURE__ */ function() {
      function NUMCAT_LO2() {
      }
      ;
      NUMCAT_LO2.value = new NUMCAT_LO2();
      return NUMCAT_LO2;
    }();
    NUMCAT_MN = /* @__PURE__ */ function() {
      function NUMCAT_MN2() {
      }
      ;
      NUMCAT_MN2.value = new NUMCAT_MN2();
      return NUMCAT_MN2;
    }();
    NUMCAT_MC = /* @__PURE__ */ function() {
      function NUMCAT_MC2() {
      }
      ;
      NUMCAT_MC2.value = new NUMCAT_MC2();
      return NUMCAT_MC2;
    }();
    NUMCAT_ME = /* @__PURE__ */ function() {
      function NUMCAT_ME2() {
      }
      ;
      NUMCAT_ME2.value = new NUMCAT_ME2();
      return NUMCAT_ME2;
    }();
    NUMCAT_ND = /* @__PURE__ */ function() {
      function NUMCAT_ND2() {
      }
      ;
      NUMCAT_ND2.value = new NUMCAT_ND2();
      return NUMCAT_ND2;
    }();
    NUMCAT_NL = /* @__PURE__ */ function() {
      function NUMCAT_NL2() {
      }
      ;
      NUMCAT_NL2.value = new NUMCAT_NL2();
      return NUMCAT_NL2;
    }();
    NUMCAT_NO = /* @__PURE__ */ function() {
      function NUMCAT_NO2() {
      }
      ;
      NUMCAT_NO2.value = new NUMCAT_NO2();
      return NUMCAT_NO2;
    }();
    NUMCAT_PC = /* @__PURE__ */ function() {
      function NUMCAT_PC2() {
      }
      ;
      NUMCAT_PC2.value = new NUMCAT_PC2();
      return NUMCAT_PC2;
    }();
    NUMCAT_PD = /* @__PURE__ */ function() {
      function NUMCAT_PD2() {
      }
      ;
      NUMCAT_PD2.value = new NUMCAT_PD2();
      return NUMCAT_PD2;
    }();
    NUMCAT_PS = /* @__PURE__ */ function() {
      function NUMCAT_PS2() {
      }
      ;
      NUMCAT_PS2.value = new NUMCAT_PS2();
      return NUMCAT_PS2;
    }();
    NUMCAT_PE = /* @__PURE__ */ function() {
      function NUMCAT_PE2() {
      }
      ;
      NUMCAT_PE2.value = new NUMCAT_PE2();
      return NUMCAT_PE2;
    }();
    NUMCAT_PI = /* @__PURE__ */ function() {
      function NUMCAT_PI2() {
      }
      ;
      NUMCAT_PI2.value = new NUMCAT_PI2();
      return NUMCAT_PI2;
    }();
    NUMCAT_PF = /* @__PURE__ */ function() {
      function NUMCAT_PF2() {
      }
      ;
      NUMCAT_PF2.value = new NUMCAT_PF2();
      return NUMCAT_PF2;
    }();
    NUMCAT_PO = /* @__PURE__ */ function() {
      function NUMCAT_PO2() {
      }
      ;
      NUMCAT_PO2.value = new NUMCAT_PO2();
      return NUMCAT_PO2;
    }();
    NUMCAT_SM = /* @__PURE__ */ function() {
      function NUMCAT_SM2() {
      }
      ;
      NUMCAT_SM2.value = new NUMCAT_SM2();
      return NUMCAT_SM2;
    }();
    NUMCAT_SC = /* @__PURE__ */ function() {
      function NUMCAT_SC2() {
      }
      ;
      NUMCAT_SC2.value = new NUMCAT_SC2();
      return NUMCAT_SC2;
    }();
    NUMCAT_SK = /* @__PURE__ */ function() {
      function NUMCAT_SK2() {
      }
      ;
      NUMCAT_SK2.value = new NUMCAT_SK2();
      return NUMCAT_SK2;
    }();
    NUMCAT_SO = /* @__PURE__ */ function() {
      function NUMCAT_SO2() {
      }
      ;
      NUMCAT_SO2.value = new NUMCAT_SO2();
      return NUMCAT_SO2;
    }();
    NUMCAT_ZS = /* @__PURE__ */ function() {
      function NUMCAT_ZS2() {
      }
      ;
      NUMCAT_ZS2.value = new NUMCAT_ZS2();
      return NUMCAT_ZS2;
    }();
    NUMCAT_ZL = /* @__PURE__ */ function() {
      function NUMCAT_ZL2() {
      }
      ;
      NUMCAT_ZL2.value = new NUMCAT_ZL2();
      return NUMCAT_ZL2;
    }();
    NUMCAT_ZP = /* @__PURE__ */ function() {
      function NUMCAT_ZP2() {
      }
      ;
      NUMCAT_ZP2.value = new NUMCAT_ZP2();
      return NUMCAT_ZP2;
    }();
    NUMCAT_CC = /* @__PURE__ */ function() {
      function NUMCAT_CC2() {
      }
      ;
      NUMCAT_CC2.value = new NUMCAT_CC2();
      return NUMCAT_CC2;
    }();
    NUMCAT_CF = /* @__PURE__ */ function() {
      function NUMCAT_CF2() {
      }
      ;
      NUMCAT_CF2.value = new NUMCAT_CF2();
      return NUMCAT_CF2;
    }();
    NUMCAT_CS = /* @__PURE__ */ function() {
      function NUMCAT_CS2() {
      }
      ;
      NUMCAT_CS2.value = new NUMCAT_CS2();
      return NUMCAT_CS2;
    }();
    NUMCAT_CO = /* @__PURE__ */ function() {
      function NUMCAT_CO2() {
      }
      ;
      NUMCAT_CO2.value = new NUMCAT_CO2();
      return NUMCAT_CO2;
    }();
    NUMCAT_CN = /* @__PURE__ */ function() {
      function NUMCAT_CN2() {
      }
      ;
      NUMCAT_CN2.value = new NUMCAT_CN2();
      return NUMCAT_CN2;
    }();
    numSpaceBlocks = 7;
    numLat1Blocks = 63;
    numConvBlocks = 1332;
    numBlocks = 3396;
    gencatZS = 2;
    rule1 = /* @__PURE__ */ function() {
      return {
        category: gencatZS,
        unicodeCat: NUMCAT_ZS.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    spacechars = [{
      start: 32,
      length: 1,
      convRule: rule1
    }, {
      start: 160,
      length: 1,
      convRule: rule1
    }, {
      start: 5760,
      length: 1,
      convRule: rule1
    }, {
      start: 8192,
      length: 11,
      convRule: rule1
    }, {
      start: 8239,
      length: 1,
      convRule: rule1
    }, {
      start: 8287,
      length: 1,
      convRule: rule1
    }, {
      start: 12288,
      length: 1,
      convRule: rule1
    }];
    gencatZP = 67108864;
    rule162 = /* @__PURE__ */ function() {
      return {
        category: gencatZP,
        unicodeCat: NUMCAT_ZP.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatZL = 33554432;
    rule161 = /* @__PURE__ */ function() {
      return {
        category: gencatZL,
        unicodeCat: NUMCAT_ZL.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatSO = 8192;
    rule13 = /* @__PURE__ */ function() {
      return {
        category: gencatSO,
        unicodeCat: NUMCAT_SO.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule170 = /* @__PURE__ */ function() {
      return {
        category: gencatSO,
        unicodeCat: NUMCAT_SO.value,
        possible: 1,
        updist: 0,
        lowdist: 26,
        titledist: 0
      };
    }();
    rule171 = /* @__PURE__ */ function() {
      return {
        category: gencatSO,
        unicodeCat: NUMCAT_SO.value,
        possible: 1,
        updist: -26 | 0,
        lowdist: 0,
        titledist: -26 | 0
      };
    }();
    gencatSM = 64;
    rule6 = /* @__PURE__ */ function() {
      return {
        category: gencatSM,
        unicodeCat: NUMCAT_SM.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatSK = 1024;
    rule10 = /* @__PURE__ */ function() {
      return {
        category: gencatSK,
        unicodeCat: NUMCAT_SK.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatSC = 8;
    rule3 = /* @__PURE__ */ function() {
      return {
        category: gencatSC,
        unicodeCat: NUMCAT_SC.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPS = 16;
    rule4 = /* @__PURE__ */ function() {
      return {
        category: gencatPS,
        unicodeCat: NUMCAT_PS.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPO = 4;
    rule2 = /* @__PURE__ */ function() {
      return {
        category: gencatPO,
        unicodeCat: NUMCAT_PO.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPI = 32768;
    rule15 = /* @__PURE__ */ function() {
      return {
        category: gencatPI,
        unicodeCat: NUMCAT_PI.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPF = 262144;
    rule19 = /* @__PURE__ */ function() {
      return {
        category: gencatPF,
        unicodeCat: NUMCAT_PF.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPE = 32;
    rule5 = /* @__PURE__ */ function() {
      return {
        category: gencatPE,
        unicodeCat: NUMCAT_PE.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPD = 128;
    rule7 = /* @__PURE__ */ function() {
      return {
        category: gencatPD,
        unicodeCat: NUMCAT_PD.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatPC = 2048;
    rule11 = /* @__PURE__ */ function() {
      return {
        category: gencatPC,
        unicodeCat: NUMCAT_PC.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatNO = 131072;
    rule17 = /* @__PURE__ */ function() {
      return {
        category: gencatNO,
        unicodeCat: NUMCAT_NO.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatNL = 16777216;
    rule128 = /* @__PURE__ */ function() {
      return {
        category: gencatNL,
        unicodeCat: NUMCAT_NL.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule168 = /* @__PURE__ */ function() {
      return {
        category: gencatNL,
        unicodeCat: NUMCAT_NL.value,
        possible: 1,
        updist: 0,
        lowdist: 16,
        titledist: 0
      };
    }();
    rule169 = /* @__PURE__ */ function() {
      return {
        category: gencatNL,
        unicodeCat: NUMCAT_NL.value,
        possible: 1,
        updist: -16 | 0,
        lowdist: 0,
        titledist: -16 | 0
      };
    }();
    gencatND = 256;
    rule8 = /* @__PURE__ */ function() {
      return {
        category: gencatND,
        unicodeCat: NUMCAT_ND.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatMN = 2097152;
    rule92 = /* @__PURE__ */ function() {
      return {
        category: gencatMN,
        unicodeCat: NUMCAT_MN.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule93 = /* @__PURE__ */ function() {
      return {
        category: gencatMN,
        unicodeCat: NUMCAT_MN.value,
        possible: 1,
        updist: 84,
        lowdist: 0,
        titledist: 84
      };
    }();
    gencatME = 4194304;
    rule119 = /* @__PURE__ */ function() {
      return {
        category: gencatME,
        unicodeCat: NUMCAT_ME.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatMC = 8388608;
    rule124 = /* @__PURE__ */ function() {
      return {
        category: gencatMC,
        unicodeCat: NUMCAT_MC.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatLU = 512;
    nullrule = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_CN.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule104 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 8,
        titledist: 0
      };
    }();
    rule107 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule115 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -60 | 0,
        titledist: 0
      };
    }();
    rule117 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -7 | 0,
        titledist: 0
      };
    }();
    rule118 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 80,
        titledist: 0
      };
    }();
    rule120 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 15,
        titledist: 0
      };
    }();
    rule122 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 48,
        titledist: 0
      };
    }();
    rule125 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 7264,
        titledist: 0
      };
    }();
    rule127 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 38864,
        titledist: 0
      };
    }();
    rule137 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -3008 | 0,
        titledist: 0
      };
    }();
    rule142 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -7615 | 0,
        titledist: 0
      };
    }();
    rule144 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -8 | 0,
        titledist: 0
      };
    }();
    rule153 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -74 | 0,
        titledist: 0
      };
    }();
    rule156 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -86 | 0,
        titledist: 0
      };
    }();
    rule157 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -100 | 0,
        titledist: 0
      };
    }();
    rule158 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -112 | 0,
        titledist: 0
      };
    }();
    rule159 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -128 | 0,
        titledist: 0
      };
    }();
    rule160 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -126 | 0,
        titledist: 0
      };
    }();
    rule163 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -7517 | 0,
        titledist: 0
      };
    }();
    rule164 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -8383 | 0,
        titledist: 0
      };
    }();
    rule165 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -8262 | 0,
        titledist: 0
      };
    }();
    rule166 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 28,
        titledist: 0
      };
    }();
    rule172 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10743 | 0,
        titledist: 0
      };
    }();
    rule173 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -3814 | 0,
        titledist: 0
      };
    }();
    rule174 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10727 | 0,
        titledist: 0
      };
    }();
    rule177 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10780 | 0,
        titledist: 0
      };
    }();
    rule178 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10749 | 0,
        titledist: 0
      };
    }();
    rule179 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10783 | 0,
        titledist: 0
      };
    }();
    rule180 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10782 | 0,
        titledist: 0
      };
    }();
    rule181 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -10815 | 0,
        titledist: 0
      };
    }();
    rule183 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -35332 | 0,
        titledist: 0
      };
    }();
    rule184 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42280 | 0,
        titledist: 0
      };
    }();
    rule186 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42308 | 0,
        titledist: 0
      };
    }();
    rule187 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42319 | 0,
        titledist: 0
      };
    }();
    rule188 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42315 | 0,
        titledist: 0
      };
    }();
    rule189 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42305 | 0,
        titledist: 0
      };
    }();
    rule190 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42258 | 0,
        titledist: 0
      };
    }();
    rule191 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42282 | 0,
        titledist: 0
      };
    }();
    rule192 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42261 | 0,
        titledist: 0
      };
    }();
    rule193 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 928,
        titledist: 0
      };
    }();
    rule194 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -48 | 0,
        titledist: 0
      };
    }();
    rule195 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -42307 | 0,
        titledist: 0
      };
    }();
    rule196 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -35384 | 0,
        titledist: 0
      };
    }();
    rule201 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 40,
        titledist: 0
      };
    }();
    rule203 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 34,
        titledist: 0
      };
    }();
    rule22 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 1,
        titledist: 0
      };
    }();
    rule24 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -199 | 0,
        titledist: 0
      };
    }();
    rule26 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -121 | 0,
        titledist: 0
      };
    }();
    rule29 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 210,
        titledist: 0
      };
    }();
    rule30 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 206,
        titledist: 0
      };
    }();
    rule31 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 205,
        titledist: 0
      };
    }();
    rule32 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 79,
        titledist: 0
      };
    }();
    rule33 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 202,
        titledist: 0
      };
    }();
    rule34 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 203,
        titledist: 0
      };
    }();
    rule35 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 207,
        titledist: 0
      };
    }();
    rule37 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 211,
        titledist: 0
      };
    }();
    rule38 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 209,
        titledist: 0
      };
    }();
    rule40 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 213,
        titledist: 0
      };
    }();
    rule42 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 214,
        titledist: 0
      };
    }();
    rule43 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 218,
        titledist: 0
      };
    }();
    rule44 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 217,
        titledist: 0
      };
    }();
    rule45 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 219,
        titledist: 0
      };
    }();
    rule47 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 2,
        titledist: 1
      };
    }();
    rule51 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -97 | 0,
        titledist: 0
      };
    }();
    rule52 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -56 | 0,
        titledist: 0
      };
    }();
    rule53 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -130 | 0,
        titledist: 0
      };
    }();
    rule54 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 10795,
        titledist: 0
      };
    }();
    rule55 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -163 | 0,
        titledist: 0
      };
    }();
    rule56 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 10792,
        titledist: 0
      };
    }();
    rule58 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: -195 | 0,
        titledist: 0
      };
    }();
    rule59 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 69,
        titledist: 0
      };
    }();
    rule60 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 71,
        titledist: 0
      };
    }();
    rule9 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 32,
        titledist: 0
      };
    }();
    rule94 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 116,
        titledist: 0
      };
    }();
    rule95 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 38,
        titledist: 0
      };
    }();
    rule96 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 37,
        titledist: 0
      };
    }();
    rule97 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 64,
        titledist: 0
      };
    }();
    rule98 = /* @__PURE__ */ function() {
      return {
        category: gencatLU,
        unicodeCat: NUMCAT_LU.value,
        possible: 1,
        updist: 0,
        lowdist: 63,
        titledist: 0
      };
    }();
    gencatLT = 524288;
    rule151 = /* @__PURE__ */ function() {
      return {
        category: gencatLT,
        unicodeCat: NUMCAT_LT.value,
        possible: 1,
        updist: 0,
        lowdist: -8 | 0,
        titledist: 0
      };
    }();
    rule154 = /* @__PURE__ */ function() {
      return {
        category: gencatLT,
        unicodeCat: NUMCAT_LT.value,
        possible: 1,
        updist: 0,
        lowdist: -9 | 0,
        titledist: 0
      };
    }();
    rule48 = /* @__PURE__ */ function() {
      return {
        category: gencatLT,
        unicodeCat: NUMCAT_LT.value,
        possible: 1,
        updist: -1 | 0,
        lowdist: 1,
        titledist: 0
      };
    }();
    gencatLO = 16384;
    rule14 = /* @__PURE__ */ function() {
      return {
        category: gencatLO,
        unicodeCat: NUMCAT_LO.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatLM = 1048576;
    rule91 = /* @__PURE__ */ function() {
      return {
        category: gencatLM,
        unicodeCat: NUMCAT_LM.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatLL = 4096;
    rule100 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -37 | 0,
        lowdist: 0,
        titledist: -37 | 0
      };
    }();
    rule101 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -31 | 0,
        lowdist: 0,
        titledist: -31 | 0
      };
    }();
    rule102 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -64 | 0,
        lowdist: 0,
        titledist: -64 | 0
      };
    }();
    rule103 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -63 | 0,
        lowdist: 0,
        titledist: -63 | 0
      };
    }();
    rule105 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -62 | 0,
        lowdist: 0,
        titledist: -62 | 0
      };
    }();
    rule106 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -57 | 0,
        lowdist: 0,
        titledist: -57 | 0
      };
    }();
    rule108 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -47 | 0,
        lowdist: 0,
        titledist: -47 | 0
      };
    }();
    rule109 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -54 | 0,
        lowdist: 0,
        titledist: -54 | 0
      };
    }();
    rule110 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -8 | 0,
        lowdist: 0,
        titledist: -8 | 0
      };
    }();
    rule111 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -86 | 0,
        lowdist: 0,
        titledist: -86 | 0
      };
    }();
    rule112 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -80 | 0,
        lowdist: 0,
        titledist: -80 | 0
      };
    }();
    rule113 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 7,
        lowdist: 0,
        titledist: 7
      };
    }();
    rule114 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -116 | 0,
        lowdist: 0,
        titledist: -116 | 0
      };
    }();
    rule116 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -96 | 0,
        lowdist: 0,
        titledist: -96 | 0
      };
    }();
    rule12 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -32 | 0,
        lowdist: 0,
        titledist: -32 | 0
      };
    }();
    rule121 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -15 | 0,
        lowdist: 0,
        titledist: -15 | 0
      };
    }();
    rule123 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -48 | 0,
        lowdist: 0,
        titledist: -48 | 0
      };
    }();
    rule126 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 3008,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule129 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6254 | 0,
        lowdist: 0,
        titledist: -6254 | 0
      };
    }();
    rule130 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6253 | 0,
        lowdist: 0,
        titledist: -6253 | 0
      };
    }();
    rule131 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6244 | 0,
        lowdist: 0,
        titledist: -6244 | 0
      };
    }();
    rule132 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6242 | 0,
        lowdist: 0,
        titledist: -6242 | 0
      };
    }();
    rule133 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6243 | 0,
        lowdist: 0,
        titledist: -6243 | 0
      };
    }();
    rule134 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6236 | 0,
        lowdist: 0,
        titledist: -6236 | 0
      };
    }();
    rule135 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -6181 | 0,
        lowdist: 0,
        titledist: -6181 | 0
      };
    }();
    rule136 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 35266,
        lowdist: 0,
        titledist: 35266
      };
    }();
    rule138 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 35332,
        lowdist: 0,
        titledist: 35332
      };
    }();
    rule139 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 3814,
        lowdist: 0,
        titledist: 3814
      };
    }();
    rule140 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 35384,
        lowdist: 0,
        titledist: 35384
      };
    }();
    rule141 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -59 | 0,
        lowdist: 0,
        titledist: -59 | 0
      };
    }();
    rule143 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 8,
        lowdist: 0,
        titledist: 8
      };
    }();
    rule145 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 74,
        lowdist: 0,
        titledist: 74
      };
    }();
    rule146 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 86,
        lowdist: 0,
        titledist: 86
      };
    }();
    rule147 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 100,
        lowdist: 0,
        titledist: 100
      };
    }();
    rule148 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 128,
        lowdist: 0,
        titledist: 128
      };
    }();
    rule149 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 112,
        lowdist: 0,
        titledist: 112
      };
    }();
    rule150 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 126,
        lowdist: 0,
        titledist: 126
      };
    }();
    rule152 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 9,
        lowdist: 0,
        titledist: 9
      };
    }();
    rule155 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -7205 | 0,
        lowdist: 0,
        titledist: -7205 | 0
      };
    }();
    rule167 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -28 | 0,
        lowdist: 0,
        titledist: -28 | 0
      };
    }();
    rule175 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -10795 | 0,
        lowdist: 0,
        titledist: -10795 | 0
      };
    }();
    rule176 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -10792 | 0,
        lowdist: 0,
        titledist: -10792 | 0
      };
    }();
    rule18 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 743,
        lowdist: 0,
        titledist: 743
      };
    }();
    rule182 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -7264 | 0,
        lowdist: 0,
        titledist: -7264 | 0
      };
    }();
    rule185 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 48,
        lowdist: 0,
        titledist: 48
      };
    }();
    rule197 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -928 | 0,
        lowdist: 0,
        titledist: -928 | 0
      };
    }();
    rule198 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -38864 | 0,
        lowdist: 0,
        titledist: -38864 | 0
      };
    }();
    rule20 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    rule202 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -40 | 0,
        lowdist: 0,
        titledist: -40 | 0
      };
    }();
    rule204 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -34 | 0,
        lowdist: 0,
        titledist: -34 | 0
      };
    }();
    rule21 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 121,
        lowdist: 0,
        titledist: 121
      };
    }();
    rule23 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -1 | 0,
        lowdist: 0,
        titledist: -1 | 0
      };
    }();
    rule25 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -232 | 0,
        lowdist: 0,
        titledist: -232 | 0
      };
    }();
    rule27 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -300 | 0,
        lowdist: 0,
        titledist: -300 | 0
      };
    }();
    rule28 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 195,
        lowdist: 0,
        titledist: 195
      };
    }();
    rule36 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 97,
        lowdist: 0,
        titledist: 97
      };
    }();
    rule39 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 163,
        lowdist: 0,
        titledist: 163
      };
    }();
    rule41 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 130,
        lowdist: 0,
        titledist: 130
      };
    }();
    rule46 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 56,
        lowdist: 0,
        titledist: 56
      };
    }();
    rule49 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -2 | 0,
        lowdist: 0,
        titledist: -1 | 0
      };
    }();
    rule50 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -79 | 0,
        lowdist: 0,
        titledist: -79 | 0
      };
    }();
    rule57 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10815,
        lowdist: 0,
        titledist: 10815
      };
    }();
    rule61 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10783,
        lowdist: 0,
        titledist: 10783
      };
    }();
    rule62 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10780,
        lowdist: 0,
        titledist: 10780
      };
    }();
    rule63 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10782,
        lowdist: 0,
        titledist: 10782
      };
    }();
    rule64 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -210 | 0,
        lowdist: 0,
        titledist: -210 | 0
      };
    }();
    rule65 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -206 | 0,
        lowdist: 0,
        titledist: -206 | 0
      };
    }();
    rule66 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -205 | 0,
        lowdist: 0,
        titledist: -205 | 0
      };
    }();
    rule67 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -202 | 0,
        lowdist: 0,
        titledist: -202 | 0
      };
    }();
    rule68 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -203 | 0,
        lowdist: 0,
        titledist: -203 | 0
      };
    }();
    rule69 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42319,
        lowdist: 0,
        titledist: 42319
      };
    }();
    rule70 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42315,
        lowdist: 0,
        titledist: 42315
      };
    }();
    rule71 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -207 | 0,
        lowdist: 0,
        titledist: -207 | 0
      };
    }();
    rule72 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42280,
        lowdist: 0,
        titledist: 42280
      };
    }();
    rule73 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42308,
        lowdist: 0,
        titledist: 42308
      };
    }();
    rule74 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -209 | 0,
        lowdist: 0,
        titledist: -209 | 0
      };
    }();
    rule75 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -211 | 0,
        lowdist: 0,
        titledist: -211 | 0
      };
    }();
    rule76 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10743,
        lowdist: 0,
        titledist: 10743
      };
    }();
    rule77 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42305,
        lowdist: 0,
        titledist: 42305
      };
    }();
    rule78 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10749,
        lowdist: 0,
        titledist: 10749
      };
    }();
    rule79 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -213 | 0,
        lowdist: 0,
        titledist: -213 | 0
      };
    }();
    rule80 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -214 | 0,
        lowdist: 0,
        titledist: -214 | 0
      };
    }();
    rule81 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 10727,
        lowdist: 0,
        titledist: 10727
      };
    }();
    rule82 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -218 | 0,
        lowdist: 0,
        titledist: -218 | 0
      };
    }();
    rule83 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42307,
        lowdist: 0,
        titledist: 42307
      };
    }();
    rule84 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42282,
        lowdist: 0,
        titledist: 42282
      };
    }();
    rule85 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -69 | 0,
        lowdist: 0,
        titledist: -69 | 0
      };
    }();
    rule86 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -217 | 0,
        lowdist: 0,
        titledist: -217 | 0
      };
    }();
    rule87 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -71 | 0,
        lowdist: 0,
        titledist: -71 | 0
      };
    }();
    rule88 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -219 | 0,
        lowdist: 0,
        titledist: -219 | 0
      };
    }();
    rule89 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42261,
        lowdist: 0,
        titledist: 42261
      };
    }();
    rule90 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: 42258,
        lowdist: 0,
        titledist: 42258
      };
    }();
    rule99 = /* @__PURE__ */ function() {
      return {
        category: gencatLL,
        unicodeCat: NUMCAT_LL.value,
        possible: 1,
        updist: -38 | 0,
        lowdist: 0,
        titledist: -38 | 0
      };
    }();
    gencatCS = 134217728;
    rule199 = /* @__PURE__ */ function() {
      return {
        category: gencatCS,
        unicodeCat: NUMCAT_CS.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatCO = 268435456;
    rule200 = /* @__PURE__ */ function() {
      return {
        category: gencatCO,
        unicodeCat: NUMCAT_CO.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatCF = 65536;
    rule16 = /* @__PURE__ */ function() {
      return {
        category: gencatCF,
        unicodeCat: NUMCAT_CF.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    gencatCC = 1;
    rule0 = /* @__PURE__ */ function() {
      return {
        category: gencatCC,
        unicodeCat: NUMCAT_CC.value,
        possible: 0,
        updist: 0,
        lowdist: 0,
        titledist: 0
      };
    }();
    convchars = [{
      start: 65,
      length: 26,
      convRule: rule9
    }, {
      start: 97,
      length: 26,
      convRule: rule12
    }, {
      start: 181,
      length: 1,
      convRule: rule18
    }, {
      start: 192,
      length: 23,
      convRule: rule9
    }, {
      start: 216,
      length: 7,
      convRule: rule9
    }, {
      start: 224,
      length: 23,
      convRule: rule12
    }, {
      start: 248,
      length: 7,
      convRule: rule12
    }, {
      start: 255,
      length: 1,
      convRule: rule21
    }, {
      start: 256,
      length: 1,
      convRule: rule22
    }, {
      start: 257,
      length: 1,
      convRule: rule23
    }, {
      start: 258,
      length: 1,
      convRule: rule22
    }, {
      start: 259,
      length: 1,
      convRule: rule23
    }, {
      start: 260,
      length: 1,
      convRule: rule22
    }, {
      start: 261,
      length: 1,
      convRule: rule23
    }, {
      start: 262,
      length: 1,
      convRule: rule22
    }, {
      start: 263,
      length: 1,
      convRule: rule23
    }, {
      start: 264,
      length: 1,
      convRule: rule22
    }, {
      start: 265,
      length: 1,
      convRule: rule23
    }, {
      start: 266,
      length: 1,
      convRule: rule22
    }, {
      start: 267,
      length: 1,
      convRule: rule23
    }, {
      start: 268,
      length: 1,
      convRule: rule22
    }, {
      start: 269,
      length: 1,
      convRule: rule23
    }, {
      start: 270,
      length: 1,
      convRule: rule22
    }, {
      start: 271,
      length: 1,
      convRule: rule23
    }, {
      start: 272,
      length: 1,
      convRule: rule22
    }, {
      start: 273,
      length: 1,
      convRule: rule23
    }, {
      start: 274,
      length: 1,
      convRule: rule22
    }, {
      start: 275,
      length: 1,
      convRule: rule23
    }, {
      start: 276,
      length: 1,
      convRule: rule22
    }, {
      start: 277,
      length: 1,
      convRule: rule23
    }, {
      start: 278,
      length: 1,
      convRule: rule22
    }, {
      start: 279,
      length: 1,
      convRule: rule23
    }, {
      start: 280,
      length: 1,
      convRule: rule22
    }, {
      start: 281,
      length: 1,
      convRule: rule23
    }, {
      start: 282,
      length: 1,
      convRule: rule22
    }, {
      start: 283,
      length: 1,
      convRule: rule23
    }, {
      start: 284,
      length: 1,
      convRule: rule22
    }, {
      start: 285,
      length: 1,
      convRule: rule23
    }, {
      start: 286,
      length: 1,
      convRule: rule22
    }, {
      start: 287,
      length: 1,
      convRule: rule23
    }, {
      start: 288,
      length: 1,
      convRule: rule22
    }, {
      start: 289,
      length: 1,
      convRule: rule23
    }, {
      start: 290,
      length: 1,
      convRule: rule22
    }, {
      start: 291,
      length: 1,
      convRule: rule23
    }, {
      start: 292,
      length: 1,
      convRule: rule22
    }, {
      start: 293,
      length: 1,
      convRule: rule23
    }, {
      start: 294,
      length: 1,
      convRule: rule22
    }, {
      start: 295,
      length: 1,
      convRule: rule23
    }, {
      start: 296,
      length: 1,
      convRule: rule22
    }, {
      start: 297,
      length: 1,
      convRule: rule23
    }, {
      start: 298,
      length: 1,
      convRule: rule22
    }, {
      start: 299,
      length: 1,
      convRule: rule23
    }, {
      start: 300,
      length: 1,
      convRule: rule22
    }, {
      start: 301,
      length: 1,
      convRule: rule23
    }, {
      start: 302,
      length: 1,
      convRule: rule22
    }, {
      start: 303,
      length: 1,
      convRule: rule23
    }, {
      start: 304,
      length: 1,
      convRule: rule24
    }, {
      start: 305,
      length: 1,
      convRule: rule25
    }, {
      start: 306,
      length: 1,
      convRule: rule22
    }, {
      start: 307,
      length: 1,
      convRule: rule23
    }, {
      start: 308,
      length: 1,
      convRule: rule22
    }, {
      start: 309,
      length: 1,
      convRule: rule23
    }, {
      start: 310,
      length: 1,
      convRule: rule22
    }, {
      start: 311,
      length: 1,
      convRule: rule23
    }, {
      start: 313,
      length: 1,
      convRule: rule22
    }, {
      start: 314,
      length: 1,
      convRule: rule23
    }, {
      start: 315,
      length: 1,
      convRule: rule22
    }, {
      start: 316,
      length: 1,
      convRule: rule23
    }, {
      start: 317,
      length: 1,
      convRule: rule22
    }, {
      start: 318,
      length: 1,
      convRule: rule23
    }, {
      start: 319,
      length: 1,
      convRule: rule22
    }, {
      start: 320,
      length: 1,
      convRule: rule23
    }, {
      start: 321,
      length: 1,
      convRule: rule22
    }, {
      start: 322,
      length: 1,
      convRule: rule23
    }, {
      start: 323,
      length: 1,
      convRule: rule22
    }, {
      start: 324,
      length: 1,
      convRule: rule23
    }, {
      start: 325,
      length: 1,
      convRule: rule22
    }, {
      start: 326,
      length: 1,
      convRule: rule23
    }, {
      start: 327,
      length: 1,
      convRule: rule22
    }, {
      start: 328,
      length: 1,
      convRule: rule23
    }, {
      start: 330,
      length: 1,
      convRule: rule22
    }, {
      start: 331,
      length: 1,
      convRule: rule23
    }, {
      start: 332,
      length: 1,
      convRule: rule22
    }, {
      start: 333,
      length: 1,
      convRule: rule23
    }, {
      start: 334,
      length: 1,
      convRule: rule22
    }, {
      start: 335,
      length: 1,
      convRule: rule23
    }, {
      start: 336,
      length: 1,
      convRule: rule22
    }, {
      start: 337,
      length: 1,
      convRule: rule23
    }, {
      start: 338,
      length: 1,
      convRule: rule22
    }, {
      start: 339,
      length: 1,
      convRule: rule23
    }, {
      start: 340,
      length: 1,
      convRule: rule22
    }, {
      start: 341,
      length: 1,
      convRule: rule23
    }, {
      start: 342,
      length: 1,
      convRule: rule22
    }, {
      start: 343,
      length: 1,
      convRule: rule23
    }, {
      start: 344,
      length: 1,
      convRule: rule22
    }, {
      start: 345,
      length: 1,
      convRule: rule23
    }, {
      start: 346,
      length: 1,
      convRule: rule22
    }, {
      start: 347,
      length: 1,
      convRule: rule23
    }, {
      start: 348,
      length: 1,
      convRule: rule22
    }, {
      start: 349,
      length: 1,
      convRule: rule23
    }, {
      start: 350,
      length: 1,
      convRule: rule22
    }, {
      start: 351,
      length: 1,
      convRule: rule23
    }, {
      start: 352,
      length: 1,
      convRule: rule22
    }, {
      start: 353,
      length: 1,
      convRule: rule23
    }, {
      start: 354,
      length: 1,
      convRule: rule22
    }, {
      start: 355,
      length: 1,
      convRule: rule23
    }, {
      start: 356,
      length: 1,
      convRule: rule22
    }, {
      start: 357,
      length: 1,
      convRule: rule23
    }, {
      start: 358,
      length: 1,
      convRule: rule22
    }, {
      start: 359,
      length: 1,
      convRule: rule23
    }, {
      start: 360,
      length: 1,
      convRule: rule22
    }, {
      start: 361,
      length: 1,
      convRule: rule23
    }, {
      start: 362,
      length: 1,
      convRule: rule22
    }, {
      start: 363,
      length: 1,
      convRule: rule23
    }, {
      start: 364,
      length: 1,
      convRule: rule22
    }, {
      start: 365,
      length: 1,
      convRule: rule23
    }, {
      start: 366,
      length: 1,
      convRule: rule22
    }, {
      start: 367,
      length: 1,
      convRule: rule23
    }, {
      start: 368,
      length: 1,
      convRule: rule22
    }, {
      start: 369,
      length: 1,
      convRule: rule23
    }, {
      start: 370,
      length: 1,
      convRule: rule22
    }, {
      start: 371,
      length: 1,
      convRule: rule23
    }, {
      start: 372,
      length: 1,
      convRule: rule22
    }, {
      start: 373,
      length: 1,
      convRule: rule23
    }, {
      start: 374,
      length: 1,
      convRule: rule22
    }, {
      start: 375,
      length: 1,
      convRule: rule23
    }, {
      start: 376,
      length: 1,
      convRule: rule26
    }, {
      start: 377,
      length: 1,
      convRule: rule22
    }, {
      start: 378,
      length: 1,
      convRule: rule23
    }, {
      start: 379,
      length: 1,
      convRule: rule22
    }, {
      start: 380,
      length: 1,
      convRule: rule23
    }, {
      start: 381,
      length: 1,
      convRule: rule22
    }, {
      start: 382,
      length: 1,
      convRule: rule23
    }, {
      start: 383,
      length: 1,
      convRule: rule27
    }, {
      start: 384,
      length: 1,
      convRule: rule28
    }, {
      start: 385,
      length: 1,
      convRule: rule29
    }, {
      start: 386,
      length: 1,
      convRule: rule22
    }, {
      start: 387,
      length: 1,
      convRule: rule23
    }, {
      start: 388,
      length: 1,
      convRule: rule22
    }, {
      start: 389,
      length: 1,
      convRule: rule23
    }, {
      start: 390,
      length: 1,
      convRule: rule30
    }, {
      start: 391,
      length: 1,
      convRule: rule22
    }, {
      start: 392,
      length: 1,
      convRule: rule23
    }, {
      start: 393,
      length: 2,
      convRule: rule31
    }, {
      start: 395,
      length: 1,
      convRule: rule22
    }, {
      start: 396,
      length: 1,
      convRule: rule23
    }, {
      start: 398,
      length: 1,
      convRule: rule32
    }, {
      start: 399,
      length: 1,
      convRule: rule33
    }, {
      start: 400,
      length: 1,
      convRule: rule34
    }, {
      start: 401,
      length: 1,
      convRule: rule22
    }, {
      start: 402,
      length: 1,
      convRule: rule23
    }, {
      start: 403,
      length: 1,
      convRule: rule31
    }, {
      start: 404,
      length: 1,
      convRule: rule35
    }, {
      start: 405,
      length: 1,
      convRule: rule36
    }, {
      start: 406,
      length: 1,
      convRule: rule37
    }, {
      start: 407,
      length: 1,
      convRule: rule38
    }, {
      start: 408,
      length: 1,
      convRule: rule22
    }, {
      start: 409,
      length: 1,
      convRule: rule23
    }, {
      start: 410,
      length: 1,
      convRule: rule39
    }, {
      start: 412,
      length: 1,
      convRule: rule37
    }, {
      start: 413,
      length: 1,
      convRule: rule40
    }, {
      start: 414,
      length: 1,
      convRule: rule41
    }, {
      start: 415,
      length: 1,
      convRule: rule42
    }, {
      start: 416,
      length: 1,
      convRule: rule22
    }, {
      start: 417,
      length: 1,
      convRule: rule23
    }, {
      start: 418,
      length: 1,
      convRule: rule22
    }, {
      start: 419,
      length: 1,
      convRule: rule23
    }, {
      start: 420,
      length: 1,
      convRule: rule22
    }, {
      start: 421,
      length: 1,
      convRule: rule23
    }, {
      start: 422,
      length: 1,
      convRule: rule43
    }, {
      start: 423,
      length: 1,
      convRule: rule22
    }, {
      start: 424,
      length: 1,
      convRule: rule23
    }, {
      start: 425,
      length: 1,
      convRule: rule43
    }, {
      start: 428,
      length: 1,
      convRule: rule22
    }, {
      start: 429,
      length: 1,
      convRule: rule23
    }, {
      start: 430,
      length: 1,
      convRule: rule43
    }, {
      start: 431,
      length: 1,
      convRule: rule22
    }, {
      start: 432,
      length: 1,
      convRule: rule23
    }, {
      start: 433,
      length: 2,
      convRule: rule44
    }, {
      start: 435,
      length: 1,
      convRule: rule22
    }, {
      start: 436,
      length: 1,
      convRule: rule23
    }, {
      start: 437,
      length: 1,
      convRule: rule22
    }, {
      start: 438,
      length: 1,
      convRule: rule23
    }, {
      start: 439,
      length: 1,
      convRule: rule45
    }, {
      start: 440,
      length: 1,
      convRule: rule22
    }, {
      start: 441,
      length: 1,
      convRule: rule23
    }, {
      start: 444,
      length: 1,
      convRule: rule22
    }, {
      start: 445,
      length: 1,
      convRule: rule23
    }, {
      start: 447,
      length: 1,
      convRule: rule46
    }, {
      start: 452,
      length: 1,
      convRule: rule47
    }, {
      start: 453,
      length: 1,
      convRule: rule48
    }, {
      start: 454,
      length: 1,
      convRule: rule49
    }, {
      start: 455,
      length: 1,
      convRule: rule47
    }, {
      start: 456,
      length: 1,
      convRule: rule48
    }, {
      start: 457,
      length: 1,
      convRule: rule49
    }, {
      start: 458,
      length: 1,
      convRule: rule47
    }, {
      start: 459,
      length: 1,
      convRule: rule48
    }, {
      start: 460,
      length: 1,
      convRule: rule49
    }, {
      start: 461,
      length: 1,
      convRule: rule22
    }, {
      start: 462,
      length: 1,
      convRule: rule23
    }, {
      start: 463,
      length: 1,
      convRule: rule22
    }, {
      start: 464,
      length: 1,
      convRule: rule23
    }, {
      start: 465,
      length: 1,
      convRule: rule22
    }, {
      start: 466,
      length: 1,
      convRule: rule23
    }, {
      start: 467,
      length: 1,
      convRule: rule22
    }, {
      start: 468,
      length: 1,
      convRule: rule23
    }, {
      start: 469,
      length: 1,
      convRule: rule22
    }, {
      start: 470,
      length: 1,
      convRule: rule23
    }, {
      start: 471,
      length: 1,
      convRule: rule22
    }, {
      start: 472,
      length: 1,
      convRule: rule23
    }, {
      start: 473,
      length: 1,
      convRule: rule22
    }, {
      start: 474,
      length: 1,
      convRule: rule23
    }, {
      start: 475,
      length: 1,
      convRule: rule22
    }, {
      start: 476,
      length: 1,
      convRule: rule23
    }, {
      start: 477,
      length: 1,
      convRule: rule50
    }, {
      start: 478,
      length: 1,
      convRule: rule22
    }, {
      start: 479,
      length: 1,
      convRule: rule23
    }, {
      start: 480,
      length: 1,
      convRule: rule22
    }, {
      start: 481,
      length: 1,
      convRule: rule23
    }, {
      start: 482,
      length: 1,
      convRule: rule22
    }, {
      start: 483,
      length: 1,
      convRule: rule23
    }, {
      start: 484,
      length: 1,
      convRule: rule22
    }, {
      start: 485,
      length: 1,
      convRule: rule23
    }, {
      start: 486,
      length: 1,
      convRule: rule22
    }, {
      start: 487,
      length: 1,
      convRule: rule23
    }, {
      start: 488,
      length: 1,
      convRule: rule22
    }, {
      start: 489,
      length: 1,
      convRule: rule23
    }, {
      start: 490,
      length: 1,
      convRule: rule22
    }, {
      start: 491,
      length: 1,
      convRule: rule23
    }, {
      start: 492,
      length: 1,
      convRule: rule22
    }, {
      start: 493,
      length: 1,
      convRule: rule23
    }, {
      start: 494,
      length: 1,
      convRule: rule22
    }, {
      start: 495,
      length: 1,
      convRule: rule23
    }, {
      start: 497,
      length: 1,
      convRule: rule47
    }, {
      start: 498,
      length: 1,
      convRule: rule48
    }, {
      start: 499,
      length: 1,
      convRule: rule49
    }, {
      start: 500,
      length: 1,
      convRule: rule22
    }, {
      start: 501,
      length: 1,
      convRule: rule23
    }, {
      start: 502,
      length: 1,
      convRule: rule51
    }, {
      start: 503,
      length: 1,
      convRule: rule52
    }, {
      start: 504,
      length: 1,
      convRule: rule22
    }, {
      start: 505,
      length: 1,
      convRule: rule23
    }, {
      start: 506,
      length: 1,
      convRule: rule22
    }, {
      start: 507,
      length: 1,
      convRule: rule23
    }, {
      start: 508,
      length: 1,
      convRule: rule22
    }, {
      start: 509,
      length: 1,
      convRule: rule23
    }, {
      start: 510,
      length: 1,
      convRule: rule22
    }, {
      start: 511,
      length: 1,
      convRule: rule23
    }, {
      start: 512,
      length: 1,
      convRule: rule22
    }, {
      start: 513,
      length: 1,
      convRule: rule23
    }, {
      start: 514,
      length: 1,
      convRule: rule22
    }, {
      start: 515,
      length: 1,
      convRule: rule23
    }, {
      start: 516,
      length: 1,
      convRule: rule22
    }, {
      start: 517,
      length: 1,
      convRule: rule23
    }, {
      start: 518,
      length: 1,
      convRule: rule22
    }, {
      start: 519,
      length: 1,
      convRule: rule23
    }, {
      start: 520,
      length: 1,
      convRule: rule22
    }, {
      start: 521,
      length: 1,
      convRule: rule23
    }, {
      start: 522,
      length: 1,
      convRule: rule22
    }, {
      start: 523,
      length: 1,
      convRule: rule23
    }, {
      start: 524,
      length: 1,
      convRule: rule22
    }, {
      start: 525,
      length: 1,
      convRule: rule23
    }, {
      start: 526,
      length: 1,
      convRule: rule22
    }, {
      start: 527,
      length: 1,
      convRule: rule23
    }, {
      start: 528,
      length: 1,
      convRule: rule22
    }, {
      start: 529,
      length: 1,
      convRule: rule23
    }, {
      start: 530,
      length: 1,
      convRule: rule22
    }, {
      start: 531,
      length: 1,
      convRule: rule23
    }, {
      start: 532,
      length: 1,
      convRule: rule22
    }, {
      start: 533,
      length: 1,
      convRule: rule23
    }, {
      start: 534,
      length: 1,
      convRule: rule22
    }, {
      start: 535,
      length: 1,
      convRule: rule23
    }, {
      start: 536,
      length: 1,
      convRule: rule22
    }, {
      start: 537,
      length: 1,
      convRule: rule23
    }, {
      start: 538,
      length: 1,
      convRule: rule22
    }, {
      start: 539,
      length: 1,
      convRule: rule23
    }, {
      start: 540,
      length: 1,
      convRule: rule22
    }, {
      start: 541,
      length: 1,
      convRule: rule23
    }, {
      start: 542,
      length: 1,
      convRule: rule22
    }, {
      start: 543,
      length: 1,
      convRule: rule23
    }, {
      start: 544,
      length: 1,
      convRule: rule53
    }, {
      start: 546,
      length: 1,
      convRule: rule22
    }, {
      start: 547,
      length: 1,
      convRule: rule23
    }, {
      start: 548,
      length: 1,
      convRule: rule22
    }, {
      start: 549,
      length: 1,
      convRule: rule23
    }, {
      start: 550,
      length: 1,
      convRule: rule22
    }, {
      start: 551,
      length: 1,
      convRule: rule23
    }, {
      start: 552,
      length: 1,
      convRule: rule22
    }, {
      start: 553,
      length: 1,
      convRule: rule23
    }, {
      start: 554,
      length: 1,
      convRule: rule22
    }, {
      start: 555,
      length: 1,
      convRule: rule23
    }, {
      start: 556,
      length: 1,
      convRule: rule22
    }, {
      start: 557,
      length: 1,
      convRule: rule23
    }, {
      start: 558,
      length: 1,
      convRule: rule22
    }, {
      start: 559,
      length: 1,
      convRule: rule23
    }, {
      start: 560,
      length: 1,
      convRule: rule22
    }, {
      start: 561,
      length: 1,
      convRule: rule23
    }, {
      start: 562,
      length: 1,
      convRule: rule22
    }, {
      start: 563,
      length: 1,
      convRule: rule23
    }, {
      start: 570,
      length: 1,
      convRule: rule54
    }, {
      start: 571,
      length: 1,
      convRule: rule22
    }, {
      start: 572,
      length: 1,
      convRule: rule23
    }, {
      start: 573,
      length: 1,
      convRule: rule55
    }, {
      start: 574,
      length: 1,
      convRule: rule56
    }, {
      start: 575,
      length: 2,
      convRule: rule57
    }, {
      start: 577,
      length: 1,
      convRule: rule22
    }, {
      start: 578,
      length: 1,
      convRule: rule23
    }, {
      start: 579,
      length: 1,
      convRule: rule58
    }, {
      start: 580,
      length: 1,
      convRule: rule59
    }, {
      start: 581,
      length: 1,
      convRule: rule60
    }, {
      start: 582,
      length: 1,
      convRule: rule22
    }, {
      start: 583,
      length: 1,
      convRule: rule23
    }, {
      start: 584,
      length: 1,
      convRule: rule22
    }, {
      start: 585,
      length: 1,
      convRule: rule23
    }, {
      start: 586,
      length: 1,
      convRule: rule22
    }, {
      start: 587,
      length: 1,
      convRule: rule23
    }, {
      start: 588,
      length: 1,
      convRule: rule22
    }, {
      start: 589,
      length: 1,
      convRule: rule23
    }, {
      start: 590,
      length: 1,
      convRule: rule22
    }, {
      start: 591,
      length: 1,
      convRule: rule23
    }, {
      start: 592,
      length: 1,
      convRule: rule61
    }, {
      start: 593,
      length: 1,
      convRule: rule62
    }, {
      start: 594,
      length: 1,
      convRule: rule63
    }, {
      start: 595,
      length: 1,
      convRule: rule64
    }, {
      start: 596,
      length: 1,
      convRule: rule65
    }, {
      start: 598,
      length: 2,
      convRule: rule66
    }, {
      start: 601,
      length: 1,
      convRule: rule67
    }, {
      start: 603,
      length: 1,
      convRule: rule68
    }, {
      start: 604,
      length: 1,
      convRule: rule69
    }, {
      start: 608,
      length: 1,
      convRule: rule66
    }, {
      start: 609,
      length: 1,
      convRule: rule70
    }, {
      start: 611,
      length: 1,
      convRule: rule71
    }, {
      start: 613,
      length: 1,
      convRule: rule72
    }, {
      start: 614,
      length: 1,
      convRule: rule73
    }, {
      start: 616,
      length: 1,
      convRule: rule74
    }, {
      start: 617,
      length: 1,
      convRule: rule75
    }, {
      start: 618,
      length: 1,
      convRule: rule73
    }, {
      start: 619,
      length: 1,
      convRule: rule76
    }, {
      start: 620,
      length: 1,
      convRule: rule77
    }, {
      start: 623,
      length: 1,
      convRule: rule75
    }, {
      start: 625,
      length: 1,
      convRule: rule78
    }, {
      start: 626,
      length: 1,
      convRule: rule79
    }, {
      start: 629,
      length: 1,
      convRule: rule80
    }, {
      start: 637,
      length: 1,
      convRule: rule81
    }, {
      start: 640,
      length: 1,
      convRule: rule82
    }, {
      start: 642,
      length: 1,
      convRule: rule83
    }, {
      start: 643,
      length: 1,
      convRule: rule82
    }, {
      start: 647,
      length: 1,
      convRule: rule84
    }, {
      start: 648,
      length: 1,
      convRule: rule82
    }, {
      start: 649,
      length: 1,
      convRule: rule85
    }, {
      start: 650,
      length: 2,
      convRule: rule86
    }, {
      start: 652,
      length: 1,
      convRule: rule87
    }, {
      start: 658,
      length: 1,
      convRule: rule88
    }, {
      start: 669,
      length: 1,
      convRule: rule89
    }, {
      start: 670,
      length: 1,
      convRule: rule90
    }, {
      start: 837,
      length: 1,
      convRule: rule93
    }, {
      start: 880,
      length: 1,
      convRule: rule22
    }, {
      start: 881,
      length: 1,
      convRule: rule23
    }, {
      start: 882,
      length: 1,
      convRule: rule22
    }, {
      start: 883,
      length: 1,
      convRule: rule23
    }, {
      start: 886,
      length: 1,
      convRule: rule22
    }, {
      start: 887,
      length: 1,
      convRule: rule23
    }, {
      start: 891,
      length: 3,
      convRule: rule41
    }, {
      start: 895,
      length: 1,
      convRule: rule94
    }, {
      start: 902,
      length: 1,
      convRule: rule95
    }, {
      start: 904,
      length: 3,
      convRule: rule96
    }, {
      start: 908,
      length: 1,
      convRule: rule97
    }, {
      start: 910,
      length: 2,
      convRule: rule98
    }, {
      start: 913,
      length: 17,
      convRule: rule9
    }, {
      start: 931,
      length: 9,
      convRule: rule9
    }, {
      start: 940,
      length: 1,
      convRule: rule99
    }, {
      start: 941,
      length: 3,
      convRule: rule100
    }, {
      start: 945,
      length: 17,
      convRule: rule12
    }, {
      start: 962,
      length: 1,
      convRule: rule101
    }, {
      start: 963,
      length: 9,
      convRule: rule12
    }, {
      start: 972,
      length: 1,
      convRule: rule102
    }, {
      start: 973,
      length: 2,
      convRule: rule103
    }, {
      start: 975,
      length: 1,
      convRule: rule104
    }, {
      start: 976,
      length: 1,
      convRule: rule105
    }, {
      start: 977,
      length: 1,
      convRule: rule106
    }, {
      start: 981,
      length: 1,
      convRule: rule108
    }, {
      start: 982,
      length: 1,
      convRule: rule109
    }, {
      start: 983,
      length: 1,
      convRule: rule110
    }, {
      start: 984,
      length: 1,
      convRule: rule22
    }, {
      start: 985,
      length: 1,
      convRule: rule23
    }, {
      start: 986,
      length: 1,
      convRule: rule22
    }, {
      start: 987,
      length: 1,
      convRule: rule23
    }, {
      start: 988,
      length: 1,
      convRule: rule22
    }, {
      start: 989,
      length: 1,
      convRule: rule23
    }, {
      start: 990,
      length: 1,
      convRule: rule22
    }, {
      start: 991,
      length: 1,
      convRule: rule23
    }, {
      start: 992,
      length: 1,
      convRule: rule22
    }, {
      start: 993,
      length: 1,
      convRule: rule23
    }, {
      start: 994,
      length: 1,
      convRule: rule22
    }, {
      start: 995,
      length: 1,
      convRule: rule23
    }, {
      start: 996,
      length: 1,
      convRule: rule22
    }, {
      start: 997,
      length: 1,
      convRule: rule23
    }, {
      start: 998,
      length: 1,
      convRule: rule22
    }, {
      start: 999,
      length: 1,
      convRule: rule23
    }, {
      start: 1e3,
      length: 1,
      convRule: rule22
    }, {
      start: 1001,
      length: 1,
      convRule: rule23
    }, {
      start: 1002,
      length: 1,
      convRule: rule22
    }, {
      start: 1003,
      length: 1,
      convRule: rule23
    }, {
      start: 1004,
      length: 1,
      convRule: rule22
    }, {
      start: 1005,
      length: 1,
      convRule: rule23
    }, {
      start: 1006,
      length: 1,
      convRule: rule22
    }, {
      start: 1007,
      length: 1,
      convRule: rule23
    }, {
      start: 1008,
      length: 1,
      convRule: rule111
    }, {
      start: 1009,
      length: 1,
      convRule: rule112
    }, {
      start: 1010,
      length: 1,
      convRule: rule113
    }, {
      start: 1011,
      length: 1,
      convRule: rule114
    }, {
      start: 1012,
      length: 1,
      convRule: rule115
    }, {
      start: 1013,
      length: 1,
      convRule: rule116
    }, {
      start: 1015,
      length: 1,
      convRule: rule22
    }, {
      start: 1016,
      length: 1,
      convRule: rule23
    }, {
      start: 1017,
      length: 1,
      convRule: rule117
    }, {
      start: 1018,
      length: 1,
      convRule: rule22
    }, {
      start: 1019,
      length: 1,
      convRule: rule23
    }, {
      start: 1021,
      length: 3,
      convRule: rule53
    }, {
      start: 1024,
      length: 16,
      convRule: rule118
    }, {
      start: 1040,
      length: 32,
      convRule: rule9
    }, {
      start: 1072,
      length: 32,
      convRule: rule12
    }, {
      start: 1104,
      length: 16,
      convRule: rule112
    }, {
      start: 1120,
      length: 1,
      convRule: rule22
    }, {
      start: 1121,
      length: 1,
      convRule: rule23
    }, {
      start: 1122,
      length: 1,
      convRule: rule22
    }, {
      start: 1123,
      length: 1,
      convRule: rule23
    }, {
      start: 1124,
      length: 1,
      convRule: rule22
    }, {
      start: 1125,
      length: 1,
      convRule: rule23
    }, {
      start: 1126,
      length: 1,
      convRule: rule22
    }, {
      start: 1127,
      length: 1,
      convRule: rule23
    }, {
      start: 1128,
      length: 1,
      convRule: rule22
    }, {
      start: 1129,
      length: 1,
      convRule: rule23
    }, {
      start: 1130,
      length: 1,
      convRule: rule22
    }, {
      start: 1131,
      length: 1,
      convRule: rule23
    }, {
      start: 1132,
      length: 1,
      convRule: rule22
    }, {
      start: 1133,
      length: 1,
      convRule: rule23
    }, {
      start: 1134,
      length: 1,
      convRule: rule22
    }, {
      start: 1135,
      length: 1,
      convRule: rule23
    }, {
      start: 1136,
      length: 1,
      convRule: rule22
    }, {
      start: 1137,
      length: 1,
      convRule: rule23
    }, {
      start: 1138,
      length: 1,
      convRule: rule22
    }, {
      start: 1139,
      length: 1,
      convRule: rule23
    }, {
      start: 1140,
      length: 1,
      convRule: rule22
    }, {
      start: 1141,
      length: 1,
      convRule: rule23
    }, {
      start: 1142,
      length: 1,
      convRule: rule22
    }, {
      start: 1143,
      length: 1,
      convRule: rule23
    }, {
      start: 1144,
      length: 1,
      convRule: rule22
    }, {
      start: 1145,
      length: 1,
      convRule: rule23
    }, {
      start: 1146,
      length: 1,
      convRule: rule22
    }, {
      start: 1147,
      length: 1,
      convRule: rule23
    }, {
      start: 1148,
      length: 1,
      convRule: rule22
    }, {
      start: 1149,
      length: 1,
      convRule: rule23
    }, {
      start: 1150,
      length: 1,
      convRule: rule22
    }, {
      start: 1151,
      length: 1,
      convRule: rule23
    }, {
      start: 1152,
      length: 1,
      convRule: rule22
    }, {
      start: 1153,
      length: 1,
      convRule: rule23
    }, {
      start: 1162,
      length: 1,
      convRule: rule22
    }, {
      start: 1163,
      length: 1,
      convRule: rule23
    }, {
      start: 1164,
      length: 1,
      convRule: rule22
    }, {
      start: 1165,
      length: 1,
      convRule: rule23
    }, {
      start: 1166,
      length: 1,
      convRule: rule22
    }, {
      start: 1167,
      length: 1,
      convRule: rule23
    }, {
      start: 1168,
      length: 1,
      convRule: rule22
    }, {
      start: 1169,
      length: 1,
      convRule: rule23
    }, {
      start: 1170,
      length: 1,
      convRule: rule22
    }, {
      start: 1171,
      length: 1,
      convRule: rule23
    }, {
      start: 1172,
      length: 1,
      convRule: rule22
    }, {
      start: 1173,
      length: 1,
      convRule: rule23
    }, {
      start: 1174,
      length: 1,
      convRule: rule22
    }, {
      start: 1175,
      length: 1,
      convRule: rule23
    }, {
      start: 1176,
      length: 1,
      convRule: rule22
    }, {
      start: 1177,
      length: 1,
      convRule: rule23
    }, {
      start: 1178,
      length: 1,
      convRule: rule22
    }, {
      start: 1179,
      length: 1,
      convRule: rule23
    }, {
      start: 1180,
      length: 1,
      convRule: rule22
    }, {
      start: 1181,
      length: 1,
      convRule: rule23
    }, {
      start: 1182,
      length: 1,
      convRule: rule22
    }, {
      start: 1183,
      length: 1,
      convRule: rule23
    }, {
      start: 1184,
      length: 1,
      convRule: rule22
    }, {
      start: 1185,
      length: 1,
      convRule: rule23
    }, {
      start: 1186,
      length: 1,
      convRule: rule22
    }, {
      start: 1187,
      length: 1,
      convRule: rule23
    }, {
      start: 1188,
      length: 1,
      convRule: rule22
    }, {
      start: 1189,
      length: 1,
      convRule: rule23
    }, {
      start: 1190,
      length: 1,
      convRule: rule22
    }, {
      start: 1191,
      length: 1,
      convRule: rule23
    }, {
      start: 1192,
      length: 1,
      convRule: rule22
    }, {
      start: 1193,
      length: 1,
      convRule: rule23
    }, {
      start: 1194,
      length: 1,
      convRule: rule22
    }, {
      start: 1195,
      length: 1,
      convRule: rule23
    }, {
      start: 1196,
      length: 1,
      convRule: rule22
    }, {
      start: 1197,
      length: 1,
      convRule: rule23
    }, {
      start: 1198,
      length: 1,
      convRule: rule22
    }, {
      start: 1199,
      length: 1,
      convRule: rule23
    }, {
      start: 1200,
      length: 1,
      convRule: rule22
    }, {
      start: 1201,
      length: 1,
      convRule: rule23
    }, {
      start: 1202,
      length: 1,
      convRule: rule22
    }, {
      start: 1203,
      length: 1,
      convRule: rule23
    }, {
      start: 1204,
      length: 1,
      convRule: rule22
    }, {
      start: 1205,
      length: 1,
      convRule: rule23
    }, {
      start: 1206,
      length: 1,
      convRule: rule22
    }, {
      start: 1207,
      length: 1,
      convRule: rule23
    }, {
      start: 1208,
      length: 1,
      convRule: rule22
    }, {
      start: 1209,
      length: 1,
      convRule: rule23
    }, {
      start: 1210,
      length: 1,
      convRule: rule22
    }, {
      start: 1211,
      length: 1,
      convRule: rule23
    }, {
      start: 1212,
      length: 1,
      convRule: rule22
    }, {
      start: 1213,
      length: 1,
      convRule: rule23
    }, {
      start: 1214,
      length: 1,
      convRule: rule22
    }, {
      start: 1215,
      length: 1,
      convRule: rule23
    }, {
      start: 1216,
      length: 1,
      convRule: rule120
    }, {
      start: 1217,
      length: 1,
      convRule: rule22
    }, {
      start: 1218,
      length: 1,
      convRule: rule23
    }, {
      start: 1219,
      length: 1,
      convRule: rule22
    }, {
      start: 1220,
      length: 1,
      convRule: rule23
    }, {
      start: 1221,
      length: 1,
      convRule: rule22
    }, {
      start: 1222,
      length: 1,
      convRule: rule23
    }, {
      start: 1223,
      length: 1,
      convRule: rule22
    }, {
      start: 1224,
      length: 1,
      convRule: rule23
    }, {
      start: 1225,
      length: 1,
      convRule: rule22
    }, {
      start: 1226,
      length: 1,
      convRule: rule23
    }, {
      start: 1227,
      length: 1,
      convRule: rule22
    }, {
      start: 1228,
      length: 1,
      convRule: rule23
    }, {
      start: 1229,
      length: 1,
      convRule: rule22
    }, {
      start: 1230,
      length: 1,
      convRule: rule23
    }, {
      start: 1231,
      length: 1,
      convRule: rule121
    }, {
      start: 1232,
      length: 1,
      convRule: rule22
    }, {
      start: 1233,
      length: 1,
      convRule: rule23
    }, {
      start: 1234,
      length: 1,
      convRule: rule22
    }, {
      start: 1235,
      length: 1,
      convRule: rule23
    }, {
      start: 1236,
      length: 1,
      convRule: rule22
    }, {
      start: 1237,
      length: 1,
      convRule: rule23
    }, {
      start: 1238,
      length: 1,
      convRule: rule22
    }, {
      start: 1239,
      length: 1,
      convRule: rule23
    }, {
      start: 1240,
      length: 1,
      convRule: rule22
    }, {
      start: 1241,
      length: 1,
      convRule: rule23
    }, {
      start: 1242,
      length: 1,
      convRule: rule22
    }, {
      start: 1243,
      length: 1,
      convRule: rule23
    }, {
      start: 1244,
      length: 1,
      convRule: rule22
    }, {
      start: 1245,
      length: 1,
      convRule: rule23
    }, {
      start: 1246,
      length: 1,
      convRule: rule22
    }, {
      start: 1247,
      length: 1,
      convRule: rule23
    }, {
      start: 1248,
      length: 1,
      convRule: rule22
    }, {
      start: 1249,
      length: 1,
      convRule: rule23
    }, {
      start: 1250,
      length: 1,
      convRule: rule22
    }, {
      start: 1251,
      length: 1,
      convRule: rule23
    }, {
      start: 1252,
      length: 1,
      convRule: rule22
    }, {
      start: 1253,
      length: 1,
      convRule: rule23
    }, {
      start: 1254,
      length: 1,
      convRule: rule22
    }, {
      start: 1255,
      length: 1,
      convRule: rule23
    }, {
      start: 1256,
      length: 1,
      convRule: rule22
    }, {
      start: 1257,
      length: 1,
      convRule: rule23
    }, {
      start: 1258,
      length: 1,
      convRule: rule22
    }, {
      start: 1259,
      length: 1,
      convRule: rule23
    }, {
      start: 1260,
      length: 1,
      convRule: rule22
    }, {
      start: 1261,
      length: 1,
      convRule: rule23
    }, {
      start: 1262,
      length: 1,
      convRule: rule22
    }, {
      start: 1263,
      length: 1,
      convRule: rule23
    }, {
      start: 1264,
      length: 1,
      convRule: rule22
    }, {
      start: 1265,
      length: 1,
      convRule: rule23
    }, {
      start: 1266,
      length: 1,
      convRule: rule22
    }, {
      start: 1267,
      length: 1,
      convRule: rule23
    }, {
      start: 1268,
      length: 1,
      convRule: rule22
    }, {
      start: 1269,
      length: 1,
      convRule: rule23
    }, {
      start: 1270,
      length: 1,
      convRule: rule22
    }, {
      start: 1271,
      length: 1,
      convRule: rule23
    }, {
      start: 1272,
      length: 1,
      convRule: rule22
    }, {
      start: 1273,
      length: 1,
      convRule: rule23
    }, {
      start: 1274,
      length: 1,
      convRule: rule22
    }, {
      start: 1275,
      length: 1,
      convRule: rule23
    }, {
      start: 1276,
      length: 1,
      convRule: rule22
    }, {
      start: 1277,
      length: 1,
      convRule: rule23
    }, {
      start: 1278,
      length: 1,
      convRule: rule22
    }, {
      start: 1279,
      length: 1,
      convRule: rule23
    }, {
      start: 1280,
      length: 1,
      convRule: rule22
    }, {
      start: 1281,
      length: 1,
      convRule: rule23
    }, {
      start: 1282,
      length: 1,
      convRule: rule22
    }, {
      start: 1283,
      length: 1,
      convRule: rule23
    }, {
      start: 1284,
      length: 1,
      convRule: rule22
    }, {
      start: 1285,
      length: 1,
      convRule: rule23
    }, {
      start: 1286,
      length: 1,
      convRule: rule22
    }, {
      start: 1287,
      length: 1,
      convRule: rule23
    }, {
      start: 1288,
      length: 1,
      convRule: rule22
    }, {
      start: 1289,
      length: 1,
      convRule: rule23
    }, {
      start: 1290,
      length: 1,
      convRule: rule22
    }, {
      start: 1291,
      length: 1,
      convRule: rule23
    }, {
      start: 1292,
      length: 1,
      convRule: rule22
    }, {
      start: 1293,
      length: 1,
      convRule: rule23
    }, {
      start: 1294,
      length: 1,
      convRule: rule22
    }, {
      start: 1295,
      length: 1,
      convRule: rule23
    }, {
      start: 1296,
      length: 1,
      convRule: rule22
    }, {
      start: 1297,
      length: 1,
      convRule: rule23
    }, {
      start: 1298,
      length: 1,
      convRule: rule22
    }, {
      start: 1299,
      length: 1,
      convRule: rule23
    }, {
      start: 1300,
      length: 1,
      convRule: rule22
    }, {
      start: 1301,
      length: 1,
      convRule: rule23
    }, {
      start: 1302,
      length: 1,
      convRule: rule22
    }, {
      start: 1303,
      length: 1,
      convRule: rule23
    }, {
      start: 1304,
      length: 1,
      convRule: rule22
    }, {
      start: 1305,
      length: 1,
      convRule: rule23
    }, {
      start: 1306,
      length: 1,
      convRule: rule22
    }, {
      start: 1307,
      length: 1,
      convRule: rule23
    }, {
      start: 1308,
      length: 1,
      convRule: rule22
    }, {
      start: 1309,
      length: 1,
      convRule: rule23
    }, {
      start: 1310,
      length: 1,
      convRule: rule22
    }, {
      start: 1311,
      length: 1,
      convRule: rule23
    }, {
      start: 1312,
      length: 1,
      convRule: rule22
    }, {
      start: 1313,
      length: 1,
      convRule: rule23
    }, {
      start: 1314,
      length: 1,
      convRule: rule22
    }, {
      start: 1315,
      length: 1,
      convRule: rule23
    }, {
      start: 1316,
      length: 1,
      convRule: rule22
    }, {
      start: 1317,
      length: 1,
      convRule: rule23
    }, {
      start: 1318,
      length: 1,
      convRule: rule22
    }, {
      start: 1319,
      length: 1,
      convRule: rule23
    }, {
      start: 1320,
      length: 1,
      convRule: rule22
    }, {
      start: 1321,
      length: 1,
      convRule: rule23
    }, {
      start: 1322,
      length: 1,
      convRule: rule22
    }, {
      start: 1323,
      length: 1,
      convRule: rule23
    }, {
      start: 1324,
      length: 1,
      convRule: rule22
    }, {
      start: 1325,
      length: 1,
      convRule: rule23
    }, {
      start: 1326,
      length: 1,
      convRule: rule22
    }, {
      start: 1327,
      length: 1,
      convRule: rule23
    }, {
      start: 1329,
      length: 38,
      convRule: rule122
    }, {
      start: 1377,
      length: 38,
      convRule: rule123
    }, {
      start: 4256,
      length: 38,
      convRule: rule125
    }, {
      start: 4295,
      length: 1,
      convRule: rule125
    }, {
      start: 4301,
      length: 1,
      convRule: rule125
    }, {
      start: 4304,
      length: 43,
      convRule: rule126
    }, {
      start: 4349,
      length: 3,
      convRule: rule126
    }, {
      start: 5024,
      length: 80,
      convRule: rule127
    }, {
      start: 5104,
      length: 6,
      convRule: rule104
    }, {
      start: 5112,
      length: 6,
      convRule: rule110
    }, {
      start: 7296,
      length: 1,
      convRule: rule129
    }, {
      start: 7297,
      length: 1,
      convRule: rule130
    }, {
      start: 7298,
      length: 1,
      convRule: rule131
    }, {
      start: 7299,
      length: 2,
      convRule: rule132
    }, {
      start: 7301,
      length: 1,
      convRule: rule133
    }, {
      start: 7302,
      length: 1,
      convRule: rule134
    }, {
      start: 7303,
      length: 1,
      convRule: rule135
    }, {
      start: 7304,
      length: 1,
      convRule: rule136
    }, {
      start: 7312,
      length: 43,
      convRule: rule137
    }, {
      start: 7357,
      length: 3,
      convRule: rule137
    }, {
      start: 7545,
      length: 1,
      convRule: rule138
    }, {
      start: 7549,
      length: 1,
      convRule: rule139
    }, {
      start: 7566,
      length: 1,
      convRule: rule140
    }, {
      start: 7680,
      length: 1,
      convRule: rule22
    }, {
      start: 7681,
      length: 1,
      convRule: rule23
    }, {
      start: 7682,
      length: 1,
      convRule: rule22
    }, {
      start: 7683,
      length: 1,
      convRule: rule23
    }, {
      start: 7684,
      length: 1,
      convRule: rule22
    }, {
      start: 7685,
      length: 1,
      convRule: rule23
    }, {
      start: 7686,
      length: 1,
      convRule: rule22
    }, {
      start: 7687,
      length: 1,
      convRule: rule23
    }, {
      start: 7688,
      length: 1,
      convRule: rule22
    }, {
      start: 7689,
      length: 1,
      convRule: rule23
    }, {
      start: 7690,
      length: 1,
      convRule: rule22
    }, {
      start: 7691,
      length: 1,
      convRule: rule23
    }, {
      start: 7692,
      length: 1,
      convRule: rule22
    }, {
      start: 7693,
      length: 1,
      convRule: rule23
    }, {
      start: 7694,
      length: 1,
      convRule: rule22
    }, {
      start: 7695,
      length: 1,
      convRule: rule23
    }, {
      start: 7696,
      length: 1,
      convRule: rule22
    }, {
      start: 7697,
      length: 1,
      convRule: rule23
    }, {
      start: 7698,
      length: 1,
      convRule: rule22
    }, {
      start: 7699,
      length: 1,
      convRule: rule23
    }, {
      start: 7700,
      length: 1,
      convRule: rule22
    }, {
      start: 7701,
      length: 1,
      convRule: rule23
    }, {
      start: 7702,
      length: 1,
      convRule: rule22
    }, {
      start: 7703,
      length: 1,
      convRule: rule23
    }, {
      start: 7704,
      length: 1,
      convRule: rule22
    }, {
      start: 7705,
      length: 1,
      convRule: rule23
    }, {
      start: 7706,
      length: 1,
      convRule: rule22
    }, {
      start: 7707,
      length: 1,
      convRule: rule23
    }, {
      start: 7708,
      length: 1,
      convRule: rule22
    }, {
      start: 7709,
      length: 1,
      convRule: rule23
    }, {
      start: 7710,
      length: 1,
      convRule: rule22
    }, {
      start: 7711,
      length: 1,
      convRule: rule23
    }, {
      start: 7712,
      length: 1,
      convRule: rule22
    }, {
      start: 7713,
      length: 1,
      convRule: rule23
    }, {
      start: 7714,
      length: 1,
      convRule: rule22
    }, {
      start: 7715,
      length: 1,
      convRule: rule23
    }, {
      start: 7716,
      length: 1,
      convRule: rule22
    }, {
      start: 7717,
      length: 1,
      convRule: rule23
    }, {
      start: 7718,
      length: 1,
      convRule: rule22
    }, {
      start: 7719,
      length: 1,
      convRule: rule23
    }, {
      start: 7720,
      length: 1,
      convRule: rule22
    }, {
      start: 7721,
      length: 1,
      convRule: rule23
    }, {
      start: 7722,
      length: 1,
      convRule: rule22
    }, {
      start: 7723,
      length: 1,
      convRule: rule23
    }, {
      start: 7724,
      length: 1,
      convRule: rule22
    }, {
      start: 7725,
      length: 1,
      convRule: rule23
    }, {
      start: 7726,
      length: 1,
      convRule: rule22
    }, {
      start: 7727,
      length: 1,
      convRule: rule23
    }, {
      start: 7728,
      length: 1,
      convRule: rule22
    }, {
      start: 7729,
      length: 1,
      convRule: rule23
    }, {
      start: 7730,
      length: 1,
      convRule: rule22
    }, {
      start: 7731,
      length: 1,
      convRule: rule23
    }, {
      start: 7732,
      length: 1,
      convRule: rule22
    }, {
      start: 7733,
      length: 1,
      convRule: rule23
    }, {
      start: 7734,
      length: 1,
      convRule: rule22
    }, {
      start: 7735,
      length: 1,
      convRule: rule23
    }, {
      start: 7736,
      length: 1,
      convRule: rule22
    }, {
      start: 7737,
      length: 1,
      convRule: rule23
    }, {
      start: 7738,
      length: 1,
      convRule: rule22
    }, {
      start: 7739,
      length: 1,
      convRule: rule23
    }, {
      start: 7740,
      length: 1,
      convRule: rule22
    }, {
      start: 7741,
      length: 1,
      convRule: rule23
    }, {
      start: 7742,
      length: 1,
      convRule: rule22
    }, {
      start: 7743,
      length: 1,
      convRule: rule23
    }, {
      start: 7744,
      length: 1,
      convRule: rule22
    }, {
      start: 7745,
      length: 1,
      convRule: rule23
    }, {
      start: 7746,
      length: 1,
      convRule: rule22
    }, {
      start: 7747,
      length: 1,
      convRule: rule23
    }, {
      start: 7748,
      length: 1,
      convRule: rule22
    }, {
      start: 7749,
      length: 1,
      convRule: rule23
    }, {
      start: 7750,
      length: 1,
      convRule: rule22
    }, {
      start: 7751,
      length: 1,
      convRule: rule23
    }, {
      start: 7752,
      length: 1,
      convRule: rule22
    }, {
      start: 7753,
      length: 1,
      convRule: rule23
    }, {
      start: 7754,
      length: 1,
      convRule: rule22
    }, {
      start: 7755,
      length: 1,
      convRule: rule23
    }, {
      start: 7756,
      length: 1,
      convRule: rule22
    }, {
      start: 7757,
      length: 1,
      convRule: rule23
    }, {
      start: 7758,
      length: 1,
      convRule: rule22
    }, {
      start: 7759,
      length: 1,
      convRule: rule23
    }, {
      start: 7760,
      length: 1,
      convRule: rule22
    }, {
      start: 7761,
      length: 1,
      convRule: rule23
    }, {
      start: 7762,
      length: 1,
      convRule: rule22
    }, {
      start: 7763,
      length: 1,
      convRule: rule23
    }, {
      start: 7764,
      length: 1,
      convRule: rule22
    }, {
      start: 7765,
      length: 1,
      convRule: rule23
    }, {
      start: 7766,
      length: 1,
      convRule: rule22
    }, {
      start: 7767,
      length: 1,
      convRule: rule23
    }, {
      start: 7768,
      length: 1,
      convRule: rule22
    }, {
      start: 7769,
      length: 1,
      convRule: rule23
    }, {
      start: 7770,
      length: 1,
      convRule: rule22
    }, {
      start: 7771,
      length: 1,
      convRule: rule23
    }, {
      start: 7772,
      length: 1,
      convRule: rule22
    }, {
      start: 7773,
      length: 1,
      convRule: rule23
    }, {
      start: 7774,
      length: 1,
      convRule: rule22
    }, {
      start: 7775,
      length: 1,
      convRule: rule23
    }, {
      start: 7776,
      length: 1,
      convRule: rule22
    }, {
      start: 7777,
      length: 1,
      convRule: rule23
    }, {
      start: 7778,
      length: 1,
      convRule: rule22
    }, {
      start: 7779,
      length: 1,
      convRule: rule23
    }, {
      start: 7780,
      length: 1,
      convRule: rule22
    }, {
      start: 7781,
      length: 1,
      convRule: rule23
    }, {
      start: 7782,
      length: 1,
      convRule: rule22
    }, {
      start: 7783,
      length: 1,
      convRule: rule23
    }, {
      start: 7784,
      length: 1,
      convRule: rule22
    }, {
      start: 7785,
      length: 1,
      convRule: rule23
    }, {
      start: 7786,
      length: 1,
      convRule: rule22
    }, {
      start: 7787,
      length: 1,
      convRule: rule23
    }, {
      start: 7788,
      length: 1,
      convRule: rule22
    }, {
      start: 7789,
      length: 1,
      convRule: rule23
    }, {
      start: 7790,
      length: 1,
      convRule: rule22
    }, {
      start: 7791,
      length: 1,
      convRule: rule23
    }, {
      start: 7792,
      length: 1,
      convRule: rule22
    }, {
      start: 7793,
      length: 1,
      convRule: rule23
    }, {
      start: 7794,
      length: 1,
      convRule: rule22
    }, {
      start: 7795,
      length: 1,
      convRule: rule23
    }, {
      start: 7796,
      length: 1,
      convRule: rule22
    }, {
      start: 7797,
      length: 1,
      convRule: rule23
    }, {
      start: 7798,
      length: 1,
      convRule: rule22
    }, {
      start: 7799,
      length: 1,
      convRule: rule23
    }, {
      start: 7800,
      length: 1,
      convRule: rule22
    }, {
      start: 7801,
      length: 1,
      convRule: rule23
    }, {
      start: 7802,
      length: 1,
      convRule: rule22
    }, {
      start: 7803,
      length: 1,
      convRule: rule23
    }, {
      start: 7804,
      length: 1,
      convRule: rule22
    }, {
      start: 7805,
      length: 1,
      convRule: rule23
    }, {
      start: 7806,
      length: 1,
      convRule: rule22
    }, {
      start: 7807,
      length: 1,
      convRule: rule23
    }, {
      start: 7808,
      length: 1,
      convRule: rule22
    }, {
      start: 7809,
      length: 1,
      convRule: rule23
    }, {
      start: 7810,
      length: 1,
      convRule: rule22
    }, {
      start: 7811,
      length: 1,
      convRule: rule23
    }, {
      start: 7812,
      length: 1,
      convRule: rule22
    }, {
      start: 7813,
      length: 1,
      convRule: rule23
    }, {
      start: 7814,
      length: 1,
      convRule: rule22
    }, {
      start: 7815,
      length: 1,
      convRule: rule23
    }, {
      start: 7816,
      length: 1,
      convRule: rule22
    }, {
      start: 7817,
      length: 1,
      convRule: rule23
    }, {
      start: 7818,
      length: 1,
      convRule: rule22
    }, {
      start: 7819,
      length: 1,
      convRule: rule23
    }, {
      start: 7820,
      length: 1,
      convRule: rule22
    }, {
      start: 7821,
      length: 1,
      convRule: rule23
    }, {
      start: 7822,
      length: 1,
      convRule: rule22
    }, {
      start: 7823,
      length: 1,
      convRule: rule23
    }, {
      start: 7824,
      length: 1,
      convRule: rule22
    }, {
      start: 7825,
      length: 1,
      convRule: rule23
    }, {
      start: 7826,
      length: 1,
      convRule: rule22
    }, {
      start: 7827,
      length: 1,
      convRule: rule23
    }, {
      start: 7828,
      length: 1,
      convRule: rule22
    }, {
      start: 7829,
      length: 1,
      convRule: rule23
    }, {
      start: 7835,
      length: 1,
      convRule: rule141
    }, {
      start: 7838,
      length: 1,
      convRule: rule142
    }, {
      start: 7840,
      length: 1,
      convRule: rule22
    }, {
      start: 7841,
      length: 1,
      convRule: rule23
    }, {
      start: 7842,
      length: 1,
      convRule: rule22
    }, {
      start: 7843,
      length: 1,
      convRule: rule23
    }, {
      start: 7844,
      length: 1,
      convRule: rule22
    }, {
      start: 7845,
      length: 1,
      convRule: rule23
    }, {
      start: 7846,
      length: 1,
      convRule: rule22
    }, {
      start: 7847,
      length: 1,
      convRule: rule23
    }, {
      start: 7848,
      length: 1,
      convRule: rule22
    }, {
      start: 7849,
      length: 1,
      convRule: rule23
    }, {
      start: 7850,
      length: 1,
      convRule: rule22
    }, {
      start: 7851,
      length: 1,
      convRule: rule23
    }, {
      start: 7852,
      length: 1,
      convRule: rule22
    }, {
      start: 7853,
      length: 1,
      convRule: rule23
    }, {
      start: 7854,
      length: 1,
      convRule: rule22
    }, {
      start: 7855,
      length: 1,
      convRule: rule23
    }, {
      start: 7856,
      length: 1,
      convRule: rule22
    }, {
      start: 7857,
      length: 1,
      convRule: rule23
    }, {
      start: 7858,
      length: 1,
      convRule: rule22
    }, {
      start: 7859,
      length: 1,
      convRule: rule23
    }, {
      start: 7860,
      length: 1,
      convRule: rule22
    }, {
      start: 7861,
      length: 1,
      convRule: rule23
    }, {
      start: 7862,
      length: 1,
      convRule: rule22
    }, {
      start: 7863,
      length: 1,
      convRule: rule23
    }, {
      start: 7864,
      length: 1,
      convRule: rule22
    }, {
      start: 7865,
      length: 1,
      convRule: rule23
    }, {
      start: 7866,
      length: 1,
      convRule: rule22
    }, {
      start: 7867,
      length: 1,
      convRule: rule23
    }, {
      start: 7868,
      length: 1,
      convRule: rule22
    }, {
      start: 7869,
      length: 1,
      convRule: rule23
    }, {
      start: 7870,
      length: 1,
      convRule: rule22
    }, {
      start: 7871,
      length: 1,
      convRule: rule23
    }, {
      start: 7872,
      length: 1,
      convRule: rule22
    }, {
      start: 7873,
      length: 1,
      convRule: rule23
    }, {
      start: 7874,
      length: 1,
      convRule: rule22
    }, {
      start: 7875,
      length: 1,
      convRule: rule23
    }, {
      start: 7876,
      length: 1,
      convRule: rule22
    }, {
      start: 7877,
      length: 1,
      convRule: rule23
    }, {
      start: 7878,
      length: 1,
      convRule: rule22
    }, {
      start: 7879,
      length: 1,
      convRule: rule23
    }, {
      start: 7880,
      length: 1,
      convRule: rule22
    }, {
      start: 7881,
      length: 1,
      convRule: rule23
    }, {
      start: 7882,
      length: 1,
      convRule: rule22
    }, {
      start: 7883,
      length: 1,
      convRule: rule23
    }, {
      start: 7884,
      length: 1,
      convRule: rule22
    }, {
      start: 7885,
      length: 1,
      convRule: rule23
    }, {
      start: 7886,
      length: 1,
      convRule: rule22
    }, {
      start: 7887,
      length: 1,
      convRule: rule23
    }, {
      start: 7888,
      length: 1,
      convRule: rule22
    }, {
      start: 7889,
      length: 1,
      convRule: rule23
    }, {
      start: 7890,
      length: 1,
      convRule: rule22
    }, {
      start: 7891,
      length: 1,
      convRule: rule23
    }, {
      start: 7892,
      length: 1,
      convRule: rule22
    }, {
      start: 7893,
      length: 1,
      convRule: rule23
    }, {
      start: 7894,
      length: 1,
      convRule: rule22
    }, {
      start: 7895,
      length: 1,
      convRule: rule23
    }, {
      start: 7896,
      length: 1,
      convRule: rule22
    }, {
      start: 7897,
      length: 1,
      convRule: rule23
    }, {
      start: 7898,
      length: 1,
      convRule: rule22
    }, {
      start: 7899,
      length: 1,
      convRule: rule23
    }, {
      start: 7900,
      length: 1,
      convRule: rule22
    }, {
      start: 7901,
      length: 1,
      convRule: rule23
    }, {
      start: 7902,
      length: 1,
      convRule: rule22
    }, {
      start: 7903,
      length: 1,
      convRule: rule23
    }, {
      start: 7904,
      length: 1,
      convRule: rule22
    }, {
      start: 7905,
      length: 1,
      convRule: rule23
    }, {
      start: 7906,
      length: 1,
      convRule: rule22
    }, {
      start: 7907,
      length: 1,
      convRule: rule23
    }, {
      start: 7908,
      length: 1,
      convRule: rule22
    }, {
      start: 7909,
      length: 1,
      convRule: rule23
    }, {
      start: 7910,
      length: 1,
      convRule: rule22
    }, {
      start: 7911,
      length: 1,
      convRule: rule23
    }, {
      start: 7912,
      length: 1,
      convRule: rule22
    }, {
      start: 7913,
      length: 1,
      convRule: rule23
    }, {
      start: 7914,
      length: 1,
      convRule: rule22
    }, {
      start: 7915,
      length: 1,
      convRule: rule23
    }, {
      start: 7916,
      length: 1,
      convRule: rule22
    }, {
      start: 7917,
      length: 1,
      convRule: rule23
    }, {
      start: 7918,
      length: 1,
      convRule: rule22
    }, {
      start: 7919,
      length: 1,
      convRule: rule23
    }, {
      start: 7920,
      length: 1,
      convRule: rule22
    }, {
      start: 7921,
      length: 1,
      convRule: rule23
    }, {
      start: 7922,
      length: 1,
      convRule: rule22
    }, {
      start: 7923,
      length: 1,
      convRule: rule23
    }, {
      start: 7924,
      length: 1,
      convRule: rule22
    }, {
      start: 7925,
      length: 1,
      convRule: rule23
    }, {
      start: 7926,
      length: 1,
      convRule: rule22
    }, {
      start: 7927,
      length: 1,
      convRule: rule23
    }, {
      start: 7928,
      length: 1,
      convRule: rule22
    }, {
      start: 7929,
      length: 1,
      convRule: rule23
    }, {
      start: 7930,
      length: 1,
      convRule: rule22
    }, {
      start: 7931,
      length: 1,
      convRule: rule23
    }, {
      start: 7932,
      length: 1,
      convRule: rule22
    }, {
      start: 7933,
      length: 1,
      convRule: rule23
    }, {
      start: 7934,
      length: 1,
      convRule: rule22
    }, {
      start: 7935,
      length: 1,
      convRule: rule23
    }, {
      start: 7936,
      length: 8,
      convRule: rule143
    }, {
      start: 7944,
      length: 8,
      convRule: rule144
    }, {
      start: 7952,
      length: 6,
      convRule: rule143
    }, {
      start: 7960,
      length: 6,
      convRule: rule144
    }, {
      start: 7968,
      length: 8,
      convRule: rule143
    }, {
      start: 7976,
      length: 8,
      convRule: rule144
    }, {
      start: 7984,
      length: 8,
      convRule: rule143
    }, {
      start: 7992,
      length: 8,
      convRule: rule144
    }, {
      start: 8e3,
      length: 6,
      convRule: rule143
    }, {
      start: 8008,
      length: 6,
      convRule: rule144
    }, {
      start: 8017,
      length: 1,
      convRule: rule143
    }, {
      start: 8019,
      length: 1,
      convRule: rule143
    }, {
      start: 8021,
      length: 1,
      convRule: rule143
    }, {
      start: 8023,
      length: 1,
      convRule: rule143
    }, {
      start: 8025,
      length: 1,
      convRule: rule144
    }, {
      start: 8027,
      length: 1,
      convRule: rule144
    }, {
      start: 8029,
      length: 1,
      convRule: rule144
    }, {
      start: 8031,
      length: 1,
      convRule: rule144
    }, {
      start: 8032,
      length: 8,
      convRule: rule143
    }, {
      start: 8040,
      length: 8,
      convRule: rule144
    }, {
      start: 8048,
      length: 2,
      convRule: rule145
    }, {
      start: 8050,
      length: 4,
      convRule: rule146
    }, {
      start: 8054,
      length: 2,
      convRule: rule147
    }, {
      start: 8056,
      length: 2,
      convRule: rule148
    }, {
      start: 8058,
      length: 2,
      convRule: rule149
    }, {
      start: 8060,
      length: 2,
      convRule: rule150
    }, {
      start: 8064,
      length: 8,
      convRule: rule143
    }, {
      start: 8072,
      length: 8,
      convRule: rule151
    }, {
      start: 8080,
      length: 8,
      convRule: rule143
    }, {
      start: 8088,
      length: 8,
      convRule: rule151
    }, {
      start: 8096,
      length: 8,
      convRule: rule143
    }, {
      start: 8104,
      length: 8,
      convRule: rule151
    }, {
      start: 8112,
      length: 2,
      convRule: rule143
    }, {
      start: 8115,
      length: 1,
      convRule: rule152
    }, {
      start: 8120,
      length: 2,
      convRule: rule144
    }, {
      start: 8122,
      length: 2,
      convRule: rule153
    }, {
      start: 8124,
      length: 1,
      convRule: rule154
    }, {
      start: 8126,
      length: 1,
      convRule: rule155
    }, {
      start: 8131,
      length: 1,
      convRule: rule152
    }, {
      start: 8136,
      length: 4,
      convRule: rule156
    }, {
      start: 8140,
      length: 1,
      convRule: rule154
    }, {
      start: 8144,
      length: 2,
      convRule: rule143
    }, {
      start: 8152,
      length: 2,
      convRule: rule144
    }, {
      start: 8154,
      length: 2,
      convRule: rule157
    }, {
      start: 8160,
      length: 2,
      convRule: rule143
    }, {
      start: 8165,
      length: 1,
      convRule: rule113
    }, {
      start: 8168,
      length: 2,
      convRule: rule144
    }, {
      start: 8170,
      length: 2,
      convRule: rule158
    }, {
      start: 8172,
      length: 1,
      convRule: rule117
    }, {
      start: 8179,
      length: 1,
      convRule: rule152
    }, {
      start: 8184,
      length: 2,
      convRule: rule159
    }, {
      start: 8186,
      length: 2,
      convRule: rule160
    }, {
      start: 8188,
      length: 1,
      convRule: rule154
    }, {
      start: 8486,
      length: 1,
      convRule: rule163
    }, {
      start: 8490,
      length: 1,
      convRule: rule164
    }, {
      start: 8491,
      length: 1,
      convRule: rule165
    }, {
      start: 8498,
      length: 1,
      convRule: rule166
    }, {
      start: 8526,
      length: 1,
      convRule: rule167
    }, {
      start: 8544,
      length: 16,
      convRule: rule168
    }, {
      start: 8560,
      length: 16,
      convRule: rule169
    }, {
      start: 8579,
      length: 1,
      convRule: rule22
    }, {
      start: 8580,
      length: 1,
      convRule: rule23
    }, {
      start: 9398,
      length: 26,
      convRule: rule170
    }, {
      start: 9424,
      length: 26,
      convRule: rule171
    }, {
      start: 11264,
      length: 47,
      convRule: rule122
    }, {
      start: 11312,
      length: 47,
      convRule: rule123
    }, {
      start: 11360,
      length: 1,
      convRule: rule22
    }, {
      start: 11361,
      length: 1,
      convRule: rule23
    }, {
      start: 11362,
      length: 1,
      convRule: rule172
    }, {
      start: 11363,
      length: 1,
      convRule: rule173
    }, {
      start: 11364,
      length: 1,
      convRule: rule174
    }, {
      start: 11365,
      length: 1,
      convRule: rule175
    }, {
      start: 11366,
      length: 1,
      convRule: rule176
    }, {
      start: 11367,
      length: 1,
      convRule: rule22
    }, {
      start: 11368,
      length: 1,
      convRule: rule23
    }, {
      start: 11369,
      length: 1,
      convRule: rule22
    }, {
      start: 11370,
      length: 1,
      convRule: rule23
    }, {
      start: 11371,
      length: 1,
      convRule: rule22
    }, {
      start: 11372,
      length: 1,
      convRule: rule23
    }, {
      start: 11373,
      length: 1,
      convRule: rule177
    }, {
      start: 11374,
      length: 1,
      convRule: rule178
    }, {
      start: 11375,
      length: 1,
      convRule: rule179
    }, {
      start: 11376,
      length: 1,
      convRule: rule180
    }, {
      start: 11378,
      length: 1,
      convRule: rule22
    }, {
      start: 11379,
      length: 1,
      convRule: rule23
    }, {
      start: 11381,
      length: 1,
      convRule: rule22
    }, {
      start: 11382,
      length: 1,
      convRule: rule23
    }, {
      start: 11390,
      length: 2,
      convRule: rule181
    }, {
      start: 11392,
      length: 1,
      convRule: rule22
    }, {
      start: 11393,
      length: 1,
      convRule: rule23
    }, {
      start: 11394,
      length: 1,
      convRule: rule22
    }, {
      start: 11395,
      length: 1,
      convRule: rule23
    }, {
      start: 11396,
      length: 1,
      convRule: rule22
    }, {
      start: 11397,
      length: 1,
      convRule: rule23
    }, {
      start: 11398,
      length: 1,
      convRule: rule22
    }, {
      start: 11399,
      length: 1,
      convRule: rule23
    }, {
      start: 11400,
      length: 1,
      convRule: rule22
    }, {
      start: 11401,
      length: 1,
      convRule: rule23
    }, {
      start: 11402,
      length: 1,
      convRule: rule22
    }, {
      start: 11403,
      length: 1,
      convRule: rule23
    }, {
      start: 11404,
      length: 1,
      convRule: rule22
    }, {
      start: 11405,
      length: 1,
      convRule: rule23
    }, {
      start: 11406,
      length: 1,
      convRule: rule22
    }, {
      start: 11407,
      length: 1,
      convRule: rule23
    }, {
      start: 11408,
      length: 1,
      convRule: rule22
    }, {
      start: 11409,
      length: 1,
      convRule: rule23
    }, {
      start: 11410,
      length: 1,
      convRule: rule22
    }, {
      start: 11411,
      length: 1,
      convRule: rule23
    }, {
      start: 11412,
      length: 1,
      convRule: rule22
    }, {
      start: 11413,
      length: 1,
      convRule: rule23
    }, {
      start: 11414,
      length: 1,
      convRule: rule22
    }, {
      start: 11415,
      length: 1,
      convRule: rule23
    }, {
      start: 11416,
      length: 1,
      convRule: rule22
    }, {
      start: 11417,
      length: 1,
      convRule: rule23
    }, {
      start: 11418,
      length: 1,
      convRule: rule22
    }, {
      start: 11419,
      length: 1,
      convRule: rule23
    }, {
      start: 11420,
      length: 1,
      convRule: rule22
    }, {
      start: 11421,
      length: 1,
      convRule: rule23
    }, {
      start: 11422,
      length: 1,
      convRule: rule22
    }, {
      start: 11423,
      length: 1,
      convRule: rule23
    }, {
      start: 11424,
      length: 1,
      convRule: rule22
    }, {
      start: 11425,
      length: 1,
      convRule: rule23
    }, {
      start: 11426,
      length: 1,
      convRule: rule22
    }, {
      start: 11427,
      length: 1,
      convRule: rule23
    }, {
      start: 11428,
      length: 1,
      convRule: rule22
    }, {
      start: 11429,
      length: 1,
      convRule: rule23
    }, {
      start: 11430,
      length: 1,
      convRule: rule22
    }, {
      start: 11431,
      length: 1,
      convRule: rule23
    }, {
      start: 11432,
      length: 1,
      convRule: rule22
    }, {
      start: 11433,
      length: 1,
      convRule: rule23
    }, {
      start: 11434,
      length: 1,
      convRule: rule22
    }, {
      start: 11435,
      length: 1,
      convRule: rule23
    }, {
      start: 11436,
      length: 1,
      convRule: rule22
    }, {
      start: 11437,
      length: 1,
      convRule: rule23
    }, {
      start: 11438,
      length: 1,
      convRule: rule22
    }, {
      start: 11439,
      length: 1,
      convRule: rule23
    }, {
      start: 11440,
      length: 1,
      convRule: rule22
    }, {
      start: 11441,
      length: 1,
      convRule: rule23
    }, {
      start: 11442,
      length: 1,
      convRule: rule22
    }, {
      start: 11443,
      length: 1,
      convRule: rule23
    }, {
      start: 11444,
      length: 1,
      convRule: rule22
    }, {
      start: 11445,
      length: 1,
      convRule: rule23
    }, {
      start: 11446,
      length: 1,
      convRule: rule22
    }, {
      start: 11447,
      length: 1,
      convRule: rule23
    }, {
      start: 11448,
      length: 1,
      convRule: rule22
    }, {
      start: 11449,
      length: 1,
      convRule: rule23
    }, {
      start: 11450,
      length: 1,
      convRule: rule22
    }, {
      start: 11451,
      length: 1,
      convRule: rule23
    }, {
      start: 11452,
      length: 1,
      convRule: rule22
    }, {
      start: 11453,
      length: 1,
      convRule: rule23
    }, {
      start: 11454,
      length: 1,
      convRule: rule22
    }, {
      start: 11455,
      length: 1,
      convRule: rule23
    }, {
      start: 11456,
      length: 1,
      convRule: rule22
    }, {
      start: 11457,
      length: 1,
      convRule: rule23
    }, {
      start: 11458,
      length: 1,
      convRule: rule22
    }, {
      start: 11459,
      length: 1,
      convRule: rule23
    }, {
      start: 11460,
      length: 1,
      convRule: rule22
    }, {
      start: 11461,
      length: 1,
      convRule: rule23
    }, {
      start: 11462,
      length: 1,
      convRule: rule22
    }, {
      start: 11463,
      length: 1,
      convRule: rule23
    }, {
      start: 11464,
      length: 1,
      convRule: rule22
    }, {
      start: 11465,
      length: 1,
      convRule: rule23
    }, {
      start: 11466,
      length: 1,
      convRule: rule22
    }, {
      start: 11467,
      length: 1,
      convRule: rule23
    }, {
      start: 11468,
      length: 1,
      convRule: rule22
    }, {
      start: 11469,
      length: 1,
      convRule: rule23
    }, {
      start: 11470,
      length: 1,
      convRule: rule22
    }, {
      start: 11471,
      length: 1,
      convRule: rule23
    }, {
      start: 11472,
      length: 1,
      convRule: rule22
    }, {
      start: 11473,
      length: 1,
      convRule: rule23
    }, {
      start: 11474,
      length: 1,
      convRule: rule22
    }, {
      start: 11475,
      length: 1,
      convRule: rule23
    }, {
      start: 11476,
      length: 1,
      convRule: rule22
    }, {
      start: 11477,
      length: 1,
      convRule: rule23
    }, {
      start: 11478,
      length: 1,
      convRule: rule22
    }, {
      start: 11479,
      length: 1,
      convRule: rule23
    }, {
      start: 11480,
      length: 1,
      convRule: rule22
    }, {
      start: 11481,
      length: 1,
      convRule: rule23
    }, {
      start: 11482,
      length: 1,
      convRule: rule22
    }, {
      start: 11483,
      length: 1,
      convRule: rule23
    }, {
      start: 11484,
      length: 1,
      convRule: rule22
    }, {
      start: 11485,
      length: 1,
      convRule: rule23
    }, {
      start: 11486,
      length: 1,
      convRule: rule22
    }, {
      start: 11487,
      length: 1,
      convRule: rule23
    }, {
      start: 11488,
      length: 1,
      convRule: rule22
    }, {
      start: 11489,
      length: 1,
      convRule: rule23
    }, {
      start: 11490,
      length: 1,
      convRule: rule22
    }, {
      start: 11491,
      length: 1,
      convRule: rule23
    }, {
      start: 11499,
      length: 1,
      convRule: rule22
    }, {
      start: 11500,
      length: 1,
      convRule: rule23
    }, {
      start: 11501,
      length: 1,
      convRule: rule22
    }, {
      start: 11502,
      length: 1,
      convRule: rule23
    }, {
      start: 11506,
      length: 1,
      convRule: rule22
    }, {
      start: 11507,
      length: 1,
      convRule: rule23
    }, {
      start: 11520,
      length: 38,
      convRule: rule182
    }, {
      start: 11559,
      length: 1,
      convRule: rule182
    }, {
      start: 11565,
      length: 1,
      convRule: rule182
    }, {
      start: 42560,
      length: 1,
      convRule: rule22
    }, {
      start: 42561,
      length: 1,
      convRule: rule23
    }, {
      start: 42562,
      length: 1,
      convRule: rule22
    }, {
      start: 42563,
      length: 1,
      convRule: rule23
    }, {
      start: 42564,
      length: 1,
      convRule: rule22
    }, {
      start: 42565,
      length: 1,
      convRule: rule23
    }, {
      start: 42566,
      length: 1,
      convRule: rule22
    }, {
      start: 42567,
      length: 1,
      convRule: rule23
    }, {
      start: 42568,
      length: 1,
      convRule: rule22
    }, {
      start: 42569,
      length: 1,
      convRule: rule23
    }, {
      start: 42570,
      length: 1,
      convRule: rule22
    }, {
      start: 42571,
      length: 1,
      convRule: rule23
    }, {
      start: 42572,
      length: 1,
      convRule: rule22
    }, {
      start: 42573,
      length: 1,
      convRule: rule23
    }, {
      start: 42574,
      length: 1,
      convRule: rule22
    }, {
      start: 42575,
      length: 1,
      convRule: rule23
    }, {
      start: 42576,
      length: 1,
      convRule: rule22
    }, {
      start: 42577,
      length: 1,
      convRule: rule23
    }, {
      start: 42578,
      length: 1,
      convRule: rule22
    }, {
      start: 42579,
      length: 1,
      convRule: rule23
    }, {
      start: 42580,
      length: 1,
      convRule: rule22
    }, {
      start: 42581,
      length: 1,
      convRule: rule23
    }, {
      start: 42582,
      length: 1,
      convRule: rule22
    }, {
      start: 42583,
      length: 1,
      convRule: rule23
    }, {
      start: 42584,
      length: 1,
      convRule: rule22
    }, {
      start: 42585,
      length: 1,
      convRule: rule23
    }, {
      start: 42586,
      length: 1,
      convRule: rule22
    }, {
      start: 42587,
      length: 1,
      convRule: rule23
    }, {
      start: 42588,
      length: 1,
      convRule: rule22
    }, {
      start: 42589,
      length: 1,
      convRule: rule23
    }, {
      start: 42590,
      length: 1,
      convRule: rule22
    }, {
      start: 42591,
      length: 1,
      convRule: rule23
    }, {
      start: 42592,
      length: 1,
      convRule: rule22
    }, {
      start: 42593,
      length: 1,
      convRule: rule23
    }, {
      start: 42594,
      length: 1,
      convRule: rule22
    }, {
      start: 42595,
      length: 1,
      convRule: rule23
    }, {
      start: 42596,
      length: 1,
      convRule: rule22
    }, {
      start: 42597,
      length: 1,
      convRule: rule23
    }, {
      start: 42598,
      length: 1,
      convRule: rule22
    }, {
      start: 42599,
      length: 1,
      convRule: rule23
    }, {
      start: 42600,
      length: 1,
      convRule: rule22
    }, {
      start: 42601,
      length: 1,
      convRule: rule23
    }, {
      start: 42602,
      length: 1,
      convRule: rule22
    }, {
      start: 42603,
      length: 1,
      convRule: rule23
    }, {
      start: 42604,
      length: 1,
      convRule: rule22
    }, {
      start: 42605,
      length: 1,
      convRule: rule23
    }, {
      start: 42624,
      length: 1,
      convRule: rule22
    }, {
      start: 42625,
      length: 1,
      convRule: rule23
    }, {
      start: 42626,
      length: 1,
      convRule: rule22
    }, {
      start: 42627,
      length: 1,
      convRule: rule23
    }, {
      start: 42628,
      length: 1,
      convRule: rule22
    }, {
      start: 42629,
      length: 1,
      convRule: rule23
    }, {
      start: 42630,
      length: 1,
      convRule: rule22
    }, {
      start: 42631,
      length: 1,
      convRule: rule23
    }, {
      start: 42632,
      length: 1,
      convRule: rule22
    }, {
      start: 42633,
      length: 1,
      convRule: rule23
    }, {
      start: 42634,
      length: 1,
      convRule: rule22
    }, {
      start: 42635,
      length: 1,
      convRule: rule23
    }, {
      start: 42636,
      length: 1,
      convRule: rule22
    }, {
      start: 42637,
      length: 1,
      convRule: rule23
    }, {
      start: 42638,
      length: 1,
      convRule: rule22
    }, {
      start: 42639,
      length: 1,
      convRule: rule23
    }, {
      start: 42640,
      length: 1,
      convRule: rule22
    }, {
      start: 42641,
      length: 1,
      convRule: rule23
    }, {
      start: 42642,
      length: 1,
      convRule: rule22
    }, {
      start: 42643,
      length: 1,
      convRule: rule23
    }, {
      start: 42644,
      length: 1,
      convRule: rule22
    }, {
      start: 42645,
      length: 1,
      convRule: rule23
    }, {
      start: 42646,
      length: 1,
      convRule: rule22
    }, {
      start: 42647,
      length: 1,
      convRule: rule23
    }, {
      start: 42648,
      length: 1,
      convRule: rule22
    }, {
      start: 42649,
      length: 1,
      convRule: rule23
    }, {
      start: 42650,
      length: 1,
      convRule: rule22
    }, {
      start: 42651,
      length: 1,
      convRule: rule23
    }, {
      start: 42786,
      length: 1,
      convRule: rule22
    }, {
      start: 42787,
      length: 1,
      convRule: rule23
    }, {
      start: 42788,
      length: 1,
      convRule: rule22
    }, {
      start: 42789,
      length: 1,
      convRule: rule23
    }, {
      start: 42790,
      length: 1,
      convRule: rule22
    }, {
      start: 42791,
      length: 1,
      convRule: rule23
    }, {
      start: 42792,
      length: 1,
      convRule: rule22
    }, {
      start: 42793,
      length: 1,
      convRule: rule23
    }, {
      start: 42794,
      length: 1,
      convRule: rule22
    }, {
      start: 42795,
      length: 1,
      convRule: rule23
    }, {
      start: 42796,
      length: 1,
      convRule: rule22
    }, {
      start: 42797,
      length: 1,
      convRule: rule23
    }, {
      start: 42798,
      length: 1,
      convRule: rule22
    }, {
      start: 42799,
      length: 1,
      convRule: rule23
    }, {
      start: 42802,
      length: 1,
      convRule: rule22
    }, {
      start: 42803,
      length: 1,
      convRule: rule23
    }, {
      start: 42804,
      length: 1,
      convRule: rule22
    }, {
      start: 42805,
      length: 1,
      convRule: rule23
    }, {
      start: 42806,
      length: 1,
      convRule: rule22
    }, {
      start: 42807,
      length: 1,
      convRule: rule23
    }, {
      start: 42808,
      length: 1,
      convRule: rule22
    }, {
      start: 42809,
      length: 1,
      convRule: rule23
    }, {
      start: 42810,
      length: 1,
      convRule: rule22
    }, {
      start: 42811,
      length: 1,
      convRule: rule23
    }, {
      start: 42812,
      length: 1,
      convRule: rule22
    }, {
      start: 42813,
      length: 1,
      convRule: rule23
    }, {
      start: 42814,
      length: 1,
      convRule: rule22
    }, {
      start: 42815,
      length: 1,
      convRule: rule23
    }, {
      start: 42816,
      length: 1,
      convRule: rule22
    }, {
      start: 42817,
      length: 1,
      convRule: rule23
    }, {
      start: 42818,
      length: 1,
      convRule: rule22
    }, {
      start: 42819,
      length: 1,
      convRule: rule23
    }, {
      start: 42820,
      length: 1,
      convRule: rule22
    }, {
      start: 42821,
      length: 1,
      convRule: rule23
    }, {
      start: 42822,
      length: 1,
      convRule: rule22
    }, {
      start: 42823,
      length: 1,
      convRule: rule23
    }, {
      start: 42824,
      length: 1,
      convRule: rule22
    }, {
      start: 42825,
      length: 1,
      convRule: rule23
    }, {
      start: 42826,
      length: 1,
      convRule: rule22
    }, {
      start: 42827,
      length: 1,
      convRule: rule23
    }, {
      start: 42828,
      length: 1,
      convRule: rule22
    }, {
      start: 42829,
      length: 1,
      convRule: rule23
    }, {
      start: 42830,
      length: 1,
      convRule: rule22
    }, {
      start: 42831,
      length: 1,
      convRule: rule23
    }, {
      start: 42832,
      length: 1,
      convRule: rule22
    }, {
      start: 42833,
      length: 1,
      convRule: rule23
    }, {
      start: 42834,
      length: 1,
      convRule: rule22
    }, {
      start: 42835,
      length: 1,
      convRule: rule23
    }, {
      start: 42836,
      length: 1,
      convRule: rule22
    }, {
      start: 42837,
      length: 1,
      convRule: rule23
    }, {
      start: 42838,
      length: 1,
      convRule: rule22
    }, {
      start: 42839,
      length: 1,
      convRule: rule23
    }, {
      start: 42840,
      length: 1,
      convRule: rule22
    }, {
      start: 42841,
      length: 1,
      convRule: rule23
    }, {
      start: 42842,
      length: 1,
      convRule: rule22
    }, {
      start: 42843,
      length: 1,
      convRule: rule23
    }, {
      start: 42844,
      length: 1,
      convRule: rule22
    }, {
      start: 42845,
      length: 1,
      convRule: rule23
    }, {
      start: 42846,
      length: 1,
      convRule: rule22
    }, {
      start: 42847,
      length: 1,
      convRule: rule23
    }, {
      start: 42848,
      length: 1,
      convRule: rule22
    }, {
      start: 42849,
      length: 1,
      convRule: rule23
    }, {
      start: 42850,
      length: 1,
      convRule: rule22
    }, {
      start: 42851,
      length: 1,
      convRule: rule23
    }, {
      start: 42852,
      length: 1,
      convRule: rule22
    }, {
      start: 42853,
      length: 1,
      convRule: rule23
    }, {
      start: 42854,
      length: 1,
      convRule: rule22
    }, {
      start: 42855,
      length: 1,
      convRule: rule23
    }, {
      start: 42856,
      length: 1,
      convRule: rule22
    }, {
      start: 42857,
      length: 1,
      convRule: rule23
    }, {
      start: 42858,
      length: 1,
      convRule: rule22
    }, {
      start: 42859,
      length: 1,
      convRule: rule23
    }, {
      start: 42860,
      length: 1,
      convRule: rule22
    }, {
      start: 42861,
      length: 1,
      convRule: rule23
    }, {
      start: 42862,
      length: 1,
      convRule: rule22
    }, {
      start: 42863,
      length: 1,
      convRule: rule23
    }, {
      start: 42873,
      length: 1,
      convRule: rule22
    }, {
      start: 42874,
      length: 1,
      convRule: rule23
    }, {
      start: 42875,
      length: 1,
      convRule: rule22
    }, {
      start: 42876,
      length: 1,
      convRule: rule23
    }, {
      start: 42877,
      length: 1,
      convRule: rule183
    }, {
      start: 42878,
      length: 1,
      convRule: rule22
    }, {
      start: 42879,
      length: 1,
      convRule: rule23
    }, {
      start: 42880,
      length: 1,
      convRule: rule22
    }, {
      start: 42881,
      length: 1,
      convRule: rule23
    }, {
      start: 42882,
      length: 1,
      convRule: rule22
    }, {
      start: 42883,
      length: 1,
      convRule: rule23
    }, {
      start: 42884,
      length: 1,
      convRule: rule22
    }, {
      start: 42885,
      length: 1,
      convRule: rule23
    }, {
      start: 42886,
      length: 1,
      convRule: rule22
    }, {
      start: 42887,
      length: 1,
      convRule: rule23
    }, {
      start: 42891,
      length: 1,
      convRule: rule22
    }, {
      start: 42892,
      length: 1,
      convRule: rule23
    }, {
      start: 42893,
      length: 1,
      convRule: rule184
    }, {
      start: 42896,
      length: 1,
      convRule: rule22
    }, {
      start: 42897,
      length: 1,
      convRule: rule23
    }, {
      start: 42898,
      length: 1,
      convRule: rule22
    }, {
      start: 42899,
      length: 1,
      convRule: rule23
    }, {
      start: 42900,
      length: 1,
      convRule: rule185
    }, {
      start: 42902,
      length: 1,
      convRule: rule22
    }, {
      start: 42903,
      length: 1,
      convRule: rule23
    }, {
      start: 42904,
      length: 1,
      convRule: rule22
    }, {
      start: 42905,
      length: 1,
      convRule: rule23
    }, {
      start: 42906,
      length: 1,
      convRule: rule22
    }, {
      start: 42907,
      length: 1,
      convRule: rule23
    }, {
      start: 42908,
      length: 1,
      convRule: rule22
    }, {
      start: 42909,
      length: 1,
      convRule: rule23
    }, {
      start: 42910,
      length: 1,
      convRule: rule22
    }, {
      start: 42911,
      length: 1,
      convRule: rule23
    }, {
      start: 42912,
      length: 1,
      convRule: rule22
    }, {
      start: 42913,
      length: 1,
      convRule: rule23
    }, {
      start: 42914,
      length: 1,
      convRule: rule22
    }, {
      start: 42915,
      length: 1,
      convRule: rule23
    }, {
      start: 42916,
      length: 1,
      convRule: rule22
    }, {
      start: 42917,
      length: 1,
      convRule: rule23
    }, {
      start: 42918,
      length: 1,
      convRule: rule22
    }, {
      start: 42919,
      length: 1,
      convRule: rule23
    }, {
      start: 42920,
      length: 1,
      convRule: rule22
    }, {
      start: 42921,
      length: 1,
      convRule: rule23
    }, {
      start: 42922,
      length: 1,
      convRule: rule186
    }, {
      start: 42923,
      length: 1,
      convRule: rule187
    }, {
      start: 42924,
      length: 1,
      convRule: rule188
    }, {
      start: 42925,
      length: 1,
      convRule: rule189
    }, {
      start: 42926,
      length: 1,
      convRule: rule186
    }, {
      start: 42928,
      length: 1,
      convRule: rule190
    }, {
      start: 42929,
      length: 1,
      convRule: rule191
    }, {
      start: 42930,
      length: 1,
      convRule: rule192
    }, {
      start: 42931,
      length: 1,
      convRule: rule193
    }, {
      start: 42932,
      length: 1,
      convRule: rule22
    }, {
      start: 42933,
      length: 1,
      convRule: rule23
    }, {
      start: 42934,
      length: 1,
      convRule: rule22
    }, {
      start: 42935,
      length: 1,
      convRule: rule23
    }, {
      start: 42936,
      length: 1,
      convRule: rule22
    }, {
      start: 42937,
      length: 1,
      convRule: rule23
    }, {
      start: 42938,
      length: 1,
      convRule: rule22
    }, {
      start: 42939,
      length: 1,
      convRule: rule23
    }, {
      start: 42940,
      length: 1,
      convRule: rule22
    }, {
      start: 42941,
      length: 1,
      convRule: rule23
    }, {
      start: 42942,
      length: 1,
      convRule: rule22
    }, {
      start: 42943,
      length: 1,
      convRule: rule23
    }, {
      start: 42946,
      length: 1,
      convRule: rule22
    }, {
      start: 42947,
      length: 1,
      convRule: rule23
    }, {
      start: 42948,
      length: 1,
      convRule: rule194
    }, {
      start: 42949,
      length: 1,
      convRule: rule195
    }, {
      start: 42950,
      length: 1,
      convRule: rule196
    }, {
      start: 42951,
      length: 1,
      convRule: rule22
    }, {
      start: 42952,
      length: 1,
      convRule: rule23
    }, {
      start: 42953,
      length: 1,
      convRule: rule22
    }, {
      start: 42954,
      length: 1,
      convRule: rule23
    }, {
      start: 42997,
      length: 1,
      convRule: rule22
    }, {
      start: 42998,
      length: 1,
      convRule: rule23
    }, {
      start: 43859,
      length: 1,
      convRule: rule197
    }, {
      start: 43888,
      length: 80,
      convRule: rule198
    }, {
      start: 65313,
      length: 26,
      convRule: rule9
    }, {
      start: 65345,
      length: 26,
      convRule: rule12
    }, {
      start: 66560,
      length: 40,
      convRule: rule201
    }, {
      start: 66600,
      length: 40,
      convRule: rule202
    }, {
      start: 66736,
      length: 36,
      convRule: rule201
    }, {
      start: 66776,
      length: 36,
      convRule: rule202
    }, {
      start: 68736,
      length: 51,
      convRule: rule97
    }, {
      start: 68800,
      length: 51,
      convRule: rule102
    }, {
      start: 71840,
      length: 32,
      convRule: rule9
    }, {
      start: 71872,
      length: 32,
      convRule: rule12
    }, {
      start: 93760,
      length: 32,
      convRule: rule9
    }, {
      start: 93792,
      length: 32,
      convRule: rule12
    }, {
      start: 125184,
      length: 34,
      convRule: rule203
    }, {
      start: 125218,
      length: 34,
      convRule: rule204
    }];
    bsearch = function(a) {
      return function(array2) {
        return function(size4) {
          return function(compare5) {
            var go = function($copy_i) {
              return function($copy_k) {
                var $tco_var_i = $copy_i;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(i, k) {
                  if (i > k || i >= length(array2)) {
                    $tco_done = true;
                    return Nothing.value;
                  }
                  ;
                  if (otherwise) {
                    var j = floor2(toNumber(i + k | 0) / 2);
                    var b = unsafeIndex2(array2)(j);
                    var v = compare5(a)(b);
                    if (v instanceof EQ) {
                      $tco_done = true;
                      return new Just(b);
                    }
                    ;
                    if (v instanceof GT) {
                      $tco_var_i = j + 1 | 0;
                      $copy_k = k;
                      return;
                    }
                    ;
                    $tco_var_i = i;
                    $copy_k = j - 1 | 0;
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5622, column 3 - line 5632, column 30): " + [i.constructor.name, k.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_i, $copy_k);
                }
                ;
                return $tco_result;
              };
            };
            return go(0)(size4);
          };
        };
      };
    };
    blkCmp = function(v) {
      return function(v1) {
        if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
          return EQ.value;
        }
        ;
        if (v.start > v1.start) {
          return GT.value;
        }
        ;
        if (otherwise) {
          return LT.value;
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5598, column 1 - line 5598, column 45): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    getRule = function(blocks) {
      return function(unichar) {
        return function(size4) {
          var key = {
            start: unichar,
            length: 1,
            convRule: nullrule
          };
          var maybeCharBlock = bsearch(key)(blocks)(size4)(blkCmp);
          if (maybeCharBlock instanceof Nothing) {
            return Nothing.value;
          }
          ;
          if (maybeCharBlock instanceof Just) {
            return new Just(maybeCharBlock.value0.convRule);
          }
          ;
          throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5612, column 5 - line 5614, column 60): " + [maybeCharBlock.constructor.name]);
        };
      };
    };
    caseConv = function(f) {
      return function($$char2) {
        var maybeConversionRule = getRule(convchars)($$char2)(numConvBlocks);
        if (maybeConversionRule instanceof Nothing) {
          return $$char2;
        }
        ;
        if (maybeConversionRule instanceof Just) {
          return $$char2 + f(maybeConversionRule.value0) | 0;
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5727, column 5 - line 5729, column 53): " + [maybeConversionRule.constructor.name]);
      };
    };
    uTowlower = /* @__PURE__ */ caseConv(function(v) {
      return v.lowdist;
    });
    uTowupper = /* @__PURE__ */ caseConv(function(v) {
      return v.updist;
    });
    checkAttrS = function(categories) {
      return function($$char2) {
        var maybeConversionRule = getRule(spacechars)($$char2)(numSpaceBlocks);
        if (maybeConversionRule instanceof Nothing) {
          return false;
        }
        ;
        if (maybeConversionRule instanceof Just) {
          return isJust(elemIndex2(maybeConversionRule.value0.category)(categories));
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5654, column 5 - line 5656, column 86): " + [maybeConversionRule.constructor.name]);
      };
    };
    uIswspace = /* @__PURE__ */ checkAttrS([gencatZS]);
    allchars = [{
      start: 0,
      length: 32,
      convRule: rule0
    }, {
      start: 32,
      length: 1,
      convRule: rule1
    }, {
      start: 33,
      length: 3,
      convRule: rule2
    }, {
      start: 36,
      length: 1,
      convRule: rule3
    }, {
      start: 37,
      length: 3,
      convRule: rule2
    }, {
      start: 40,
      length: 1,
      convRule: rule4
    }, {
      start: 41,
      length: 1,
      convRule: rule5
    }, {
      start: 42,
      length: 1,
      convRule: rule2
    }, {
      start: 43,
      length: 1,
      convRule: rule6
    }, {
      start: 44,
      length: 1,
      convRule: rule2
    }, {
      start: 45,
      length: 1,
      convRule: rule7
    }, {
      start: 46,
      length: 2,
      convRule: rule2
    }, {
      start: 48,
      length: 10,
      convRule: rule8
    }, {
      start: 58,
      length: 2,
      convRule: rule2
    }, {
      start: 60,
      length: 3,
      convRule: rule6
    }, {
      start: 63,
      length: 2,
      convRule: rule2
    }, {
      start: 65,
      length: 26,
      convRule: rule9
    }, {
      start: 91,
      length: 1,
      convRule: rule4
    }, {
      start: 92,
      length: 1,
      convRule: rule2
    }, {
      start: 93,
      length: 1,
      convRule: rule5
    }, {
      start: 94,
      length: 1,
      convRule: rule10
    }, {
      start: 95,
      length: 1,
      convRule: rule11
    }, {
      start: 96,
      length: 1,
      convRule: rule10
    }, {
      start: 97,
      length: 26,
      convRule: rule12
    }, {
      start: 123,
      length: 1,
      convRule: rule4
    }, {
      start: 124,
      length: 1,
      convRule: rule6
    }, {
      start: 125,
      length: 1,
      convRule: rule5
    }, {
      start: 126,
      length: 1,
      convRule: rule6
    }, {
      start: 127,
      length: 33,
      convRule: rule0
    }, {
      start: 160,
      length: 1,
      convRule: rule1
    }, {
      start: 161,
      length: 1,
      convRule: rule2
    }, {
      start: 162,
      length: 4,
      convRule: rule3
    }, {
      start: 166,
      length: 1,
      convRule: rule13
    }, {
      start: 167,
      length: 1,
      convRule: rule2
    }, {
      start: 168,
      length: 1,
      convRule: rule10
    }, {
      start: 169,
      length: 1,
      convRule: rule13
    }, {
      start: 170,
      length: 1,
      convRule: rule14
    }, {
      start: 171,
      length: 1,
      convRule: rule15
    }, {
      start: 172,
      length: 1,
      convRule: rule6
    }, {
      start: 173,
      length: 1,
      convRule: rule16
    }, {
      start: 174,
      length: 1,
      convRule: rule13
    }, {
      start: 175,
      length: 1,
      convRule: rule10
    }, {
      start: 176,
      length: 1,
      convRule: rule13
    }, {
      start: 177,
      length: 1,
      convRule: rule6
    }, {
      start: 178,
      length: 2,
      convRule: rule17
    }, {
      start: 180,
      length: 1,
      convRule: rule10
    }, {
      start: 181,
      length: 1,
      convRule: rule18
    }, {
      start: 182,
      length: 2,
      convRule: rule2
    }, {
      start: 184,
      length: 1,
      convRule: rule10
    }, {
      start: 185,
      length: 1,
      convRule: rule17
    }, {
      start: 186,
      length: 1,
      convRule: rule14
    }, {
      start: 187,
      length: 1,
      convRule: rule19
    }, {
      start: 188,
      length: 3,
      convRule: rule17
    }, {
      start: 191,
      length: 1,
      convRule: rule2
    }, {
      start: 192,
      length: 23,
      convRule: rule9
    }, {
      start: 215,
      length: 1,
      convRule: rule6
    }, {
      start: 216,
      length: 7,
      convRule: rule9
    }, {
      start: 223,
      length: 1,
      convRule: rule20
    }, {
      start: 224,
      length: 23,
      convRule: rule12
    }, {
      start: 247,
      length: 1,
      convRule: rule6
    }, {
      start: 248,
      length: 7,
      convRule: rule12
    }, {
      start: 255,
      length: 1,
      convRule: rule21
    }, {
      start: 256,
      length: 1,
      convRule: rule22
    }, {
      start: 257,
      length: 1,
      convRule: rule23
    }, {
      start: 258,
      length: 1,
      convRule: rule22
    }, {
      start: 259,
      length: 1,
      convRule: rule23
    }, {
      start: 260,
      length: 1,
      convRule: rule22
    }, {
      start: 261,
      length: 1,
      convRule: rule23
    }, {
      start: 262,
      length: 1,
      convRule: rule22
    }, {
      start: 263,
      length: 1,
      convRule: rule23
    }, {
      start: 264,
      length: 1,
      convRule: rule22
    }, {
      start: 265,
      length: 1,
      convRule: rule23
    }, {
      start: 266,
      length: 1,
      convRule: rule22
    }, {
      start: 267,
      length: 1,
      convRule: rule23
    }, {
      start: 268,
      length: 1,
      convRule: rule22
    }, {
      start: 269,
      length: 1,
      convRule: rule23
    }, {
      start: 270,
      length: 1,
      convRule: rule22
    }, {
      start: 271,
      length: 1,
      convRule: rule23
    }, {
      start: 272,
      length: 1,
      convRule: rule22
    }, {
      start: 273,
      length: 1,
      convRule: rule23
    }, {
      start: 274,
      length: 1,
      convRule: rule22
    }, {
      start: 275,
      length: 1,
      convRule: rule23
    }, {
      start: 276,
      length: 1,
      convRule: rule22
    }, {
      start: 277,
      length: 1,
      convRule: rule23
    }, {
      start: 278,
      length: 1,
      convRule: rule22
    }, {
      start: 279,
      length: 1,
      convRule: rule23
    }, {
      start: 280,
      length: 1,
      convRule: rule22
    }, {
      start: 281,
      length: 1,
      convRule: rule23
    }, {
      start: 282,
      length: 1,
      convRule: rule22
    }, {
      start: 283,
      length: 1,
      convRule: rule23
    }, {
      start: 284,
      length: 1,
      convRule: rule22
    }, {
      start: 285,
      length: 1,
      convRule: rule23
    }, {
      start: 286,
      length: 1,
      convRule: rule22
    }, {
      start: 287,
      length: 1,
      convRule: rule23
    }, {
      start: 288,
      length: 1,
      convRule: rule22
    }, {
      start: 289,
      length: 1,
      convRule: rule23
    }, {
      start: 290,
      length: 1,
      convRule: rule22
    }, {
      start: 291,
      length: 1,
      convRule: rule23
    }, {
      start: 292,
      length: 1,
      convRule: rule22
    }, {
      start: 293,
      length: 1,
      convRule: rule23
    }, {
      start: 294,
      length: 1,
      convRule: rule22
    }, {
      start: 295,
      length: 1,
      convRule: rule23
    }, {
      start: 296,
      length: 1,
      convRule: rule22
    }, {
      start: 297,
      length: 1,
      convRule: rule23
    }, {
      start: 298,
      length: 1,
      convRule: rule22
    }, {
      start: 299,
      length: 1,
      convRule: rule23
    }, {
      start: 300,
      length: 1,
      convRule: rule22
    }, {
      start: 301,
      length: 1,
      convRule: rule23
    }, {
      start: 302,
      length: 1,
      convRule: rule22
    }, {
      start: 303,
      length: 1,
      convRule: rule23
    }, {
      start: 304,
      length: 1,
      convRule: rule24
    }, {
      start: 305,
      length: 1,
      convRule: rule25
    }, {
      start: 306,
      length: 1,
      convRule: rule22
    }, {
      start: 307,
      length: 1,
      convRule: rule23
    }, {
      start: 308,
      length: 1,
      convRule: rule22
    }, {
      start: 309,
      length: 1,
      convRule: rule23
    }, {
      start: 310,
      length: 1,
      convRule: rule22
    }, {
      start: 311,
      length: 1,
      convRule: rule23
    }, {
      start: 312,
      length: 1,
      convRule: rule20
    }, {
      start: 313,
      length: 1,
      convRule: rule22
    }, {
      start: 314,
      length: 1,
      convRule: rule23
    }, {
      start: 315,
      length: 1,
      convRule: rule22
    }, {
      start: 316,
      length: 1,
      convRule: rule23
    }, {
      start: 317,
      length: 1,
      convRule: rule22
    }, {
      start: 318,
      length: 1,
      convRule: rule23
    }, {
      start: 319,
      length: 1,
      convRule: rule22
    }, {
      start: 320,
      length: 1,
      convRule: rule23
    }, {
      start: 321,
      length: 1,
      convRule: rule22
    }, {
      start: 322,
      length: 1,
      convRule: rule23
    }, {
      start: 323,
      length: 1,
      convRule: rule22
    }, {
      start: 324,
      length: 1,
      convRule: rule23
    }, {
      start: 325,
      length: 1,
      convRule: rule22
    }, {
      start: 326,
      length: 1,
      convRule: rule23
    }, {
      start: 327,
      length: 1,
      convRule: rule22
    }, {
      start: 328,
      length: 1,
      convRule: rule23
    }, {
      start: 329,
      length: 1,
      convRule: rule20
    }, {
      start: 330,
      length: 1,
      convRule: rule22
    }, {
      start: 331,
      length: 1,
      convRule: rule23
    }, {
      start: 332,
      length: 1,
      convRule: rule22
    }, {
      start: 333,
      length: 1,
      convRule: rule23
    }, {
      start: 334,
      length: 1,
      convRule: rule22
    }, {
      start: 335,
      length: 1,
      convRule: rule23
    }, {
      start: 336,
      length: 1,
      convRule: rule22
    }, {
      start: 337,
      length: 1,
      convRule: rule23
    }, {
      start: 338,
      length: 1,
      convRule: rule22
    }, {
      start: 339,
      length: 1,
      convRule: rule23
    }, {
      start: 340,
      length: 1,
      convRule: rule22
    }, {
      start: 341,
      length: 1,
      convRule: rule23
    }, {
      start: 342,
      length: 1,
      convRule: rule22
    }, {
      start: 343,
      length: 1,
      convRule: rule23
    }, {
      start: 344,
      length: 1,
      convRule: rule22
    }, {
      start: 345,
      length: 1,
      convRule: rule23
    }, {
      start: 346,
      length: 1,
      convRule: rule22
    }, {
      start: 347,
      length: 1,
      convRule: rule23
    }, {
      start: 348,
      length: 1,
      convRule: rule22
    }, {
      start: 349,
      length: 1,
      convRule: rule23
    }, {
      start: 350,
      length: 1,
      convRule: rule22
    }, {
      start: 351,
      length: 1,
      convRule: rule23
    }, {
      start: 352,
      length: 1,
      convRule: rule22
    }, {
      start: 353,
      length: 1,
      convRule: rule23
    }, {
      start: 354,
      length: 1,
      convRule: rule22
    }, {
      start: 355,
      length: 1,
      convRule: rule23
    }, {
      start: 356,
      length: 1,
      convRule: rule22
    }, {
      start: 357,
      length: 1,
      convRule: rule23
    }, {
      start: 358,
      length: 1,
      convRule: rule22
    }, {
      start: 359,
      length: 1,
      convRule: rule23
    }, {
      start: 360,
      length: 1,
      convRule: rule22
    }, {
      start: 361,
      length: 1,
      convRule: rule23
    }, {
      start: 362,
      length: 1,
      convRule: rule22
    }, {
      start: 363,
      length: 1,
      convRule: rule23
    }, {
      start: 364,
      length: 1,
      convRule: rule22
    }, {
      start: 365,
      length: 1,
      convRule: rule23
    }, {
      start: 366,
      length: 1,
      convRule: rule22
    }, {
      start: 367,
      length: 1,
      convRule: rule23
    }, {
      start: 368,
      length: 1,
      convRule: rule22
    }, {
      start: 369,
      length: 1,
      convRule: rule23
    }, {
      start: 370,
      length: 1,
      convRule: rule22
    }, {
      start: 371,
      length: 1,
      convRule: rule23
    }, {
      start: 372,
      length: 1,
      convRule: rule22
    }, {
      start: 373,
      length: 1,
      convRule: rule23
    }, {
      start: 374,
      length: 1,
      convRule: rule22
    }, {
      start: 375,
      length: 1,
      convRule: rule23
    }, {
      start: 376,
      length: 1,
      convRule: rule26
    }, {
      start: 377,
      length: 1,
      convRule: rule22
    }, {
      start: 378,
      length: 1,
      convRule: rule23
    }, {
      start: 379,
      length: 1,
      convRule: rule22
    }, {
      start: 380,
      length: 1,
      convRule: rule23
    }, {
      start: 381,
      length: 1,
      convRule: rule22
    }, {
      start: 382,
      length: 1,
      convRule: rule23
    }, {
      start: 383,
      length: 1,
      convRule: rule27
    }, {
      start: 384,
      length: 1,
      convRule: rule28
    }, {
      start: 385,
      length: 1,
      convRule: rule29
    }, {
      start: 386,
      length: 1,
      convRule: rule22
    }, {
      start: 387,
      length: 1,
      convRule: rule23
    }, {
      start: 388,
      length: 1,
      convRule: rule22
    }, {
      start: 389,
      length: 1,
      convRule: rule23
    }, {
      start: 390,
      length: 1,
      convRule: rule30
    }, {
      start: 391,
      length: 1,
      convRule: rule22
    }, {
      start: 392,
      length: 1,
      convRule: rule23
    }, {
      start: 393,
      length: 2,
      convRule: rule31
    }, {
      start: 395,
      length: 1,
      convRule: rule22
    }, {
      start: 396,
      length: 1,
      convRule: rule23
    }, {
      start: 397,
      length: 1,
      convRule: rule20
    }, {
      start: 398,
      length: 1,
      convRule: rule32
    }, {
      start: 399,
      length: 1,
      convRule: rule33
    }, {
      start: 400,
      length: 1,
      convRule: rule34
    }, {
      start: 401,
      length: 1,
      convRule: rule22
    }, {
      start: 402,
      length: 1,
      convRule: rule23
    }, {
      start: 403,
      length: 1,
      convRule: rule31
    }, {
      start: 404,
      length: 1,
      convRule: rule35
    }, {
      start: 405,
      length: 1,
      convRule: rule36
    }, {
      start: 406,
      length: 1,
      convRule: rule37
    }, {
      start: 407,
      length: 1,
      convRule: rule38
    }, {
      start: 408,
      length: 1,
      convRule: rule22
    }, {
      start: 409,
      length: 1,
      convRule: rule23
    }, {
      start: 410,
      length: 1,
      convRule: rule39
    }, {
      start: 411,
      length: 1,
      convRule: rule20
    }, {
      start: 412,
      length: 1,
      convRule: rule37
    }, {
      start: 413,
      length: 1,
      convRule: rule40
    }, {
      start: 414,
      length: 1,
      convRule: rule41
    }, {
      start: 415,
      length: 1,
      convRule: rule42
    }, {
      start: 416,
      length: 1,
      convRule: rule22
    }, {
      start: 417,
      length: 1,
      convRule: rule23
    }, {
      start: 418,
      length: 1,
      convRule: rule22
    }, {
      start: 419,
      length: 1,
      convRule: rule23
    }, {
      start: 420,
      length: 1,
      convRule: rule22
    }, {
      start: 421,
      length: 1,
      convRule: rule23
    }, {
      start: 422,
      length: 1,
      convRule: rule43
    }, {
      start: 423,
      length: 1,
      convRule: rule22
    }, {
      start: 424,
      length: 1,
      convRule: rule23
    }, {
      start: 425,
      length: 1,
      convRule: rule43
    }, {
      start: 426,
      length: 2,
      convRule: rule20
    }, {
      start: 428,
      length: 1,
      convRule: rule22
    }, {
      start: 429,
      length: 1,
      convRule: rule23
    }, {
      start: 430,
      length: 1,
      convRule: rule43
    }, {
      start: 431,
      length: 1,
      convRule: rule22
    }, {
      start: 432,
      length: 1,
      convRule: rule23
    }, {
      start: 433,
      length: 2,
      convRule: rule44
    }, {
      start: 435,
      length: 1,
      convRule: rule22
    }, {
      start: 436,
      length: 1,
      convRule: rule23
    }, {
      start: 437,
      length: 1,
      convRule: rule22
    }, {
      start: 438,
      length: 1,
      convRule: rule23
    }, {
      start: 439,
      length: 1,
      convRule: rule45
    }, {
      start: 440,
      length: 1,
      convRule: rule22
    }, {
      start: 441,
      length: 1,
      convRule: rule23
    }, {
      start: 442,
      length: 1,
      convRule: rule20
    }, {
      start: 443,
      length: 1,
      convRule: rule14
    }, {
      start: 444,
      length: 1,
      convRule: rule22
    }, {
      start: 445,
      length: 1,
      convRule: rule23
    }, {
      start: 446,
      length: 1,
      convRule: rule20
    }, {
      start: 447,
      length: 1,
      convRule: rule46
    }, {
      start: 448,
      length: 4,
      convRule: rule14
    }, {
      start: 452,
      length: 1,
      convRule: rule47
    }, {
      start: 453,
      length: 1,
      convRule: rule48
    }, {
      start: 454,
      length: 1,
      convRule: rule49
    }, {
      start: 455,
      length: 1,
      convRule: rule47
    }, {
      start: 456,
      length: 1,
      convRule: rule48
    }, {
      start: 457,
      length: 1,
      convRule: rule49
    }, {
      start: 458,
      length: 1,
      convRule: rule47
    }, {
      start: 459,
      length: 1,
      convRule: rule48
    }, {
      start: 460,
      length: 1,
      convRule: rule49
    }, {
      start: 461,
      length: 1,
      convRule: rule22
    }, {
      start: 462,
      length: 1,
      convRule: rule23
    }, {
      start: 463,
      length: 1,
      convRule: rule22
    }, {
      start: 464,
      length: 1,
      convRule: rule23
    }, {
      start: 465,
      length: 1,
      convRule: rule22
    }, {
      start: 466,
      length: 1,
      convRule: rule23
    }, {
      start: 467,
      length: 1,
      convRule: rule22
    }, {
      start: 468,
      length: 1,
      convRule: rule23
    }, {
      start: 469,
      length: 1,
      convRule: rule22
    }, {
      start: 470,
      length: 1,
      convRule: rule23
    }, {
      start: 471,
      length: 1,
      convRule: rule22
    }, {
      start: 472,
      length: 1,
      convRule: rule23
    }, {
      start: 473,
      length: 1,
      convRule: rule22
    }, {
      start: 474,
      length: 1,
      convRule: rule23
    }, {
      start: 475,
      length: 1,
      convRule: rule22
    }, {
      start: 476,
      length: 1,
      convRule: rule23
    }, {
      start: 477,
      length: 1,
      convRule: rule50
    }, {
      start: 478,
      length: 1,
      convRule: rule22
    }, {
      start: 479,
      length: 1,
      convRule: rule23
    }, {
      start: 480,
      length: 1,
      convRule: rule22
    }, {
      start: 481,
      length: 1,
      convRule: rule23
    }, {
      start: 482,
      length: 1,
      convRule: rule22
    }, {
      start: 483,
      length: 1,
      convRule: rule23
    }, {
      start: 484,
      length: 1,
      convRule: rule22
    }, {
      start: 485,
      length: 1,
      convRule: rule23
    }, {
      start: 486,
      length: 1,
      convRule: rule22
    }, {
      start: 487,
      length: 1,
      convRule: rule23
    }, {
      start: 488,
      length: 1,
      convRule: rule22
    }, {
      start: 489,
      length: 1,
      convRule: rule23
    }, {
      start: 490,
      length: 1,
      convRule: rule22
    }, {
      start: 491,
      length: 1,
      convRule: rule23
    }, {
      start: 492,
      length: 1,
      convRule: rule22
    }, {
      start: 493,
      length: 1,
      convRule: rule23
    }, {
      start: 494,
      length: 1,
      convRule: rule22
    }, {
      start: 495,
      length: 1,
      convRule: rule23
    }, {
      start: 496,
      length: 1,
      convRule: rule20
    }, {
      start: 497,
      length: 1,
      convRule: rule47
    }, {
      start: 498,
      length: 1,
      convRule: rule48
    }, {
      start: 499,
      length: 1,
      convRule: rule49
    }, {
      start: 500,
      length: 1,
      convRule: rule22
    }, {
      start: 501,
      length: 1,
      convRule: rule23
    }, {
      start: 502,
      length: 1,
      convRule: rule51
    }, {
      start: 503,
      length: 1,
      convRule: rule52
    }, {
      start: 504,
      length: 1,
      convRule: rule22
    }, {
      start: 505,
      length: 1,
      convRule: rule23
    }, {
      start: 506,
      length: 1,
      convRule: rule22
    }, {
      start: 507,
      length: 1,
      convRule: rule23
    }, {
      start: 508,
      length: 1,
      convRule: rule22
    }, {
      start: 509,
      length: 1,
      convRule: rule23
    }, {
      start: 510,
      length: 1,
      convRule: rule22
    }, {
      start: 511,
      length: 1,
      convRule: rule23
    }, {
      start: 512,
      length: 1,
      convRule: rule22
    }, {
      start: 513,
      length: 1,
      convRule: rule23
    }, {
      start: 514,
      length: 1,
      convRule: rule22
    }, {
      start: 515,
      length: 1,
      convRule: rule23
    }, {
      start: 516,
      length: 1,
      convRule: rule22
    }, {
      start: 517,
      length: 1,
      convRule: rule23
    }, {
      start: 518,
      length: 1,
      convRule: rule22
    }, {
      start: 519,
      length: 1,
      convRule: rule23
    }, {
      start: 520,
      length: 1,
      convRule: rule22
    }, {
      start: 521,
      length: 1,
      convRule: rule23
    }, {
      start: 522,
      length: 1,
      convRule: rule22
    }, {
      start: 523,
      length: 1,
      convRule: rule23
    }, {
      start: 524,
      length: 1,
      convRule: rule22
    }, {
      start: 525,
      length: 1,
      convRule: rule23
    }, {
      start: 526,
      length: 1,
      convRule: rule22
    }, {
      start: 527,
      length: 1,
      convRule: rule23
    }, {
      start: 528,
      length: 1,
      convRule: rule22
    }, {
      start: 529,
      length: 1,
      convRule: rule23
    }, {
      start: 530,
      length: 1,
      convRule: rule22
    }, {
      start: 531,
      length: 1,
      convRule: rule23
    }, {
      start: 532,
      length: 1,
      convRule: rule22
    }, {
      start: 533,
      length: 1,
      convRule: rule23
    }, {
      start: 534,
      length: 1,
      convRule: rule22
    }, {
      start: 535,
      length: 1,
      convRule: rule23
    }, {
      start: 536,
      length: 1,
      convRule: rule22
    }, {
      start: 537,
      length: 1,
      convRule: rule23
    }, {
      start: 538,
      length: 1,
      convRule: rule22
    }, {
      start: 539,
      length: 1,
      convRule: rule23
    }, {
      start: 540,
      length: 1,
      convRule: rule22
    }, {
      start: 541,
      length: 1,
      convRule: rule23
    }, {
      start: 542,
      length: 1,
      convRule: rule22
    }, {
      start: 543,
      length: 1,
      convRule: rule23
    }, {
      start: 544,
      length: 1,
      convRule: rule53
    }, {
      start: 545,
      length: 1,
      convRule: rule20
    }, {
      start: 546,
      length: 1,
      convRule: rule22
    }, {
      start: 547,
      length: 1,
      convRule: rule23
    }, {
      start: 548,
      length: 1,
      convRule: rule22
    }, {
      start: 549,
      length: 1,
      convRule: rule23
    }, {
      start: 550,
      length: 1,
      convRule: rule22
    }, {
      start: 551,
      length: 1,
      convRule: rule23
    }, {
      start: 552,
      length: 1,
      convRule: rule22
    }, {
      start: 553,
      length: 1,
      convRule: rule23
    }, {
      start: 554,
      length: 1,
      convRule: rule22
    }, {
      start: 555,
      length: 1,
      convRule: rule23
    }, {
      start: 556,
      length: 1,
      convRule: rule22
    }, {
      start: 557,
      length: 1,
      convRule: rule23
    }, {
      start: 558,
      length: 1,
      convRule: rule22
    }, {
      start: 559,
      length: 1,
      convRule: rule23
    }, {
      start: 560,
      length: 1,
      convRule: rule22
    }, {
      start: 561,
      length: 1,
      convRule: rule23
    }, {
      start: 562,
      length: 1,
      convRule: rule22
    }, {
      start: 563,
      length: 1,
      convRule: rule23
    }, {
      start: 564,
      length: 6,
      convRule: rule20
    }, {
      start: 570,
      length: 1,
      convRule: rule54
    }, {
      start: 571,
      length: 1,
      convRule: rule22
    }, {
      start: 572,
      length: 1,
      convRule: rule23
    }, {
      start: 573,
      length: 1,
      convRule: rule55
    }, {
      start: 574,
      length: 1,
      convRule: rule56
    }, {
      start: 575,
      length: 2,
      convRule: rule57
    }, {
      start: 577,
      length: 1,
      convRule: rule22
    }, {
      start: 578,
      length: 1,
      convRule: rule23
    }, {
      start: 579,
      length: 1,
      convRule: rule58
    }, {
      start: 580,
      length: 1,
      convRule: rule59
    }, {
      start: 581,
      length: 1,
      convRule: rule60
    }, {
      start: 582,
      length: 1,
      convRule: rule22
    }, {
      start: 583,
      length: 1,
      convRule: rule23
    }, {
      start: 584,
      length: 1,
      convRule: rule22
    }, {
      start: 585,
      length: 1,
      convRule: rule23
    }, {
      start: 586,
      length: 1,
      convRule: rule22
    }, {
      start: 587,
      length: 1,
      convRule: rule23
    }, {
      start: 588,
      length: 1,
      convRule: rule22
    }, {
      start: 589,
      length: 1,
      convRule: rule23
    }, {
      start: 590,
      length: 1,
      convRule: rule22
    }, {
      start: 591,
      length: 1,
      convRule: rule23
    }, {
      start: 592,
      length: 1,
      convRule: rule61
    }, {
      start: 593,
      length: 1,
      convRule: rule62
    }, {
      start: 594,
      length: 1,
      convRule: rule63
    }, {
      start: 595,
      length: 1,
      convRule: rule64
    }, {
      start: 596,
      length: 1,
      convRule: rule65
    }, {
      start: 597,
      length: 1,
      convRule: rule20
    }, {
      start: 598,
      length: 2,
      convRule: rule66
    }, {
      start: 600,
      length: 1,
      convRule: rule20
    }, {
      start: 601,
      length: 1,
      convRule: rule67
    }, {
      start: 602,
      length: 1,
      convRule: rule20
    }, {
      start: 603,
      length: 1,
      convRule: rule68
    }, {
      start: 604,
      length: 1,
      convRule: rule69
    }, {
      start: 605,
      length: 3,
      convRule: rule20
    }, {
      start: 608,
      length: 1,
      convRule: rule66
    }, {
      start: 609,
      length: 1,
      convRule: rule70
    }, {
      start: 610,
      length: 1,
      convRule: rule20
    }, {
      start: 611,
      length: 1,
      convRule: rule71
    }, {
      start: 612,
      length: 1,
      convRule: rule20
    }, {
      start: 613,
      length: 1,
      convRule: rule72
    }, {
      start: 614,
      length: 1,
      convRule: rule73
    }, {
      start: 615,
      length: 1,
      convRule: rule20
    }, {
      start: 616,
      length: 1,
      convRule: rule74
    }, {
      start: 617,
      length: 1,
      convRule: rule75
    }, {
      start: 618,
      length: 1,
      convRule: rule73
    }, {
      start: 619,
      length: 1,
      convRule: rule76
    }, {
      start: 620,
      length: 1,
      convRule: rule77
    }, {
      start: 621,
      length: 2,
      convRule: rule20
    }, {
      start: 623,
      length: 1,
      convRule: rule75
    }, {
      start: 624,
      length: 1,
      convRule: rule20
    }, {
      start: 625,
      length: 1,
      convRule: rule78
    }, {
      start: 626,
      length: 1,
      convRule: rule79
    }, {
      start: 627,
      length: 2,
      convRule: rule20
    }, {
      start: 629,
      length: 1,
      convRule: rule80
    }, {
      start: 630,
      length: 7,
      convRule: rule20
    }, {
      start: 637,
      length: 1,
      convRule: rule81
    }, {
      start: 638,
      length: 2,
      convRule: rule20
    }, {
      start: 640,
      length: 1,
      convRule: rule82
    }, {
      start: 641,
      length: 1,
      convRule: rule20
    }, {
      start: 642,
      length: 1,
      convRule: rule83
    }, {
      start: 643,
      length: 1,
      convRule: rule82
    }, {
      start: 644,
      length: 3,
      convRule: rule20
    }, {
      start: 647,
      length: 1,
      convRule: rule84
    }, {
      start: 648,
      length: 1,
      convRule: rule82
    }, {
      start: 649,
      length: 1,
      convRule: rule85
    }, {
      start: 650,
      length: 2,
      convRule: rule86
    }, {
      start: 652,
      length: 1,
      convRule: rule87
    }, {
      start: 653,
      length: 5,
      convRule: rule20
    }, {
      start: 658,
      length: 1,
      convRule: rule88
    }, {
      start: 659,
      length: 1,
      convRule: rule20
    }, {
      start: 660,
      length: 1,
      convRule: rule14
    }, {
      start: 661,
      length: 8,
      convRule: rule20
    }, {
      start: 669,
      length: 1,
      convRule: rule89
    }, {
      start: 670,
      length: 1,
      convRule: rule90
    }, {
      start: 671,
      length: 17,
      convRule: rule20
    }, {
      start: 688,
      length: 18,
      convRule: rule91
    }, {
      start: 706,
      length: 4,
      convRule: rule10
    }, {
      start: 710,
      length: 12,
      convRule: rule91
    }, {
      start: 722,
      length: 14,
      convRule: rule10
    }, {
      start: 736,
      length: 5,
      convRule: rule91
    }, {
      start: 741,
      length: 7,
      convRule: rule10
    }, {
      start: 748,
      length: 1,
      convRule: rule91
    }, {
      start: 749,
      length: 1,
      convRule: rule10
    }, {
      start: 750,
      length: 1,
      convRule: rule91
    }, {
      start: 751,
      length: 17,
      convRule: rule10
    }, {
      start: 768,
      length: 69,
      convRule: rule92
    }, {
      start: 837,
      length: 1,
      convRule: rule93
    }, {
      start: 838,
      length: 42,
      convRule: rule92
    }, {
      start: 880,
      length: 1,
      convRule: rule22
    }, {
      start: 881,
      length: 1,
      convRule: rule23
    }, {
      start: 882,
      length: 1,
      convRule: rule22
    }, {
      start: 883,
      length: 1,
      convRule: rule23
    }, {
      start: 884,
      length: 1,
      convRule: rule91
    }, {
      start: 885,
      length: 1,
      convRule: rule10
    }, {
      start: 886,
      length: 1,
      convRule: rule22
    }, {
      start: 887,
      length: 1,
      convRule: rule23
    }, {
      start: 890,
      length: 1,
      convRule: rule91
    }, {
      start: 891,
      length: 3,
      convRule: rule41
    }, {
      start: 894,
      length: 1,
      convRule: rule2
    }, {
      start: 895,
      length: 1,
      convRule: rule94
    }, {
      start: 900,
      length: 2,
      convRule: rule10
    }, {
      start: 902,
      length: 1,
      convRule: rule95
    }, {
      start: 903,
      length: 1,
      convRule: rule2
    }, {
      start: 904,
      length: 3,
      convRule: rule96
    }, {
      start: 908,
      length: 1,
      convRule: rule97
    }, {
      start: 910,
      length: 2,
      convRule: rule98
    }, {
      start: 912,
      length: 1,
      convRule: rule20
    }, {
      start: 913,
      length: 17,
      convRule: rule9
    }, {
      start: 931,
      length: 9,
      convRule: rule9
    }, {
      start: 940,
      length: 1,
      convRule: rule99
    }, {
      start: 941,
      length: 3,
      convRule: rule100
    }, {
      start: 944,
      length: 1,
      convRule: rule20
    }, {
      start: 945,
      length: 17,
      convRule: rule12
    }, {
      start: 962,
      length: 1,
      convRule: rule101
    }, {
      start: 963,
      length: 9,
      convRule: rule12
    }, {
      start: 972,
      length: 1,
      convRule: rule102
    }, {
      start: 973,
      length: 2,
      convRule: rule103
    }, {
      start: 975,
      length: 1,
      convRule: rule104
    }, {
      start: 976,
      length: 1,
      convRule: rule105
    }, {
      start: 977,
      length: 1,
      convRule: rule106
    }, {
      start: 978,
      length: 3,
      convRule: rule107
    }, {
      start: 981,
      length: 1,
      convRule: rule108
    }, {
      start: 982,
      length: 1,
      convRule: rule109
    }, {
      start: 983,
      length: 1,
      convRule: rule110
    }, {
      start: 984,
      length: 1,
      convRule: rule22
    }, {
      start: 985,
      length: 1,
      convRule: rule23
    }, {
      start: 986,
      length: 1,
      convRule: rule22
    }, {
      start: 987,
      length: 1,
      convRule: rule23
    }, {
      start: 988,
      length: 1,
      convRule: rule22
    }, {
      start: 989,
      length: 1,
      convRule: rule23
    }, {
      start: 990,
      length: 1,
      convRule: rule22
    }, {
      start: 991,
      length: 1,
      convRule: rule23
    }, {
      start: 992,
      length: 1,
      convRule: rule22
    }, {
      start: 993,
      length: 1,
      convRule: rule23
    }, {
      start: 994,
      length: 1,
      convRule: rule22
    }, {
      start: 995,
      length: 1,
      convRule: rule23
    }, {
      start: 996,
      length: 1,
      convRule: rule22
    }, {
      start: 997,
      length: 1,
      convRule: rule23
    }, {
      start: 998,
      length: 1,
      convRule: rule22
    }, {
      start: 999,
      length: 1,
      convRule: rule23
    }, {
      start: 1e3,
      length: 1,
      convRule: rule22
    }, {
      start: 1001,
      length: 1,
      convRule: rule23
    }, {
      start: 1002,
      length: 1,
      convRule: rule22
    }, {
      start: 1003,
      length: 1,
      convRule: rule23
    }, {
      start: 1004,
      length: 1,
      convRule: rule22
    }, {
      start: 1005,
      length: 1,
      convRule: rule23
    }, {
      start: 1006,
      length: 1,
      convRule: rule22
    }, {
      start: 1007,
      length: 1,
      convRule: rule23
    }, {
      start: 1008,
      length: 1,
      convRule: rule111
    }, {
      start: 1009,
      length: 1,
      convRule: rule112
    }, {
      start: 1010,
      length: 1,
      convRule: rule113
    }, {
      start: 1011,
      length: 1,
      convRule: rule114
    }, {
      start: 1012,
      length: 1,
      convRule: rule115
    }, {
      start: 1013,
      length: 1,
      convRule: rule116
    }, {
      start: 1014,
      length: 1,
      convRule: rule6
    }, {
      start: 1015,
      length: 1,
      convRule: rule22
    }, {
      start: 1016,
      length: 1,
      convRule: rule23
    }, {
      start: 1017,
      length: 1,
      convRule: rule117
    }, {
      start: 1018,
      length: 1,
      convRule: rule22
    }, {
      start: 1019,
      length: 1,
      convRule: rule23
    }, {
      start: 1020,
      length: 1,
      convRule: rule20
    }, {
      start: 1021,
      length: 3,
      convRule: rule53
    }, {
      start: 1024,
      length: 16,
      convRule: rule118
    }, {
      start: 1040,
      length: 32,
      convRule: rule9
    }, {
      start: 1072,
      length: 32,
      convRule: rule12
    }, {
      start: 1104,
      length: 16,
      convRule: rule112
    }, {
      start: 1120,
      length: 1,
      convRule: rule22
    }, {
      start: 1121,
      length: 1,
      convRule: rule23
    }, {
      start: 1122,
      length: 1,
      convRule: rule22
    }, {
      start: 1123,
      length: 1,
      convRule: rule23
    }, {
      start: 1124,
      length: 1,
      convRule: rule22
    }, {
      start: 1125,
      length: 1,
      convRule: rule23
    }, {
      start: 1126,
      length: 1,
      convRule: rule22
    }, {
      start: 1127,
      length: 1,
      convRule: rule23
    }, {
      start: 1128,
      length: 1,
      convRule: rule22
    }, {
      start: 1129,
      length: 1,
      convRule: rule23
    }, {
      start: 1130,
      length: 1,
      convRule: rule22
    }, {
      start: 1131,
      length: 1,
      convRule: rule23
    }, {
      start: 1132,
      length: 1,
      convRule: rule22
    }, {
      start: 1133,
      length: 1,
      convRule: rule23
    }, {
      start: 1134,
      length: 1,
      convRule: rule22
    }, {
      start: 1135,
      length: 1,
      convRule: rule23
    }, {
      start: 1136,
      length: 1,
      convRule: rule22
    }, {
      start: 1137,
      length: 1,
      convRule: rule23
    }, {
      start: 1138,
      length: 1,
      convRule: rule22
    }, {
      start: 1139,
      length: 1,
      convRule: rule23
    }, {
      start: 1140,
      length: 1,
      convRule: rule22
    }, {
      start: 1141,
      length: 1,
      convRule: rule23
    }, {
      start: 1142,
      length: 1,
      convRule: rule22
    }, {
      start: 1143,
      length: 1,
      convRule: rule23
    }, {
      start: 1144,
      length: 1,
      convRule: rule22
    }, {
      start: 1145,
      length: 1,
      convRule: rule23
    }, {
      start: 1146,
      length: 1,
      convRule: rule22
    }, {
      start: 1147,
      length: 1,
      convRule: rule23
    }, {
      start: 1148,
      length: 1,
      convRule: rule22
    }, {
      start: 1149,
      length: 1,
      convRule: rule23
    }, {
      start: 1150,
      length: 1,
      convRule: rule22
    }, {
      start: 1151,
      length: 1,
      convRule: rule23
    }, {
      start: 1152,
      length: 1,
      convRule: rule22
    }, {
      start: 1153,
      length: 1,
      convRule: rule23
    }, {
      start: 1154,
      length: 1,
      convRule: rule13
    }, {
      start: 1155,
      length: 5,
      convRule: rule92
    }, {
      start: 1160,
      length: 2,
      convRule: rule119
    }, {
      start: 1162,
      length: 1,
      convRule: rule22
    }, {
      start: 1163,
      length: 1,
      convRule: rule23
    }, {
      start: 1164,
      length: 1,
      convRule: rule22
    }, {
      start: 1165,
      length: 1,
      convRule: rule23
    }, {
      start: 1166,
      length: 1,
      convRule: rule22
    }, {
      start: 1167,
      length: 1,
      convRule: rule23
    }, {
      start: 1168,
      length: 1,
      convRule: rule22
    }, {
      start: 1169,
      length: 1,
      convRule: rule23
    }, {
      start: 1170,
      length: 1,
      convRule: rule22
    }, {
      start: 1171,
      length: 1,
      convRule: rule23
    }, {
      start: 1172,
      length: 1,
      convRule: rule22
    }, {
      start: 1173,
      length: 1,
      convRule: rule23
    }, {
      start: 1174,
      length: 1,
      convRule: rule22
    }, {
      start: 1175,
      length: 1,
      convRule: rule23
    }, {
      start: 1176,
      length: 1,
      convRule: rule22
    }, {
      start: 1177,
      length: 1,
      convRule: rule23
    }, {
      start: 1178,
      length: 1,
      convRule: rule22
    }, {
      start: 1179,
      length: 1,
      convRule: rule23
    }, {
      start: 1180,
      length: 1,
      convRule: rule22
    }, {
      start: 1181,
      length: 1,
      convRule: rule23
    }, {
      start: 1182,
      length: 1,
      convRule: rule22
    }, {
      start: 1183,
      length: 1,
      convRule: rule23
    }, {
      start: 1184,
      length: 1,
      convRule: rule22
    }, {
      start: 1185,
      length: 1,
      convRule: rule23
    }, {
      start: 1186,
      length: 1,
      convRule: rule22
    }, {
      start: 1187,
      length: 1,
      convRule: rule23
    }, {
      start: 1188,
      length: 1,
      convRule: rule22
    }, {
      start: 1189,
      length: 1,
      convRule: rule23
    }, {
      start: 1190,
      length: 1,
      convRule: rule22
    }, {
      start: 1191,
      length: 1,
      convRule: rule23
    }, {
      start: 1192,
      length: 1,
      convRule: rule22
    }, {
      start: 1193,
      length: 1,
      convRule: rule23
    }, {
      start: 1194,
      length: 1,
      convRule: rule22
    }, {
      start: 1195,
      length: 1,
      convRule: rule23
    }, {
      start: 1196,
      length: 1,
      convRule: rule22
    }, {
      start: 1197,
      length: 1,
      convRule: rule23
    }, {
      start: 1198,
      length: 1,
      convRule: rule22
    }, {
      start: 1199,
      length: 1,
      convRule: rule23
    }, {
      start: 1200,
      length: 1,
      convRule: rule22
    }, {
      start: 1201,
      length: 1,
      convRule: rule23
    }, {
      start: 1202,
      length: 1,
      convRule: rule22
    }, {
      start: 1203,
      length: 1,
      convRule: rule23
    }, {
      start: 1204,
      length: 1,
      convRule: rule22
    }, {
      start: 1205,
      length: 1,
      convRule: rule23
    }, {
      start: 1206,
      length: 1,
      convRule: rule22
    }, {
      start: 1207,
      length: 1,
      convRule: rule23
    }, {
      start: 1208,
      length: 1,
      convRule: rule22
    }, {
      start: 1209,
      length: 1,
      convRule: rule23
    }, {
      start: 1210,
      length: 1,
      convRule: rule22
    }, {
      start: 1211,
      length: 1,
      convRule: rule23
    }, {
      start: 1212,
      length: 1,
      convRule: rule22
    }, {
      start: 1213,
      length: 1,
      convRule: rule23
    }, {
      start: 1214,
      length: 1,
      convRule: rule22
    }, {
      start: 1215,
      length: 1,
      convRule: rule23
    }, {
      start: 1216,
      length: 1,
      convRule: rule120
    }, {
      start: 1217,
      length: 1,
      convRule: rule22
    }, {
      start: 1218,
      length: 1,
      convRule: rule23
    }, {
      start: 1219,
      length: 1,
      convRule: rule22
    }, {
      start: 1220,
      length: 1,
      convRule: rule23
    }, {
      start: 1221,
      length: 1,
      convRule: rule22
    }, {
      start: 1222,
      length: 1,
      convRule: rule23
    }, {
      start: 1223,
      length: 1,
      convRule: rule22
    }, {
      start: 1224,
      length: 1,
      convRule: rule23
    }, {
      start: 1225,
      length: 1,
      convRule: rule22
    }, {
      start: 1226,
      length: 1,
      convRule: rule23
    }, {
      start: 1227,
      length: 1,
      convRule: rule22
    }, {
      start: 1228,
      length: 1,
      convRule: rule23
    }, {
      start: 1229,
      length: 1,
      convRule: rule22
    }, {
      start: 1230,
      length: 1,
      convRule: rule23
    }, {
      start: 1231,
      length: 1,
      convRule: rule121
    }, {
      start: 1232,
      length: 1,
      convRule: rule22
    }, {
      start: 1233,
      length: 1,
      convRule: rule23
    }, {
      start: 1234,
      length: 1,
      convRule: rule22
    }, {
      start: 1235,
      length: 1,
      convRule: rule23
    }, {
      start: 1236,
      length: 1,
      convRule: rule22
    }, {
      start: 1237,
      length: 1,
      convRule: rule23
    }, {
      start: 1238,
      length: 1,
      convRule: rule22
    }, {
      start: 1239,
      length: 1,
      convRule: rule23
    }, {
      start: 1240,
      length: 1,
      convRule: rule22
    }, {
      start: 1241,
      length: 1,
      convRule: rule23
    }, {
      start: 1242,
      length: 1,
      convRule: rule22
    }, {
      start: 1243,
      length: 1,
      convRule: rule23
    }, {
      start: 1244,
      length: 1,
      convRule: rule22
    }, {
      start: 1245,
      length: 1,
      convRule: rule23
    }, {
      start: 1246,
      length: 1,
      convRule: rule22
    }, {
      start: 1247,
      length: 1,
      convRule: rule23
    }, {
      start: 1248,
      length: 1,
      convRule: rule22
    }, {
      start: 1249,
      length: 1,
      convRule: rule23
    }, {
      start: 1250,
      length: 1,
      convRule: rule22
    }, {
      start: 1251,
      length: 1,
      convRule: rule23
    }, {
      start: 1252,
      length: 1,
      convRule: rule22
    }, {
      start: 1253,
      length: 1,
      convRule: rule23
    }, {
      start: 1254,
      length: 1,
      convRule: rule22
    }, {
      start: 1255,
      length: 1,
      convRule: rule23
    }, {
      start: 1256,
      length: 1,
      convRule: rule22
    }, {
      start: 1257,
      length: 1,
      convRule: rule23
    }, {
      start: 1258,
      length: 1,
      convRule: rule22
    }, {
      start: 1259,
      length: 1,
      convRule: rule23
    }, {
      start: 1260,
      length: 1,
      convRule: rule22
    }, {
      start: 1261,
      length: 1,
      convRule: rule23
    }, {
      start: 1262,
      length: 1,
      convRule: rule22
    }, {
      start: 1263,
      length: 1,
      convRule: rule23
    }, {
      start: 1264,
      length: 1,
      convRule: rule22
    }, {
      start: 1265,
      length: 1,
      convRule: rule23
    }, {
      start: 1266,
      length: 1,
      convRule: rule22
    }, {
      start: 1267,
      length: 1,
      convRule: rule23
    }, {
      start: 1268,
      length: 1,
      convRule: rule22
    }, {
      start: 1269,
      length: 1,
      convRule: rule23
    }, {
      start: 1270,
      length: 1,
      convRule: rule22
    }, {
      start: 1271,
      length: 1,
      convRule: rule23
    }, {
      start: 1272,
      length: 1,
      convRule: rule22
    }, {
      start: 1273,
      length: 1,
      convRule: rule23
    }, {
      start: 1274,
      length: 1,
      convRule: rule22
    }, {
      start: 1275,
      length: 1,
      convRule: rule23
    }, {
      start: 1276,
      length: 1,
      convRule: rule22
    }, {
      start: 1277,
      length: 1,
      convRule: rule23
    }, {
      start: 1278,
      length: 1,
      convRule: rule22
    }, {
      start: 1279,
      length: 1,
      convRule: rule23
    }, {
      start: 1280,
      length: 1,
      convRule: rule22
    }, {
      start: 1281,
      length: 1,
      convRule: rule23
    }, {
      start: 1282,
      length: 1,
      convRule: rule22
    }, {
      start: 1283,
      length: 1,
      convRule: rule23
    }, {
      start: 1284,
      length: 1,
      convRule: rule22
    }, {
      start: 1285,
      length: 1,
      convRule: rule23
    }, {
      start: 1286,
      length: 1,
      convRule: rule22
    }, {
      start: 1287,
      length: 1,
      convRule: rule23
    }, {
      start: 1288,
      length: 1,
      convRule: rule22
    }, {
      start: 1289,
      length: 1,
      convRule: rule23
    }, {
      start: 1290,
      length: 1,
      convRule: rule22
    }, {
      start: 1291,
      length: 1,
      convRule: rule23
    }, {
      start: 1292,
      length: 1,
      convRule: rule22
    }, {
      start: 1293,
      length: 1,
      convRule: rule23
    }, {
      start: 1294,
      length: 1,
      convRule: rule22
    }, {
      start: 1295,
      length: 1,
      convRule: rule23
    }, {
      start: 1296,
      length: 1,
      convRule: rule22
    }, {
      start: 1297,
      length: 1,
      convRule: rule23
    }, {
      start: 1298,
      length: 1,
      convRule: rule22
    }, {
      start: 1299,
      length: 1,
      convRule: rule23
    }, {
      start: 1300,
      length: 1,
      convRule: rule22
    }, {
      start: 1301,
      length: 1,
      convRule: rule23
    }, {
      start: 1302,
      length: 1,
      convRule: rule22
    }, {
      start: 1303,
      length: 1,
      convRule: rule23
    }, {
      start: 1304,
      length: 1,
      convRule: rule22
    }, {
      start: 1305,
      length: 1,
      convRule: rule23
    }, {
      start: 1306,
      length: 1,
      convRule: rule22
    }, {
      start: 1307,
      length: 1,
      convRule: rule23
    }, {
      start: 1308,
      length: 1,
      convRule: rule22
    }, {
      start: 1309,
      length: 1,
      convRule: rule23
    }, {
      start: 1310,
      length: 1,
      convRule: rule22
    }, {
      start: 1311,
      length: 1,
      convRule: rule23
    }, {
      start: 1312,
      length: 1,
      convRule: rule22
    }, {
      start: 1313,
      length: 1,
      convRule: rule23
    }, {
      start: 1314,
      length: 1,
      convRule: rule22
    }, {
      start: 1315,
      length: 1,
      convRule: rule23
    }, {
      start: 1316,
      length: 1,
      convRule: rule22
    }, {
      start: 1317,
      length: 1,
      convRule: rule23
    }, {
      start: 1318,
      length: 1,
      convRule: rule22
    }, {
      start: 1319,
      length: 1,
      convRule: rule23
    }, {
      start: 1320,
      length: 1,
      convRule: rule22
    }, {
      start: 1321,
      length: 1,
      convRule: rule23
    }, {
      start: 1322,
      length: 1,
      convRule: rule22
    }, {
      start: 1323,
      length: 1,
      convRule: rule23
    }, {
      start: 1324,
      length: 1,
      convRule: rule22
    }, {
      start: 1325,
      length: 1,
      convRule: rule23
    }, {
      start: 1326,
      length: 1,
      convRule: rule22
    }, {
      start: 1327,
      length: 1,
      convRule: rule23
    }, {
      start: 1329,
      length: 38,
      convRule: rule122
    }, {
      start: 1369,
      length: 1,
      convRule: rule91
    }, {
      start: 1370,
      length: 6,
      convRule: rule2
    }, {
      start: 1376,
      length: 1,
      convRule: rule20
    }, {
      start: 1377,
      length: 38,
      convRule: rule123
    }, {
      start: 1415,
      length: 2,
      convRule: rule20
    }, {
      start: 1417,
      length: 1,
      convRule: rule2
    }, {
      start: 1418,
      length: 1,
      convRule: rule7
    }, {
      start: 1421,
      length: 2,
      convRule: rule13
    }, {
      start: 1423,
      length: 1,
      convRule: rule3
    }, {
      start: 1425,
      length: 45,
      convRule: rule92
    }, {
      start: 1470,
      length: 1,
      convRule: rule7
    }, {
      start: 1471,
      length: 1,
      convRule: rule92
    }, {
      start: 1472,
      length: 1,
      convRule: rule2
    }, {
      start: 1473,
      length: 2,
      convRule: rule92
    }, {
      start: 1475,
      length: 1,
      convRule: rule2
    }, {
      start: 1476,
      length: 2,
      convRule: rule92
    }, {
      start: 1478,
      length: 1,
      convRule: rule2
    }, {
      start: 1479,
      length: 1,
      convRule: rule92
    }, {
      start: 1488,
      length: 27,
      convRule: rule14
    }, {
      start: 1519,
      length: 4,
      convRule: rule14
    }, {
      start: 1523,
      length: 2,
      convRule: rule2
    }, {
      start: 1536,
      length: 6,
      convRule: rule16
    }, {
      start: 1542,
      length: 3,
      convRule: rule6
    }, {
      start: 1545,
      length: 2,
      convRule: rule2
    }, {
      start: 1547,
      length: 1,
      convRule: rule3
    }, {
      start: 1548,
      length: 2,
      convRule: rule2
    }, {
      start: 1550,
      length: 2,
      convRule: rule13
    }, {
      start: 1552,
      length: 11,
      convRule: rule92
    }, {
      start: 1563,
      length: 1,
      convRule: rule2
    }, {
      start: 1564,
      length: 1,
      convRule: rule16
    }, {
      start: 1566,
      length: 2,
      convRule: rule2
    }, {
      start: 1568,
      length: 32,
      convRule: rule14
    }, {
      start: 1600,
      length: 1,
      convRule: rule91
    }, {
      start: 1601,
      length: 10,
      convRule: rule14
    }, {
      start: 1611,
      length: 21,
      convRule: rule92
    }, {
      start: 1632,
      length: 10,
      convRule: rule8
    }, {
      start: 1642,
      length: 4,
      convRule: rule2
    }, {
      start: 1646,
      length: 2,
      convRule: rule14
    }, {
      start: 1648,
      length: 1,
      convRule: rule92
    }, {
      start: 1649,
      length: 99,
      convRule: rule14
    }, {
      start: 1748,
      length: 1,
      convRule: rule2
    }, {
      start: 1749,
      length: 1,
      convRule: rule14
    }, {
      start: 1750,
      length: 7,
      convRule: rule92
    }, {
      start: 1757,
      length: 1,
      convRule: rule16
    }, {
      start: 1758,
      length: 1,
      convRule: rule13
    }, {
      start: 1759,
      length: 6,
      convRule: rule92
    }, {
      start: 1765,
      length: 2,
      convRule: rule91
    }, {
      start: 1767,
      length: 2,
      convRule: rule92
    }, {
      start: 1769,
      length: 1,
      convRule: rule13
    }, {
      start: 1770,
      length: 4,
      convRule: rule92
    }, {
      start: 1774,
      length: 2,
      convRule: rule14
    }, {
      start: 1776,
      length: 10,
      convRule: rule8
    }, {
      start: 1786,
      length: 3,
      convRule: rule14
    }, {
      start: 1789,
      length: 2,
      convRule: rule13
    }, {
      start: 1791,
      length: 1,
      convRule: rule14
    }, {
      start: 1792,
      length: 14,
      convRule: rule2
    }, {
      start: 1807,
      length: 1,
      convRule: rule16
    }, {
      start: 1808,
      length: 1,
      convRule: rule14
    }, {
      start: 1809,
      length: 1,
      convRule: rule92
    }, {
      start: 1810,
      length: 30,
      convRule: rule14
    }, {
      start: 1840,
      length: 27,
      convRule: rule92
    }, {
      start: 1869,
      length: 89,
      convRule: rule14
    }, {
      start: 1958,
      length: 11,
      convRule: rule92
    }, {
      start: 1969,
      length: 1,
      convRule: rule14
    }, {
      start: 1984,
      length: 10,
      convRule: rule8
    }, {
      start: 1994,
      length: 33,
      convRule: rule14
    }, {
      start: 2027,
      length: 9,
      convRule: rule92
    }, {
      start: 2036,
      length: 2,
      convRule: rule91
    }, {
      start: 2038,
      length: 1,
      convRule: rule13
    }, {
      start: 2039,
      length: 3,
      convRule: rule2
    }, {
      start: 2042,
      length: 1,
      convRule: rule91
    }, {
      start: 2045,
      length: 1,
      convRule: rule92
    }, {
      start: 2046,
      length: 2,
      convRule: rule3
    }, {
      start: 2048,
      length: 22,
      convRule: rule14
    }, {
      start: 2070,
      length: 4,
      convRule: rule92
    }, {
      start: 2074,
      length: 1,
      convRule: rule91
    }, {
      start: 2075,
      length: 9,
      convRule: rule92
    }, {
      start: 2084,
      length: 1,
      convRule: rule91
    }, {
      start: 2085,
      length: 3,
      convRule: rule92
    }, {
      start: 2088,
      length: 1,
      convRule: rule91
    }, {
      start: 2089,
      length: 5,
      convRule: rule92
    }, {
      start: 2096,
      length: 15,
      convRule: rule2
    }, {
      start: 2112,
      length: 25,
      convRule: rule14
    }, {
      start: 2137,
      length: 3,
      convRule: rule92
    }, {
      start: 2142,
      length: 1,
      convRule: rule2
    }, {
      start: 2144,
      length: 11,
      convRule: rule14
    }, {
      start: 2208,
      length: 21,
      convRule: rule14
    }, {
      start: 2230,
      length: 18,
      convRule: rule14
    }, {
      start: 2259,
      length: 15,
      convRule: rule92
    }, {
      start: 2274,
      length: 1,
      convRule: rule16
    }, {
      start: 2275,
      length: 32,
      convRule: rule92
    }, {
      start: 2307,
      length: 1,
      convRule: rule124
    }, {
      start: 2308,
      length: 54,
      convRule: rule14
    }, {
      start: 2362,
      length: 1,
      convRule: rule92
    }, {
      start: 2363,
      length: 1,
      convRule: rule124
    }, {
      start: 2364,
      length: 1,
      convRule: rule92
    }, {
      start: 2365,
      length: 1,
      convRule: rule14
    }, {
      start: 2366,
      length: 3,
      convRule: rule124
    }, {
      start: 2369,
      length: 8,
      convRule: rule92
    }, {
      start: 2377,
      length: 4,
      convRule: rule124
    }, {
      start: 2381,
      length: 1,
      convRule: rule92
    }, {
      start: 2382,
      length: 2,
      convRule: rule124
    }, {
      start: 2384,
      length: 1,
      convRule: rule14
    }, {
      start: 2385,
      length: 7,
      convRule: rule92
    }, {
      start: 2392,
      length: 10,
      convRule: rule14
    }, {
      start: 2402,
      length: 2,
      convRule: rule92
    }, {
      start: 2404,
      length: 2,
      convRule: rule2
    }, {
      start: 2406,
      length: 10,
      convRule: rule8
    }, {
      start: 2416,
      length: 1,
      convRule: rule2
    }, {
      start: 2417,
      length: 1,
      convRule: rule91
    }, {
      start: 2418,
      length: 15,
      convRule: rule14
    }, {
      start: 2433,
      length: 1,
      convRule: rule92
    }, {
      start: 2434,
      length: 2,
      convRule: rule124
    }, {
      start: 2437,
      length: 8,
      convRule: rule14
    }, {
      start: 2447,
      length: 2,
      convRule: rule14
    }, {
      start: 2451,
      length: 22,
      convRule: rule14
    }, {
      start: 2474,
      length: 7,
      convRule: rule14
    }, {
      start: 2482,
      length: 1,
      convRule: rule14
    }, {
      start: 2486,
      length: 4,
      convRule: rule14
    }, {
      start: 2492,
      length: 1,
      convRule: rule92
    }, {
      start: 2493,
      length: 1,
      convRule: rule14
    }, {
      start: 2494,
      length: 3,
      convRule: rule124
    }, {
      start: 2497,
      length: 4,
      convRule: rule92
    }, {
      start: 2503,
      length: 2,
      convRule: rule124
    }, {
      start: 2507,
      length: 2,
      convRule: rule124
    }, {
      start: 2509,
      length: 1,
      convRule: rule92
    }, {
      start: 2510,
      length: 1,
      convRule: rule14
    }, {
      start: 2519,
      length: 1,
      convRule: rule124
    }, {
      start: 2524,
      length: 2,
      convRule: rule14
    }, {
      start: 2527,
      length: 3,
      convRule: rule14
    }, {
      start: 2530,
      length: 2,
      convRule: rule92
    }, {
      start: 2534,
      length: 10,
      convRule: rule8
    }, {
      start: 2544,
      length: 2,
      convRule: rule14
    }, {
      start: 2546,
      length: 2,
      convRule: rule3
    }, {
      start: 2548,
      length: 6,
      convRule: rule17
    }, {
      start: 2554,
      length: 1,
      convRule: rule13
    }, {
      start: 2555,
      length: 1,
      convRule: rule3
    }, {
      start: 2556,
      length: 1,
      convRule: rule14
    }, {
      start: 2557,
      length: 1,
      convRule: rule2
    }, {
      start: 2558,
      length: 1,
      convRule: rule92
    }, {
      start: 2561,
      length: 2,
      convRule: rule92
    }, {
      start: 2563,
      length: 1,
      convRule: rule124
    }, {
      start: 2565,
      length: 6,
      convRule: rule14
    }, {
      start: 2575,
      length: 2,
      convRule: rule14
    }, {
      start: 2579,
      length: 22,
      convRule: rule14
    }, {
      start: 2602,
      length: 7,
      convRule: rule14
    }, {
      start: 2610,
      length: 2,
      convRule: rule14
    }, {
      start: 2613,
      length: 2,
      convRule: rule14
    }, {
      start: 2616,
      length: 2,
      convRule: rule14
    }, {
      start: 2620,
      length: 1,
      convRule: rule92
    }, {
      start: 2622,
      length: 3,
      convRule: rule124
    }, {
      start: 2625,
      length: 2,
      convRule: rule92
    }, {
      start: 2631,
      length: 2,
      convRule: rule92
    }, {
      start: 2635,
      length: 3,
      convRule: rule92
    }, {
      start: 2641,
      length: 1,
      convRule: rule92
    }, {
      start: 2649,
      length: 4,
      convRule: rule14
    }, {
      start: 2654,
      length: 1,
      convRule: rule14
    }, {
      start: 2662,
      length: 10,
      convRule: rule8
    }, {
      start: 2672,
      length: 2,
      convRule: rule92
    }, {
      start: 2674,
      length: 3,
      convRule: rule14
    }, {
      start: 2677,
      length: 1,
      convRule: rule92
    }, {
      start: 2678,
      length: 1,
      convRule: rule2
    }, {
      start: 2689,
      length: 2,
      convRule: rule92
    }, {
      start: 2691,
      length: 1,
      convRule: rule124
    }, {
      start: 2693,
      length: 9,
      convRule: rule14
    }, {
      start: 2703,
      length: 3,
      convRule: rule14
    }, {
      start: 2707,
      length: 22,
      convRule: rule14
    }, {
      start: 2730,
      length: 7,
      convRule: rule14
    }, {
      start: 2738,
      length: 2,
      convRule: rule14
    }, {
      start: 2741,
      length: 5,
      convRule: rule14
    }, {
      start: 2748,
      length: 1,
      convRule: rule92
    }, {
      start: 2749,
      length: 1,
      convRule: rule14
    }, {
      start: 2750,
      length: 3,
      convRule: rule124
    }, {
      start: 2753,
      length: 5,
      convRule: rule92
    }, {
      start: 2759,
      length: 2,
      convRule: rule92
    }, {
      start: 2761,
      length: 1,
      convRule: rule124
    }, {
      start: 2763,
      length: 2,
      convRule: rule124
    }, {
      start: 2765,
      length: 1,
      convRule: rule92
    }, {
      start: 2768,
      length: 1,
      convRule: rule14
    }, {
      start: 2784,
      length: 2,
      convRule: rule14
    }, {
      start: 2786,
      length: 2,
      convRule: rule92
    }, {
      start: 2790,
      length: 10,
      convRule: rule8
    }, {
      start: 2800,
      length: 1,
      convRule: rule2
    }, {
      start: 2801,
      length: 1,
      convRule: rule3
    }, {
      start: 2809,
      length: 1,
      convRule: rule14
    }, {
      start: 2810,
      length: 6,
      convRule: rule92
    }, {
      start: 2817,
      length: 1,
      convRule: rule92
    }, {
      start: 2818,
      length: 2,
      convRule: rule124
    }, {
      start: 2821,
      length: 8,
      convRule: rule14
    }, {
      start: 2831,
      length: 2,
      convRule: rule14
    }, {
      start: 2835,
      length: 22,
      convRule: rule14
    }, {
      start: 2858,
      length: 7,
      convRule: rule14
    }, {
      start: 2866,
      length: 2,
      convRule: rule14
    }, {
      start: 2869,
      length: 5,
      convRule: rule14
    }, {
      start: 2876,
      length: 1,
      convRule: rule92
    }, {
      start: 2877,
      length: 1,
      convRule: rule14
    }, {
      start: 2878,
      length: 1,
      convRule: rule124
    }, {
      start: 2879,
      length: 1,
      convRule: rule92
    }, {
      start: 2880,
      length: 1,
      convRule: rule124
    }, {
      start: 2881,
      length: 4,
      convRule: rule92
    }, {
      start: 2887,
      length: 2,
      convRule: rule124
    }, {
      start: 2891,
      length: 2,
      convRule: rule124
    }, {
      start: 2893,
      length: 1,
      convRule: rule92
    }, {
      start: 2901,
      length: 2,
      convRule: rule92
    }, {
      start: 2903,
      length: 1,
      convRule: rule124
    }, {
      start: 2908,
      length: 2,
      convRule: rule14
    }, {
      start: 2911,
      length: 3,
      convRule: rule14
    }, {
      start: 2914,
      length: 2,
      convRule: rule92
    }, {
      start: 2918,
      length: 10,
      convRule: rule8
    }, {
      start: 2928,
      length: 1,
      convRule: rule13
    }, {
      start: 2929,
      length: 1,
      convRule: rule14
    }, {
      start: 2930,
      length: 6,
      convRule: rule17
    }, {
      start: 2946,
      length: 1,
      convRule: rule92
    }, {
      start: 2947,
      length: 1,
      convRule: rule14
    }, {
      start: 2949,
      length: 6,
      convRule: rule14
    }, {
      start: 2958,
      length: 3,
      convRule: rule14
    }, {
      start: 2962,
      length: 4,
      convRule: rule14
    }, {
      start: 2969,
      length: 2,
      convRule: rule14
    }, {
      start: 2972,
      length: 1,
      convRule: rule14
    }, {
      start: 2974,
      length: 2,
      convRule: rule14
    }, {
      start: 2979,
      length: 2,
      convRule: rule14
    }, {
      start: 2984,
      length: 3,
      convRule: rule14
    }, {
      start: 2990,
      length: 12,
      convRule: rule14
    }, {
      start: 3006,
      length: 2,
      convRule: rule124
    }, {
      start: 3008,
      length: 1,
      convRule: rule92
    }, {
      start: 3009,
      length: 2,
      convRule: rule124
    }, {
      start: 3014,
      length: 3,
      convRule: rule124
    }, {
      start: 3018,
      length: 3,
      convRule: rule124
    }, {
      start: 3021,
      length: 1,
      convRule: rule92
    }, {
      start: 3024,
      length: 1,
      convRule: rule14
    }, {
      start: 3031,
      length: 1,
      convRule: rule124
    }, {
      start: 3046,
      length: 10,
      convRule: rule8
    }, {
      start: 3056,
      length: 3,
      convRule: rule17
    }, {
      start: 3059,
      length: 6,
      convRule: rule13
    }, {
      start: 3065,
      length: 1,
      convRule: rule3
    }, {
      start: 3066,
      length: 1,
      convRule: rule13
    }, {
      start: 3072,
      length: 1,
      convRule: rule92
    }, {
      start: 3073,
      length: 3,
      convRule: rule124
    }, {
      start: 3076,
      length: 1,
      convRule: rule92
    }, {
      start: 3077,
      length: 8,
      convRule: rule14
    }, {
      start: 3086,
      length: 3,
      convRule: rule14
    }, {
      start: 3090,
      length: 23,
      convRule: rule14
    }, {
      start: 3114,
      length: 16,
      convRule: rule14
    }, {
      start: 3133,
      length: 1,
      convRule: rule14
    }, {
      start: 3134,
      length: 3,
      convRule: rule92
    }, {
      start: 3137,
      length: 4,
      convRule: rule124
    }, {
      start: 3142,
      length: 3,
      convRule: rule92
    }, {
      start: 3146,
      length: 4,
      convRule: rule92
    }, {
      start: 3157,
      length: 2,
      convRule: rule92
    }, {
      start: 3160,
      length: 3,
      convRule: rule14
    }, {
      start: 3168,
      length: 2,
      convRule: rule14
    }, {
      start: 3170,
      length: 2,
      convRule: rule92
    }, {
      start: 3174,
      length: 10,
      convRule: rule8
    }, {
      start: 3191,
      length: 1,
      convRule: rule2
    }, {
      start: 3192,
      length: 7,
      convRule: rule17
    }, {
      start: 3199,
      length: 1,
      convRule: rule13
    }, {
      start: 3200,
      length: 1,
      convRule: rule14
    }, {
      start: 3201,
      length: 1,
      convRule: rule92
    }, {
      start: 3202,
      length: 2,
      convRule: rule124
    }, {
      start: 3204,
      length: 1,
      convRule: rule2
    }, {
      start: 3205,
      length: 8,
      convRule: rule14
    }, {
      start: 3214,
      length: 3,
      convRule: rule14
    }, {
      start: 3218,
      length: 23,
      convRule: rule14
    }, {
      start: 3242,
      length: 10,
      convRule: rule14
    }, {
      start: 3253,
      length: 5,
      convRule: rule14
    }, {
      start: 3260,
      length: 1,
      convRule: rule92
    }, {
      start: 3261,
      length: 1,
      convRule: rule14
    }, {
      start: 3262,
      length: 1,
      convRule: rule124
    }, {
      start: 3263,
      length: 1,
      convRule: rule92
    }, {
      start: 3264,
      length: 5,
      convRule: rule124
    }, {
      start: 3270,
      length: 1,
      convRule: rule92
    }, {
      start: 3271,
      length: 2,
      convRule: rule124
    }, {
      start: 3274,
      length: 2,
      convRule: rule124
    }, {
      start: 3276,
      length: 2,
      convRule: rule92
    }, {
      start: 3285,
      length: 2,
      convRule: rule124
    }, {
      start: 3294,
      length: 1,
      convRule: rule14
    }, {
      start: 3296,
      length: 2,
      convRule: rule14
    }, {
      start: 3298,
      length: 2,
      convRule: rule92
    }, {
      start: 3302,
      length: 10,
      convRule: rule8
    }, {
      start: 3313,
      length: 2,
      convRule: rule14
    }, {
      start: 3328,
      length: 2,
      convRule: rule92
    }, {
      start: 3330,
      length: 2,
      convRule: rule124
    }, {
      start: 3332,
      length: 9,
      convRule: rule14
    }, {
      start: 3342,
      length: 3,
      convRule: rule14
    }, {
      start: 3346,
      length: 41,
      convRule: rule14
    }, {
      start: 3387,
      length: 2,
      convRule: rule92
    }, {
      start: 3389,
      length: 1,
      convRule: rule14
    }, {
      start: 3390,
      length: 3,
      convRule: rule124
    }, {
      start: 3393,
      length: 4,
      convRule: rule92
    }, {
      start: 3398,
      length: 3,
      convRule: rule124
    }, {
      start: 3402,
      length: 3,
      convRule: rule124
    }, {
      start: 3405,
      length: 1,
      convRule: rule92
    }, {
      start: 3406,
      length: 1,
      convRule: rule14
    }, {
      start: 3407,
      length: 1,
      convRule: rule13
    }, {
      start: 3412,
      length: 3,
      convRule: rule14
    }, {
      start: 3415,
      length: 1,
      convRule: rule124
    }, {
      start: 3416,
      length: 7,
      convRule: rule17
    }, {
      start: 3423,
      length: 3,
      convRule: rule14
    }, {
      start: 3426,
      length: 2,
      convRule: rule92
    }, {
      start: 3430,
      length: 10,
      convRule: rule8
    }, {
      start: 3440,
      length: 9,
      convRule: rule17
    }, {
      start: 3449,
      length: 1,
      convRule: rule13
    }, {
      start: 3450,
      length: 6,
      convRule: rule14
    }, {
      start: 3457,
      length: 1,
      convRule: rule92
    }, {
      start: 3458,
      length: 2,
      convRule: rule124
    }, {
      start: 3461,
      length: 18,
      convRule: rule14
    }, {
      start: 3482,
      length: 24,
      convRule: rule14
    }, {
      start: 3507,
      length: 9,
      convRule: rule14
    }, {
      start: 3517,
      length: 1,
      convRule: rule14
    }, {
      start: 3520,
      length: 7,
      convRule: rule14
    }, {
      start: 3530,
      length: 1,
      convRule: rule92
    }, {
      start: 3535,
      length: 3,
      convRule: rule124
    }, {
      start: 3538,
      length: 3,
      convRule: rule92
    }, {
      start: 3542,
      length: 1,
      convRule: rule92
    }, {
      start: 3544,
      length: 8,
      convRule: rule124
    }, {
      start: 3558,
      length: 10,
      convRule: rule8
    }, {
      start: 3570,
      length: 2,
      convRule: rule124
    }, {
      start: 3572,
      length: 1,
      convRule: rule2
    }, {
      start: 3585,
      length: 48,
      convRule: rule14
    }, {
      start: 3633,
      length: 1,
      convRule: rule92
    }, {
      start: 3634,
      length: 2,
      convRule: rule14
    }, {
      start: 3636,
      length: 7,
      convRule: rule92
    }, {
      start: 3647,
      length: 1,
      convRule: rule3
    }, {
      start: 3648,
      length: 6,
      convRule: rule14
    }, {
      start: 3654,
      length: 1,
      convRule: rule91
    }, {
      start: 3655,
      length: 8,
      convRule: rule92
    }, {
      start: 3663,
      length: 1,
      convRule: rule2
    }, {
      start: 3664,
      length: 10,
      convRule: rule8
    }, {
      start: 3674,
      length: 2,
      convRule: rule2
    }, {
      start: 3713,
      length: 2,
      convRule: rule14
    }, {
      start: 3716,
      length: 1,
      convRule: rule14
    }, {
      start: 3718,
      length: 5,
      convRule: rule14
    }, {
      start: 3724,
      length: 24,
      convRule: rule14
    }, {
      start: 3749,
      length: 1,
      convRule: rule14
    }, {
      start: 3751,
      length: 10,
      convRule: rule14
    }, {
      start: 3761,
      length: 1,
      convRule: rule92
    }, {
      start: 3762,
      length: 2,
      convRule: rule14
    }, {
      start: 3764,
      length: 9,
      convRule: rule92
    }, {
      start: 3773,
      length: 1,
      convRule: rule14
    }, {
      start: 3776,
      length: 5,
      convRule: rule14
    }, {
      start: 3782,
      length: 1,
      convRule: rule91
    }, {
      start: 3784,
      length: 6,
      convRule: rule92
    }, {
      start: 3792,
      length: 10,
      convRule: rule8
    }, {
      start: 3804,
      length: 4,
      convRule: rule14
    }, {
      start: 3840,
      length: 1,
      convRule: rule14
    }, {
      start: 3841,
      length: 3,
      convRule: rule13
    }, {
      start: 3844,
      length: 15,
      convRule: rule2
    }, {
      start: 3859,
      length: 1,
      convRule: rule13
    }, {
      start: 3860,
      length: 1,
      convRule: rule2
    }, {
      start: 3861,
      length: 3,
      convRule: rule13
    }, {
      start: 3864,
      length: 2,
      convRule: rule92
    }, {
      start: 3866,
      length: 6,
      convRule: rule13
    }, {
      start: 3872,
      length: 10,
      convRule: rule8
    }, {
      start: 3882,
      length: 10,
      convRule: rule17
    }, {
      start: 3892,
      length: 1,
      convRule: rule13
    }, {
      start: 3893,
      length: 1,
      convRule: rule92
    }, {
      start: 3894,
      length: 1,
      convRule: rule13
    }, {
      start: 3895,
      length: 1,
      convRule: rule92
    }, {
      start: 3896,
      length: 1,
      convRule: rule13
    }, {
      start: 3897,
      length: 1,
      convRule: rule92
    }, {
      start: 3898,
      length: 1,
      convRule: rule4
    }, {
      start: 3899,
      length: 1,
      convRule: rule5
    }, {
      start: 3900,
      length: 1,
      convRule: rule4
    }, {
      start: 3901,
      length: 1,
      convRule: rule5
    }, {
      start: 3902,
      length: 2,
      convRule: rule124
    }, {
      start: 3904,
      length: 8,
      convRule: rule14
    }, {
      start: 3913,
      length: 36,
      convRule: rule14
    }, {
      start: 3953,
      length: 14,
      convRule: rule92
    }, {
      start: 3967,
      length: 1,
      convRule: rule124
    }, {
      start: 3968,
      length: 5,
      convRule: rule92
    }, {
      start: 3973,
      length: 1,
      convRule: rule2
    }, {
      start: 3974,
      length: 2,
      convRule: rule92
    }, {
      start: 3976,
      length: 5,
      convRule: rule14
    }, {
      start: 3981,
      length: 11,
      convRule: rule92
    }, {
      start: 3993,
      length: 36,
      convRule: rule92
    }, {
      start: 4030,
      length: 8,
      convRule: rule13
    }, {
      start: 4038,
      length: 1,
      convRule: rule92
    }, {
      start: 4039,
      length: 6,
      convRule: rule13
    }, {
      start: 4046,
      length: 2,
      convRule: rule13
    }, {
      start: 4048,
      length: 5,
      convRule: rule2
    }, {
      start: 4053,
      length: 4,
      convRule: rule13
    }, {
      start: 4057,
      length: 2,
      convRule: rule2
    }, {
      start: 4096,
      length: 43,
      convRule: rule14
    }, {
      start: 4139,
      length: 2,
      convRule: rule124
    }, {
      start: 4141,
      length: 4,
      convRule: rule92
    }, {
      start: 4145,
      length: 1,
      convRule: rule124
    }, {
      start: 4146,
      length: 6,
      convRule: rule92
    }, {
      start: 4152,
      length: 1,
      convRule: rule124
    }, {
      start: 4153,
      length: 2,
      convRule: rule92
    }, {
      start: 4155,
      length: 2,
      convRule: rule124
    }, {
      start: 4157,
      length: 2,
      convRule: rule92
    }, {
      start: 4159,
      length: 1,
      convRule: rule14
    }, {
      start: 4160,
      length: 10,
      convRule: rule8
    }, {
      start: 4170,
      length: 6,
      convRule: rule2
    }, {
      start: 4176,
      length: 6,
      convRule: rule14
    }, {
      start: 4182,
      length: 2,
      convRule: rule124
    }, {
      start: 4184,
      length: 2,
      convRule: rule92
    }, {
      start: 4186,
      length: 4,
      convRule: rule14
    }, {
      start: 4190,
      length: 3,
      convRule: rule92
    }, {
      start: 4193,
      length: 1,
      convRule: rule14
    }, {
      start: 4194,
      length: 3,
      convRule: rule124
    }, {
      start: 4197,
      length: 2,
      convRule: rule14
    }, {
      start: 4199,
      length: 7,
      convRule: rule124
    }, {
      start: 4206,
      length: 3,
      convRule: rule14
    }, {
      start: 4209,
      length: 4,
      convRule: rule92
    }, {
      start: 4213,
      length: 13,
      convRule: rule14
    }, {
      start: 4226,
      length: 1,
      convRule: rule92
    }, {
      start: 4227,
      length: 2,
      convRule: rule124
    }, {
      start: 4229,
      length: 2,
      convRule: rule92
    }, {
      start: 4231,
      length: 6,
      convRule: rule124
    }, {
      start: 4237,
      length: 1,
      convRule: rule92
    }, {
      start: 4238,
      length: 1,
      convRule: rule14
    }, {
      start: 4239,
      length: 1,
      convRule: rule124
    }, {
      start: 4240,
      length: 10,
      convRule: rule8
    }, {
      start: 4250,
      length: 3,
      convRule: rule124
    }, {
      start: 4253,
      length: 1,
      convRule: rule92
    }, {
      start: 4254,
      length: 2,
      convRule: rule13
    }, {
      start: 4256,
      length: 38,
      convRule: rule125
    }, {
      start: 4295,
      length: 1,
      convRule: rule125
    }, {
      start: 4301,
      length: 1,
      convRule: rule125
    }, {
      start: 4304,
      length: 43,
      convRule: rule126
    }, {
      start: 4347,
      length: 1,
      convRule: rule2
    }, {
      start: 4348,
      length: 1,
      convRule: rule91
    }, {
      start: 4349,
      length: 3,
      convRule: rule126
    }, {
      start: 4352,
      length: 329,
      convRule: rule14
    }, {
      start: 4682,
      length: 4,
      convRule: rule14
    }, {
      start: 4688,
      length: 7,
      convRule: rule14
    }, {
      start: 4696,
      length: 1,
      convRule: rule14
    }, {
      start: 4698,
      length: 4,
      convRule: rule14
    }, {
      start: 4704,
      length: 41,
      convRule: rule14
    }, {
      start: 4746,
      length: 4,
      convRule: rule14
    }, {
      start: 4752,
      length: 33,
      convRule: rule14
    }, {
      start: 4786,
      length: 4,
      convRule: rule14
    }, {
      start: 4792,
      length: 7,
      convRule: rule14
    }, {
      start: 4800,
      length: 1,
      convRule: rule14
    }, {
      start: 4802,
      length: 4,
      convRule: rule14
    }, {
      start: 4808,
      length: 15,
      convRule: rule14
    }, {
      start: 4824,
      length: 57,
      convRule: rule14
    }, {
      start: 4882,
      length: 4,
      convRule: rule14
    }, {
      start: 4888,
      length: 67,
      convRule: rule14
    }, {
      start: 4957,
      length: 3,
      convRule: rule92
    }, {
      start: 4960,
      length: 9,
      convRule: rule2
    }, {
      start: 4969,
      length: 20,
      convRule: rule17
    }, {
      start: 4992,
      length: 16,
      convRule: rule14
    }, {
      start: 5008,
      length: 10,
      convRule: rule13
    }, {
      start: 5024,
      length: 80,
      convRule: rule127
    }, {
      start: 5104,
      length: 6,
      convRule: rule104
    }, {
      start: 5112,
      length: 6,
      convRule: rule110
    }, {
      start: 5120,
      length: 1,
      convRule: rule7
    }, {
      start: 5121,
      length: 620,
      convRule: rule14
    }, {
      start: 5741,
      length: 1,
      convRule: rule13
    }, {
      start: 5742,
      length: 1,
      convRule: rule2
    }, {
      start: 5743,
      length: 17,
      convRule: rule14
    }, {
      start: 5760,
      length: 1,
      convRule: rule1
    }, {
      start: 5761,
      length: 26,
      convRule: rule14
    }, {
      start: 5787,
      length: 1,
      convRule: rule4
    }, {
      start: 5788,
      length: 1,
      convRule: rule5
    }, {
      start: 5792,
      length: 75,
      convRule: rule14
    }, {
      start: 5867,
      length: 3,
      convRule: rule2
    }, {
      start: 5870,
      length: 3,
      convRule: rule128
    }, {
      start: 5873,
      length: 8,
      convRule: rule14
    }, {
      start: 5888,
      length: 13,
      convRule: rule14
    }, {
      start: 5902,
      length: 4,
      convRule: rule14
    }, {
      start: 5906,
      length: 3,
      convRule: rule92
    }, {
      start: 5920,
      length: 18,
      convRule: rule14
    }, {
      start: 5938,
      length: 3,
      convRule: rule92
    }, {
      start: 5941,
      length: 2,
      convRule: rule2
    }, {
      start: 5952,
      length: 18,
      convRule: rule14
    }, {
      start: 5970,
      length: 2,
      convRule: rule92
    }, {
      start: 5984,
      length: 13,
      convRule: rule14
    }, {
      start: 5998,
      length: 3,
      convRule: rule14
    }, {
      start: 6002,
      length: 2,
      convRule: rule92
    }, {
      start: 6016,
      length: 52,
      convRule: rule14
    }, {
      start: 6068,
      length: 2,
      convRule: rule92
    }, {
      start: 6070,
      length: 1,
      convRule: rule124
    }, {
      start: 6071,
      length: 7,
      convRule: rule92
    }, {
      start: 6078,
      length: 8,
      convRule: rule124
    }, {
      start: 6086,
      length: 1,
      convRule: rule92
    }, {
      start: 6087,
      length: 2,
      convRule: rule124
    }, {
      start: 6089,
      length: 11,
      convRule: rule92
    }, {
      start: 6100,
      length: 3,
      convRule: rule2
    }, {
      start: 6103,
      length: 1,
      convRule: rule91
    }, {
      start: 6104,
      length: 3,
      convRule: rule2
    }, {
      start: 6107,
      length: 1,
      convRule: rule3
    }, {
      start: 6108,
      length: 1,
      convRule: rule14
    }, {
      start: 6109,
      length: 1,
      convRule: rule92
    }, {
      start: 6112,
      length: 10,
      convRule: rule8
    }, {
      start: 6128,
      length: 10,
      convRule: rule17
    }, {
      start: 6144,
      length: 6,
      convRule: rule2
    }, {
      start: 6150,
      length: 1,
      convRule: rule7
    }, {
      start: 6151,
      length: 4,
      convRule: rule2
    }, {
      start: 6155,
      length: 3,
      convRule: rule92
    }, {
      start: 6158,
      length: 1,
      convRule: rule16
    }, {
      start: 6160,
      length: 10,
      convRule: rule8
    }, {
      start: 6176,
      length: 35,
      convRule: rule14
    }, {
      start: 6211,
      length: 1,
      convRule: rule91
    }, {
      start: 6212,
      length: 53,
      convRule: rule14
    }, {
      start: 6272,
      length: 5,
      convRule: rule14
    }, {
      start: 6277,
      length: 2,
      convRule: rule92
    }, {
      start: 6279,
      length: 34,
      convRule: rule14
    }, {
      start: 6313,
      length: 1,
      convRule: rule92
    }, {
      start: 6314,
      length: 1,
      convRule: rule14
    }, {
      start: 6320,
      length: 70,
      convRule: rule14
    }, {
      start: 6400,
      length: 31,
      convRule: rule14
    }, {
      start: 6432,
      length: 3,
      convRule: rule92
    }, {
      start: 6435,
      length: 4,
      convRule: rule124
    }, {
      start: 6439,
      length: 2,
      convRule: rule92
    }, {
      start: 6441,
      length: 3,
      convRule: rule124
    }, {
      start: 6448,
      length: 2,
      convRule: rule124
    }, {
      start: 6450,
      length: 1,
      convRule: rule92
    }, {
      start: 6451,
      length: 6,
      convRule: rule124
    }, {
      start: 6457,
      length: 3,
      convRule: rule92
    }, {
      start: 6464,
      length: 1,
      convRule: rule13
    }, {
      start: 6468,
      length: 2,
      convRule: rule2
    }, {
      start: 6470,
      length: 10,
      convRule: rule8
    }, {
      start: 6480,
      length: 30,
      convRule: rule14
    }, {
      start: 6512,
      length: 5,
      convRule: rule14
    }, {
      start: 6528,
      length: 44,
      convRule: rule14
    }, {
      start: 6576,
      length: 26,
      convRule: rule14
    }, {
      start: 6608,
      length: 10,
      convRule: rule8
    }, {
      start: 6618,
      length: 1,
      convRule: rule17
    }, {
      start: 6622,
      length: 34,
      convRule: rule13
    }, {
      start: 6656,
      length: 23,
      convRule: rule14
    }, {
      start: 6679,
      length: 2,
      convRule: rule92
    }, {
      start: 6681,
      length: 2,
      convRule: rule124
    }, {
      start: 6683,
      length: 1,
      convRule: rule92
    }, {
      start: 6686,
      length: 2,
      convRule: rule2
    }, {
      start: 6688,
      length: 53,
      convRule: rule14
    }, {
      start: 6741,
      length: 1,
      convRule: rule124
    }, {
      start: 6742,
      length: 1,
      convRule: rule92
    }, {
      start: 6743,
      length: 1,
      convRule: rule124
    }, {
      start: 6744,
      length: 7,
      convRule: rule92
    }, {
      start: 6752,
      length: 1,
      convRule: rule92
    }, {
      start: 6753,
      length: 1,
      convRule: rule124
    }, {
      start: 6754,
      length: 1,
      convRule: rule92
    }, {
      start: 6755,
      length: 2,
      convRule: rule124
    }, {
      start: 6757,
      length: 8,
      convRule: rule92
    }, {
      start: 6765,
      length: 6,
      convRule: rule124
    }, {
      start: 6771,
      length: 10,
      convRule: rule92
    }, {
      start: 6783,
      length: 1,
      convRule: rule92
    }, {
      start: 6784,
      length: 10,
      convRule: rule8
    }, {
      start: 6800,
      length: 10,
      convRule: rule8
    }, {
      start: 6816,
      length: 7,
      convRule: rule2
    }, {
      start: 6823,
      length: 1,
      convRule: rule91
    }, {
      start: 6824,
      length: 6,
      convRule: rule2
    }, {
      start: 6832,
      length: 14,
      convRule: rule92
    }, {
      start: 6846,
      length: 1,
      convRule: rule119
    }, {
      start: 6847,
      length: 2,
      convRule: rule92
    }, {
      start: 6912,
      length: 4,
      convRule: rule92
    }, {
      start: 6916,
      length: 1,
      convRule: rule124
    }, {
      start: 6917,
      length: 47,
      convRule: rule14
    }, {
      start: 6964,
      length: 1,
      convRule: rule92
    }, {
      start: 6965,
      length: 1,
      convRule: rule124
    }, {
      start: 6966,
      length: 5,
      convRule: rule92
    }, {
      start: 6971,
      length: 1,
      convRule: rule124
    }, {
      start: 6972,
      length: 1,
      convRule: rule92
    }, {
      start: 6973,
      length: 5,
      convRule: rule124
    }, {
      start: 6978,
      length: 1,
      convRule: rule92
    }, {
      start: 6979,
      length: 2,
      convRule: rule124
    }, {
      start: 6981,
      length: 7,
      convRule: rule14
    }, {
      start: 6992,
      length: 10,
      convRule: rule8
    }, {
      start: 7002,
      length: 7,
      convRule: rule2
    }, {
      start: 7009,
      length: 10,
      convRule: rule13
    }, {
      start: 7019,
      length: 9,
      convRule: rule92
    }, {
      start: 7028,
      length: 9,
      convRule: rule13
    }, {
      start: 7040,
      length: 2,
      convRule: rule92
    }, {
      start: 7042,
      length: 1,
      convRule: rule124
    }, {
      start: 7043,
      length: 30,
      convRule: rule14
    }, {
      start: 7073,
      length: 1,
      convRule: rule124
    }, {
      start: 7074,
      length: 4,
      convRule: rule92
    }, {
      start: 7078,
      length: 2,
      convRule: rule124
    }, {
      start: 7080,
      length: 2,
      convRule: rule92
    }, {
      start: 7082,
      length: 1,
      convRule: rule124
    }, {
      start: 7083,
      length: 3,
      convRule: rule92
    }, {
      start: 7086,
      length: 2,
      convRule: rule14
    }, {
      start: 7088,
      length: 10,
      convRule: rule8
    }, {
      start: 7098,
      length: 44,
      convRule: rule14
    }, {
      start: 7142,
      length: 1,
      convRule: rule92
    }, {
      start: 7143,
      length: 1,
      convRule: rule124
    }, {
      start: 7144,
      length: 2,
      convRule: rule92
    }, {
      start: 7146,
      length: 3,
      convRule: rule124
    }, {
      start: 7149,
      length: 1,
      convRule: rule92
    }, {
      start: 7150,
      length: 1,
      convRule: rule124
    }, {
      start: 7151,
      length: 3,
      convRule: rule92
    }, {
      start: 7154,
      length: 2,
      convRule: rule124
    }, {
      start: 7164,
      length: 4,
      convRule: rule2
    }, {
      start: 7168,
      length: 36,
      convRule: rule14
    }, {
      start: 7204,
      length: 8,
      convRule: rule124
    }, {
      start: 7212,
      length: 8,
      convRule: rule92
    }, {
      start: 7220,
      length: 2,
      convRule: rule124
    }, {
      start: 7222,
      length: 2,
      convRule: rule92
    }, {
      start: 7227,
      length: 5,
      convRule: rule2
    }, {
      start: 7232,
      length: 10,
      convRule: rule8
    }, {
      start: 7245,
      length: 3,
      convRule: rule14
    }, {
      start: 7248,
      length: 10,
      convRule: rule8
    }, {
      start: 7258,
      length: 30,
      convRule: rule14
    }, {
      start: 7288,
      length: 6,
      convRule: rule91
    }, {
      start: 7294,
      length: 2,
      convRule: rule2
    }, {
      start: 7296,
      length: 1,
      convRule: rule129
    }, {
      start: 7297,
      length: 1,
      convRule: rule130
    }, {
      start: 7298,
      length: 1,
      convRule: rule131
    }, {
      start: 7299,
      length: 2,
      convRule: rule132
    }, {
      start: 7301,
      length: 1,
      convRule: rule133
    }, {
      start: 7302,
      length: 1,
      convRule: rule134
    }, {
      start: 7303,
      length: 1,
      convRule: rule135
    }, {
      start: 7304,
      length: 1,
      convRule: rule136
    }, {
      start: 7312,
      length: 43,
      convRule: rule137
    }, {
      start: 7357,
      length: 3,
      convRule: rule137
    }, {
      start: 7360,
      length: 8,
      convRule: rule2
    }, {
      start: 7376,
      length: 3,
      convRule: rule92
    }, {
      start: 7379,
      length: 1,
      convRule: rule2
    }, {
      start: 7380,
      length: 13,
      convRule: rule92
    }, {
      start: 7393,
      length: 1,
      convRule: rule124
    }, {
      start: 7394,
      length: 7,
      convRule: rule92
    }, {
      start: 7401,
      length: 4,
      convRule: rule14
    }, {
      start: 7405,
      length: 1,
      convRule: rule92
    }, {
      start: 7406,
      length: 6,
      convRule: rule14
    }, {
      start: 7412,
      length: 1,
      convRule: rule92
    }, {
      start: 7413,
      length: 2,
      convRule: rule14
    }, {
      start: 7415,
      length: 1,
      convRule: rule124
    }, {
      start: 7416,
      length: 2,
      convRule: rule92
    }, {
      start: 7418,
      length: 1,
      convRule: rule14
    }, {
      start: 7424,
      length: 44,
      convRule: rule20
    }, {
      start: 7468,
      length: 63,
      convRule: rule91
    }, {
      start: 7531,
      length: 13,
      convRule: rule20
    }, {
      start: 7544,
      length: 1,
      convRule: rule91
    }, {
      start: 7545,
      length: 1,
      convRule: rule138
    }, {
      start: 7546,
      length: 3,
      convRule: rule20
    }, {
      start: 7549,
      length: 1,
      convRule: rule139
    }, {
      start: 7550,
      length: 16,
      convRule: rule20
    }, {
      start: 7566,
      length: 1,
      convRule: rule140
    }, {
      start: 7567,
      length: 12,
      convRule: rule20
    }, {
      start: 7579,
      length: 37,
      convRule: rule91
    }, {
      start: 7616,
      length: 58,
      convRule: rule92
    }, {
      start: 7675,
      length: 5,
      convRule: rule92
    }, {
      start: 7680,
      length: 1,
      convRule: rule22
    }, {
      start: 7681,
      length: 1,
      convRule: rule23
    }, {
      start: 7682,
      length: 1,
      convRule: rule22
    }, {
      start: 7683,
      length: 1,
      convRule: rule23
    }, {
      start: 7684,
      length: 1,
      convRule: rule22
    }, {
      start: 7685,
      length: 1,
      convRule: rule23
    }, {
      start: 7686,
      length: 1,
      convRule: rule22
    }, {
      start: 7687,
      length: 1,
      convRule: rule23
    }, {
      start: 7688,
      length: 1,
      convRule: rule22
    }, {
      start: 7689,
      length: 1,
      convRule: rule23
    }, {
      start: 7690,
      length: 1,
      convRule: rule22
    }, {
      start: 7691,
      length: 1,
      convRule: rule23
    }, {
      start: 7692,
      length: 1,
      convRule: rule22
    }, {
      start: 7693,
      length: 1,
      convRule: rule23
    }, {
      start: 7694,
      length: 1,
      convRule: rule22
    }, {
      start: 7695,
      length: 1,
      convRule: rule23
    }, {
      start: 7696,
      length: 1,
      convRule: rule22
    }, {
      start: 7697,
      length: 1,
      convRule: rule23
    }, {
      start: 7698,
      length: 1,
      convRule: rule22
    }, {
      start: 7699,
      length: 1,
      convRule: rule23
    }, {
      start: 7700,
      length: 1,
      convRule: rule22
    }, {
      start: 7701,
      length: 1,
      convRule: rule23
    }, {
      start: 7702,
      length: 1,
      convRule: rule22
    }, {
      start: 7703,
      length: 1,
      convRule: rule23
    }, {
      start: 7704,
      length: 1,
      convRule: rule22
    }, {
      start: 7705,
      length: 1,
      convRule: rule23
    }, {
      start: 7706,
      length: 1,
      convRule: rule22
    }, {
      start: 7707,
      length: 1,
      convRule: rule23
    }, {
      start: 7708,
      length: 1,
      convRule: rule22
    }, {
      start: 7709,
      length: 1,
      convRule: rule23
    }, {
      start: 7710,
      length: 1,
      convRule: rule22
    }, {
      start: 7711,
      length: 1,
      convRule: rule23
    }, {
      start: 7712,
      length: 1,
      convRule: rule22
    }, {
      start: 7713,
      length: 1,
      convRule: rule23
    }, {
      start: 7714,
      length: 1,
      convRule: rule22
    }, {
      start: 7715,
      length: 1,
      convRule: rule23
    }, {
      start: 7716,
      length: 1,
      convRule: rule22
    }, {
      start: 7717,
      length: 1,
      convRule: rule23
    }, {
      start: 7718,
      length: 1,
      convRule: rule22
    }, {
      start: 7719,
      length: 1,
      convRule: rule23
    }, {
      start: 7720,
      length: 1,
      convRule: rule22
    }, {
      start: 7721,
      length: 1,
      convRule: rule23
    }, {
      start: 7722,
      length: 1,
      convRule: rule22
    }, {
      start: 7723,
      length: 1,
      convRule: rule23
    }, {
      start: 7724,
      length: 1,
      convRule: rule22
    }, {
      start: 7725,
      length: 1,
      convRule: rule23
    }, {
      start: 7726,
      length: 1,
      convRule: rule22
    }, {
      start: 7727,
      length: 1,
      convRule: rule23
    }, {
      start: 7728,
      length: 1,
      convRule: rule22
    }, {
      start: 7729,
      length: 1,
      convRule: rule23
    }, {
      start: 7730,
      length: 1,
      convRule: rule22
    }, {
      start: 7731,
      length: 1,
      convRule: rule23
    }, {
      start: 7732,
      length: 1,
      convRule: rule22
    }, {
      start: 7733,
      length: 1,
      convRule: rule23
    }, {
      start: 7734,
      length: 1,
      convRule: rule22
    }, {
      start: 7735,
      length: 1,
      convRule: rule23
    }, {
      start: 7736,
      length: 1,
      convRule: rule22
    }, {
      start: 7737,
      length: 1,
      convRule: rule23
    }, {
      start: 7738,
      length: 1,
      convRule: rule22
    }, {
      start: 7739,
      length: 1,
      convRule: rule23
    }, {
      start: 7740,
      length: 1,
      convRule: rule22
    }, {
      start: 7741,
      length: 1,
      convRule: rule23
    }, {
      start: 7742,
      length: 1,
      convRule: rule22
    }, {
      start: 7743,
      length: 1,
      convRule: rule23
    }, {
      start: 7744,
      length: 1,
      convRule: rule22
    }, {
      start: 7745,
      length: 1,
      convRule: rule23
    }, {
      start: 7746,
      length: 1,
      convRule: rule22
    }, {
      start: 7747,
      length: 1,
      convRule: rule23
    }, {
      start: 7748,
      length: 1,
      convRule: rule22
    }, {
      start: 7749,
      length: 1,
      convRule: rule23
    }, {
      start: 7750,
      length: 1,
      convRule: rule22
    }, {
      start: 7751,
      length: 1,
      convRule: rule23
    }, {
      start: 7752,
      length: 1,
      convRule: rule22
    }, {
      start: 7753,
      length: 1,
      convRule: rule23
    }, {
      start: 7754,
      length: 1,
      convRule: rule22
    }, {
      start: 7755,
      length: 1,
      convRule: rule23
    }, {
      start: 7756,
      length: 1,
      convRule: rule22
    }, {
      start: 7757,
      length: 1,
      convRule: rule23
    }, {
      start: 7758,
      length: 1,
      convRule: rule22
    }, {
      start: 7759,
      length: 1,
      convRule: rule23
    }, {
      start: 7760,
      length: 1,
      convRule: rule22
    }, {
      start: 7761,
      length: 1,
      convRule: rule23
    }, {
      start: 7762,
      length: 1,
      convRule: rule22
    }, {
      start: 7763,
      length: 1,
      convRule: rule23
    }, {
      start: 7764,
      length: 1,
      convRule: rule22
    }, {
      start: 7765,
      length: 1,
      convRule: rule23
    }, {
      start: 7766,
      length: 1,
      convRule: rule22
    }, {
      start: 7767,
      length: 1,
      convRule: rule23
    }, {
      start: 7768,
      length: 1,
      convRule: rule22
    }, {
      start: 7769,
      length: 1,
      convRule: rule23
    }, {
      start: 7770,
      length: 1,
      convRule: rule22
    }, {
      start: 7771,
      length: 1,
      convRule: rule23
    }, {
      start: 7772,
      length: 1,
      convRule: rule22
    }, {
      start: 7773,
      length: 1,
      convRule: rule23
    }, {
      start: 7774,
      length: 1,
      convRule: rule22
    }, {
      start: 7775,
      length: 1,
      convRule: rule23
    }, {
      start: 7776,
      length: 1,
      convRule: rule22
    }, {
      start: 7777,
      length: 1,
      convRule: rule23
    }, {
      start: 7778,
      length: 1,
      convRule: rule22
    }, {
      start: 7779,
      length: 1,
      convRule: rule23
    }, {
      start: 7780,
      length: 1,
      convRule: rule22
    }, {
      start: 7781,
      length: 1,
      convRule: rule23
    }, {
      start: 7782,
      length: 1,
      convRule: rule22
    }, {
      start: 7783,
      length: 1,
      convRule: rule23
    }, {
      start: 7784,
      length: 1,
      convRule: rule22
    }, {
      start: 7785,
      length: 1,
      convRule: rule23
    }, {
      start: 7786,
      length: 1,
      convRule: rule22
    }, {
      start: 7787,
      length: 1,
      convRule: rule23
    }, {
      start: 7788,
      length: 1,
      convRule: rule22
    }, {
      start: 7789,
      length: 1,
      convRule: rule23
    }, {
      start: 7790,
      length: 1,
      convRule: rule22
    }, {
      start: 7791,
      length: 1,
      convRule: rule23
    }, {
      start: 7792,
      length: 1,
      convRule: rule22
    }, {
      start: 7793,
      length: 1,
      convRule: rule23
    }, {
      start: 7794,
      length: 1,
      convRule: rule22
    }, {
      start: 7795,
      length: 1,
      convRule: rule23
    }, {
      start: 7796,
      length: 1,
      convRule: rule22
    }, {
      start: 7797,
      length: 1,
      convRule: rule23
    }, {
      start: 7798,
      length: 1,
      convRule: rule22
    }, {
      start: 7799,
      length: 1,
      convRule: rule23
    }, {
      start: 7800,
      length: 1,
      convRule: rule22
    }, {
      start: 7801,
      length: 1,
      convRule: rule23
    }, {
      start: 7802,
      length: 1,
      convRule: rule22
    }, {
      start: 7803,
      length: 1,
      convRule: rule23
    }, {
      start: 7804,
      length: 1,
      convRule: rule22
    }, {
      start: 7805,
      length: 1,
      convRule: rule23
    }, {
      start: 7806,
      length: 1,
      convRule: rule22
    }, {
      start: 7807,
      length: 1,
      convRule: rule23
    }, {
      start: 7808,
      length: 1,
      convRule: rule22
    }, {
      start: 7809,
      length: 1,
      convRule: rule23
    }, {
      start: 7810,
      length: 1,
      convRule: rule22
    }, {
      start: 7811,
      length: 1,
      convRule: rule23
    }, {
      start: 7812,
      length: 1,
      convRule: rule22
    }, {
      start: 7813,
      length: 1,
      convRule: rule23
    }, {
      start: 7814,
      length: 1,
      convRule: rule22
    }, {
      start: 7815,
      length: 1,
      convRule: rule23
    }, {
      start: 7816,
      length: 1,
      convRule: rule22
    }, {
      start: 7817,
      length: 1,
      convRule: rule23
    }, {
      start: 7818,
      length: 1,
      convRule: rule22
    }, {
      start: 7819,
      length: 1,
      convRule: rule23
    }, {
      start: 7820,
      length: 1,
      convRule: rule22
    }, {
      start: 7821,
      length: 1,
      convRule: rule23
    }, {
      start: 7822,
      length: 1,
      convRule: rule22
    }, {
      start: 7823,
      length: 1,
      convRule: rule23
    }, {
      start: 7824,
      length: 1,
      convRule: rule22
    }, {
      start: 7825,
      length: 1,
      convRule: rule23
    }, {
      start: 7826,
      length: 1,
      convRule: rule22
    }, {
      start: 7827,
      length: 1,
      convRule: rule23
    }, {
      start: 7828,
      length: 1,
      convRule: rule22
    }, {
      start: 7829,
      length: 1,
      convRule: rule23
    }, {
      start: 7830,
      length: 5,
      convRule: rule20
    }, {
      start: 7835,
      length: 1,
      convRule: rule141
    }, {
      start: 7836,
      length: 2,
      convRule: rule20
    }, {
      start: 7838,
      length: 1,
      convRule: rule142
    }, {
      start: 7839,
      length: 1,
      convRule: rule20
    }, {
      start: 7840,
      length: 1,
      convRule: rule22
    }, {
      start: 7841,
      length: 1,
      convRule: rule23
    }, {
      start: 7842,
      length: 1,
      convRule: rule22
    }, {
      start: 7843,
      length: 1,
      convRule: rule23
    }, {
      start: 7844,
      length: 1,
      convRule: rule22
    }, {
      start: 7845,
      length: 1,
      convRule: rule23
    }, {
      start: 7846,
      length: 1,
      convRule: rule22
    }, {
      start: 7847,
      length: 1,
      convRule: rule23
    }, {
      start: 7848,
      length: 1,
      convRule: rule22
    }, {
      start: 7849,
      length: 1,
      convRule: rule23
    }, {
      start: 7850,
      length: 1,
      convRule: rule22
    }, {
      start: 7851,
      length: 1,
      convRule: rule23
    }, {
      start: 7852,
      length: 1,
      convRule: rule22
    }, {
      start: 7853,
      length: 1,
      convRule: rule23
    }, {
      start: 7854,
      length: 1,
      convRule: rule22
    }, {
      start: 7855,
      length: 1,
      convRule: rule23
    }, {
      start: 7856,
      length: 1,
      convRule: rule22
    }, {
      start: 7857,
      length: 1,
      convRule: rule23
    }, {
      start: 7858,
      length: 1,
      convRule: rule22
    }, {
      start: 7859,
      length: 1,
      convRule: rule23
    }, {
      start: 7860,
      length: 1,
      convRule: rule22
    }, {
      start: 7861,
      length: 1,
      convRule: rule23
    }, {
      start: 7862,
      length: 1,
      convRule: rule22
    }, {
      start: 7863,
      length: 1,
      convRule: rule23
    }, {
      start: 7864,
      length: 1,
      convRule: rule22
    }, {
      start: 7865,
      length: 1,
      convRule: rule23
    }, {
      start: 7866,
      length: 1,
      convRule: rule22
    }, {
      start: 7867,
      length: 1,
      convRule: rule23
    }, {
      start: 7868,
      length: 1,
      convRule: rule22
    }, {
      start: 7869,
      length: 1,
      convRule: rule23
    }, {
      start: 7870,
      length: 1,
      convRule: rule22
    }, {
      start: 7871,
      length: 1,
      convRule: rule23
    }, {
      start: 7872,
      length: 1,
      convRule: rule22
    }, {
      start: 7873,
      length: 1,
      convRule: rule23
    }, {
      start: 7874,
      length: 1,
      convRule: rule22
    }, {
      start: 7875,
      length: 1,
      convRule: rule23
    }, {
      start: 7876,
      length: 1,
      convRule: rule22
    }, {
      start: 7877,
      length: 1,
      convRule: rule23
    }, {
      start: 7878,
      length: 1,
      convRule: rule22
    }, {
      start: 7879,
      length: 1,
      convRule: rule23
    }, {
      start: 7880,
      length: 1,
      convRule: rule22
    }, {
      start: 7881,
      length: 1,
      convRule: rule23
    }, {
      start: 7882,
      length: 1,
      convRule: rule22
    }, {
      start: 7883,
      length: 1,
      convRule: rule23
    }, {
      start: 7884,
      length: 1,
      convRule: rule22
    }, {
      start: 7885,
      length: 1,
      convRule: rule23
    }, {
      start: 7886,
      length: 1,
      convRule: rule22
    }, {
      start: 7887,
      length: 1,
      convRule: rule23
    }, {
      start: 7888,
      length: 1,
      convRule: rule22
    }, {
      start: 7889,
      length: 1,
      convRule: rule23
    }, {
      start: 7890,
      length: 1,
      convRule: rule22
    }, {
      start: 7891,
      length: 1,
      convRule: rule23
    }, {
      start: 7892,
      length: 1,
      convRule: rule22
    }, {
      start: 7893,
      length: 1,
      convRule: rule23
    }, {
      start: 7894,
      length: 1,
      convRule: rule22
    }, {
      start: 7895,
      length: 1,
      convRule: rule23
    }, {
      start: 7896,
      length: 1,
      convRule: rule22
    }, {
      start: 7897,
      length: 1,
      convRule: rule23
    }, {
      start: 7898,
      length: 1,
      convRule: rule22
    }, {
      start: 7899,
      length: 1,
      convRule: rule23
    }, {
      start: 7900,
      length: 1,
      convRule: rule22
    }, {
      start: 7901,
      length: 1,
      convRule: rule23
    }, {
      start: 7902,
      length: 1,
      convRule: rule22
    }, {
      start: 7903,
      length: 1,
      convRule: rule23
    }, {
      start: 7904,
      length: 1,
      convRule: rule22
    }, {
      start: 7905,
      length: 1,
      convRule: rule23
    }, {
      start: 7906,
      length: 1,
      convRule: rule22
    }, {
      start: 7907,
      length: 1,
      convRule: rule23
    }, {
      start: 7908,
      length: 1,
      convRule: rule22
    }, {
      start: 7909,
      length: 1,
      convRule: rule23
    }, {
      start: 7910,
      length: 1,
      convRule: rule22
    }, {
      start: 7911,
      length: 1,
      convRule: rule23
    }, {
      start: 7912,
      length: 1,
      convRule: rule22
    }, {
      start: 7913,
      length: 1,
      convRule: rule23
    }, {
      start: 7914,
      length: 1,
      convRule: rule22
    }, {
      start: 7915,
      length: 1,
      convRule: rule23
    }, {
      start: 7916,
      length: 1,
      convRule: rule22
    }, {
      start: 7917,
      length: 1,
      convRule: rule23
    }, {
      start: 7918,
      length: 1,
      convRule: rule22
    }, {
      start: 7919,
      length: 1,
      convRule: rule23
    }, {
      start: 7920,
      length: 1,
      convRule: rule22
    }, {
      start: 7921,
      length: 1,
      convRule: rule23
    }, {
      start: 7922,
      length: 1,
      convRule: rule22
    }, {
      start: 7923,
      length: 1,
      convRule: rule23
    }, {
      start: 7924,
      length: 1,
      convRule: rule22
    }, {
      start: 7925,
      length: 1,
      convRule: rule23
    }, {
      start: 7926,
      length: 1,
      convRule: rule22
    }, {
      start: 7927,
      length: 1,
      convRule: rule23
    }, {
      start: 7928,
      length: 1,
      convRule: rule22
    }, {
      start: 7929,
      length: 1,
      convRule: rule23
    }, {
      start: 7930,
      length: 1,
      convRule: rule22
    }, {
      start: 7931,
      length: 1,
      convRule: rule23
    }, {
      start: 7932,
      length: 1,
      convRule: rule22
    }, {
      start: 7933,
      length: 1,
      convRule: rule23
    }, {
      start: 7934,
      length: 1,
      convRule: rule22
    }, {
      start: 7935,
      length: 1,
      convRule: rule23
    }, {
      start: 7936,
      length: 8,
      convRule: rule143
    }, {
      start: 7944,
      length: 8,
      convRule: rule144
    }, {
      start: 7952,
      length: 6,
      convRule: rule143
    }, {
      start: 7960,
      length: 6,
      convRule: rule144
    }, {
      start: 7968,
      length: 8,
      convRule: rule143
    }, {
      start: 7976,
      length: 8,
      convRule: rule144
    }, {
      start: 7984,
      length: 8,
      convRule: rule143
    }, {
      start: 7992,
      length: 8,
      convRule: rule144
    }, {
      start: 8e3,
      length: 6,
      convRule: rule143
    }, {
      start: 8008,
      length: 6,
      convRule: rule144
    }, {
      start: 8016,
      length: 1,
      convRule: rule20
    }, {
      start: 8017,
      length: 1,
      convRule: rule143
    }, {
      start: 8018,
      length: 1,
      convRule: rule20
    }, {
      start: 8019,
      length: 1,
      convRule: rule143
    }, {
      start: 8020,
      length: 1,
      convRule: rule20
    }, {
      start: 8021,
      length: 1,
      convRule: rule143
    }, {
      start: 8022,
      length: 1,
      convRule: rule20
    }, {
      start: 8023,
      length: 1,
      convRule: rule143
    }, {
      start: 8025,
      length: 1,
      convRule: rule144
    }, {
      start: 8027,
      length: 1,
      convRule: rule144
    }, {
      start: 8029,
      length: 1,
      convRule: rule144
    }, {
      start: 8031,
      length: 1,
      convRule: rule144
    }, {
      start: 8032,
      length: 8,
      convRule: rule143
    }, {
      start: 8040,
      length: 8,
      convRule: rule144
    }, {
      start: 8048,
      length: 2,
      convRule: rule145
    }, {
      start: 8050,
      length: 4,
      convRule: rule146
    }, {
      start: 8054,
      length: 2,
      convRule: rule147
    }, {
      start: 8056,
      length: 2,
      convRule: rule148
    }, {
      start: 8058,
      length: 2,
      convRule: rule149
    }, {
      start: 8060,
      length: 2,
      convRule: rule150
    }, {
      start: 8064,
      length: 8,
      convRule: rule143
    }, {
      start: 8072,
      length: 8,
      convRule: rule151
    }, {
      start: 8080,
      length: 8,
      convRule: rule143
    }, {
      start: 8088,
      length: 8,
      convRule: rule151
    }, {
      start: 8096,
      length: 8,
      convRule: rule143
    }, {
      start: 8104,
      length: 8,
      convRule: rule151
    }, {
      start: 8112,
      length: 2,
      convRule: rule143
    }, {
      start: 8114,
      length: 1,
      convRule: rule20
    }, {
      start: 8115,
      length: 1,
      convRule: rule152
    }, {
      start: 8116,
      length: 1,
      convRule: rule20
    }, {
      start: 8118,
      length: 2,
      convRule: rule20
    }, {
      start: 8120,
      length: 2,
      convRule: rule144
    }, {
      start: 8122,
      length: 2,
      convRule: rule153
    }, {
      start: 8124,
      length: 1,
      convRule: rule154
    }, {
      start: 8125,
      length: 1,
      convRule: rule10
    }, {
      start: 8126,
      length: 1,
      convRule: rule155
    }, {
      start: 8127,
      length: 3,
      convRule: rule10
    }, {
      start: 8130,
      length: 1,
      convRule: rule20
    }, {
      start: 8131,
      length: 1,
      convRule: rule152
    }, {
      start: 8132,
      length: 1,
      convRule: rule20
    }, {
      start: 8134,
      length: 2,
      convRule: rule20
    }, {
      start: 8136,
      length: 4,
      convRule: rule156
    }, {
      start: 8140,
      length: 1,
      convRule: rule154
    }, {
      start: 8141,
      length: 3,
      convRule: rule10
    }, {
      start: 8144,
      length: 2,
      convRule: rule143
    }, {
      start: 8146,
      length: 2,
      convRule: rule20
    }, {
      start: 8150,
      length: 2,
      convRule: rule20
    }, {
      start: 8152,
      length: 2,
      convRule: rule144
    }, {
      start: 8154,
      length: 2,
      convRule: rule157
    }, {
      start: 8157,
      length: 3,
      convRule: rule10
    }, {
      start: 8160,
      length: 2,
      convRule: rule143
    }, {
      start: 8162,
      length: 3,
      convRule: rule20
    }, {
      start: 8165,
      length: 1,
      convRule: rule113
    }, {
      start: 8166,
      length: 2,
      convRule: rule20
    }, {
      start: 8168,
      length: 2,
      convRule: rule144
    }, {
      start: 8170,
      length: 2,
      convRule: rule158
    }, {
      start: 8172,
      length: 1,
      convRule: rule117
    }, {
      start: 8173,
      length: 3,
      convRule: rule10
    }, {
      start: 8178,
      length: 1,
      convRule: rule20
    }, {
      start: 8179,
      length: 1,
      convRule: rule152
    }, {
      start: 8180,
      length: 1,
      convRule: rule20
    }, {
      start: 8182,
      length: 2,
      convRule: rule20
    }, {
      start: 8184,
      length: 2,
      convRule: rule159
    }, {
      start: 8186,
      length: 2,
      convRule: rule160
    }, {
      start: 8188,
      length: 1,
      convRule: rule154
    }, {
      start: 8189,
      length: 2,
      convRule: rule10
    }, {
      start: 8192,
      length: 11,
      convRule: rule1
    }, {
      start: 8203,
      length: 5,
      convRule: rule16
    }, {
      start: 8208,
      length: 6,
      convRule: rule7
    }, {
      start: 8214,
      length: 2,
      convRule: rule2
    }, {
      start: 8216,
      length: 1,
      convRule: rule15
    }, {
      start: 8217,
      length: 1,
      convRule: rule19
    }, {
      start: 8218,
      length: 1,
      convRule: rule4
    }, {
      start: 8219,
      length: 2,
      convRule: rule15
    }, {
      start: 8221,
      length: 1,
      convRule: rule19
    }, {
      start: 8222,
      length: 1,
      convRule: rule4
    }, {
      start: 8223,
      length: 1,
      convRule: rule15
    }, {
      start: 8224,
      length: 8,
      convRule: rule2
    }, {
      start: 8232,
      length: 1,
      convRule: rule161
    }, {
      start: 8233,
      length: 1,
      convRule: rule162
    }, {
      start: 8234,
      length: 5,
      convRule: rule16
    }, {
      start: 8239,
      length: 1,
      convRule: rule1
    }, {
      start: 8240,
      length: 9,
      convRule: rule2
    }, {
      start: 8249,
      length: 1,
      convRule: rule15
    }, {
      start: 8250,
      length: 1,
      convRule: rule19
    }, {
      start: 8251,
      length: 4,
      convRule: rule2
    }, {
      start: 8255,
      length: 2,
      convRule: rule11
    }, {
      start: 8257,
      length: 3,
      convRule: rule2
    }, {
      start: 8260,
      length: 1,
      convRule: rule6
    }, {
      start: 8261,
      length: 1,
      convRule: rule4
    }, {
      start: 8262,
      length: 1,
      convRule: rule5
    }, {
      start: 8263,
      length: 11,
      convRule: rule2
    }, {
      start: 8274,
      length: 1,
      convRule: rule6
    }, {
      start: 8275,
      length: 1,
      convRule: rule2
    }, {
      start: 8276,
      length: 1,
      convRule: rule11
    }, {
      start: 8277,
      length: 10,
      convRule: rule2
    }, {
      start: 8287,
      length: 1,
      convRule: rule1
    }, {
      start: 8288,
      length: 5,
      convRule: rule16
    }, {
      start: 8294,
      length: 10,
      convRule: rule16
    }, {
      start: 8304,
      length: 1,
      convRule: rule17
    }, {
      start: 8305,
      length: 1,
      convRule: rule91
    }, {
      start: 8308,
      length: 6,
      convRule: rule17
    }, {
      start: 8314,
      length: 3,
      convRule: rule6
    }, {
      start: 8317,
      length: 1,
      convRule: rule4
    }, {
      start: 8318,
      length: 1,
      convRule: rule5
    }, {
      start: 8319,
      length: 1,
      convRule: rule91
    }, {
      start: 8320,
      length: 10,
      convRule: rule17
    }, {
      start: 8330,
      length: 3,
      convRule: rule6
    }, {
      start: 8333,
      length: 1,
      convRule: rule4
    }, {
      start: 8334,
      length: 1,
      convRule: rule5
    }, {
      start: 8336,
      length: 13,
      convRule: rule91
    }, {
      start: 8352,
      length: 32,
      convRule: rule3
    }, {
      start: 8400,
      length: 13,
      convRule: rule92
    }, {
      start: 8413,
      length: 4,
      convRule: rule119
    }, {
      start: 8417,
      length: 1,
      convRule: rule92
    }, {
      start: 8418,
      length: 3,
      convRule: rule119
    }, {
      start: 8421,
      length: 12,
      convRule: rule92
    }, {
      start: 8448,
      length: 2,
      convRule: rule13
    }, {
      start: 8450,
      length: 1,
      convRule: rule107
    }, {
      start: 8451,
      length: 4,
      convRule: rule13
    }, {
      start: 8455,
      length: 1,
      convRule: rule107
    }, {
      start: 8456,
      length: 2,
      convRule: rule13
    }, {
      start: 8458,
      length: 1,
      convRule: rule20
    }, {
      start: 8459,
      length: 3,
      convRule: rule107
    }, {
      start: 8462,
      length: 2,
      convRule: rule20
    }, {
      start: 8464,
      length: 3,
      convRule: rule107
    }, {
      start: 8467,
      length: 1,
      convRule: rule20
    }, {
      start: 8468,
      length: 1,
      convRule: rule13
    }, {
      start: 8469,
      length: 1,
      convRule: rule107
    }, {
      start: 8470,
      length: 2,
      convRule: rule13
    }, {
      start: 8472,
      length: 1,
      convRule: rule6
    }, {
      start: 8473,
      length: 5,
      convRule: rule107
    }, {
      start: 8478,
      length: 6,
      convRule: rule13
    }, {
      start: 8484,
      length: 1,
      convRule: rule107
    }, {
      start: 8485,
      length: 1,
      convRule: rule13
    }, {
      start: 8486,
      length: 1,
      convRule: rule163
    }, {
      start: 8487,
      length: 1,
      convRule: rule13
    }, {
      start: 8488,
      length: 1,
      convRule: rule107
    }, {
      start: 8489,
      length: 1,
      convRule: rule13
    }, {
      start: 8490,
      length: 1,
      convRule: rule164
    }, {
      start: 8491,
      length: 1,
      convRule: rule165
    }, {
      start: 8492,
      length: 2,
      convRule: rule107
    }, {
      start: 8494,
      length: 1,
      convRule: rule13
    }, {
      start: 8495,
      length: 1,
      convRule: rule20
    }, {
      start: 8496,
      length: 2,
      convRule: rule107
    }, {
      start: 8498,
      length: 1,
      convRule: rule166
    }, {
      start: 8499,
      length: 1,
      convRule: rule107
    }, {
      start: 8500,
      length: 1,
      convRule: rule20
    }, {
      start: 8501,
      length: 4,
      convRule: rule14
    }, {
      start: 8505,
      length: 1,
      convRule: rule20
    }, {
      start: 8506,
      length: 2,
      convRule: rule13
    }, {
      start: 8508,
      length: 2,
      convRule: rule20
    }, {
      start: 8510,
      length: 2,
      convRule: rule107
    }, {
      start: 8512,
      length: 5,
      convRule: rule6
    }, {
      start: 8517,
      length: 1,
      convRule: rule107
    }, {
      start: 8518,
      length: 4,
      convRule: rule20
    }, {
      start: 8522,
      length: 1,
      convRule: rule13
    }, {
      start: 8523,
      length: 1,
      convRule: rule6
    }, {
      start: 8524,
      length: 2,
      convRule: rule13
    }, {
      start: 8526,
      length: 1,
      convRule: rule167
    }, {
      start: 8527,
      length: 1,
      convRule: rule13
    }, {
      start: 8528,
      length: 16,
      convRule: rule17
    }, {
      start: 8544,
      length: 16,
      convRule: rule168
    }, {
      start: 8560,
      length: 16,
      convRule: rule169
    }, {
      start: 8576,
      length: 3,
      convRule: rule128
    }, {
      start: 8579,
      length: 1,
      convRule: rule22
    }, {
      start: 8580,
      length: 1,
      convRule: rule23
    }, {
      start: 8581,
      length: 4,
      convRule: rule128
    }, {
      start: 8585,
      length: 1,
      convRule: rule17
    }, {
      start: 8586,
      length: 2,
      convRule: rule13
    }, {
      start: 8592,
      length: 5,
      convRule: rule6
    }, {
      start: 8597,
      length: 5,
      convRule: rule13
    }, {
      start: 8602,
      length: 2,
      convRule: rule6
    }, {
      start: 8604,
      length: 4,
      convRule: rule13
    }, {
      start: 8608,
      length: 1,
      convRule: rule6
    }, {
      start: 8609,
      length: 2,
      convRule: rule13
    }, {
      start: 8611,
      length: 1,
      convRule: rule6
    }, {
      start: 8612,
      length: 2,
      convRule: rule13
    }, {
      start: 8614,
      length: 1,
      convRule: rule6
    }, {
      start: 8615,
      length: 7,
      convRule: rule13
    }, {
      start: 8622,
      length: 1,
      convRule: rule6
    }, {
      start: 8623,
      length: 31,
      convRule: rule13
    }, {
      start: 8654,
      length: 2,
      convRule: rule6
    }, {
      start: 8656,
      length: 2,
      convRule: rule13
    }, {
      start: 8658,
      length: 1,
      convRule: rule6
    }, {
      start: 8659,
      length: 1,
      convRule: rule13
    }, {
      start: 8660,
      length: 1,
      convRule: rule6
    }, {
      start: 8661,
      length: 31,
      convRule: rule13
    }, {
      start: 8692,
      length: 268,
      convRule: rule6
    }, {
      start: 8960,
      length: 8,
      convRule: rule13
    }, {
      start: 8968,
      length: 1,
      convRule: rule4
    }, {
      start: 8969,
      length: 1,
      convRule: rule5
    }, {
      start: 8970,
      length: 1,
      convRule: rule4
    }, {
      start: 8971,
      length: 1,
      convRule: rule5
    }, {
      start: 8972,
      length: 20,
      convRule: rule13
    }, {
      start: 8992,
      length: 2,
      convRule: rule6
    }, {
      start: 8994,
      length: 7,
      convRule: rule13
    }, {
      start: 9001,
      length: 1,
      convRule: rule4
    }, {
      start: 9002,
      length: 1,
      convRule: rule5
    }, {
      start: 9003,
      length: 81,
      convRule: rule13
    }, {
      start: 9084,
      length: 1,
      convRule: rule6
    }, {
      start: 9085,
      length: 30,
      convRule: rule13
    }, {
      start: 9115,
      length: 25,
      convRule: rule6
    }, {
      start: 9140,
      length: 40,
      convRule: rule13
    }, {
      start: 9180,
      length: 6,
      convRule: rule6
    }, {
      start: 9186,
      length: 69,
      convRule: rule13
    }, {
      start: 9280,
      length: 11,
      convRule: rule13
    }, {
      start: 9312,
      length: 60,
      convRule: rule17
    }, {
      start: 9372,
      length: 26,
      convRule: rule13
    }, {
      start: 9398,
      length: 26,
      convRule: rule170
    }, {
      start: 9424,
      length: 26,
      convRule: rule171
    }, {
      start: 9450,
      length: 22,
      convRule: rule17
    }, {
      start: 9472,
      length: 183,
      convRule: rule13
    }, {
      start: 9655,
      length: 1,
      convRule: rule6
    }, {
      start: 9656,
      length: 9,
      convRule: rule13
    }, {
      start: 9665,
      length: 1,
      convRule: rule6
    }, {
      start: 9666,
      length: 54,
      convRule: rule13
    }, {
      start: 9720,
      length: 8,
      convRule: rule6
    }, {
      start: 9728,
      length: 111,
      convRule: rule13
    }, {
      start: 9839,
      length: 1,
      convRule: rule6
    }, {
      start: 9840,
      length: 248,
      convRule: rule13
    }, {
      start: 10088,
      length: 1,
      convRule: rule4
    }, {
      start: 10089,
      length: 1,
      convRule: rule5
    }, {
      start: 10090,
      length: 1,
      convRule: rule4
    }, {
      start: 10091,
      length: 1,
      convRule: rule5
    }, {
      start: 10092,
      length: 1,
      convRule: rule4
    }, {
      start: 10093,
      length: 1,
      convRule: rule5
    }, {
      start: 10094,
      length: 1,
      convRule: rule4
    }, {
      start: 10095,
      length: 1,
      convRule: rule5
    }, {
      start: 10096,
      length: 1,
      convRule: rule4
    }, {
      start: 10097,
      length: 1,
      convRule: rule5
    }, {
      start: 10098,
      length: 1,
      convRule: rule4
    }, {
      start: 10099,
      length: 1,
      convRule: rule5
    }, {
      start: 10100,
      length: 1,
      convRule: rule4
    }, {
      start: 10101,
      length: 1,
      convRule: rule5
    }, {
      start: 10102,
      length: 30,
      convRule: rule17
    }, {
      start: 10132,
      length: 44,
      convRule: rule13
    }, {
      start: 10176,
      length: 5,
      convRule: rule6
    }, {
      start: 10181,
      length: 1,
      convRule: rule4
    }, {
      start: 10182,
      length: 1,
      convRule: rule5
    }, {
      start: 10183,
      length: 31,
      convRule: rule6
    }, {
      start: 10214,
      length: 1,
      convRule: rule4
    }, {
      start: 10215,
      length: 1,
      convRule: rule5
    }, {
      start: 10216,
      length: 1,
      convRule: rule4
    }, {
      start: 10217,
      length: 1,
      convRule: rule5
    }, {
      start: 10218,
      length: 1,
      convRule: rule4
    }, {
      start: 10219,
      length: 1,
      convRule: rule5
    }, {
      start: 10220,
      length: 1,
      convRule: rule4
    }, {
      start: 10221,
      length: 1,
      convRule: rule5
    }, {
      start: 10222,
      length: 1,
      convRule: rule4
    }, {
      start: 10223,
      length: 1,
      convRule: rule5
    }, {
      start: 10224,
      length: 16,
      convRule: rule6
    }, {
      start: 10240,
      length: 256,
      convRule: rule13
    }, {
      start: 10496,
      length: 131,
      convRule: rule6
    }, {
      start: 10627,
      length: 1,
      convRule: rule4
    }, {
      start: 10628,
      length: 1,
      convRule: rule5
    }, {
      start: 10629,
      length: 1,
      convRule: rule4
    }, {
      start: 10630,
      length: 1,
      convRule: rule5
    }, {
      start: 10631,
      length: 1,
      convRule: rule4
    }, {
      start: 10632,
      length: 1,
      convRule: rule5
    }, {
      start: 10633,
      length: 1,
      convRule: rule4
    }, {
      start: 10634,
      length: 1,
      convRule: rule5
    }, {
      start: 10635,
      length: 1,
      convRule: rule4
    }, {
      start: 10636,
      length: 1,
      convRule: rule5
    }, {
      start: 10637,
      length: 1,
      convRule: rule4
    }, {
      start: 10638,
      length: 1,
      convRule: rule5
    }, {
      start: 10639,
      length: 1,
      convRule: rule4
    }, {
      start: 10640,
      length: 1,
      convRule: rule5
    }, {
      start: 10641,
      length: 1,
      convRule: rule4
    }, {
      start: 10642,
      length: 1,
      convRule: rule5
    }, {
      start: 10643,
      length: 1,
      convRule: rule4
    }, {
      start: 10644,
      length: 1,
      convRule: rule5
    }, {
      start: 10645,
      length: 1,
      convRule: rule4
    }, {
      start: 10646,
      length: 1,
      convRule: rule5
    }, {
      start: 10647,
      length: 1,
      convRule: rule4
    }, {
      start: 10648,
      length: 1,
      convRule: rule5
    }, {
      start: 10649,
      length: 63,
      convRule: rule6
    }, {
      start: 10712,
      length: 1,
      convRule: rule4
    }, {
      start: 10713,
      length: 1,
      convRule: rule5
    }, {
      start: 10714,
      length: 1,
      convRule: rule4
    }, {
      start: 10715,
      length: 1,
      convRule: rule5
    }, {
      start: 10716,
      length: 32,
      convRule: rule6
    }, {
      start: 10748,
      length: 1,
      convRule: rule4
    }, {
      start: 10749,
      length: 1,
      convRule: rule5
    }, {
      start: 10750,
      length: 258,
      convRule: rule6
    }, {
      start: 11008,
      length: 48,
      convRule: rule13
    }, {
      start: 11056,
      length: 21,
      convRule: rule6
    }, {
      start: 11077,
      length: 2,
      convRule: rule13
    }, {
      start: 11079,
      length: 6,
      convRule: rule6
    }, {
      start: 11085,
      length: 39,
      convRule: rule13
    }, {
      start: 11126,
      length: 32,
      convRule: rule13
    }, {
      start: 11159,
      length: 105,
      convRule: rule13
    }, {
      start: 11264,
      length: 47,
      convRule: rule122
    }, {
      start: 11312,
      length: 47,
      convRule: rule123
    }, {
      start: 11360,
      length: 1,
      convRule: rule22
    }, {
      start: 11361,
      length: 1,
      convRule: rule23
    }, {
      start: 11362,
      length: 1,
      convRule: rule172
    }, {
      start: 11363,
      length: 1,
      convRule: rule173
    }, {
      start: 11364,
      length: 1,
      convRule: rule174
    }, {
      start: 11365,
      length: 1,
      convRule: rule175
    }, {
      start: 11366,
      length: 1,
      convRule: rule176
    }, {
      start: 11367,
      length: 1,
      convRule: rule22
    }, {
      start: 11368,
      length: 1,
      convRule: rule23
    }, {
      start: 11369,
      length: 1,
      convRule: rule22
    }, {
      start: 11370,
      length: 1,
      convRule: rule23
    }, {
      start: 11371,
      length: 1,
      convRule: rule22
    }, {
      start: 11372,
      length: 1,
      convRule: rule23
    }, {
      start: 11373,
      length: 1,
      convRule: rule177
    }, {
      start: 11374,
      length: 1,
      convRule: rule178
    }, {
      start: 11375,
      length: 1,
      convRule: rule179
    }, {
      start: 11376,
      length: 1,
      convRule: rule180
    }, {
      start: 11377,
      length: 1,
      convRule: rule20
    }, {
      start: 11378,
      length: 1,
      convRule: rule22
    }, {
      start: 11379,
      length: 1,
      convRule: rule23
    }, {
      start: 11380,
      length: 1,
      convRule: rule20
    }, {
      start: 11381,
      length: 1,
      convRule: rule22
    }, {
      start: 11382,
      length: 1,
      convRule: rule23
    }, {
      start: 11383,
      length: 5,
      convRule: rule20
    }, {
      start: 11388,
      length: 2,
      convRule: rule91
    }, {
      start: 11390,
      length: 2,
      convRule: rule181
    }, {
      start: 11392,
      length: 1,
      convRule: rule22
    }, {
      start: 11393,
      length: 1,
      convRule: rule23
    }, {
      start: 11394,
      length: 1,
      convRule: rule22
    }, {
      start: 11395,
      length: 1,
      convRule: rule23
    }, {
      start: 11396,
      length: 1,
      convRule: rule22
    }, {
      start: 11397,
      length: 1,
      convRule: rule23
    }, {
      start: 11398,
      length: 1,
      convRule: rule22
    }, {
      start: 11399,
      length: 1,
      convRule: rule23
    }, {
      start: 11400,
      length: 1,
      convRule: rule22
    }, {
      start: 11401,
      length: 1,
      convRule: rule23
    }, {
      start: 11402,
      length: 1,
      convRule: rule22
    }, {
      start: 11403,
      length: 1,
      convRule: rule23
    }, {
      start: 11404,
      length: 1,
      convRule: rule22
    }, {
      start: 11405,
      length: 1,
      convRule: rule23
    }, {
      start: 11406,
      length: 1,
      convRule: rule22
    }, {
      start: 11407,
      length: 1,
      convRule: rule23
    }, {
      start: 11408,
      length: 1,
      convRule: rule22
    }, {
      start: 11409,
      length: 1,
      convRule: rule23
    }, {
      start: 11410,
      length: 1,
      convRule: rule22
    }, {
      start: 11411,
      length: 1,
      convRule: rule23
    }, {
      start: 11412,
      length: 1,
      convRule: rule22
    }, {
      start: 11413,
      length: 1,
      convRule: rule23
    }, {
      start: 11414,
      length: 1,
      convRule: rule22
    }, {
      start: 11415,
      length: 1,
      convRule: rule23
    }, {
      start: 11416,
      length: 1,
      convRule: rule22
    }, {
      start: 11417,
      length: 1,
      convRule: rule23
    }, {
      start: 11418,
      length: 1,
      convRule: rule22
    }, {
      start: 11419,
      length: 1,
      convRule: rule23
    }, {
      start: 11420,
      length: 1,
      convRule: rule22
    }, {
      start: 11421,
      length: 1,
      convRule: rule23
    }, {
      start: 11422,
      length: 1,
      convRule: rule22
    }, {
      start: 11423,
      length: 1,
      convRule: rule23
    }, {
      start: 11424,
      length: 1,
      convRule: rule22
    }, {
      start: 11425,
      length: 1,
      convRule: rule23
    }, {
      start: 11426,
      length: 1,
      convRule: rule22
    }, {
      start: 11427,
      length: 1,
      convRule: rule23
    }, {
      start: 11428,
      length: 1,
      convRule: rule22
    }, {
      start: 11429,
      length: 1,
      convRule: rule23
    }, {
      start: 11430,
      length: 1,
      convRule: rule22
    }, {
      start: 11431,
      length: 1,
      convRule: rule23
    }, {
      start: 11432,
      length: 1,
      convRule: rule22
    }, {
      start: 11433,
      length: 1,
      convRule: rule23
    }, {
      start: 11434,
      length: 1,
      convRule: rule22
    }, {
      start: 11435,
      length: 1,
      convRule: rule23
    }, {
      start: 11436,
      length: 1,
      convRule: rule22
    }, {
      start: 11437,
      length: 1,
      convRule: rule23
    }, {
      start: 11438,
      length: 1,
      convRule: rule22
    }, {
      start: 11439,
      length: 1,
      convRule: rule23
    }, {
      start: 11440,
      length: 1,
      convRule: rule22
    }, {
      start: 11441,
      length: 1,
      convRule: rule23
    }, {
      start: 11442,
      length: 1,
      convRule: rule22
    }, {
      start: 11443,
      length: 1,
      convRule: rule23
    }, {
      start: 11444,
      length: 1,
      convRule: rule22
    }, {
      start: 11445,
      length: 1,
      convRule: rule23
    }, {
      start: 11446,
      length: 1,
      convRule: rule22
    }, {
      start: 11447,
      length: 1,
      convRule: rule23
    }, {
      start: 11448,
      length: 1,
      convRule: rule22
    }, {
      start: 11449,
      length: 1,
      convRule: rule23
    }, {
      start: 11450,
      length: 1,
      convRule: rule22
    }, {
      start: 11451,
      length: 1,
      convRule: rule23
    }, {
      start: 11452,
      length: 1,
      convRule: rule22
    }, {
      start: 11453,
      length: 1,
      convRule: rule23
    }, {
      start: 11454,
      length: 1,
      convRule: rule22
    }, {
      start: 11455,
      length: 1,
      convRule: rule23
    }, {
      start: 11456,
      length: 1,
      convRule: rule22
    }, {
      start: 11457,
      length: 1,
      convRule: rule23
    }, {
      start: 11458,
      length: 1,
      convRule: rule22
    }, {
      start: 11459,
      length: 1,
      convRule: rule23
    }, {
      start: 11460,
      length: 1,
      convRule: rule22
    }, {
      start: 11461,
      length: 1,
      convRule: rule23
    }, {
      start: 11462,
      length: 1,
      convRule: rule22
    }, {
      start: 11463,
      length: 1,
      convRule: rule23
    }, {
      start: 11464,
      length: 1,
      convRule: rule22
    }, {
      start: 11465,
      length: 1,
      convRule: rule23
    }, {
      start: 11466,
      length: 1,
      convRule: rule22
    }, {
      start: 11467,
      length: 1,
      convRule: rule23
    }, {
      start: 11468,
      length: 1,
      convRule: rule22
    }, {
      start: 11469,
      length: 1,
      convRule: rule23
    }, {
      start: 11470,
      length: 1,
      convRule: rule22
    }, {
      start: 11471,
      length: 1,
      convRule: rule23
    }, {
      start: 11472,
      length: 1,
      convRule: rule22
    }, {
      start: 11473,
      length: 1,
      convRule: rule23
    }, {
      start: 11474,
      length: 1,
      convRule: rule22
    }, {
      start: 11475,
      length: 1,
      convRule: rule23
    }, {
      start: 11476,
      length: 1,
      convRule: rule22
    }, {
      start: 11477,
      length: 1,
      convRule: rule23
    }, {
      start: 11478,
      length: 1,
      convRule: rule22
    }, {
      start: 11479,
      length: 1,
      convRule: rule23
    }, {
      start: 11480,
      length: 1,
      convRule: rule22
    }, {
      start: 11481,
      length: 1,
      convRule: rule23
    }, {
      start: 11482,
      length: 1,
      convRule: rule22
    }, {
      start: 11483,
      length: 1,
      convRule: rule23
    }, {
      start: 11484,
      length: 1,
      convRule: rule22
    }, {
      start: 11485,
      length: 1,
      convRule: rule23
    }, {
      start: 11486,
      length: 1,
      convRule: rule22
    }, {
      start: 11487,
      length: 1,
      convRule: rule23
    }, {
      start: 11488,
      length: 1,
      convRule: rule22
    }, {
      start: 11489,
      length: 1,
      convRule: rule23
    }, {
      start: 11490,
      length: 1,
      convRule: rule22
    }, {
      start: 11491,
      length: 1,
      convRule: rule23
    }, {
      start: 11492,
      length: 1,
      convRule: rule20
    }, {
      start: 11493,
      length: 6,
      convRule: rule13
    }, {
      start: 11499,
      length: 1,
      convRule: rule22
    }, {
      start: 11500,
      length: 1,
      convRule: rule23
    }, {
      start: 11501,
      length: 1,
      convRule: rule22
    }, {
      start: 11502,
      length: 1,
      convRule: rule23
    }, {
      start: 11503,
      length: 3,
      convRule: rule92
    }, {
      start: 11506,
      length: 1,
      convRule: rule22
    }, {
      start: 11507,
      length: 1,
      convRule: rule23
    }, {
      start: 11513,
      length: 4,
      convRule: rule2
    }, {
      start: 11517,
      length: 1,
      convRule: rule17
    }, {
      start: 11518,
      length: 2,
      convRule: rule2
    }, {
      start: 11520,
      length: 38,
      convRule: rule182
    }, {
      start: 11559,
      length: 1,
      convRule: rule182
    }, {
      start: 11565,
      length: 1,
      convRule: rule182
    }, {
      start: 11568,
      length: 56,
      convRule: rule14
    }, {
      start: 11631,
      length: 1,
      convRule: rule91
    }, {
      start: 11632,
      length: 1,
      convRule: rule2
    }, {
      start: 11647,
      length: 1,
      convRule: rule92
    }, {
      start: 11648,
      length: 23,
      convRule: rule14
    }, {
      start: 11680,
      length: 7,
      convRule: rule14
    }, {
      start: 11688,
      length: 7,
      convRule: rule14
    }, {
      start: 11696,
      length: 7,
      convRule: rule14
    }, {
      start: 11704,
      length: 7,
      convRule: rule14
    }, {
      start: 11712,
      length: 7,
      convRule: rule14
    }, {
      start: 11720,
      length: 7,
      convRule: rule14
    }, {
      start: 11728,
      length: 7,
      convRule: rule14
    }, {
      start: 11736,
      length: 7,
      convRule: rule14
    }, {
      start: 11744,
      length: 32,
      convRule: rule92
    }, {
      start: 11776,
      length: 2,
      convRule: rule2
    }, {
      start: 11778,
      length: 1,
      convRule: rule15
    }, {
      start: 11779,
      length: 1,
      convRule: rule19
    }, {
      start: 11780,
      length: 1,
      convRule: rule15
    }, {
      start: 11781,
      length: 1,
      convRule: rule19
    }, {
      start: 11782,
      length: 3,
      convRule: rule2
    }, {
      start: 11785,
      length: 1,
      convRule: rule15
    }, {
      start: 11786,
      length: 1,
      convRule: rule19
    }, {
      start: 11787,
      length: 1,
      convRule: rule2
    }, {
      start: 11788,
      length: 1,
      convRule: rule15
    }, {
      start: 11789,
      length: 1,
      convRule: rule19
    }, {
      start: 11790,
      length: 9,
      convRule: rule2
    }, {
      start: 11799,
      length: 1,
      convRule: rule7
    }, {
      start: 11800,
      length: 2,
      convRule: rule2
    }, {
      start: 11802,
      length: 1,
      convRule: rule7
    }, {
      start: 11803,
      length: 1,
      convRule: rule2
    }, {
      start: 11804,
      length: 1,
      convRule: rule15
    }, {
      start: 11805,
      length: 1,
      convRule: rule19
    }, {
      start: 11806,
      length: 2,
      convRule: rule2
    }, {
      start: 11808,
      length: 1,
      convRule: rule15
    }, {
      start: 11809,
      length: 1,
      convRule: rule19
    }, {
      start: 11810,
      length: 1,
      convRule: rule4
    }, {
      start: 11811,
      length: 1,
      convRule: rule5
    }, {
      start: 11812,
      length: 1,
      convRule: rule4
    }, {
      start: 11813,
      length: 1,
      convRule: rule5
    }, {
      start: 11814,
      length: 1,
      convRule: rule4
    }, {
      start: 11815,
      length: 1,
      convRule: rule5
    }, {
      start: 11816,
      length: 1,
      convRule: rule4
    }, {
      start: 11817,
      length: 1,
      convRule: rule5
    }, {
      start: 11818,
      length: 5,
      convRule: rule2
    }, {
      start: 11823,
      length: 1,
      convRule: rule91
    }, {
      start: 11824,
      length: 10,
      convRule: rule2
    }, {
      start: 11834,
      length: 2,
      convRule: rule7
    }, {
      start: 11836,
      length: 4,
      convRule: rule2
    }, {
      start: 11840,
      length: 1,
      convRule: rule7
    }, {
      start: 11841,
      length: 1,
      convRule: rule2
    }, {
      start: 11842,
      length: 1,
      convRule: rule4
    }, {
      start: 11843,
      length: 13,
      convRule: rule2
    }, {
      start: 11856,
      length: 2,
      convRule: rule13
    }, {
      start: 11858,
      length: 1,
      convRule: rule2
    }, {
      start: 11904,
      length: 26,
      convRule: rule13
    }, {
      start: 11931,
      length: 89,
      convRule: rule13
    }, {
      start: 12032,
      length: 214,
      convRule: rule13
    }, {
      start: 12272,
      length: 12,
      convRule: rule13
    }, {
      start: 12288,
      length: 1,
      convRule: rule1
    }, {
      start: 12289,
      length: 3,
      convRule: rule2
    }, {
      start: 12292,
      length: 1,
      convRule: rule13
    }, {
      start: 12293,
      length: 1,
      convRule: rule91
    }, {
      start: 12294,
      length: 1,
      convRule: rule14
    }, {
      start: 12295,
      length: 1,
      convRule: rule128
    }, {
      start: 12296,
      length: 1,
      convRule: rule4
    }, {
      start: 12297,
      length: 1,
      convRule: rule5
    }, {
      start: 12298,
      length: 1,
      convRule: rule4
    }, {
      start: 12299,
      length: 1,
      convRule: rule5
    }, {
      start: 12300,
      length: 1,
      convRule: rule4
    }, {
      start: 12301,
      length: 1,
      convRule: rule5
    }, {
      start: 12302,
      length: 1,
      convRule: rule4
    }, {
      start: 12303,
      length: 1,
      convRule: rule5
    }, {
      start: 12304,
      length: 1,
      convRule: rule4
    }, {
      start: 12305,
      length: 1,
      convRule: rule5
    }, {
      start: 12306,
      length: 2,
      convRule: rule13
    }, {
      start: 12308,
      length: 1,
      convRule: rule4
    }, {
      start: 12309,
      length: 1,
      convRule: rule5
    }, {
      start: 12310,
      length: 1,
      convRule: rule4
    }, {
      start: 12311,
      length: 1,
      convRule: rule5
    }, {
      start: 12312,
      length: 1,
      convRule: rule4
    }, {
      start: 12313,
      length: 1,
      convRule: rule5
    }, {
      start: 12314,
      length: 1,
      convRule: rule4
    }, {
      start: 12315,
      length: 1,
      convRule: rule5
    }, {
      start: 12316,
      length: 1,
      convRule: rule7
    }, {
      start: 12317,
      length: 1,
      convRule: rule4
    }, {
      start: 12318,
      length: 2,
      convRule: rule5
    }, {
      start: 12320,
      length: 1,
      convRule: rule13
    }, {
      start: 12321,
      length: 9,
      convRule: rule128
    }, {
      start: 12330,
      length: 4,
      convRule: rule92
    }, {
      start: 12334,
      length: 2,
      convRule: rule124
    }, {
      start: 12336,
      length: 1,
      convRule: rule7
    }, {
      start: 12337,
      length: 5,
      convRule: rule91
    }, {
      start: 12342,
      length: 2,
      convRule: rule13
    }, {
      start: 12344,
      length: 3,
      convRule: rule128
    }, {
      start: 12347,
      length: 1,
      convRule: rule91
    }, {
      start: 12348,
      length: 1,
      convRule: rule14
    }, {
      start: 12349,
      length: 1,
      convRule: rule2
    }, {
      start: 12350,
      length: 2,
      convRule: rule13
    }, {
      start: 12353,
      length: 86,
      convRule: rule14
    }, {
      start: 12441,
      length: 2,
      convRule: rule92
    }, {
      start: 12443,
      length: 2,
      convRule: rule10
    }, {
      start: 12445,
      length: 2,
      convRule: rule91
    }, {
      start: 12447,
      length: 1,
      convRule: rule14
    }, {
      start: 12448,
      length: 1,
      convRule: rule7
    }, {
      start: 12449,
      length: 90,
      convRule: rule14
    }, {
      start: 12539,
      length: 1,
      convRule: rule2
    }, {
      start: 12540,
      length: 3,
      convRule: rule91
    }, {
      start: 12543,
      length: 1,
      convRule: rule14
    }, {
      start: 12549,
      length: 43,
      convRule: rule14
    }, {
      start: 12593,
      length: 94,
      convRule: rule14
    }, {
      start: 12688,
      length: 2,
      convRule: rule13
    }, {
      start: 12690,
      length: 4,
      convRule: rule17
    }, {
      start: 12694,
      length: 10,
      convRule: rule13
    }, {
      start: 12704,
      length: 32,
      convRule: rule14
    }, {
      start: 12736,
      length: 36,
      convRule: rule13
    }, {
      start: 12784,
      length: 16,
      convRule: rule14
    }, {
      start: 12800,
      length: 31,
      convRule: rule13
    }, {
      start: 12832,
      length: 10,
      convRule: rule17
    }, {
      start: 12842,
      length: 30,
      convRule: rule13
    }, {
      start: 12872,
      length: 8,
      convRule: rule17
    }, {
      start: 12880,
      length: 1,
      convRule: rule13
    }, {
      start: 12881,
      length: 15,
      convRule: rule17
    }, {
      start: 12896,
      length: 32,
      convRule: rule13
    }, {
      start: 12928,
      length: 10,
      convRule: rule17
    }, {
      start: 12938,
      length: 39,
      convRule: rule13
    }, {
      start: 12977,
      length: 15,
      convRule: rule17
    }, {
      start: 12992,
      length: 320,
      convRule: rule13
    }, {
      start: 13312,
      length: 6592,
      convRule: rule14
    }, {
      start: 19904,
      length: 64,
      convRule: rule13
    }, {
      start: 19968,
      length: 20989,
      convRule: rule14
    }, {
      start: 40960,
      length: 21,
      convRule: rule14
    }, {
      start: 40981,
      length: 1,
      convRule: rule91
    }, {
      start: 40982,
      length: 1143,
      convRule: rule14
    }, {
      start: 42128,
      length: 55,
      convRule: rule13
    }, {
      start: 42192,
      length: 40,
      convRule: rule14
    }, {
      start: 42232,
      length: 6,
      convRule: rule91
    }, {
      start: 42238,
      length: 2,
      convRule: rule2
    }, {
      start: 42240,
      length: 268,
      convRule: rule14
    }, {
      start: 42508,
      length: 1,
      convRule: rule91
    }, {
      start: 42509,
      length: 3,
      convRule: rule2
    }, {
      start: 42512,
      length: 16,
      convRule: rule14
    }, {
      start: 42528,
      length: 10,
      convRule: rule8
    }, {
      start: 42538,
      length: 2,
      convRule: rule14
    }, {
      start: 42560,
      length: 1,
      convRule: rule22
    }, {
      start: 42561,
      length: 1,
      convRule: rule23
    }, {
      start: 42562,
      length: 1,
      convRule: rule22
    }, {
      start: 42563,
      length: 1,
      convRule: rule23
    }, {
      start: 42564,
      length: 1,
      convRule: rule22
    }, {
      start: 42565,
      length: 1,
      convRule: rule23
    }, {
      start: 42566,
      length: 1,
      convRule: rule22
    }, {
      start: 42567,
      length: 1,
      convRule: rule23
    }, {
      start: 42568,
      length: 1,
      convRule: rule22
    }, {
      start: 42569,
      length: 1,
      convRule: rule23
    }, {
      start: 42570,
      length: 1,
      convRule: rule22
    }, {
      start: 42571,
      length: 1,
      convRule: rule23
    }, {
      start: 42572,
      length: 1,
      convRule: rule22
    }, {
      start: 42573,
      length: 1,
      convRule: rule23
    }, {
      start: 42574,
      length: 1,
      convRule: rule22
    }, {
      start: 42575,
      length: 1,
      convRule: rule23
    }, {
      start: 42576,
      length: 1,
      convRule: rule22
    }, {
      start: 42577,
      length: 1,
      convRule: rule23
    }, {
      start: 42578,
      length: 1,
      convRule: rule22
    }, {
      start: 42579,
      length: 1,
      convRule: rule23
    }, {
      start: 42580,
      length: 1,
      convRule: rule22
    }, {
      start: 42581,
      length: 1,
      convRule: rule23
    }, {
      start: 42582,
      length: 1,
      convRule: rule22
    }, {
      start: 42583,
      length: 1,
      convRule: rule23
    }, {
      start: 42584,
      length: 1,
      convRule: rule22
    }, {
      start: 42585,
      length: 1,
      convRule: rule23
    }, {
      start: 42586,
      length: 1,
      convRule: rule22
    }, {
      start: 42587,
      length: 1,
      convRule: rule23
    }, {
      start: 42588,
      length: 1,
      convRule: rule22
    }, {
      start: 42589,
      length: 1,
      convRule: rule23
    }, {
      start: 42590,
      length: 1,
      convRule: rule22
    }, {
      start: 42591,
      length: 1,
      convRule: rule23
    }, {
      start: 42592,
      length: 1,
      convRule: rule22
    }, {
      start: 42593,
      length: 1,
      convRule: rule23
    }, {
      start: 42594,
      length: 1,
      convRule: rule22
    }, {
      start: 42595,
      length: 1,
      convRule: rule23
    }, {
      start: 42596,
      length: 1,
      convRule: rule22
    }, {
      start: 42597,
      length: 1,
      convRule: rule23
    }, {
      start: 42598,
      length: 1,
      convRule: rule22
    }, {
      start: 42599,
      length: 1,
      convRule: rule23
    }, {
      start: 42600,
      length: 1,
      convRule: rule22
    }, {
      start: 42601,
      length: 1,
      convRule: rule23
    }, {
      start: 42602,
      length: 1,
      convRule: rule22
    }, {
      start: 42603,
      length: 1,
      convRule: rule23
    }, {
      start: 42604,
      length: 1,
      convRule: rule22
    }, {
      start: 42605,
      length: 1,
      convRule: rule23
    }, {
      start: 42606,
      length: 1,
      convRule: rule14
    }, {
      start: 42607,
      length: 1,
      convRule: rule92
    }, {
      start: 42608,
      length: 3,
      convRule: rule119
    }, {
      start: 42611,
      length: 1,
      convRule: rule2
    }, {
      start: 42612,
      length: 10,
      convRule: rule92
    }, {
      start: 42622,
      length: 1,
      convRule: rule2
    }, {
      start: 42623,
      length: 1,
      convRule: rule91
    }, {
      start: 42624,
      length: 1,
      convRule: rule22
    }, {
      start: 42625,
      length: 1,
      convRule: rule23
    }, {
      start: 42626,
      length: 1,
      convRule: rule22
    }, {
      start: 42627,
      length: 1,
      convRule: rule23
    }, {
      start: 42628,
      length: 1,
      convRule: rule22
    }, {
      start: 42629,
      length: 1,
      convRule: rule23
    }, {
      start: 42630,
      length: 1,
      convRule: rule22
    }, {
      start: 42631,
      length: 1,
      convRule: rule23
    }, {
      start: 42632,
      length: 1,
      convRule: rule22
    }, {
      start: 42633,
      length: 1,
      convRule: rule23
    }, {
      start: 42634,
      length: 1,
      convRule: rule22
    }, {
      start: 42635,
      length: 1,
      convRule: rule23
    }, {
      start: 42636,
      length: 1,
      convRule: rule22
    }, {
      start: 42637,
      length: 1,
      convRule: rule23
    }, {
      start: 42638,
      length: 1,
      convRule: rule22
    }, {
      start: 42639,
      length: 1,
      convRule: rule23
    }, {
      start: 42640,
      length: 1,
      convRule: rule22
    }, {
      start: 42641,
      length: 1,
      convRule: rule23
    }, {
      start: 42642,
      length: 1,
      convRule: rule22
    }, {
      start: 42643,
      length: 1,
      convRule: rule23
    }, {
      start: 42644,
      length: 1,
      convRule: rule22
    }, {
      start: 42645,
      length: 1,
      convRule: rule23
    }, {
      start: 42646,
      length: 1,
      convRule: rule22
    }, {
      start: 42647,
      length: 1,
      convRule: rule23
    }, {
      start: 42648,
      length: 1,
      convRule: rule22
    }, {
      start: 42649,
      length: 1,
      convRule: rule23
    }, {
      start: 42650,
      length: 1,
      convRule: rule22
    }, {
      start: 42651,
      length: 1,
      convRule: rule23
    }, {
      start: 42652,
      length: 2,
      convRule: rule91
    }, {
      start: 42654,
      length: 2,
      convRule: rule92
    }, {
      start: 42656,
      length: 70,
      convRule: rule14
    }, {
      start: 42726,
      length: 10,
      convRule: rule128
    }, {
      start: 42736,
      length: 2,
      convRule: rule92
    }, {
      start: 42738,
      length: 6,
      convRule: rule2
    }, {
      start: 42752,
      length: 23,
      convRule: rule10
    }, {
      start: 42775,
      length: 9,
      convRule: rule91
    }, {
      start: 42784,
      length: 2,
      convRule: rule10
    }, {
      start: 42786,
      length: 1,
      convRule: rule22
    }, {
      start: 42787,
      length: 1,
      convRule: rule23
    }, {
      start: 42788,
      length: 1,
      convRule: rule22
    }, {
      start: 42789,
      length: 1,
      convRule: rule23
    }, {
      start: 42790,
      length: 1,
      convRule: rule22
    }, {
      start: 42791,
      length: 1,
      convRule: rule23
    }, {
      start: 42792,
      length: 1,
      convRule: rule22
    }, {
      start: 42793,
      length: 1,
      convRule: rule23
    }, {
      start: 42794,
      length: 1,
      convRule: rule22
    }, {
      start: 42795,
      length: 1,
      convRule: rule23
    }, {
      start: 42796,
      length: 1,
      convRule: rule22
    }, {
      start: 42797,
      length: 1,
      convRule: rule23
    }, {
      start: 42798,
      length: 1,
      convRule: rule22
    }, {
      start: 42799,
      length: 1,
      convRule: rule23
    }, {
      start: 42800,
      length: 2,
      convRule: rule20
    }, {
      start: 42802,
      length: 1,
      convRule: rule22
    }, {
      start: 42803,
      length: 1,
      convRule: rule23
    }, {
      start: 42804,
      length: 1,
      convRule: rule22
    }, {
      start: 42805,
      length: 1,
      convRule: rule23
    }, {
      start: 42806,
      length: 1,
      convRule: rule22
    }, {
      start: 42807,
      length: 1,
      convRule: rule23
    }, {
      start: 42808,
      length: 1,
      convRule: rule22
    }, {
      start: 42809,
      length: 1,
      convRule: rule23
    }, {
      start: 42810,
      length: 1,
      convRule: rule22
    }, {
      start: 42811,
      length: 1,
      convRule: rule23
    }, {
      start: 42812,
      length: 1,
      convRule: rule22
    }, {
      start: 42813,
      length: 1,
      convRule: rule23
    }, {
      start: 42814,
      length: 1,
      convRule: rule22
    }, {
      start: 42815,
      length: 1,
      convRule: rule23
    }, {
      start: 42816,
      length: 1,
      convRule: rule22
    }, {
      start: 42817,
      length: 1,
      convRule: rule23
    }, {
      start: 42818,
      length: 1,
      convRule: rule22
    }, {
      start: 42819,
      length: 1,
      convRule: rule23
    }, {
      start: 42820,
      length: 1,
      convRule: rule22
    }, {
      start: 42821,
      length: 1,
      convRule: rule23
    }, {
      start: 42822,
      length: 1,
      convRule: rule22
    }, {
      start: 42823,
      length: 1,
      convRule: rule23
    }, {
      start: 42824,
      length: 1,
      convRule: rule22
    }, {
      start: 42825,
      length: 1,
      convRule: rule23
    }, {
      start: 42826,
      length: 1,
      convRule: rule22
    }, {
      start: 42827,
      length: 1,
      convRule: rule23
    }, {
      start: 42828,
      length: 1,
      convRule: rule22
    }, {
      start: 42829,
      length: 1,
      convRule: rule23
    }, {
      start: 42830,
      length: 1,
      convRule: rule22
    }, {
      start: 42831,
      length: 1,
      convRule: rule23
    }, {
      start: 42832,
      length: 1,
      convRule: rule22
    }, {
      start: 42833,
      length: 1,
      convRule: rule23
    }, {
      start: 42834,
      length: 1,
      convRule: rule22
    }, {
      start: 42835,
      length: 1,
      convRule: rule23
    }, {
      start: 42836,
      length: 1,
      convRule: rule22
    }, {
      start: 42837,
      length: 1,
      convRule: rule23
    }, {
      start: 42838,
      length: 1,
      convRule: rule22
    }, {
      start: 42839,
      length: 1,
      convRule: rule23
    }, {
      start: 42840,
      length: 1,
      convRule: rule22
    }, {
      start: 42841,
      length: 1,
      convRule: rule23
    }, {
      start: 42842,
      length: 1,
      convRule: rule22
    }, {
      start: 42843,
      length: 1,
      convRule: rule23
    }, {
      start: 42844,
      length: 1,
      convRule: rule22
    }, {
      start: 42845,
      length: 1,
      convRule: rule23
    }, {
      start: 42846,
      length: 1,
      convRule: rule22
    }, {
      start: 42847,
      length: 1,
      convRule: rule23
    }, {
      start: 42848,
      length: 1,
      convRule: rule22
    }, {
      start: 42849,
      length: 1,
      convRule: rule23
    }, {
      start: 42850,
      length: 1,
      convRule: rule22
    }, {
      start: 42851,
      length: 1,
      convRule: rule23
    }, {
      start: 42852,
      length: 1,
      convRule: rule22
    }, {
      start: 42853,
      length: 1,
      convRule: rule23
    }, {
      start: 42854,
      length: 1,
      convRule: rule22
    }, {
      start: 42855,
      length: 1,
      convRule: rule23
    }, {
      start: 42856,
      length: 1,
      convRule: rule22
    }, {
      start: 42857,
      length: 1,
      convRule: rule23
    }, {
      start: 42858,
      length: 1,
      convRule: rule22
    }, {
      start: 42859,
      length: 1,
      convRule: rule23
    }, {
      start: 42860,
      length: 1,
      convRule: rule22
    }, {
      start: 42861,
      length: 1,
      convRule: rule23
    }, {
      start: 42862,
      length: 1,
      convRule: rule22
    }, {
      start: 42863,
      length: 1,
      convRule: rule23
    }, {
      start: 42864,
      length: 1,
      convRule: rule91
    }, {
      start: 42865,
      length: 8,
      convRule: rule20
    }, {
      start: 42873,
      length: 1,
      convRule: rule22
    }, {
      start: 42874,
      length: 1,
      convRule: rule23
    }, {
      start: 42875,
      length: 1,
      convRule: rule22
    }, {
      start: 42876,
      length: 1,
      convRule: rule23
    }, {
      start: 42877,
      length: 1,
      convRule: rule183
    }, {
      start: 42878,
      length: 1,
      convRule: rule22
    }, {
      start: 42879,
      length: 1,
      convRule: rule23
    }, {
      start: 42880,
      length: 1,
      convRule: rule22
    }, {
      start: 42881,
      length: 1,
      convRule: rule23
    }, {
      start: 42882,
      length: 1,
      convRule: rule22
    }, {
      start: 42883,
      length: 1,
      convRule: rule23
    }, {
      start: 42884,
      length: 1,
      convRule: rule22
    }, {
      start: 42885,
      length: 1,
      convRule: rule23
    }, {
      start: 42886,
      length: 1,
      convRule: rule22
    }, {
      start: 42887,
      length: 1,
      convRule: rule23
    }, {
      start: 42888,
      length: 1,
      convRule: rule91
    }, {
      start: 42889,
      length: 2,
      convRule: rule10
    }, {
      start: 42891,
      length: 1,
      convRule: rule22
    }, {
      start: 42892,
      length: 1,
      convRule: rule23
    }, {
      start: 42893,
      length: 1,
      convRule: rule184
    }, {
      start: 42894,
      length: 1,
      convRule: rule20
    }, {
      start: 42895,
      length: 1,
      convRule: rule14
    }, {
      start: 42896,
      length: 1,
      convRule: rule22
    }, {
      start: 42897,
      length: 1,
      convRule: rule23
    }, {
      start: 42898,
      length: 1,
      convRule: rule22
    }, {
      start: 42899,
      length: 1,
      convRule: rule23
    }, {
      start: 42900,
      length: 1,
      convRule: rule185
    }, {
      start: 42901,
      length: 1,
      convRule: rule20
    }, {
      start: 42902,
      length: 1,
      convRule: rule22
    }, {
      start: 42903,
      length: 1,
      convRule: rule23
    }, {
      start: 42904,
      length: 1,
      convRule: rule22
    }, {
      start: 42905,
      length: 1,
      convRule: rule23
    }, {
      start: 42906,
      length: 1,
      convRule: rule22
    }, {
      start: 42907,
      length: 1,
      convRule: rule23
    }, {
      start: 42908,
      length: 1,
      convRule: rule22
    }, {
      start: 42909,
      length: 1,
      convRule: rule23
    }, {
      start: 42910,
      length: 1,
      convRule: rule22
    }, {
      start: 42911,
      length: 1,
      convRule: rule23
    }, {
      start: 42912,
      length: 1,
      convRule: rule22
    }, {
      start: 42913,
      length: 1,
      convRule: rule23
    }, {
      start: 42914,
      length: 1,
      convRule: rule22
    }, {
      start: 42915,
      length: 1,
      convRule: rule23
    }, {
      start: 42916,
      length: 1,
      convRule: rule22
    }, {
      start: 42917,
      length: 1,
      convRule: rule23
    }, {
      start: 42918,
      length: 1,
      convRule: rule22
    }, {
      start: 42919,
      length: 1,
      convRule: rule23
    }, {
      start: 42920,
      length: 1,
      convRule: rule22
    }, {
      start: 42921,
      length: 1,
      convRule: rule23
    }, {
      start: 42922,
      length: 1,
      convRule: rule186
    }, {
      start: 42923,
      length: 1,
      convRule: rule187
    }, {
      start: 42924,
      length: 1,
      convRule: rule188
    }, {
      start: 42925,
      length: 1,
      convRule: rule189
    }, {
      start: 42926,
      length: 1,
      convRule: rule186
    }, {
      start: 42927,
      length: 1,
      convRule: rule20
    }, {
      start: 42928,
      length: 1,
      convRule: rule190
    }, {
      start: 42929,
      length: 1,
      convRule: rule191
    }, {
      start: 42930,
      length: 1,
      convRule: rule192
    }, {
      start: 42931,
      length: 1,
      convRule: rule193
    }, {
      start: 42932,
      length: 1,
      convRule: rule22
    }, {
      start: 42933,
      length: 1,
      convRule: rule23
    }, {
      start: 42934,
      length: 1,
      convRule: rule22
    }, {
      start: 42935,
      length: 1,
      convRule: rule23
    }, {
      start: 42936,
      length: 1,
      convRule: rule22
    }, {
      start: 42937,
      length: 1,
      convRule: rule23
    }, {
      start: 42938,
      length: 1,
      convRule: rule22
    }, {
      start: 42939,
      length: 1,
      convRule: rule23
    }, {
      start: 42940,
      length: 1,
      convRule: rule22
    }, {
      start: 42941,
      length: 1,
      convRule: rule23
    }, {
      start: 42942,
      length: 1,
      convRule: rule22
    }, {
      start: 42943,
      length: 1,
      convRule: rule23
    }, {
      start: 42946,
      length: 1,
      convRule: rule22
    }, {
      start: 42947,
      length: 1,
      convRule: rule23
    }, {
      start: 42948,
      length: 1,
      convRule: rule194
    }, {
      start: 42949,
      length: 1,
      convRule: rule195
    }, {
      start: 42950,
      length: 1,
      convRule: rule196
    }, {
      start: 42951,
      length: 1,
      convRule: rule22
    }, {
      start: 42952,
      length: 1,
      convRule: rule23
    }, {
      start: 42953,
      length: 1,
      convRule: rule22
    }, {
      start: 42954,
      length: 1,
      convRule: rule23
    }, {
      start: 42997,
      length: 1,
      convRule: rule22
    }, {
      start: 42998,
      length: 1,
      convRule: rule23
    }, {
      start: 42999,
      length: 1,
      convRule: rule14
    }, {
      start: 43e3,
      length: 2,
      convRule: rule91
    }, {
      start: 43002,
      length: 1,
      convRule: rule20
    }, {
      start: 43003,
      length: 7,
      convRule: rule14
    }, {
      start: 43010,
      length: 1,
      convRule: rule92
    }, {
      start: 43011,
      length: 3,
      convRule: rule14
    }, {
      start: 43014,
      length: 1,
      convRule: rule92
    }, {
      start: 43015,
      length: 4,
      convRule: rule14
    }, {
      start: 43019,
      length: 1,
      convRule: rule92
    }, {
      start: 43020,
      length: 23,
      convRule: rule14
    }, {
      start: 43043,
      length: 2,
      convRule: rule124
    }, {
      start: 43045,
      length: 2,
      convRule: rule92
    }, {
      start: 43047,
      length: 1,
      convRule: rule124
    }, {
      start: 43048,
      length: 4,
      convRule: rule13
    }, {
      start: 43052,
      length: 1,
      convRule: rule92
    }, {
      start: 43056,
      length: 6,
      convRule: rule17
    }, {
      start: 43062,
      length: 2,
      convRule: rule13
    }, {
      start: 43064,
      length: 1,
      convRule: rule3
    }, {
      start: 43065,
      length: 1,
      convRule: rule13
    }, {
      start: 43072,
      length: 52,
      convRule: rule14
    }, {
      start: 43124,
      length: 4,
      convRule: rule2
    }, {
      start: 43136,
      length: 2,
      convRule: rule124
    }, {
      start: 43138,
      length: 50,
      convRule: rule14
    }, {
      start: 43188,
      length: 16,
      convRule: rule124
    }, {
      start: 43204,
      length: 2,
      convRule: rule92
    }, {
      start: 43214,
      length: 2,
      convRule: rule2
    }, {
      start: 43216,
      length: 10,
      convRule: rule8
    }, {
      start: 43232,
      length: 18,
      convRule: rule92
    }, {
      start: 43250,
      length: 6,
      convRule: rule14
    }, {
      start: 43256,
      length: 3,
      convRule: rule2
    }, {
      start: 43259,
      length: 1,
      convRule: rule14
    }, {
      start: 43260,
      length: 1,
      convRule: rule2
    }, {
      start: 43261,
      length: 2,
      convRule: rule14
    }, {
      start: 43263,
      length: 1,
      convRule: rule92
    }, {
      start: 43264,
      length: 10,
      convRule: rule8
    }, {
      start: 43274,
      length: 28,
      convRule: rule14
    }, {
      start: 43302,
      length: 8,
      convRule: rule92
    }, {
      start: 43310,
      length: 2,
      convRule: rule2
    }, {
      start: 43312,
      length: 23,
      convRule: rule14
    }, {
      start: 43335,
      length: 11,
      convRule: rule92
    }, {
      start: 43346,
      length: 2,
      convRule: rule124
    }, {
      start: 43359,
      length: 1,
      convRule: rule2
    }, {
      start: 43360,
      length: 29,
      convRule: rule14
    }, {
      start: 43392,
      length: 3,
      convRule: rule92
    }, {
      start: 43395,
      length: 1,
      convRule: rule124
    }, {
      start: 43396,
      length: 47,
      convRule: rule14
    }, {
      start: 43443,
      length: 1,
      convRule: rule92
    }, {
      start: 43444,
      length: 2,
      convRule: rule124
    }, {
      start: 43446,
      length: 4,
      convRule: rule92
    }, {
      start: 43450,
      length: 2,
      convRule: rule124
    }, {
      start: 43452,
      length: 2,
      convRule: rule92
    }, {
      start: 43454,
      length: 3,
      convRule: rule124
    }, {
      start: 43457,
      length: 13,
      convRule: rule2
    }, {
      start: 43471,
      length: 1,
      convRule: rule91
    }, {
      start: 43472,
      length: 10,
      convRule: rule8
    }, {
      start: 43486,
      length: 2,
      convRule: rule2
    }, {
      start: 43488,
      length: 5,
      convRule: rule14
    }, {
      start: 43493,
      length: 1,
      convRule: rule92
    }, {
      start: 43494,
      length: 1,
      convRule: rule91
    }, {
      start: 43495,
      length: 9,
      convRule: rule14
    }, {
      start: 43504,
      length: 10,
      convRule: rule8
    }, {
      start: 43514,
      length: 5,
      convRule: rule14
    }, {
      start: 43520,
      length: 41,
      convRule: rule14
    }, {
      start: 43561,
      length: 6,
      convRule: rule92
    }, {
      start: 43567,
      length: 2,
      convRule: rule124
    }, {
      start: 43569,
      length: 2,
      convRule: rule92
    }, {
      start: 43571,
      length: 2,
      convRule: rule124
    }, {
      start: 43573,
      length: 2,
      convRule: rule92
    }, {
      start: 43584,
      length: 3,
      convRule: rule14
    }, {
      start: 43587,
      length: 1,
      convRule: rule92
    }, {
      start: 43588,
      length: 8,
      convRule: rule14
    }, {
      start: 43596,
      length: 1,
      convRule: rule92
    }, {
      start: 43597,
      length: 1,
      convRule: rule124
    }, {
      start: 43600,
      length: 10,
      convRule: rule8
    }, {
      start: 43612,
      length: 4,
      convRule: rule2
    }, {
      start: 43616,
      length: 16,
      convRule: rule14
    }, {
      start: 43632,
      length: 1,
      convRule: rule91
    }, {
      start: 43633,
      length: 6,
      convRule: rule14
    }, {
      start: 43639,
      length: 3,
      convRule: rule13
    }, {
      start: 43642,
      length: 1,
      convRule: rule14
    }, {
      start: 43643,
      length: 1,
      convRule: rule124
    }, {
      start: 43644,
      length: 1,
      convRule: rule92
    }, {
      start: 43645,
      length: 1,
      convRule: rule124
    }, {
      start: 43646,
      length: 50,
      convRule: rule14
    }, {
      start: 43696,
      length: 1,
      convRule: rule92
    }, {
      start: 43697,
      length: 1,
      convRule: rule14
    }, {
      start: 43698,
      length: 3,
      convRule: rule92
    }, {
      start: 43701,
      length: 2,
      convRule: rule14
    }, {
      start: 43703,
      length: 2,
      convRule: rule92
    }, {
      start: 43705,
      length: 5,
      convRule: rule14
    }, {
      start: 43710,
      length: 2,
      convRule: rule92
    }, {
      start: 43712,
      length: 1,
      convRule: rule14
    }, {
      start: 43713,
      length: 1,
      convRule: rule92
    }, {
      start: 43714,
      length: 1,
      convRule: rule14
    }, {
      start: 43739,
      length: 2,
      convRule: rule14
    }, {
      start: 43741,
      length: 1,
      convRule: rule91
    }, {
      start: 43742,
      length: 2,
      convRule: rule2
    }, {
      start: 43744,
      length: 11,
      convRule: rule14
    }, {
      start: 43755,
      length: 1,
      convRule: rule124
    }, {
      start: 43756,
      length: 2,
      convRule: rule92
    }, {
      start: 43758,
      length: 2,
      convRule: rule124
    }, {
      start: 43760,
      length: 2,
      convRule: rule2
    }, {
      start: 43762,
      length: 1,
      convRule: rule14
    }, {
      start: 43763,
      length: 2,
      convRule: rule91
    }, {
      start: 43765,
      length: 1,
      convRule: rule124
    }, {
      start: 43766,
      length: 1,
      convRule: rule92
    }, {
      start: 43777,
      length: 6,
      convRule: rule14
    }, {
      start: 43785,
      length: 6,
      convRule: rule14
    }, {
      start: 43793,
      length: 6,
      convRule: rule14
    }, {
      start: 43808,
      length: 7,
      convRule: rule14
    }, {
      start: 43816,
      length: 7,
      convRule: rule14
    }, {
      start: 43824,
      length: 35,
      convRule: rule20
    }, {
      start: 43859,
      length: 1,
      convRule: rule197
    }, {
      start: 43860,
      length: 7,
      convRule: rule20
    }, {
      start: 43867,
      length: 1,
      convRule: rule10
    }, {
      start: 43868,
      length: 4,
      convRule: rule91
    }, {
      start: 43872,
      length: 9,
      convRule: rule20
    }, {
      start: 43881,
      length: 1,
      convRule: rule91
    }, {
      start: 43882,
      length: 2,
      convRule: rule10
    }, {
      start: 43888,
      length: 80,
      convRule: rule198
    }, {
      start: 43968,
      length: 35,
      convRule: rule14
    }, {
      start: 44003,
      length: 2,
      convRule: rule124
    }, {
      start: 44005,
      length: 1,
      convRule: rule92
    }, {
      start: 44006,
      length: 2,
      convRule: rule124
    }, {
      start: 44008,
      length: 1,
      convRule: rule92
    }, {
      start: 44009,
      length: 2,
      convRule: rule124
    }, {
      start: 44011,
      length: 1,
      convRule: rule2
    }, {
      start: 44012,
      length: 1,
      convRule: rule124
    }, {
      start: 44013,
      length: 1,
      convRule: rule92
    }, {
      start: 44016,
      length: 10,
      convRule: rule8
    }, {
      start: 44032,
      length: 11172,
      convRule: rule14
    }, {
      start: 55216,
      length: 23,
      convRule: rule14
    }, {
      start: 55243,
      length: 49,
      convRule: rule14
    }, {
      start: 55296,
      length: 896,
      convRule: rule199
    }, {
      start: 56192,
      length: 128,
      convRule: rule199
    }, {
      start: 56320,
      length: 1024,
      convRule: rule199
    }, {
      start: 57344,
      length: 6400,
      convRule: rule200
    }, {
      start: 63744,
      length: 366,
      convRule: rule14
    }, {
      start: 64112,
      length: 106,
      convRule: rule14
    }, {
      start: 64256,
      length: 7,
      convRule: rule20
    }, {
      start: 64275,
      length: 5,
      convRule: rule20
    }, {
      start: 64285,
      length: 1,
      convRule: rule14
    }, {
      start: 64286,
      length: 1,
      convRule: rule92
    }, {
      start: 64287,
      length: 10,
      convRule: rule14
    }, {
      start: 64297,
      length: 1,
      convRule: rule6
    }, {
      start: 64298,
      length: 13,
      convRule: rule14
    }, {
      start: 64312,
      length: 5,
      convRule: rule14
    }, {
      start: 64318,
      length: 1,
      convRule: rule14
    }, {
      start: 64320,
      length: 2,
      convRule: rule14
    }, {
      start: 64323,
      length: 2,
      convRule: rule14
    }, {
      start: 64326,
      length: 108,
      convRule: rule14
    }, {
      start: 64434,
      length: 16,
      convRule: rule10
    }, {
      start: 64467,
      length: 363,
      convRule: rule14
    }, {
      start: 64830,
      length: 1,
      convRule: rule5
    }, {
      start: 64831,
      length: 1,
      convRule: rule4
    }, {
      start: 64848,
      length: 64,
      convRule: rule14
    }, {
      start: 64914,
      length: 54,
      convRule: rule14
    }, {
      start: 65008,
      length: 12,
      convRule: rule14
    }, {
      start: 65020,
      length: 1,
      convRule: rule3
    }, {
      start: 65021,
      length: 1,
      convRule: rule13
    }, {
      start: 65024,
      length: 16,
      convRule: rule92
    }, {
      start: 65040,
      length: 7,
      convRule: rule2
    }, {
      start: 65047,
      length: 1,
      convRule: rule4
    }, {
      start: 65048,
      length: 1,
      convRule: rule5
    }, {
      start: 65049,
      length: 1,
      convRule: rule2
    }, {
      start: 65056,
      length: 16,
      convRule: rule92
    }, {
      start: 65072,
      length: 1,
      convRule: rule2
    }, {
      start: 65073,
      length: 2,
      convRule: rule7
    }, {
      start: 65075,
      length: 2,
      convRule: rule11
    }, {
      start: 65077,
      length: 1,
      convRule: rule4
    }, {
      start: 65078,
      length: 1,
      convRule: rule5
    }, {
      start: 65079,
      length: 1,
      convRule: rule4
    }, {
      start: 65080,
      length: 1,
      convRule: rule5
    }, {
      start: 65081,
      length: 1,
      convRule: rule4
    }, {
      start: 65082,
      length: 1,
      convRule: rule5
    }, {
      start: 65083,
      length: 1,
      convRule: rule4
    }, {
      start: 65084,
      length: 1,
      convRule: rule5
    }, {
      start: 65085,
      length: 1,
      convRule: rule4
    }, {
      start: 65086,
      length: 1,
      convRule: rule5
    }, {
      start: 65087,
      length: 1,
      convRule: rule4
    }, {
      start: 65088,
      length: 1,
      convRule: rule5
    }, {
      start: 65089,
      length: 1,
      convRule: rule4
    }, {
      start: 65090,
      length: 1,
      convRule: rule5
    }, {
      start: 65091,
      length: 1,
      convRule: rule4
    }, {
      start: 65092,
      length: 1,
      convRule: rule5
    }, {
      start: 65093,
      length: 2,
      convRule: rule2
    }, {
      start: 65095,
      length: 1,
      convRule: rule4
    }, {
      start: 65096,
      length: 1,
      convRule: rule5
    }, {
      start: 65097,
      length: 4,
      convRule: rule2
    }, {
      start: 65101,
      length: 3,
      convRule: rule11
    }, {
      start: 65104,
      length: 3,
      convRule: rule2
    }, {
      start: 65108,
      length: 4,
      convRule: rule2
    }, {
      start: 65112,
      length: 1,
      convRule: rule7
    }, {
      start: 65113,
      length: 1,
      convRule: rule4
    }, {
      start: 65114,
      length: 1,
      convRule: rule5
    }, {
      start: 65115,
      length: 1,
      convRule: rule4
    }, {
      start: 65116,
      length: 1,
      convRule: rule5
    }, {
      start: 65117,
      length: 1,
      convRule: rule4
    }, {
      start: 65118,
      length: 1,
      convRule: rule5
    }, {
      start: 65119,
      length: 3,
      convRule: rule2
    }, {
      start: 65122,
      length: 1,
      convRule: rule6
    }, {
      start: 65123,
      length: 1,
      convRule: rule7
    }, {
      start: 65124,
      length: 3,
      convRule: rule6
    }, {
      start: 65128,
      length: 1,
      convRule: rule2
    }, {
      start: 65129,
      length: 1,
      convRule: rule3
    }, {
      start: 65130,
      length: 2,
      convRule: rule2
    }, {
      start: 65136,
      length: 5,
      convRule: rule14
    }, {
      start: 65142,
      length: 135,
      convRule: rule14
    }, {
      start: 65279,
      length: 1,
      convRule: rule16
    }, {
      start: 65281,
      length: 3,
      convRule: rule2
    }, {
      start: 65284,
      length: 1,
      convRule: rule3
    }, {
      start: 65285,
      length: 3,
      convRule: rule2
    }, {
      start: 65288,
      length: 1,
      convRule: rule4
    }, {
      start: 65289,
      length: 1,
      convRule: rule5
    }, {
      start: 65290,
      length: 1,
      convRule: rule2
    }, {
      start: 65291,
      length: 1,
      convRule: rule6
    }, {
      start: 65292,
      length: 1,
      convRule: rule2
    }, {
      start: 65293,
      length: 1,
      convRule: rule7
    }, {
      start: 65294,
      length: 2,
      convRule: rule2
    }, {
      start: 65296,
      length: 10,
      convRule: rule8
    }, {
      start: 65306,
      length: 2,
      convRule: rule2
    }, {
      start: 65308,
      length: 3,
      convRule: rule6
    }, {
      start: 65311,
      length: 2,
      convRule: rule2
    }, {
      start: 65313,
      length: 26,
      convRule: rule9
    }, {
      start: 65339,
      length: 1,
      convRule: rule4
    }, {
      start: 65340,
      length: 1,
      convRule: rule2
    }, {
      start: 65341,
      length: 1,
      convRule: rule5
    }, {
      start: 65342,
      length: 1,
      convRule: rule10
    }, {
      start: 65343,
      length: 1,
      convRule: rule11
    }, {
      start: 65344,
      length: 1,
      convRule: rule10
    }, {
      start: 65345,
      length: 26,
      convRule: rule12
    }, {
      start: 65371,
      length: 1,
      convRule: rule4
    }, {
      start: 65372,
      length: 1,
      convRule: rule6
    }, {
      start: 65373,
      length: 1,
      convRule: rule5
    }, {
      start: 65374,
      length: 1,
      convRule: rule6
    }, {
      start: 65375,
      length: 1,
      convRule: rule4
    }, {
      start: 65376,
      length: 1,
      convRule: rule5
    }, {
      start: 65377,
      length: 1,
      convRule: rule2
    }, {
      start: 65378,
      length: 1,
      convRule: rule4
    }, {
      start: 65379,
      length: 1,
      convRule: rule5
    }, {
      start: 65380,
      length: 2,
      convRule: rule2
    }, {
      start: 65382,
      length: 10,
      convRule: rule14
    }, {
      start: 65392,
      length: 1,
      convRule: rule91
    }, {
      start: 65393,
      length: 45,
      convRule: rule14
    }, {
      start: 65438,
      length: 2,
      convRule: rule91
    }, {
      start: 65440,
      length: 31,
      convRule: rule14
    }, {
      start: 65474,
      length: 6,
      convRule: rule14
    }, {
      start: 65482,
      length: 6,
      convRule: rule14
    }, {
      start: 65490,
      length: 6,
      convRule: rule14
    }, {
      start: 65498,
      length: 3,
      convRule: rule14
    }, {
      start: 65504,
      length: 2,
      convRule: rule3
    }, {
      start: 65506,
      length: 1,
      convRule: rule6
    }, {
      start: 65507,
      length: 1,
      convRule: rule10
    }, {
      start: 65508,
      length: 1,
      convRule: rule13
    }, {
      start: 65509,
      length: 2,
      convRule: rule3
    }, {
      start: 65512,
      length: 1,
      convRule: rule13
    }, {
      start: 65513,
      length: 4,
      convRule: rule6
    }, {
      start: 65517,
      length: 2,
      convRule: rule13
    }, {
      start: 65529,
      length: 3,
      convRule: rule16
    }, {
      start: 65532,
      length: 2,
      convRule: rule13
    }, {
      start: 65536,
      length: 12,
      convRule: rule14
    }, {
      start: 65549,
      length: 26,
      convRule: rule14
    }, {
      start: 65576,
      length: 19,
      convRule: rule14
    }, {
      start: 65596,
      length: 2,
      convRule: rule14
    }, {
      start: 65599,
      length: 15,
      convRule: rule14
    }, {
      start: 65616,
      length: 14,
      convRule: rule14
    }, {
      start: 65664,
      length: 123,
      convRule: rule14
    }, {
      start: 65792,
      length: 3,
      convRule: rule2
    }, {
      start: 65799,
      length: 45,
      convRule: rule17
    }, {
      start: 65847,
      length: 9,
      convRule: rule13
    }, {
      start: 65856,
      length: 53,
      convRule: rule128
    }, {
      start: 65909,
      length: 4,
      convRule: rule17
    }, {
      start: 65913,
      length: 17,
      convRule: rule13
    }, {
      start: 65930,
      length: 2,
      convRule: rule17
    }, {
      start: 65932,
      length: 3,
      convRule: rule13
    }, {
      start: 65936,
      length: 13,
      convRule: rule13
    }, {
      start: 65952,
      length: 1,
      convRule: rule13
    }, {
      start: 66e3,
      length: 45,
      convRule: rule13
    }, {
      start: 66045,
      length: 1,
      convRule: rule92
    }, {
      start: 66176,
      length: 29,
      convRule: rule14
    }, {
      start: 66208,
      length: 49,
      convRule: rule14
    }, {
      start: 66272,
      length: 1,
      convRule: rule92
    }, {
      start: 66273,
      length: 27,
      convRule: rule17
    }, {
      start: 66304,
      length: 32,
      convRule: rule14
    }, {
      start: 66336,
      length: 4,
      convRule: rule17
    }, {
      start: 66349,
      length: 20,
      convRule: rule14
    }, {
      start: 66369,
      length: 1,
      convRule: rule128
    }, {
      start: 66370,
      length: 8,
      convRule: rule14
    }, {
      start: 66378,
      length: 1,
      convRule: rule128
    }, {
      start: 66384,
      length: 38,
      convRule: rule14
    }, {
      start: 66422,
      length: 5,
      convRule: rule92
    }, {
      start: 66432,
      length: 30,
      convRule: rule14
    }, {
      start: 66463,
      length: 1,
      convRule: rule2
    }, {
      start: 66464,
      length: 36,
      convRule: rule14
    }, {
      start: 66504,
      length: 8,
      convRule: rule14
    }, {
      start: 66512,
      length: 1,
      convRule: rule2
    }, {
      start: 66513,
      length: 5,
      convRule: rule128
    }, {
      start: 66560,
      length: 40,
      convRule: rule201
    }, {
      start: 66600,
      length: 40,
      convRule: rule202
    }, {
      start: 66640,
      length: 78,
      convRule: rule14
    }, {
      start: 66720,
      length: 10,
      convRule: rule8
    }, {
      start: 66736,
      length: 36,
      convRule: rule201
    }, {
      start: 66776,
      length: 36,
      convRule: rule202
    }, {
      start: 66816,
      length: 40,
      convRule: rule14
    }, {
      start: 66864,
      length: 52,
      convRule: rule14
    }, {
      start: 66927,
      length: 1,
      convRule: rule2
    }, {
      start: 67072,
      length: 311,
      convRule: rule14
    }, {
      start: 67392,
      length: 22,
      convRule: rule14
    }, {
      start: 67424,
      length: 8,
      convRule: rule14
    }, {
      start: 67584,
      length: 6,
      convRule: rule14
    }, {
      start: 67592,
      length: 1,
      convRule: rule14
    }, {
      start: 67594,
      length: 44,
      convRule: rule14
    }, {
      start: 67639,
      length: 2,
      convRule: rule14
    }, {
      start: 67644,
      length: 1,
      convRule: rule14
    }, {
      start: 67647,
      length: 23,
      convRule: rule14
    }, {
      start: 67671,
      length: 1,
      convRule: rule2
    }, {
      start: 67672,
      length: 8,
      convRule: rule17
    }, {
      start: 67680,
      length: 23,
      convRule: rule14
    }, {
      start: 67703,
      length: 2,
      convRule: rule13
    }, {
      start: 67705,
      length: 7,
      convRule: rule17
    }, {
      start: 67712,
      length: 31,
      convRule: rule14
    }, {
      start: 67751,
      length: 9,
      convRule: rule17
    }, {
      start: 67808,
      length: 19,
      convRule: rule14
    }, {
      start: 67828,
      length: 2,
      convRule: rule14
    }, {
      start: 67835,
      length: 5,
      convRule: rule17
    }, {
      start: 67840,
      length: 22,
      convRule: rule14
    }, {
      start: 67862,
      length: 6,
      convRule: rule17
    }, {
      start: 67871,
      length: 1,
      convRule: rule2
    }, {
      start: 67872,
      length: 26,
      convRule: rule14
    }, {
      start: 67903,
      length: 1,
      convRule: rule2
    }, {
      start: 67968,
      length: 56,
      convRule: rule14
    }, {
      start: 68028,
      length: 2,
      convRule: rule17
    }, {
      start: 68030,
      length: 2,
      convRule: rule14
    }, {
      start: 68032,
      length: 16,
      convRule: rule17
    }, {
      start: 68050,
      length: 46,
      convRule: rule17
    }, {
      start: 68096,
      length: 1,
      convRule: rule14
    }, {
      start: 68097,
      length: 3,
      convRule: rule92
    }, {
      start: 68101,
      length: 2,
      convRule: rule92
    }, {
      start: 68108,
      length: 4,
      convRule: rule92
    }, {
      start: 68112,
      length: 4,
      convRule: rule14
    }, {
      start: 68117,
      length: 3,
      convRule: rule14
    }, {
      start: 68121,
      length: 29,
      convRule: rule14
    }, {
      start: 68152,
      length: 3,
      convRule: rule92
    }, {
      start: 68159,
      length: 1,
      convRule: rule92
    }, {
      start: 68160,
      length: 9,
      convRule: rule17
    }, {
      start: 68176,
      length: 9,
      convRule: rule2
    }, {
      start: 68192,
      length: 29,
      convRule: rule14
    }, {
      start: 68221,
      length: 2,
      convRule: rule17
    }, {
      start: 68223,
      length: 1,
      convRule: rule2
    }, {
      start: 68224,
      length: 29,
      convRule: rule14
    }, {
      start: 68253,
      length: 3,
      convRule: rule17
    }, {
      start: 68288,
      length: 8,
      convRule: rule14
    }, {
      start: 68296,
      length: 1,
      convRule: rule13
    }, {
      start: 68297,
      length: 28,
      convRule: rule14
    }, {
      start: 68325,
      length: 2,
      convRule: rule92
    }, {
      start: 68331,
      length: 5,
      convRule: rule17
    }, {
      start: 68336,
      length: 7,
      convRule: rule2
    }, {
      start: 68352,
      length: 54,
      convRule: rule14
    }, {
      start: 68409,
      length: 7,
      convRule: rule2
    }, {
      start: 68416,
      length: 22,
      convRule: rule14
    }, {
      start: 68440,
      length: 8,
      convRule: rule17
    }, {
      start: 68448,
      length: 19,
      convRule: rule14
    }, {
      start: 68472,
      length: 8,
      convRule: rule17
    }, {
      start: 68480,
      length: 18,
      convRule: rule14
    }, {
      start: 68505,
      length: 4,
      convRule: rule2
    }, {
      start: 68521,
      length: 7,
      convRule: rule17
    }, {
      start: 68608,
      length: 73,
      convRule: rule14
    }, {
      start: 68736,
      length: 51,
      convRule: rule97
    }, {
      start: 68800,
      length: 51,
      convRule: rule102
    }, {
      start: 68858,
      length: 6,
      convRule: rule17
    }, {
      start: 68864,
      length: 36,
      convRule: rule14
    }, {
      start: 68900,
      length: 4,
      convRule: rule92
    }, {
      start: 68912,
      length: 10,
      convRule: rule8
    }, {
      start: 69216,
      length: 31,
      convRule: rule17
    }, {
      start: 69248,
      length: 42,
      convRule: rule14
    }, {
      start: 69291,
      length: 2,
      convRule: rule92
    }, {
      start: 69293,
      length: 1,
      convRule: rule7
    }, {
      start: 69296,
      length: 2,
      convRule: rule14
    }, {
      start: 69376,
      length: 29,
      convRule: rule14
    }, {
      start: 69405,
      length: 10,
      convRule: rule17
    }, {
      start: 69415,
      length: 1,
      convRule: rule14
    }, {
      start: 69424,
      length: 22,
      convRule: rule14
    }, {
      start: 69446,
      length: 11,
      convRule: rule92
    }, {
      start: 69457,
      length: 4,
      convRule: rule17
    }, {
      start: 69461,
      length: 5,
      convRule: rule2
    }, {
      start: 69552,
      length: 21,
      convRule: rule14
    }, {
      start: 69573,
      length: 7,
      convRule: rule17
    }, {
      start: 69600,
      length: 23,
      convRule: rule14
    }, {
      start: 69632,
      length: 1,
      convRule: rule124
    }, {
      start: 69633,
      length: 1,
      convRule: rule92
    }, {
      start: 69634,
      length: 1,
      convRule: rule124
    }, {
      start: 69635,
      length: 53,
      convRule: rule14
    }, {
      start: 69688,
      length: 15,
      convRule: rule92
    }, {
      start: 69703,
      length: 7,
      convRule: rule2
    }, {
      start: 69714,
      length: 20,
      convRule: rule17
    }, {
      start: 69734,
      length: 10,
      convRule: rule8
    }, {
      start: 69759,
      length: 3,
      convRule: rule92
    }, {
      start: 69762,
      length: 1,
      convRule: rule124
    }, {
      start: 69763,
      length: 45,
      convRule: rule14
    }, {
      start: 69808,
      length: 3,
      convRule: rule124
    }, {
      start: 69811,
      length: 4,
      convRule: rule92
    }, {
      start: 69815,
      length: 2,
      convRule: rule124
    }, {
      start: 69817,
      length: 2,
      convRule: rule92
    }, {
      start: 69819,
      length: 2,
      convRule: rule2
    }, {
      start: 69821,
      length: 1,
      convRule: rule16
    }, {
      start: 69822,
      length: 4,
      convRule: rule2
    }, {
      start: 69837,
      length: 1,
      convRule: rule16
    }, {
      start: 69840,
      length: 25,
      convRule: rule14
    }, {
      start: 69872,
      length: 10,
      convRule: rule8
    }, {
      start: 69888,
      length: 3,
      convRule: rule92
    }, {
      start: 69891,
      length: 36,
      convRule: rule14
    }, {
      start: 69927,
      length: 5,
      convRule: rule92
    }, {
      start: 69932,
      length: 1,
      convRule: rule124
    }, {
      start: 69933,
      length: 8,
      convRule: rule92
    }, {
      start: 69942,
      length: 10,
      convRule: rule8
    }, {
      start: 69952,
      length: 4,
      convRule: rule2
    }, {
      start: 69956,
      length: 1,
      convRule: rule14
    }, {
      start: 69957,
      length: 2,
      convRule: rule124
    }, {
      start: 69959,
      length: 1,
      convRule: rule14
    }, {
      start: 69968,
      length: 35,
      convRule: rule14
    }, {
      start: 70003,
      length: 1,
      convRule: rule92
    }, {
      start: 70004,
      length: 2,
      convRule: rule2
    }, {
      start: 70006,
      length: 1,
      convRule: rule14
    }, {
      start: 70016,
      length: 2,
      convRule: rule92
    }, {
      start: 70018,
      length: 1,
      convRule: rule124
    }, {
      start: 70019,
      length: 48,
      convRule: rule14
    }, {
      start: 70067,
      length: 3,
      convRule: rule124
    }, {
      start: 70070,
      length: 9,
      convRule: rule92
    }, {
      start: 70079,
      length: 2,
      convRule: rule124
    }, {
      start: 70081,
      length: 4,
      convRule: rule14
    }, {
      start: 70085,
      length: 4,
      convRule: rule2
    }, {
      start: 70089,
      length: 4,
      convRule: rule92
    }, {
      start: 70093,
      length: 1,
      convRule: rule2
    }, {
      start: 70094,
      length: 1,
      convRule: rule124
    }, {
      start: 70095,
      length: 1,
      convRule: rule92
    }, {
      start: 70096,
      length: 10,
      convRule: rule8
    }, {
      start: 70106,
      length: 1,
      convRule: rule14
    }, {
      start: 70107,
      length: 1,
      convRule: rule2
    }, {
      start: 70108,
      length: 1,
      convRule: rule14
    }, {
      start: 70109,
      length: 3,
      convRule: rule2
    }, {
      start: 70113,
      length: 20,
      convRule: rule17
    }, {
      start: 70144,
      length: 18,
      convRule: rule14
    }, {
      start: 70163,
      length: 25,
      convRule: rule14
    }, {
      start: 70188,
      length: 3,
      convRule: rule124
    }, {
      start: 70191,
      length: 3,
      convRule: rule92
    }, {
      start: 70194,
      length: 2,
      convRule: rule124
    }, {
      start: 70196,
      length: 1,
      convRule: rule92
    }, {
      start: 70197,
      length: 1,
      convRule: rule124
    }, {
      start: 70198,
      length: 2,
      convRule: rule92
    }, {
      start: 70200,
      length: 6,
      convRule: rule2
    }, {
      start: 70206,
      length: 1,
      convRule: rule92
    }, {
      start: 70272,
      length: 7,
      convRule: rule14
    }, {
      start: 70280,
      length: 1,
      convRule: rule14
    }, {
      start: 70282,
      length: 4,
      convRule: rule14
    }, {
      start: 70287,
      length: 15,
      convRule: rule14
    }, {
      start: 70303,
      length: 10,
      convRule: rule14
    }, {
      start: 70313,
      length: 1,
      convRule: rule2
    }, {
      start: 70320,
      length: 47,
      convRule: rule14
    }, {
      start: 70367,
      length: 1,
      convRule: rule92
    }, {
      start: 70368,
      length: 3,
      convRule: rule124
    }, {
      start: 70371,
      length: 8,
      convRule: rule92
    }, {
      start: 70384,
      length: 10,
      convRule: rule8
    }, {
      start: 70400,
      length: 2,
      convRule: rule92
    }, {
      start: 70402,
      length: 2,
      convRule: rule124
    }, {
      start: 70405,
      length: 8,
      convRule: rule14
    }, {
      start: 70415,
      length: 2,
      convRule: rule14
    }, {
      start: 70419,
      length: 22,
      convRule: rule14
    }, {
      start: 70442,
      length: 7,
      convRule: rule14
    }, {
      start: 70450,
      length: 2,
      convRule: rule14
    }, {
      start: 70453,
      length: 5,
      convRule: rule14
    }, {
      start: 70459,
      length: 2,
      convRule: rule92
    }, {
      start: 70461,
      length: 1,
      convRule: rule14
    }, {
      start: 70462,
      length: 2,
      convRule: rule124
    }, {
      start: 70464,
      length: 1,
      convRule: rule92
    }, {
      start: 70465,
      length: 4,
      convRule: rule124
    }, {
      start: 70471,
      length: 2,
      convRule: rule124
    }, {
      start: 70475,
      length: 3,
      convRule: rule124
    }, {
      start: 70480,
      length: 1,
      convRule: rule14
    }, {
      start: 70487,
      length: 1,
      convRule: rule124
    }, {
      start: 70493,
      length: 5,
      convRule: rule14
    }, {
      start: 70498,
      length: 2,
      convRule: rule124
    }, {
      start: 70502,
      length: 7,
      convRule: rule92
    }, {
      start: 70512,
      length: 5,
      convRule: rule92
    }, {
      start: 70656,
      length: 53,
      convRule: rule14
    }, {
      start: 70709,
      length: 3,
      convRule: rule124
    }, {
      start: 70712,
      length: 8,
      convRule: rule92
    }, {
      start: 70720,
      length: 2,
      convRule: rule124
    }, {
      start: 70722,
      length: 3,
      convRule: rule92
    }, {
      start: 70725,
      length: 1,
      convRule: rule124
    }, {
      start: 70726,
      length: 1,
      convRule: rule92
    }, {
      start: 70727,
      length: 4,
      convRule: rule14
    }, {
      start: 70731,
      length: 5,
      convRule: rule2
    }, {
      start: 70736,
      length: 10,
      convRule: rule8
    }, {
      start: 70746,
      length: 2,
      convRule: rule2
    }, {
      start: 70749,
      length: 1,
      convRule: rule2
    }, {
      start: 70750,
      length: 1,
      convRule: rule92
    }, {
      start: 70751,
      length: 3,
      convRule: rule14
    }, {
      start: 70784,
      length: 48,
      convRule: rule14
    }, {
      start: 70832,
      length: 3,
      convRule: rule124
    }, {
      start: 70835,
      length: 6,
      convRule: rule92
    }, {
      start: 70841,
      length: 1,
      convRule: rule124
    }, {
      start: 70842,
      length: 1,
      convRule: rule92
    }, {
      start: 70843,
      length: 4,
      convRule: rule124
    }, {
      start: 70847,
      length: 2,
      convRule: rule92
    }, {
      start: 70849,
      length: 1,
      convRule: rule124
    }, {
      start: 70850,
      length: 2,
      convRule: rule92
    }, {
      start: 70852,
      length: 2,
      convRule: rule14
    }, {
      start: 70854,
      length: 1,
      convRule: rule2
    }, {
      start: 70855,
      length: 1,
      convRule: rule14
    }, {
      start: 70864,
      length: 10,
      convRule: rule8
    }, {
      start: 71040,
      length: 47,
      convRule: rule14
    }, {
      start: 71087,
      length: 3,
      convRule: rule124
    }, {
      start: 71090,
      length: 4,
      convRule: rule92
    }, {
      start: 71096,
      length: 4,
      convRule: rule124
    }, {
      start: 71100,
      length: 2,
      convRule: rule92
    }, {
      start: 71102,
      length: 1,
      convRule: rule124
    }, {
      start: 71103,
      length: 2,
      convRule: rule92
    }, {
      start: 71105,
      length: 23,
      convRule: rule2
    }, {
      start: 71128,
      length: 4,
      convRule: rule14
    }, {
      start: 71132,
      length: 2,
      convRule: rule92
    }, {
      start: 71168,
      length: 48,
      convRule: rule14
    }, {
      start: 71216,
      length: 3,
      convRule: rule124
    }, {
      start: 71219,
      length: 8,
      convRule: rule92
    }, {
      start: 71227,
      length: 2,
      convRule: rule124
    }, {
      start: 71229,
      length: 1,
      convRule: rule92
    }, {
      start: 71230,
      length: 1,
      convRule: rule124
    }, {
      start: 71231,
      length: 2,
      convRule: rule92
    }, {
      start: 71233,
      length: 3,
      convRule: rule2
    }, {
      start: 71236,
      length: 1,
      convRule: rule14
    }, {
      start: 71248,
      length: 10,
      convRule: rule8
    }, {
      start: 71264,
      length: 13,
      convRule: rule2
    }, {
      start: 71296,
      length: 43,
      convRule: rule14
    }, {
      start: 71339,
      length: 1,
      convRule: rule92
    }, {
      start: 71340,
      length: 1,
      convRule: rule124
    }, {
      start: 71341,
      length: 1,
      convRule: rule92
    }, {
      start: 71342,
      length: 2,
      convRule: rule124
    }, {
      start: 71344,
      length: 6,
      convRule: rule92
    }, {
      start: 71350,
      length: 1,
      convRule: rule124
    }, {
      start: 71351,
      length: 1,
      convRule: rule92
    }, {
      start: 71352,
      length: 1,
      convRule: rule14
    }, {
      start: 71360,
      length: 10,
      convRule: rule8
    }, {
      start: 71424,
      length: 27,
      convRule: rule14
    }, {
      start: 71453,
      length: 3,
      convRule: rule92
    }, {
      start: 71456,
      length: 2,
      convRule: rule124
    }, {
      start: 71458,
      length: 4,
      convRule: rule92
    }, {
      start: 71462,
      length: 1,
      convRule: rule124
    }, {
      start: 71463,
      length: 5,
      convRule: rule92
    }, {
      start: 71472,
      length: 10,
      convRule: rule8
    }, {
      start: 71482,
      length: 2,
      convRule: rule17
    }, {
      start: 71484,
      length: 3,
      convRule: rule2
    }, {
      start: 71487,
      length: 1,
      convRule: rule13
    }, {
      start: 71680,
      length: 44,
      convRule: rule14
    }, {
      start: 71724,
      length: 3,
      convRule: rule124
    }, {
      start: 71727,
      length: 9,
      convRule: rule92
    }, {
      start: 71736,
      length: 1,
      convRule: rule124
    }, {
      start: 71737,
      length: 2,
      convRule: rule92
    }, {
      start: 71739,
      length: 1,
      convRule: rule2
    }, {
      start: 71840,
      length: 32,
      convRule: rule9
    }, {
      start: 71872,
      length: 32,
      convRule: rule12
    }, {
      start: 71904,
      length: 10,
      convRule: rule8
    }, {
      start: 71914,
      length: 9,
      convRule: rule17
    }, {
      start: 71935,
      length: 8,
      convRule: rule14
    }, {
      start: 71945,
      length: 1,
      convRule: rule14
    }, {
      start: 71948,
      length: 8,
      convRule: rule14
    }, {
      start: 71957,
      length: 2,
      convRule: rule14
    }, {
      start: 71960,
      length: 24,
      convRule: rule14
    }, {
      start: 71984,
      length: 6,
      convRule: rule124
    }, {
      start: 71991,
      length: 2,
      convRule: rule124
    }, {
      start: 71995,
      length: 2,
      convRule: rule92
    }, {
      start: 71997,
      length: 1,
      convRule: rule124
    }, {
      start: 71998,
      length: 1,
      convRule: rule92
    }, {
      start: 71999,
      length: 1,
      convRule: rule14
    }, {
      start: 72e3,
      length: 1,
      convRule: rule124
    }, {
      start: 72001,
      length: 1,
      convRule: rule14
    }, {
      start: 72002,
      length: 1,
      convRule: rule124
    }, {
      start: 72003,
      length: 1,
      convRule: rule92
    }, {
      start: 72004,
      length: 3,
      convRule: rule2
    }, {
      start: 72016,
      length: 10,
      convRule: rule8
    }, {
      start: 72096,
      length: 8,
      convRule: rule14
    }, {
      start: 72106,
      length: 39,
      convRule: rule14
    }, {
      start: 72145,
      length: 3,
      convRule: rule124
    }, {
      start: 72148,
      length: 4,
      convRule: rule92
    }, {
      start: 72154,
      length: 2,
      convRule: rule92
    }, {
      start: 72156,
      length: 4,
      convRule: rule124
    }, {
      start: 72160,
      length: 1,
      convRule: rule92
    }, {
      start: 72161,
      length: 1,
      convRule: rule14
    }, {
      start: 72162,
      length: 1,
      convRule: rule2
    }, {
      start: 72163,
      length: 1,
      convRule: rule14
    }, {
      start: 72164,
      length: 1,
      convRule: rule124
    }, {
      start: 72192,
      length: 1,
      convRule: rule14
    }, {
      start: 72193,
      length: 10,
      convRule: rule92
    }, {
      start: 72203,
      length: 40,
      convRule: rule14
    }, {
      start: 72243,
      length: 6,
      convRule: rule92
    }, {
      start: 72249,
      length: 1,
      convRule: rule124
    }, {
      start: 72250,
      length: 1,
      convRule: rule14
    }, {
      start: 72251,
      length: 4,
      convRule: rule92
    }, {
      start: 72255,
      length: 8,
      convRule: rule2
    }, {
      start: 72263,
      length: 1,
      convRule: rule92
    }, {
      start: 72272,
      length: 1,
      convRule: rule14
    }, {
      start: 72273,
      length: 6,
      convRule: rule92
    }, {
      start: 72279,
      length: 2,
      convRule: rule124
    }, {
      start: 72281,
      length: 3,
      convRule: rule92
    }, {
      start: 72284,
      length: 46,
      convRule: rule14
    }, {
      start: 72330,
      length: 13,
      convRule: rule92
    }, {
      start: 72343,
      length: 1,
      convRule: rule124
    }, {
      start: 72344,
      length: 2,
      convRule: rule92
    }, {
      start: 72346,
      length: 3,
      convRule: rule2
    }, {
      start: 72349,
      length: 1,
      convRule: rule14
    }, {
      start: 72350,
      length: 5,
      convRule: rule2
    }, {
      start: 72384,
      length: 57,
      convRule: rule14
    }, {
      start: 72704,
      length: 9,
      convRule: rule14
    }, {
      start: 72714,
      length: 37,
      convRule: rule14
    }, {
      start: 72751,
      length: 1,
      convRule: rule124
    }, {
      start: 72752,
      length: 7,
      convRule: rule92
    }, {
      start: 72760,
      length: 6,
      convRule: rule92
    }, {
      start: 72766,
      length: 1,
      convRule: rule124
    }, {
      start: 72767,
      length: 1,
      convRule: rule92
    }, {
      start: 72768,
      length: 1,
      convRule: rule14
    }, {
      start: 72769,
      length: 5,
      convRule: rule2
    }, {
      start: 72784,
      length: 10,
      convRule: rule8
    }, {
      start: 72794,
      length: 19,
      convRule: rule17
    }, {
      start: 72816,
      length: 2,
      convRule: rule2
    }, {
      start: 72818,
      length: 30,
      convRule: rule14
    }, {
      start: 72850,
      length: 22,
      convRule: rule92
    }, {
      start: 72873,
      length: 1,
      convRule: rule124
    }, {
      start: 72874,
      length: 7,
      convRule: rule92
    }, {
      start: 72881,
      length: 1,
      convRule: rule124
    }, {
      start: 72882,
      length: 2,
      convRule: rule92
    }, {
      start: 72884,
      length: 1,
      convRule: rule124
    }, {
      start: 72885,
      length: 2,
      convRule: rule92
    }, {
      start: 72960,
      length: 7,
      convRule: rule14
    }, {
      start: 72968,
      length: 2,
      convRule: rule14
    }, {
      start: 72971,
      length: 38,
      convRule: rule14
    }, {
      start: 73009,
      length: 6,
      convRule: rule92
    }, {
      start: 73018,
      length: 1,
      convRule: rule92
    }, {
      start: 73020,
      length: 2,
      convRule: rule92
    }, {
      start: 73023,
      length: 7,
      convRule: rule92
    }, {
      start: 73030,
      length: 1,
      convRule: rule14
    }, {
      start: 73031,
      length: 1,
      convRule: rule92
    }, {
      start: 73040,
      length: 10,
      convRule: rule8
    }, {
      start: 73056,
      length: 6,
      convRule: rule14
    }, {
      start: 73063,
      length: 2,
      convRule: rule14
    }, {
      start: 73066,
      length: 32,
      convRule: rule14
    }, {
      start: 73098,
      length: 5,
      convRule: rule124
    }, {
      start: 73104,
      length: 2,
      convRule: rule92
    }, {
      start: 73107,
      length: 2,
      convRule: rule124
    }, {
      start: 73109,
      length: 1,
      convRule: rule92
    }, {
      start: 73110,
      length: 1,
      convRule: rule124
    }, {
      start: 73111,
      length: 1,
      convRule: rule92
    }, {
      start: 73112,
      length: 1,
      convRule: rule14
    }, {
      start: 73120,
      length: 10,
      convRule: rule8
    }, {
      start: 73440,
      length: 19,
      convRule: rule14
    }, {
      start: 73459,
      length: 2,
      convRule: rule92
    }, {
      start: 73461,
      length: 2,
      convRule: rule124
    }, {
      start: 73463,
      length: 2,
      convRule: rule2
    }, {
      start: 73648,
      length: 1,
      convRule: rule14
    }, {
      start: 73664,
      length: 21,
      convRule: rule17
    }, {
      start: 73685,
      length: 8,
      convRule: rule13
    }, {
      start: 73693,
      length: 4,
      convRule: rule3
    }, {
      start: 73697,
      length: 17,
      convRule: rule13
    }, {
      start: 73727,
      length: 1,
      convRule: rule2
    }, {
      start: 73728,
      length: 922,
      convRule: rule14
    }, {
      start: 74752,
      length: 111,
      convRule: rule128
    }, {
      start: 74864,
      length: 5,
      convRule: rule2
    }, {
      start: 74880,
      length: 196,
      convRule: rule14
    }, {
      start: 77824,
      length: 1071,
      convRule: rule14
    }, {
      start: 78896,
      length: 9,
      convRule: rule16
    }, {
      start: 82944,
      length: 583,
      convRule: rule14
    }, {
      start: 92160,
      length: 569,
      convRule: rule14
    }, {
      start: 92736,
      length: 31,
      convRule: rule14
    }, {
      start: 92768,
      length: 10,
      convRule: rule8
    }, {
      start: 92782,
      length: 2,
      convRule: rule2
    }, {
      start: 92880,
      length: 30,
      convRule: rule14
    }, {
      start: 92912,
      length: 5,
      convRule: rule92
    }, {
      start: 92917,
      length: 1,
      convRule: rule2
    }, {
      start: 92928,
      length: 48,
      convRule: rule14
    }, {
      start: 92976,
      length: 7,
      convRule: rule92
    }, {
      start: 92983,
      length: 5,
      convRule: rule2
    }, {
      start: 92988,
      length: 4,
      convRule: rule13
    }, {
      start: 92992,
      length: 4,
      convRule: rule91
    }, {
      start: 92996,
      length: 1,
      convRule: rule2
    }, {
      start: 92997,
      length: 1,
      convRule: rule13
    }, {
      start: 93008,
      length: 10,
      convRule: rule8
    }, {
      start: 93019,
      length: 7,
      convRule: rule17
    }, {
      start: 93027,
      length: 21,
      convRule: rule14
    }, {
      start: 93053,
      length: 19,
      convRule: rule14
    }, {
      start: 93760,
      length: 32,
      convRule: rule9
    }, {
      start: 93792,
      length: 32,
      convRule: rule12
    }, {
      start: 93824,
      length: 23,
      convRule: rule17
    }, {
      start: 93847,
      length: 4,
      convRule: rule2
    }, {
      start: 93952,
      length: 75,
      convRule: rule14
    }, {
      start: 94031,
      length: 1,
      convRule: rule92
    }, {
      start: 94032,
      length: 1,
      convRule: rule14
    }, {
      start: 94033,
      length: 55,
      convRule: rule124
    }, {
      start: 94095,
      length: 4,
      convRule: rule92
    }, {
      start: 94099,
      length: 13,
      convRule: rule91
    }, {
      start: 94176,
      length: 2,
      convRule: rule91
    }, {
      start: 94178,
      length: 1,
      convRule: rule2
    }, {
      start: 94179,
      length: 1,
      convRule: rule91
    }, {
      start: 94180,
      length: 1,
      convRule: rule92
    }, {
      start: 94192,
      length: 2,
      convRule: rule124
    }, {
      start: 94208,
      length: 6136,
      convRule: rule14
    }, {
      start: 100352,
      length: 1238,
      convRule: rule14
    }, {
      start: 101632,
      length: 9,
      convRule: rule14
    }, {
      start: 110592,
      length: 287,
      convRule: rule14
    }, {
      start: 110928,
      length: 3,
      convRule: rule14
    }, {
      start: 110948,
      length: 4,
      convRule: rule14
    }, {
      start: 110960,
      length: 396,
      convRule: rule14
    }, {
      start: 113664,
      length: 107,
      convRule: rule14
    }, {
      start: 113776,
      length: 13,
      convRule: rule14
    }, {
      start: 113792,
      length: 9,
      convRule: rule14
    }, {
      start: 113808,
      length: 10,
      convRule: rule14
    }, {
      start: 113820,
      length: 1,
      convRule: rule13
    }, {
      start: 113821,
      length: 2,
      convRule: rule92
    }, {
      start: 113823,
      length: 1,
      convRule: rule2
    }, {
      start: 113824,
      length: 4,
      convRule: rule16
    }, {
      start: 118784,
      length: 246,
      convRule: rule13
    }, {
      start: 119040,
      length: 39,
      convRule: rule13
    }, {
      start: 119081,
      length: 60,
      convRule: rule13
    }, {
      start: 119141,
      length: 2,
      convRule: rule124
    }, {
      start: 119143,
      length: 3,
      convRule: rule92
    }, {
      start: 119146,
      length: 3,
      convRule: rule13
    }, {
      start: 119149,
      length: 6,
      convRule: rule124
    }, {
      start: 119155,
      length: 8,
      convRule: rule16
    }, {
      start: 119163,
      length: 8,
      convRule: rule92
    }, {
      start: 119171,
      length: 2,
      convRule: rule13
    }, {
      start: 119173,
      length: 7,
      convRule: rule92
    }, {
      start: 119180,
      length: 30,
      convRule: rule13
    }, {
      start: 119210,
      length: 4,
      convRule: rule92
    }, {
      start: 119214,
      length: 59,
      convRule: rule13
    }, {
      start: 119296,
      length: 66,
      convRule: rule13
    }, {
      start: 119362,
      length: 3,
      convRule: rule92
    }, {
      start: 119365,
      length: 1,
      convRule: rule13
    }, {
      start: 119520,
      length: 20,
      convRule: rule17
    }, {
      start: 119552,
      length: 87,
      convRule: rule13
    }, {
      start: 119648,
      length: 25,
      convRule: rule17
    }, {
      start: 119808,
      length: 26,
      convRule: rule107
    }, {
      start: 119834,
      length: 26,
      convRule: rule20
    }, {
      start: 119860,
      length: 26,
      convRule: rule107
    }, {
      start: 119886,
      length: 7,
      convRule: rule20
    }, {
      start: 119894,
      length: 18,
      convRule: rule20
    }, {
      start: 119912,
      length: 26,
      convRule: rule107
    }, {
      start: 119938,
      length: 26,
      convRule: rule20
    }, {
      start: 119964,
      length: 1,
      convRule: rule107
    }, {
      start: 119966,
      length: 2,
      convRule: rule107
    }, {
      start: 119970,
      length: 1,
      convRule: rule107
    }, {
      start: 119973,
      length: 2,
      convRule: rule107
    }, {
      start: 119977,
      length: 4,
      convRule: rule107
    }, {
      start: 119982,
      length: 8,
      convRule: rule107
    }, {
      start: 119990,
      length: 4,
      convRule: rule20
    }, {
      start: 119995,
      length: 1,
      convRule: rule20
    }, {
      start: 119997,
      length: 7,
      convRule: rule20
    }, {
      start: 120005,
      length: 11,
      convRule: rule20
    }, {
      start: 120016,
      length: 26,
      convRule: rule107
    }, {
      start: 120042,
      length: 26,
      convRule: rule20
    }, {
      start: 120068,
      length: 2,
      convRule: rule107
    }, {
      start: 120071,
      length: 4,
      convRule: rule107
    }, {
      start: 120077,
      length: 8,
      convRule: rule107
    }, {
      start: 120086,
      length: 7,
      convRule: rule107
    }, {
      start: 120094,
      length: 26,
      convRule: rule20
    }, {
      start: 120120,
      length: 2,
      convRule: rule107
    }, {
      start: 120123,
      length: 4,
      convRule: rule107
    }, {
      start: 120128,
      length: 5,
      convRule: rule107
    }, {
      start: 120134,
      length: 1,
      convRule: rule107
    }, {
      start: 120138,
      length: 7,
      convRule: rule107
    }, {
      start: 120146,
      length: 26,
      convRule: rule20
    }, {
      start: 120172,
      length: 26,
      convRule: rule107
    }, {
      start: 120198,
      length: 26,
      convRule: rule20
    }, {
      start: 120224,
      length: 26,
      convRule: rule107
    }, {
      start: 120250,
      length: 26,
      convRule: rule20
    }, {
      start: 120276,
      length: 26,
      convRule: rule107
    }, {
      start: 120302,
      length: 26,
      convRule: rule20
    }, {
      start: 120328,
      length: 26,
      convRule: rule107
    }, {
      start: 120354,
      length: 26,
      convRule: rule20
    }, {
      start: 120380,
      length: 26,
      convRule: rule107
    }, {
      start: 120406,
      length: 26,
      convRule: rule20
    }, {
      start: 120432,
      length: 26,
      convRule: rule107
    }, {
      start: 120458,
      length: 28,
      convRule: rule20
    }, {
      start: 120488,
      length: 25,
      convRule: rule107
    }, {
      start: 120513,
      length: 1,
      convRule: rule6
    }, {
      start: 120514,
      length: 25,
      convRule: rule20
    }, {
      start: 120539,
      length: 1,
      convRule: rule6
    }, {
      start: 120540,
      length: 6,
      convRule: rule20
    }, {
      start: 120546,
      length: 25,
      convRule: rule107
    }, {
      start: 120571,
      length: 1,
      convRule: rule6
    }, {
      start: 120572,
      length: 25,
      convRule: rule20
    }, {
      start: 120597,
      length: 1,
      convRule: rule6
    }, {
      start: 120598,
      length: 6,
      convRule: rule20
    }, {
      start: 120604,
      length: 25,
      convRule: rule107
    }, {
      start: 120629,
      length: 1,
      convRule: rule6
    }, {
      start: 120630,
      length: 25,
      convRule: rule20
    }, {
      start: 120655,
      length: 1,
      convRule: rule6
    }, {
      start: 120656,
      length: 6,
      convRule: rule20
    }, {
      start: 120662,
      length: 25,
      convRule: rule107
    }, {
      start: 120687,
      length: 1,
      convRule: rule6
    }, {
      start: 120688,
      length: 25,
      convRule: rule20
    }, {
      start: 120713,
      length: 1,
      convRule: rule6
    }, {
      start: 120714,
      length: 6,
      convRule: rule20
    }, {
      start: 120720,
      length: 25,
      convRule: rule107
    }, {
      start: 120745,
      length: 1,
      convRule: rule6
    }, {
      start: 120746,
      length: 25,
      convRule: rule20
    }, {
      start: 120771,
      length: 1,
      convRule: rule6
    }, {
      start: 120772,
      length: 6,
      convRule: rule20
    }, {
      start: 120778,
      length: 1,
      convRule: rule107
    }, {
      start: 120779,
      length: 1,
      convRule: rule20
    }, {
      start: 120782,
      length: 50,
      convRule: rule8
    }, {
      start: 120832,
      length: 512,
      convRule: rule13
    }, {
      start: 121344,
      length: 55,
      convRule: rule92
    }, {
      start: 121399,
      length: 4,
      convRule: rule13
    }, {
      start: 121403,
      length: 50,
      convRule: rule92
    }, {
      start: 121453,
      length: 8,
      convRule: rule13
    }, {
      start: 121461,
      length: 1,
      convRule: rule92
    }, {
      start: 121462,
      length: 14,
      convRule: rule13
    }, {
      start: 121476,
      length: 1,
      convRule: rule92
    }, {
      start: 121477,
      length: 2,
      convRule: rule13
    }, {
      start: 121479,
      length: 5,
      convRule: rule2
    }, {
      start: 121499,
      length: 5,
      convRule: rule92
    }, {
      start: 121505,
      length: 15,
      convRule: rule92
    }, {
      start: 122880,
      length: 7,
      convRule: rule92
    }, {
      start: 122888,
      length: 17,
      convRule: rule92
    }, {
      start: 122907,
      length: 7,
      convRule: rule92
    }, {
      start: 122915,
      length: 2,
      convRule: rule92
    }, {
      start: 122918,
      length: 5,
      convRule: rule92
    }, {
      start: 123136,
      length: 45,
      convRule: rule14
    }, {
      start: 123184,
      length: 7,
      convRule: rule92
    }, {
      start: 123191,
      length: 7,
      convRule: rule91
    }, {
      start: 123200,
      length: 10,
      convRule: rule8
    }, {
      start: 123214,
      length: 1,
      convRule: rule14
    }, {
      start: 123215,
      length: 1,
      convRule: rule13
    }, {
      start: 123584,
      length: 44,
      convRule: rule14
    }, {
      start: 123628,
      length: 4,
      convRule: rule92
    }, {
      start: 123632,
      length: 10,
      convRule: rule8
    }, {
      start: 123647,
      length: 1,
      convRule: rule3
    }, {
      start: 124928,
      length: 197,
      convRule: rule14
    }, {
      start: 125127,
      length: 9,
      convRule: rule17
    }, {
      start: 125136,
      length: 7,
      convRule: rule92
    }, {
      start: 125184,
      length: 34,
      convRule: rule203
    }, {
      start: 125218,
      length: 34,
      convRule: rule204
    }, {
      start: 125252,
      length: 7,
      convRule: rule92
    }, {
      start: 125259,
      length: 1,
      convRule: rule91
    }, {
      start: 125264,
      length: 10,
      convRule: rule8
    }, {
      start: 125278,
      length: 2,
      convRule: rule2
    }, {
      start: 126065,
      length: 59,
      convRule: rule17
    }, {
      start: 126124,
      length: 1,
      convRule: rule13
    }, {
      start: 126125,
      length: 3,
      convRule: rule17
    }, {
      start: 126128,
      length: 1,
      convRule: rule3
    }, {
      start: 126129,
      length: 4,
      convRule: rule17
    }, {
      start: 126209,
      length: 45,
      convRule: rule17
    }, {
      start: 126254,
      length: 1,
      convRule: rule13
    }, {
      start: 126255,
      length: 15,
      convRule: rule17
    }, {
      start: 126464,
      length: 4,
      convRule: rule14
    }, {
      start: 126469,
      length: 27,
      convRule: rule14
    }, {
      start: 126497,
      length: 2,
      convRule: rule14
    }, {
      start: 126500,
      length: 1,
      convRule: rule14
    }, {
      start: 126503,
      length: 1,
      convRule: rule14
    }, {
      start: 126505,
      length: 10,
      convRule: rule14
    }, {
      start: 126516,
      length: 4,
      convRule: rule14
    }, {
      start: 126521,
      length: 1,
      convRule: rule14
    }, {
      start: 126523,
      length: 1,
      convRule: rule14
    }, {
      start: 126530,
      length: 1,
      convRule: rule14
    }, {
      start: 126535,
      length: 1,
      convRule: rule14
    }, {
      start: 126537,
      length: 1,
      convRule: rule14
    }, {
      start: 126539,
      length: 1,
      convRule: rule14
    }, {
      start: 126541,
      length: 3,
      convRule: rule14
    }, {
      start: 126545,
      length: 2,
      convRule: rule14
    }, {
      start: 126548,
      length: 1,
      convRule: rule14
    }, {
      start: 126551,
      length: 1,
      convRule: rule14
    }, {
      start: 126553,
      length: 1,
      convRule: rule14
    }, {
      start: 126555,
      length: 1,
      convRule: rule14
    }, {
      start: 126557,
      length: 1,
      convRule: rule14
    }, {
      start: 126559,
      length: 1,
      convRule: rule14
    }, {
      start: 126561,
      length: 2,
      convRule: rule14
    }, {
      start: 126564,
      length: 1,
      convRule: rule14
    }, {
      start: 126567,
      length: 4,
      convRule: rule14
    }, {
      start: 126572,
      length: 7,
      convRule: rule14
    }, {
      start: 126580,
      length: 4,
      convRule: rule14
    }, {
      start: 126585,
      length: 4,
      convRule: rule14
    }, {
      start: 126590,
      length: 1,
      convRule: rule14
    }, {
      start: 126592,
      length: 10,
      convRule: rule14
    }, {
      start: 126603,
      length: 17,
      convRule: rule14
    }, {
      start: 126625,
      length: 3,
      convRule: rule14
    }, {
      start: 126629,
      length: 5,
      convRule: rule14
    }, {
      start: 126635,
      length: 17,
      convRule: rule14
    }, {
      start: 126704,
      length: 2,
      convRule: rule6
    }, {
      start: 126976,
      length: 44,
      convRule: rule13
    }, {
      start: 127024,
      length: 100,
      convRule: rule13
    }, {
      start: 127136,
      length: 15,
      convRule: rule13
    }, {
      start: 127153,
      length: 15,
      convRule: rule13
    }, {
      start: 127169,
      length: 15,
      convRule: rule13
    }, {
      start: 127185,
      length: 37,
      convRule: rule13
    }, {
      start: 127232,
      length: 13,
      convRule: rule17
    }, {
      start: 127245,
      length: 161,
      convRule: rule13
    }, {
      start: 127462,
      length: 29,
      convRule: rule13
    }, {
      start: 127504,
      length: 44,
      convRule: rule13
    }, {
      start: 127552,
      length: 9,
      convRule: rule13
    }, {
      start: 127568,
      length: 2,
      convRule: rule13
    }, {
      start: 127584,
      length: 6,
      convRule: rule13
    }, {
      start: 127744,
      length: 251,
      convRule: rule13
    }, {
      start: 127995,
      length: 5,
      convRule: rule10
    }, {
      start: 128e3,
      length: 728,
      convRule: rule13
    }, {
      start: 128736,
      length: 13,
      convRule: rule13
    }, {
      start: 128752,
      length: 13,
      convRule: rule13
    }, {
      start: 128768,
      length: 116,
      convRule: rule13
    }, {
      start: 128896,
      length: 89,
      convRule: rule13
    }, {
      start: 128992,
      length: 12,
      convRule: rule13
    }, {
      start: 129024,
      length: 12,
      convRule: rule13
    }, {
      start: 129040,
      length: 56,
      convRule: rule13
    }, {
      start: 129104,
      length: 10,
      convRule: rule13
    }, {
      start: 129120,
      length: 40,
      convRule: rule13
    }, {
      start: 129168,
      length: 30,
      convRule: rule13
    }, {
      start: 129200,
      length: 2,
      convRule: rule13
    }, {
      start: 129280,
      length: 121,
      convRule: rule13
    }, {
      start: 129402,
      length: 82,
      convRule: rule13
    }, {
      start: 129485,
      length: 135,
      convRule: rule13
    }, {
      start: 129632,
      length: 14,
      convRule: rule13
    }, {
      start: 129648,
      length: 5,
      convRule: rule13
    }, {
      start: 129656,
      length: 3,
      convRule: rule13
    }, {
      start: 129664,
      length: 7,
      convRule: rule13
    }, {
      start: 129680,
      length: 25,
      convRule: rule13
    }, {
      start: 129712,
      length: 7,
      convRule: rule13
    }, {
      start: 129728,
      length: 3,
      convRule: rule13
    }, {
      start: 129744,
      length: 7,
      convRule: rule13
    }, {
      start: 129792,
      length: 147,
      convRule: rule13
    }, {
      start: 129940,
      length: 55,
      convRule: rule13
    }, {
      start: 130032,
      length: 10,
      convRule: rule8
    }, {
      start: 131072,
      length: 42718,
      convRule: rule14
    }, {
      start: 173824,
      length: 4149,
      convRule: rule14
    }, {
      start: 177984,
      length: 222,
      convRule: rule14
    }, {
      start: 178208,
      length: 5762,
      convRule: rule14
    }, {
      start: 183984,
      length: 7473,
      convRule: rule14
    }, {
      start: 194560,
      length: 542,
      convRule: rule14
    }, {
      start: 196608,
      length: 4939,
      convRule: rule14
    }, {
      start: 917505,
      length: 1,
      convRule: rule16
    }, {
      start: 917536,
      length: 96,
      convRule: rule16
    }, {
      start: 917760,
      length: 240,
      convRule: rule92
    }, {
      start: 983040,
      length: 65534,
      convRule: rule200
    }, {
      start: 1048576,
      length: 65534,
      convRule: rule200
    }];
    checkAttr = function(categories) {
      return function($$char2) {
        var numOfBlocks = function() {
          var $43 = $$char2 < 256;
          if ($43) {
            return numLat1Blocks;
          }
          ;
          return numBlocks;
        }();
        var maybeConversionRule = getRule(allchars)($$char2)(numOfBlocks);
        if (maybeConversionRule instanceof Nothing) {
          return false;
        }
        ;
        if (maybeConversionRule instanceof Just) {
          return isJust(elemIndex2(maybeConversionRule.value0.category)(categories));
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5645, column 5 - line 5647, column 86): " + [maybeConversionRule.constructor.name]);
      };
    };
    uIswalnum = /* @__PURE__ */ checkAttr([gencatLT, gencatLU, gencatLL, gencatLM, gencatLO, gencatMC, gencatME, gencatMN, gencatNO, gencatND, gencatNL]);
    uIswalpha = /* @__PURE__ */ checkAttr([gencatLL, gencatLU, gencatLT, gencatLM, gencatLO]);
    uIswupper = /* @__PURE__ */ checkAttr([gencatLU, gencatLT]);
    compare2 = /* @__PURE__ */ compare(ordInt);
    zeroRec = function(code2) {
      return {
        code: code2,
        lower: [],
        title: [],
        upper: [],
        fold: 0,
        foldFull: []
      };
    };
    rules = [{
      code: 65,
      lower: [],
      title: [],
      upper: [],
      fold: 97,
      foldFull: [97]
    }, {
      code: 66,
      lower: [],
      title: [],
      upper: [],
      fold: 98,
      foldFull: [98]
    }, {
      code: 67,
      lower: [],
      title: [],
      upper: [],
      fold: 99,
      foldFull: [99]
    }, {
      code: 68,
      lower: [],
      title: [],
      upper: [],
      fold: 100,
      foldFull: [100]
    }, {
      code: 69,
      lower: [],
      title: [],
      upper: [],
      fold: 101,
      foldFull: [101]
    }, {
      code: 70,
      lower: [],
      title: [],
      upper: [],
      fold: 102,
      foldFull: [102]
    }, {
      code: 71,
      lower: [],
      title: [],
      upper: [],
      fold: 103,
      foldFull: [103]
    }, {
      code: 72,
      lower: [],
      title: [],
      upper: [],
      fold: 104,
      foldFull: [104]
    }, {
      code: 73,
      lower: [],
      title: [],
      upper: [],
      fold: 105,
      foldFull: [105]
    }, {
      code: 74,
      lower: [],
      title: [],
      upper: [],
      fold: 106,
      foldFull: [106]
    }, {
      code: 75,
      lower: [],
      title: [],
      upper: [],
      fold: 107,
      foldFull: [107]
    }, {
      code: 76,
      lower: [],
      title: [],
      upper: [],
      fold: 108,
      foldFull: [108]
    }, {
      code: 77,
      lower: [],
      title: [],
      upper: [],
      fold: 109,
      foldFull: [109]
    }, {
      code: 78,
      lower: [],
      title: [],
      upper: [],
      fold: 110,
      foldFull: [110]
    }, {
      code: 79,
      lower: [],
      title: [],
      upper: [],
      fold: 111,
      foldFull: [111]
    }, {
      code: 80,
      lower: [],
      title: [],
      upper: [],
      fold: 112,
      foldFull: [112]
    }, {
      code: 81,
      lower: [],
      title: [],
      upper: [],
      fold: 113,
      foldFull: [113]
    }, {
      code: 82,
      lower: [],
      title: [],
      upper: [],
      fold: 114,
      foldFull: [114]
    }, {
      code: 83,
      lower: [],
      title: [],
      upper: [],
      fold: 115,
      foldFull: [115]
    }, {
      code: 84,
      lower: [],
      title: [],
      upper: [],
      fold: 116,
      foldFull: [116]
    }, {
      code: 85,
      lower: [],
      title: [],
      upper: [],
      fold: 117,
      foldFull: [117]
    }, {
      code: 86,
      lower: [],
      title: [],
      upper: [],
      fold: 118,
      foldFull: [118]
    }, {
      code: 87,
      lower: [],
      title: [],
      upper: [],
      fold: 119,
      foldFull: [119]
    }, {
      code: 88,
      lower: [],
      title: [],
      upper: [],
      fold: 120,
      foldFull: [120]
    }, {
      code: 89,
      lower: [],
      title: [],
      upper: [],
      fold: 121,
      foldFull: [121]
    }, {
      code: 90,
      lower: [],
      title: [],
      upper: [],
      fold: 122,
      foldFull: [122]
    }, {
      code: 181,
      lower: [],
      title: [],
      upper: [],
      fold: 956,
      foldFull: [956]
    }, {
      code: 192,
      lower: [],
      title: [],
      upper: [],
      fold: 224,
      foldFull: [224]
    }, {
      code: 193,
      lower: [],
      title: [],
      upper: [],
      fold: 225,
      foldFull: [225]
    }, {
      code: 194,
      lower: [],
      title: [],
      upper: [],
      fold: 226,
      foldFull: [226]
    }, {
      code: 195,
      lower: [],
      title: [],
      upper: [],
      fold: 227,
      foldFull: [227]
    }, {
      code: 196,
      lower: [],
      title: [],
      upper: [],
      fold: 228,
      foldFull: [228]
    }, {
      code: 197,
      lower: [],
      title: [],
      upper: [],
      fold: 229,
      foldFull: [229]
    }, {
      code: 198,
      lower: [],
      title: [],
      upper: [],
      fold: 230,
      foldFull: [230]
    }, {
      code: 199,
      lower: [],
      title: [],
      upper: [],
      fold: 231,
      foldFull: [231]
    }, {
      code: 200,
      lower: [],
      title: [],
      upper: [],
      fold: 232,
      foldFull: [232]
    }, {
      code: 201,
      lower: [],
      title: [],
      upper: [],
      fold: 233,
      foldFull: [233]
    }, {
      code: 202,
      lower: [],
      title: [],
      upper: [],
      fold: 234,
      foldFull: [234]
    }, {
      code: 203,
      lower: [],
      title: [],
      upper: [],
      fold: 235,
      foldFull: [235]
    }, {
      code: 204,
      lower: [],
      title: [],
      upper: [],
      fold: 236,
      foldFull: [236]
    }, {
      code: 205,
      lower: [],
      title: [],
      upper: [],
      fold: 237,
      foldFull: [237]
    }, {
      code: 206,
      lower: [],
      title: [],
      upper: [],
      fold: 238,
      foldFull: [238]
    }, {
      code: 207,
      lower: [],
      title: [],
      upper: [],
      fold: 239,
      foldFull: [239]
    }, {
      code: 208,
      lower: [],
      title: [],
      upper: [],
      fold: 240,
      foldFull: [240]
    }, {
      code: 209,
      lower: [],
      title: [],
      upper: [],
      fold: 241,
      foldFull: [241]
    }, {
      code: 210,
      lower: [],
      title: [],
      upper: [],
      fold: 242,
      foldFull: [242]
    }, {
      code: 211,
      lower: [],
      title: [],
      upper: [],
      fold: 243,
      foldFull: [243]
    }, {
      code: 212,
      lower: [],
      title: [],
      upper: [],
      fold: 244,
      foldFull: [244]
    }, {
      code: 213,
      lower: [],
      title: [],
      upper: [],
      fold: 245,
      foldFull: [245]
    }, {
      code: 214,
      lower: [],
      title: [],
      upper: [],
      fold: 246,
      foldFull: [246]
    }, {
      code: 216,
      lower: [],
      title: [],
      upper: [],
      fold: 248,
      foldFull: [248]
    }, {
      code: 217,
      lower: [],
      title: [],
      upper: [],
      fold: 249,
      foldFull: [249]
    }, {
      code: 218,
      lower: [],
      title: [],
      upper: [],
      fold: 250,
      foldFull: [250]
    }, {
      code: 219,
      lower: [],
      title: [],
      upper: [],
      fold: 251,
      foldFull: [251]
    }, {
      code: 220,
      lower: [],
      title: [],
      upper: [],
      fold: 252,
      foldFull: [252]
    }, {
      code: 221,
      lower: [],
      title: [],
      upper: [],
      fold: 253,
      foldFull: [253]
    }, {
      code: 222,
      lower: [],
      title: [],
      upper: [],
      fold: 254,
      foldFull: [254]
    }, {
      code: 223,
      lower: [223],
      title: [83, 115],
      upper: [83, 83],
      fold: 0,
      foldFull: [115, 115]
    }, {
      code: 223,
      lower: [223],
      title: [83, 115],
      upper: [83, 83],
      fold: 0,
      foldFull: [115, 115]
    }, {
      code: 256,
      lower: [],
      title: [],
      upper: [],
      fold: 257,
      foldFull: [257]
    }, {
      code: 258,
      lower: [],
      title: [],
      upper: [],
      fold: 259,
      foldFull: [259]
    }, {
      code: 260,
      lower: [],
      title: [],
      upper: [],
      fold: 261,
      foldFull: [261]
    }, {
      code: 262,
      lower: [],
      title: [],
      upper: [],
      fold: 263,
      foldFull: [263]
    }, {
      code: 264,
      lower: [],
      title: [],
      upper: [],
      fold: 265,
      foldFull: [265]
    }, {
      code: 266,
      lower: [],
      title: [],
      upper: [],
      fold: 267,
      foldFull: [267]
    }, {
      code: 268,
      lower: [],
      title: [],
      upper: [],
      fold: 269,
      foldFull: [269]
    }, {
      code: 270,
      lower: [],
      title: [],
      upper: [],
      fold: 271,
      foldFull: [271]
    }, {
      code: 272,
      lower: [],
      title: [],
      upper: [],
      fold: 273,
      foldFull: [273]
    }, {
      code: 274,
      lower: [],
      title: [],
      upper: [],
      fold: 275,
      foldFull: [275]
    }, {
      code: 276,
      lower: [],
      title: [],
      upper: [],
      fold: 277,
      foldFull: [277]
    }, {
      code: 278,
      lower: [],
      title: [],
      upper: [],
      fold: 279,
      foldFull: [279]
    }, {
      code: 280,
      lower: [],
      title: [],
      upper: [],
      fold: 281,
      foldFull: [281]
    }, {
      code: 282,
      lower: [],
      title: [],
      upper: [],
      fold: 283,
      foldFull: [283]
    }, {
      code: 284,
      lower: [],
      title: [],
      upper: [],
      fold: 285,
      foldFull: [285]
    }, {
      code: 286,
      lower: [],
      title: [],
      upper: [],
      fold: 287,
      foldFull: [287]
    }, {
      code: 288,
      lower: [],
      title: [],
      upper: [],
      fold: 289,
      foldFull: [289]
    }, {
      code: 290,
      lower: [],
      title: [],
      upper: [],
      fold: 291,
      foldFull: [291]
    }, {
      code: 292,
      lower: [],
      title: [],
      upper: [],
      fold: 293,
      foldFull: [293]
    }, {
      code: 294,
      lower: [],
      title: [],
      upper: [],
      fold: 295,
      foldFull: [295]
    }, {
      code: 296,
      lower: [],
      title: [],
      upper: [],
      fold: 297,
      foldFull: [297]
    }, {
      code: 298,
      lower: [],
      title: [],
      upper: [],
      fold: 299,
      foldFull: [299]
    }, {
      code: 300,
      lower: [],
      title: [],
      upper: [],
      fold: 301,
      foldFull: [301]
    }, {
      code: 302,
      lower: [],
      title: [],
      upper: [],
      fold: 303,
      foldFull: [303]
    }, {
      code: 304,
      lower: [105, 775],
      title: [304],
      upper: [304],
      fold: 0,
      foldFull: [105, 775]
    }, {
      code: 304,
      lower: [105, 775],
      title: [304],
      upper: [304],
      fold: 0,
      foldFull: [105, 775]
    }, {
      code: 306,
      lower: [],
      title: [],
      upper: [],
      fold: 307,
      foldFull: [307]
    }, {
      code: 308,
      lower: [],
      title: [],
      upper: [],
      fold: 309,
      foldFull: [309]
    }, {
      code: 310,
      lower: [],
      title: [],
      upper: [],
      fold: 311,
      foldFull: [311]
    }, {
      code: 313,
      lower: [],
      title: [],
      upper: [],
      fold: 314,
      foldFull: [314]
    }, {
      code: 315,
      lower: [],
      title: [],
      upper: [],
      fold: 316,
      foldFull: [316]
    }, {
      code: 317,
      lower: [],
      title: [],
      upper: [],
      fold: 318,
      foldFull: [318]
    }, {
      code: 319,
      lower: [],
      title: [],
      upper: [],
      fold: 320,
      foldFull: [320]
    }, {
      code: 321,
      lower: [],
      title: [],
      upper: [],
      fold: 322,
      foldFull: [322]
    }, {
      code: 323,
      lower: [],
      title: [],
      upper: [],
      fold: 324,
      foldFull: [324]
    }, {
      code: 325,
      lower: [],
      title: [],
      upper: [],
      fold: 326,
      foldFull: [326]
    }, {
      code: 327,
      lower: [],
      title: [],
      upper: [],
      fold: 328,
      foldFull: [328]
    }, {
      code: 329,
      lower: [329],
      title: [700, 78],
      upper: [700, 78],
      fold: 0,
      foldFull: [700, 110]
    }, {
      code: 329,
      lower: [329],
      title: [700, 78],
      upper: [700, 78],
      fold: 0,
      foldFull: [700, 110]
    }, {
      code: 330,
      lower: [],
      title: [],
      upper: [],
      fold: 331,
      foldFull: [331]
    }, {
      code: 332,
      lower: [],
      title: [],
      upper: [],
      fold: 333,
      foldFull: [333]
    }, {
      code: 334,
      lower: [],
      title: [],
      upper: [],
      fold: 335,
      foldFull: [335]
    }, {
      code: 336,
      lower: [],
      title: [],
      upper: [],
      fold: 337,
      foldFull: [337]
    }, {
      code: 338,
      lower: [],
      title: [],
      upper: [],
      fold: 339,
      foldFull: [339]
    }, {
      code: 340,
      lower: [],
      title: [],
      upper: [],
      fold: 341,
      foldFull: [341]
    }, {
      code: 342,
      lower: [],
      title: [],
      upper: [],
      fold: 343,
      foldFull: [343]
    }, {
      code: 344,
      lower: [],
      title: [],
      upper: [],
      fold: 345,
      foldFull: [345]
    }, {
      code: 346,
      lower: [],
      title: [],
      upper: [],
      fold: 347,
      foldFull: [347]
    }, {
      code: 348,
      lower: [],
      title: [],
      upper: [],
      fold: 349,
      foldFull: [349]
    }, {
      code: 350,
      lower: [],
      title: [],
      upper: [],
      fold: 351,
      foldFull: [351]
    }, {
      code: 352,
      lower: [],
      title: [],
      upper: [],
      fold: 353,
      foldFull: [353]
    }, {
      code: 354,
      lower: [],
      title: [],
      upper: [],
      fold: 355,
      foldFull: [355]
    }, {
      code: 356,
      lower: [],
      title: [],
      upper: [],
      fold: 357,
      foldFull: [357]
    }, {
      code: 358,
      lower: [],
      title: [],
      upper: [],
      fold: 359,
      foldFull: [359]
    }, {
      code: 360,
      lower: [],
      title: [],
      upper: [],
      fold: 361,
      foldFull: [361]
    }, {
      code: 362,
      lower: [],
      title: [],
      upper: [],
      fold: 363,
      foldFull: [363]
    }, {
      code: 364,
      lower: [],
      title: [],
      upper: [],
      fold: 365,
      foldFull: [365]
    }, {
      code: 366,
      lower: [],
      title: [],
      upper: [],
      fold: 367,
      foldFull: [367]
    }, {
      code: 368,
      lower: [],
      title: [],
      upper: [],
      fold: 369,
      foldFull: [369]
    }, {
      code: 370,
      lower: [],
      title: [],
      upper: [],
      fold: 371,
      foldFull: [371]
    }, {
      code: 372,
      lower: [],
      title: [],
      upper: [],
      fold: 373,
      foldFull: [373]
    }, {
      code: 374,
      lower: [],
      title: [],
      upper: [],
      fold: 375,
      foldFull: [375]
    }, {
      code: 376,
      lower: [],
      title: [],
      upper: [],
      fold: 255,
      foldFull: [255]
    }, {
      code: 377,
      lower: [],
      title: [],
      upper: [],
      fold: 378,
      foldFull: [378]
    }, {
      code: 379,
      lower: [],
      title: [],
      upper: [],
      fold: 380,
      foldFull: [380]
    }, {
      code: 381,
      lower: [],
      title: [],
      upper: [],
      fold: 382,
      foldFull: [382]
    }, {
      code: 383,
      lower: [],
      title: [],
      upper: [],
      fold: 115,
      foldFull: [115]
    }, {
      code: 385,
      lower: [],
      title: [],
      upper: [],
      fold: 595,
      foldFull: [595]
    }, {
      code: 386,
      lower: [],
      title: [],
      upper: [],
      fold: 387,
      foldFull: [387]
    }, {
      code: 388,
      lower: [],
      title: [],
      upper: [],
      fold: 389,
      foldFull: [389]
    }, {
      code: 390,
      lower: [],
      title: [],
      upper: [],
      fold: 596,
      foldFull: [596]
    }, {
      code: 391,
      lower: [],
      title: [],
      upper: [],
      fold: 392,
      foldFull: [392]
    }, {
      code: 393,
      lower: [],
      title: [],
      upper: [],
      fold: 598,
      foldFull: [598]
    }, {
      code: 394,
      lower: [],
      title: [],
      upper: [],
      fold: 599,
      foldFull: [599]
    }, {
      code: 395,
      lower: [],
      title: [],
      upper: [],
      fold: 396,
      foldFull: [396]
    }, {
      code: 398,
      lower: [],
      title: [],
      upper: [],
      fold: 477,
      foldFull: [477]
    }, {
      code: 399,
      lower: [],
      title: [],
      upper: [],
      fold: 601,
      foldFull: [601]
    }, {
      code: 400,
      lower: [],
      title: [],
      upper: [],
      fold: 603,
      foldFull: [603]
    }, {
      code: 401,
      lower: [],
      title: [],
      upper: [],
      fold: 402,
      foldFull: [402]
    }, {
      code: 403,
      lower: [],
      title: [],
      upper: [],
      fold: 608,
      foldFull: [608]
    }, {
      code: 404,
      lower: [],
      title: [],
      upper: [],
      fold: 611,
      foldFull: [611]
    }, {
      code: 406,
      lower: [],
      title: [],
      upper: [],
      fold: 617,
      foldFull: [617]
    }, {
      code: 407,
      lower: [],
      title: [],
      upper: [],
      fold: 616,
      foldFull: [616]
    }, {
      code: 408,
      lower: [],
      title: [],
      upper: [],
      fold: 409,
      foldFull: [409]
    }, {
      code: 412,
      lower: [],
      title: [],
      upper: [],
      fold: 623,
      foldFull: [623]
    }, {
      code: 413,
      lower: [],
      title: [],
      upper: [],
      fold: 626,
      foldFull: [626]
    }, {
      code: 415,
      lower: [],
      title: [],
      upper: [],
      fold: 629,
      foldFull: [629]
    }, {
      code: 416,
      lower: [],
      title: [],
      upper: [],
      fold: 417,
      foldFull: [417]
    }, {
      code: 418,
      lower: [],
      title: [],
      upper: [],
      fold: 419,
      foldFull: [419]
    }, {
      code: 420,
      lower: [],
      title: [],
      upper: [],
      fold: 421,
      foldFull: [421]
    }, {
      code: 422,
      lower: [],
      title: [],
      upper: [],
      fold: 640,
      foldFull: [640]
    }, {
      code: 423,
      lower: [],
      title: [],
      upper: [],
      fold: 424,
      foldFull: [424]
    }, {
      code: 425,
      lower: [],
      title: [],
      upper: [],
      fold: 643,
      foldFull: [643]
    }, {
      code: 428,
      lower: [],
      title: [],
      upper: [],
      fold: 429,
      foldFull: [429]
    }, {
      code: 430,
      lower: [],
      title: [],
      upper: [],
      fold: 648,
      foldFull: [648]
    }, {
      code: 431,
      lower: [],
      title: [],
      upper: [],
      fold: 432,
      foldFull: [432]
    }, {
      code: 433,
      lower: [],
      title: [],
      upper: [],
      fold: 650,
      foldFull: [650]
    }, {
      code: 434,
      lower: [],
      title: [],
      upper: [],
      fold: 651,
      foldFull: [651]
    }, {
      code: 435,
      lower: [],
      title: [],
      upper: [],
      fold: 436,
      foldFull: [436]
    }, {
      code: 437,
      lower: [],
      title: [],
      upper: [],
      fold: 438,
      foldFull: [438]
    }, {
      code: 439,
      lower: [],
      title: [],
      upper: [],
      fold: 658,
      foldFull: [658]
    }, {
      code: 440,
      lower: [],
      title: [],
      upper: [],
      fold: 441,
      foldFull: [441]
    }, {
      code: 444,
      lower: [],
      title: [],
      upper: [],
      fold: 445,
      foldFull: [445]
    }, {
      code: 452,
      lower: [],
      title: [],
      upper: [],
      fold: 454,
      foldFull: [454]
    }, {
      code: 453,
      lower: [],
      title: [],
      upper: [],
      fold: 454,
      foldFull: [454]
    }, {
      code: 455,
      lower: [],
      title: [],
      upper: [],
      fold: 457,
      foldFull: [457]
    }, {
      code: 456,
      lower: [],
      title: [],
      upper: [],
      fold: 457,
      foldFull: [457]
    }, {
      code: 458,
      lower: [],
      title: [],
      upper: [],
      fold: 460,
      foldFull: [460]
    }, {
      code: 459,
      lower: [],
      title: [],
      upper: [],
      fold: 460,
      foldFull: [460]
    }, {
      code: 461,
      lower: [],
      title: [],
      upper: [],
      fold: 462,
      foldFull: [462]
    }, {
      code: 463,
      lower: [],
      title: [],
      upper: [],
      fold: 464,
      foldFull: [464]
    }, {
      code: 465,
      lower: [],
      title: [],
      upper: [],
      fold: 466,
      foldFull: [466]
    }, {
      code: 467,
      lower: [],
      title: [],
      upper: [],
      fold: 468,
      foldFull: [468]
    }, {
      code: 469,
      lower: [],
      title: [],
      upper: [],
      fold: 470,
      foldFull: [470]
    }, {
      code: 471,
      lower: [],
      title: [],
      upper: [],
      fold: 472,
      foldFull: [472]
    }, {
      code: 473,
      lower: [],
      title: [],
      upper: [],
      fold: 474,
      foldFull: [474]
    }, {
      code: 475,
      lower: [],
      title: [],
      upper: [],
      fold: 476,
      foldFull: [476]
    }, {
      code: 478,
      lower: [],
      title: [],
      upper: [],
      fold: 479,
      foldFull: [479]
    }, {
      code: 480,
      lower: [],
      title: [],
      upper: [],
      fold: 481,
      foldFull: [481]
    }, {
      code: 482,
      lower: [],
      title: [],
      upper: [],
      fold: 483,
      foldFull: [483]
    }, {
      code: 484,
      lower: [],
      title: [],
      upper: [],
      fold: 485,
      foldFull: [485]
    }, {
      code: 486,
      lower: [],
      title: [],
      upper: [],
      fold: 487,
      foldFull: [487]
    }, {
      code: 488,
      lower: [],
      title: [],
      upper: [],
      fold: 489,
      foldFull: [489]
    }, {
      code: 490,
      lower: [],
      title: [],
      upper: [],
      fold: 491,
      foldFull: [491]
    }, {
      code: 492,
      lower: [],
      title: [],
      upper: [],
      fold: 493,
      foldFull: [493]
    }, {
      code: 494,
      lower: [],
      title: [],
      upper: [],
      fold: 495,
      foldFull: [495]
    }, {
      code: 496,
      lower: [496],
      title: [74, 780],
      upper: [74, 780],
      fold: 0,
      foldFull: [106, 780]
    }, {
      code: 496,
      lower: [496],
      title: [74, 780],
      upper: [74, 780],
      fold: 0,
      foldFull: [106, 780]
    }, {
      code: 497,
      lower: [],
      title: [],
      upper: [],
      fold: 499,
      foldFull: [499]
    }, {
      code: 498,
      lower: [],
      title: [],
      upper: [],
      fold: 499,
      foldFull: [499]
    }, {
      code: 500,
      lower: [],
      title: [],
      upper: [],
      fold: 501,
      foldFull: [501]
    }, {
      code: 502,
      lower: [],
      title: [],
      upper: [],
      fold: 405,
      foldFull: [405]
    }, {
      code: 503,
      lower: [],
      title: [],
      upper: [],
      fold: 447,
      foldFull: [447]
    }, {
      code: 504,
      lower: [],
      title: [],
      upper: [],
      fold: 505,
      foldFull: [505]
    }, {
      code: 506,
      lower: [],
      title: [],
      upper: [],
      fold: 507,
      foldFull: [507]
    }, {
      code: 508,
      lower: [],
      title: [],
      upper: [],
      fold: 509,
      foldFull: [509]
    }, {
      code: 510,
      lower: [],
      title: [],
      upper: [],
      fold: 511,
      foldFull: [511]
    }, {
      code: 512,
      lower: [],
      title: [],
      upper: [],
      fold: 513,
      foldFull: [513]
    }, {
      code: 514,
      lower: [],
      title: [],
      upper: [],
      fold: 515,
      foldFull: [515]
    }, {
      code: 516,
      lower: [],
      title: [],
      upper: [],
      fold: 517,
      foldFull: [517]
    }, {
      code: 518,
      lower: [],
      title: [],
      upper: [],
      fold: 519,
      foldFull: [519]
    }, {
      code: 520,
      lower: [],
      title: [],
      upper: [],
      fold: 521,
      foldFull: [521]
    }, {
      code: 522,
      lower: [],
      title: [],
      upper: [],
      fold: 523,
      foldFull: [523]
    }, {
      code: 524,
      lower: [],
      title: [],
      upper: [],
      fold: 525,
      foldFull: [525]
    }, {
      code: 526,
      lower: [],
      title: [],
      upper: [],
      fold: 527,
      foldFull: [527]
    }, {
      code: 528,
      lower: [],
      title: [],
      upper: [],
      fold: 529,
      foldFull: [529]
    }, {
      code: 530,
      lower: [],
      title: [],
      upper: [],
      fold: 531,
      foldFull: [531]
    }, {
      code: 532,
      lower: [],
      title: [],
      upper: [],
      fold: 533,
      foldFull: [533]
    }, {
      code: 534,
      lower: [],
      title: [],
      upper: [],
      fold: 535,
      foldFull: [535]
    }, {
      code: 536,
      lower: [],
      title: [],
      upper: [],
      fold: 537,
      foldFull: [537]
    }, {
      code: 538,
      lower: [],
      title: [],
      upper: [],
      fold: 539,
      foldFull: [539]
    }, {
      code: 540,
      lower: [],
      title: [],
      upper: [],
      fold: 541,
      foldFull: [541]
    }, {
      code: 542,
      lower: [],
      title: [],
      upper: [],
      fold: 543,
      foldFull: [543]
    }, {
      code: 544,
      lower: [],
      title: [],
      upper: [],
      fold: 414,
      foldFull: [414]
    }, {
      code: 546,
      lower: [],
      title: [],
      upper: [],
      fold: 547,
      foldFull: [547]
    }, {
      code: 548,
      lower: [],
      title: [],
      upper: [],
      fold: 549,
      foldFull: [549]
    }, {
      code: 550,
      lower: [],
      title: [],
      upper: [],
      fold: 551,
      foldFull: [551]
    }, {
      code: 552,
      lower: [],
      title: [],
      upper: [],
      fold: 553,
      foldFull: [553]
    }, {
      code: 554,
      lower: [],
      title: [],
      upper: [],
      fold: 555,
      foldFull: [555]
    }, {
      code: 556,
      lower: [],
      title: [],
      upper: [],
      fold: 557,
      foldFull: [557]
    }, {
      code: 558,
      lower: [],
      title: [],
      upper: [],
      fold: 559,
      foldFull: [559]
    }, {
      code: 560,
      lower: [],
      title: [],
      upper: [],
      fold: 561,
      foldFull: [561]
    }, {
      code: 562,
      lower: [],
      title: [],
      upper: [],
      fold: 563,
      foldFull: [563]
    }, {
      code: 570,
      lower: [],
      title: [],
      upper: [],
      fold: 11365,
      foldFull: [11365]
    }, {
      code: 571,
      lower: [],
      title: [],
      upper: [],
      fold: 572,
      foldFull: [572]
    }, {
      code: 573,
      lower: [],
      title: [],
      upper: [],
      fold: 410,
      foldFull: [410]
    }, {
      code: 574,
      lower: [],
      title: [],
      upper: [],
      fold: 11366,
      foldFull: [11366]
    }, {
      code: 577,
      lower: [],
      title: [],
      upper: [],
      fold: 578,
      foldFull: [578]
    }, {
      code: 579,
      lower: [],
      title: [],
      upper: [],
      fold: 384,
      foldFull: [384]
    }, {
      code: 580,
      lower: [],
      title: [],
      upper: [],
      fold: 649,
      foldFull: [649]
    }, {
      code: 581,
      lower: [],
      title: [],
      upper: [],
      fold: 652,
      foldFull: [652]
    }, {
      code: 582,
      lower: [],
      title: [],
      upper: [],
      fold: 583,
      foldFull: [583]
    }, {
      code: 584,
      lower: [],
      title: [],
      upper: [],
      fold: 585,
      foldFull: [585]
    }, {
      code: 586,
      lower: [],
      title: [],
      upper: [],
      fold: 587,
      foldFull: [587]
    }, {
      code: 588,
      lower: [],
      title: [],
      upper: [],
      fold: 589,
      foldFull: [589]
    }, {
      code: 590,
      lower: [],
      title: [],
      upper: [],
      fold: 591,
      foldFull: [591]
    }, {
      code: 837,
      lower: [],
      title: [],
      upper: [],
      fold: 953,
      foldFull: [953]
    }, {
      code: 880,
      lower: [],
      title: [],
      upper: [],
      fold: 881,
      foldFull: [881]
    }, {
      code: 882,
      lower: [],
      title: [],
      upper: [],
      fold: 883,
      foldFull: [883]
    }, {
      code: 886,
      lower: [],
      title: [],
      upper: [],
      fold: 887,
      foldFull: [887]
    }, {
      code: 895,
      lower: [],
      title: [],
      upper: [],
      fold: 1011,
      foldFull: [1011]
    }, {
      code: 902,
      lower: [],
      title: [],
      upper: [],
      fold: 940,
      foldFull: [940]
    }, {
      code: 904,
      lower: [],
      title: [],
      upper: [],
      fold: 941,
      foldFull: [941]
    }, {
      code: 905,
      lower: [],
      title: [],
      upper: [],
      fold: 942,
      foldFull: [942]
    }, {
      code: 906,
      lower: [],
      title: [],
      upper: [],
      fold: 943,
      foldFull: [943]
    }, {
      code: 908,
      lower: [],
      title: [],
      upper: [],
      fold: 972,
      foldFull: [972]
    }, {
      code: 910,
      lower: [],
      title: [],
      upper: [],
      fold: 973,
      foldFull: [973]
    }, {
      code: 911,
      lower: [],
      title: [],
      upper: [],
      fold: 974,
      foldFull: [974]
    }, {
      code: 912,
      lower: [912],
      title: [921, 776, 769],
      upper: [921, 776, 769],
      fold: 0,
      foldFull: [953, 776, 769]
    }, {
      code: 912,
      lower: [912],
      title: [921, 776, 769],
      upper: [921, 776, 769],
      fold: 0,
      foldFull: [953, 776, 769]
    }, {
      code: 913,
      lower: [],
      title: [],
      upper: [],
      fold: 945,
      foldFull: [945]
    }, {
      code: 914,
      lower: [],
      title: [],
      upper: [],
      fold: 946,
      foldFull: [946]
    }, {
      code: 915,
      lower: [],
      title: [],
      upper: [],
      fold: 947,
      foldFull: [947]
    }, {
      code: 916,
      lower: [],
      title: [],
      upper: [],
      fold: 948,
      foldFull: [948]
    }, {
      code: 917,
      lower: [],
      title: [],
      upper: [],
      fold: 949,
      foldFull: [949]
    }, {
      code: 918,
      lower: [],
      title: [],
      upper: [],
      fold: 950,
      foldFull: [950]
    }, {
      code: 919,
      lower: [],
      title: [],
      upper: [],
      fold: 951,
      foldFull: [951]
    }, {
      code: 920,
      lower: [],
      title: [],
      upper: [],
      fold: 952,
      foldFull: [952]
    }, {
      code: 921,
      lower: [],
      title: [],
      upper: [],
      fold: 953,
      foldFull: [953]
    }, {
      code: 922,
      lower: [],
      title: [],
      upper: [],
      fold: 954,
      foldFull: [954]
    }, {
      code: 923,
      lower: [],
      title: [],
      upper: [],
      fold: 955,
      foldFull: [955]
    }, {
      code: 924,
      lower: [],
      title: [],
      upper: [],
      fold: 956,
      foldFull: [956]
    }, {
      code: 925,
      lower: [],
      title: [],
      upper: [],
      fold: 957,
      foldFull: [957]
    }, {
      code: 926,
      lower: [],
      title: [],
      upper: [],
      fold: 958,
      foldFull: [958]
    }, {
      code: 927,
      lower: [],
      title: [],
      upper: [],
      fold: 959,
      foldFull: [959]
    }, {
      code: 928,
      lower: [],
      title: [],
      upper: [],
      fold: 960,
      foldFull: [960]
    }, {
      code: 929,
      lower: [],
      title: [],
      upper: [],
      fold: 961,
      foldFull: [961]
    }, {
      code: 931,
      lower: [],
      title: [],
      upper: [],
      fold: 963,
      foldFull: [963]
    }, {
      code: 932,
      lower: [],
      title: [],
      upper: [],
      fold: 964,
      foldFull: [964]
    }, {
      code: 933,
      lower: [],
      title: [],
      upper: [],
      fold: 965,
      foldFull: [965]
    }, {
      code: 934,
      lower: [],
      title: [],
      upper: [],
      fold: 966,
      foldFull: [966]
    }, {
      code: 935,
      lower: [],
      title: [],
      upper: [],
      fold: 967,
      foldFull: [967]
    }, {
      code: 936,
      lower: [],
      title: [],
      upper: [],
      fold: 968,
      foldFull: [968]
    }, {
      code: 937,
      lower: [],
      title: [],
      upper: [],
      fold: 969,
      foldFull: [969]
    }, {
      code: 938,
      lower: [],
      title: [],
      upper: [],
      fold: 970,
      foldFull: [970]
    }, {
      code: 939,
      lower: [],
      title: [],
      upper: [],
      fold: 971,
      foldFull: [971]
    }, {
      code: 944,
      lower: [944],
      title: [933, 776, 769],
      upper: [933, 776, 769],
      fold: 0,
      foldFull: [965, 776, 769]
    }, {
      code: 944,
      lower: [944],
      title: [933, 776, 769],
      upper: [933, 776, 769],
      fold: 0,
      foldFull: [965, 776, 769]
    }, {
      code: 962,
      lower: [],
      title: [],
      upper: [],
      fold: 963,
      foldFull: [963]
    }, {
      code: 975,
      lower: [],
      title: [],
      upper: [],
      fold: 983,
      foldFull: [983]
    }, {
      code: 976,
      lower: [],
      title: [],
      upper: [],
      fold: 946,
      foldFull: [946]
    }, {
      code: 977,
      lower: [],
      title: [],
      upper: [],
      fold: 952,
      foldFull: [952]
    }, {
      code: 981,
      lower: [],
      title: [],
      upper: [],
      fold: 966,
      foldFull: [966]
    }, {
      code: 982,
      lower: [],
      title: [],
      upper: [],
      fold: 960,
      foldFull: [960]
    }, {
      code: 984,
      lower: [],
      title: [],
      upper: [],
      fold: 985,
      foldFull: [985]
    }, {
      code: 986,
      lower: [],
      title: [],
      upper: [],
      fold: 987,
      foldFull: [987]
    }, {
      code: 988,
      lower: [],
      title: [],
      upper: [],
      fold: 989,
      foldFull: [989]
    }, {
      code: 990,
      lower: [],
      title: [],
      upper: [],
      fold: 991,
      foldFull: [991]
    }, {
      code: 992,
      lower: [],
      title: [],
      upper: [],
      fold: 993,
      foldFull: [993]
    }, {
      code: 994,
      lower: [],
      title: [],
      upper: [],
      fold: 995,
      foldFull: [995]
    }, {
      code: 996,
      lower: [],
      title: [],
      upper: [],
      fold: 997,
      foldFull: [997]
    }, {
      code: 998,
      lower: [],
      title: [],
      upper: [],
      fold: 999,
      foldFull: [999]
    }, {
      code: 1e3,
      lower: [],
      title: [],
      upper: [],
      fold: 1001,
      foldFull: [1001]
    }, {
      code: 1002,
      lower: [],
      title: [],
      upper: [],
      fold: 1003,
      foldFull: [1003]
    }, {
      code: 1004,
      lower: [],
      title: [],
      upper: [],
      fold: 1005,
      foldFull: [1005]
    }, {
      code: 1006,
      lower: [],
      title: [],
      upper: [],
      fold: 1007,
      foldFull: [1007]
    }, {
      code: 1008,
      lower: [],
      title: [],
      upper: [],
      fold: 954,
      foldFull: [954]
    }, {
      code: 1009,
      lower: [],
      title: [],
      upper: [],
      fold: 961,
      foldFull: [961]
    }, {
      code: 1012,
      lower: [],
      title: [],
      upper: [],
      fold: 952,
      foldFull: [952]
    }, {
      code: 1013,
      lower: [],
      title: [],
      upper: [],
      fold: 949,
      foldFull: [949]
    }, {
      code: 1015,
      lower: [],
      title: [],
      upper: [],
      fold: 1016,
      foldFull: [1016]
    }, {
      code: 1017,
      lower: [],
      title: [],
      upper: [],
      fold: 1010,
      foldFull: [1010]
    }, {
      code: 1018,
      lower: [],
      title: [],
      upper: [],
      fold: 1019,
      foldFull: [1019]
    }, {
      code: 1021,
      lower: [],
      title: [],
      upper: [],
      fold: 891,
      foldFull: [891]
    }, {
      code: 1022,
      lower: [],
      title: [],
      upper: [],
      fold: 892,
      foldFull: [892]
    }, {
      code: 1023,
      lower: [],
      title: [],
      upper: [],
      fold: 893,
      foldFull: [893]
    }, {
      code: 1024,
      lower: [],
      title: [],
      upper: [],
      fold: 1104,
      foldFull: [1104]
    }, {
      code: 1025,
      lower: [],
      title: [],
      upper: [],
      fold: 1105,
      foldFull: [1105]
    }, {
      code: 1026,
      lower: [],
      title: [],
      upper: [],
      fold: 1106,
      foldFull: [1106]
    }, {
      code: 1027,
      lower: [],
      title: [],
      upper: [],
      fold: 1107,
      foldFull: [1107]
    }, {
      code: 1028,
      lower: [],
      title: [],
      upper: [],
      fold: 1108,
      foldFull: [1108]
    }, {
      code: 1029,
      lower: [],
      title: [],
      upper: [],
      fold: 1109,
      foldFull: [1109]
    }, {
      code: 1030,
      lower: [],
      title: [],
      upper: [],
      fold: 1110,
      foldFull: [1110]
    }, {
      code: 1031,
      lower: [],
      title: [],
      upper: [],
      fold: 1111,
      foldFull: [1111]
    }, {
      code: 1032,
      lower: [],
      title: [],
      upper: [],
      fold: 1112,
      foldFull: [1112]
    }, {
      code: 1033,
      lower: [],
      title: [],
      upper: [],
      fold: 1113,
      foldFull: [1113]
    }, {
      code: 1034,
      lower: [],
      title: [],
      upper: [],
      fold: 1114,
      foldFull: [1114]
    }, {
      code: 1035,
      lower: [],
      title: [],
      upper: [],
      fold: 1115,
      foldFull: [1115]
    }, {
      code: 1036,
      lower: [],
      title: [],
      upper: [],
      fold: 1116,
      foldFull: [1116]
    }, {
      code: 1037,
      lower: [],
      title: [],
      upper: [],
      fold: 1117,
      foldFull: [1117]
    }, {
      code: 1038,
      lower: [],
      title: [],
      upper: [],
      fold: 1118,
      foldFull: [1118]
    }, {
      code: 1039,
      lower: [],
      title: [],
      upper: [],
      fold: 1119,
      foldFull: [1119]
    }, {
      code: 1040,
      lower: [],
      title: [],
      upper: [],
      fold: 1072,
      foldFull: [1072]
    }, {
      code: 1041,
      lower: [],
      title: [],
      upper: [],
      fold: 1073,
      foldFull: [1073]
    }, {
      code: 1042,
      lower: [],
      title: [],
      upper: [],
      fold: 1074,
      foldFull: [1074]
    }, {
      code: 1043,
      lower: [],
      title: [],
      upper: [],
      fold: 1075,
      foldFull: [1075]
    }, {
      code: 1044,
      lower: [],
      title: [],
      upper: [],
      fold: 1076,
      foldFull: [1076]
    }, {
      code: 1045,
      lower: [],
      title: [],
      upper: [],
      fold: 1077,
      foldFull: [1077]
    }, {
      code: 1046,
      lower: [],
      title: [],
      upper: [],
      fold: 1078,
      foldFull: [1078]
    }, {
      code: 1047,
      lower: [],
      title: [],
      upper: [],
      fold: 1079,
      foldFull: [1079]
    }, {
      code: 1048,
      lower: [],
      title: [],
      upper: [],
      fold: 1080,
      foldFull: [1080]
    }, {
      code: 1049,
      lower: [],
      title: [],
      upper: [],
      fold: 1081,
      foldFull: [1081]
    }, {
      code: 1050,
      lower: [],
      title: [],
      upper: [],
      fold: 1082,
      foldFull: [1082]
    }, {
      code: 1051,
      lower: [],
      title: [],
      upper: [],
      fold: 1083,
      foldFull: [1083]
    }, {
      code: 1052,
      lower: [],
      title: [],
      upper: [],
      fold: 1084,
      foldFull: [1084]
    }, {
      code: 1053,
      lower: [],
      title: [],
      upper: [],
      fold: 1085,
      foldFull: [1085]
    }, {
      code: 1054,
      lower: [],
      title: [],
      upper: [],
      fold: 1086,
      foldFull: [1086]
    }, {
      code: 1055,
      lower: [],
      title: [],
      upper: [],
      fold: 1087,
      foldFull: [1087]
    }, {
      code: 1056,
      lower: [],
      title: [],
      upper: [],
      fold: 1088,
      foldFull: [1088]
    }, {
      code: 1057,
      lower: [],
      title: [],
      upper: [],
      fold: 1089,
      foldFull: [1089]
    }, {
      code: 1058,
      lower: [],
      title: [],
      upper: [],
      fold: 1090,
      foldFull: [1090]
    }, {
      code: 1059,
      lower: [],
      title: [],
      upper: [],
      fold: 1091,
      foldFull: [1091]
    }, {
      code: 1060,
      lower: [],
      title: [],
      upper: [],
      fold: 1092,
      foldFull: [1092]
    }, {
      code: 1061,
      lower: [],
      title: [],
      upper: [],
      fold: 1093,
      foldFull: [1093]
    }, {
      code: 1062,
      lower: [],
      title: [],
      upper: [],
      fold: 1094,
      foldFull: [1094]
    }, {
      code: 1063,
      lower: [],
      title: [],
      upper: [],
      fold: 1095,
      foldFull: [1095]
    }, {
      code: 1064,
      lower: [],
      title: [],
      upper: [],
      fold: 1096,
      foldFull: [1096]
    }, {
      code: 1065,
      lower: [],
      title: [],
      upper: [],
      fold: 1097,
      foldFull: [1097]
    }, {
      code: 1066,
      lower: [],
      title: [],
      upper: [],
      fold: 1098,
      foldFull: [1098]
    }, {
      code: 1067,
      lower: [],
      title: [],
      upper: [],
      fold: 1099,
      foldFull: [1099]
    }, {
      code: 1068,
      lower: [],
      title: [],
      upper: [],
      fold: 1100,
      foldFull: [1100]
    }, {
      code: 1069,
      lower: [],
      title: [],
      upper: [],
      fold: 1101,
      foldFull: [1101]
    }, {
      code: 1070,
      lower: [],
      title: [],
      upper: [],
      fold: 1102,
      foldFull: [1102]
    }, {
      code: 1071,
      lower: [],
      title: [],
      upper: [],
      fold: 1103,
      foldFull: [1103]
    }, {
      code: 1120,
      lower: [],
      title: [],
      upper: [],
      fold: 1121,
      foldFull: [1121]
    }, {
      code: 1122,
      lower: [],
      title: [],
      upper: [],
      fold: 1123,
      foldFull: [1123]
    }, {
      code: 1124,
      lower: [],
      title: [],
      upper: [],
      fold: 1125,
      foldFull: [1125]
    }, {
      code: 1126,
      lower: [],
      title: [],
      upper: [],
      fold: 1127,
      foldFull: [1127]
    }, {
      code: 1128,
      lower: [],
      title: [],
      upper: [],
      fold: 1129,
      foldFull: [1129]
    }, {
      code: 1130,
      lower: [],
      title: [],
      upper: [],
      fold: 1131,
      foldFull: [1131]
    }, {
      code: 1132,
      lower: [],
      title: [],
      upper: [],
      fold: 1133,
      foldFull: [1133]
    }, {
      code: 1134,
      lower: [],
      title: [],
      upper: [],
      fold: 1135,
      foldFull: [1135]
    }, {
      code: 1136,
      lower: [],
      title: [],
      upper: [],
      fold: 1137,
      foldFull: [1137]
    }, {
      code: 1138,
      lower: [],
      title: [],
      upper: [],
      fold: 1139,
      foldFull: [1139]
    }, {
      code: 1140,
      lower: [],
      title: [],
      upper: [],
      fold: 1141,
      foldFull: [1141]
    }, {
      code: 1142,
      lower: [],
      title: [],
      upper: [],
      fold: 1143,
      foldFull: [1143]
    }, {
      code: 1144,
      lower: [],
      title: [],
      upper: [],
      fold: 1145,
      foldFull: [1145]
    }, {
      code: 1146,
      lower: [],
      title: [],
      upper: [],
      fold: 1147,
      foldFull: [1147]
    }, {
      code: 1148,
      lower: [],
      title: [],
      upper: [],
      fold: 1149,
      foldFull: [1149]
    }, {
      code: 1150,
      lower: [],
      title: [],
      upper: [],
      fold: 1151,
      foldFull: [1151]
    }, {
      code: 1152,
      lower: [],
      title: [],
      upper: [],
      fold: 1153,
      foldFull: [1153]
    }, {
      code: 1162,
      lower: [],
      title: [],
      upper: [],
      fold: 1163,
      foldFull: [1163]
    }, {
      code: 1164,
      lower: [],
      title: [],
      upper: [],
      fold: 1165,
      foldFull: [1165]
    }, {
      code: 1166,
      lower: [],
      title: [],
      upper: [],
      fold: 1167,
      foldFull: [1167]
    }, {
      code: 1168,
      lower: [],
      title: [],
      upper: [],
      fold: 1169,
      foldFull: [1169]
    }, {
      code: 1170,
      lower: [],
      title: [],
      upper: [],
      fold: 1171,
      foldFull: [1171]
    }, {
      code: 1172,
      lower: [],
      title: [],
      upper: [],
      fold: 1173,
      foldFull: [1173]
    }, {
      code: 1174,
      lower: [],
      title: [],
      upper: [],
      fold: 1175,
      foldFull: [1175]
    }, {
      code: 1176,
      lower: [],
      title: [],
      upper: [],
      fold: 1177,
      foldFull: [1177]
    }, {
      code: 1178,
      lower: [],
      title: [],
      upper: [],
      fold: 1179,
      foldFull: [1179]
    }, {
      code: 1180,
      lower: [],
      title: [],
      upper: [],
      fold: 1181,
      foldFull: [1181]
    }, {
      code: 1182,
      lower: [],
      title: [],
      upper: [],
      fold: 1183,
      foldFull: [1183]
    }, {
      code: 1184,
      lower: [],
      title: [],
      upper: [],
      fold: 1185,
      foldFull: [1185]
    }, {
      code: 1186,
      lower: [],
      title: [],
      upper: [],
      fold: 1187,
      foldFull: [1187]
    }, {
      code: 1188,
      lower: [],
      title: [],
      upper: [],
      fold: 1189,
      foldFull: [1189]
    }, {
      code: 1190,
      lower: [],
      title: [],
      upper: [],
      fold: 1191,
      foldFull: [1191]
    }, {
      code: 1192,
      lower: [],
      title: [],
      upper: [],
      fold: 1193,
      foldFull: [1193]
    }, {
      code: 1194,
      lower: [],
      title: [],
      upper: [],
      fold: 1195,
      foldFull: [1195]
    }, {
      code: 1196,
      lower: [],
      title: [],
      upper: [],
      fold: 1197,
      foldFull: [1197]
    }, {
      code: 1198,
      lower: [],
      title: [],
      upper: [],
      fold: 1199,
      foldFull: [1199]
    }, {
      code: 1200,
      lower: [],
      title: [],
      upper: [],
      fold: 1201,
      foldFull: [1201]
    }, {
      code: 1202,
      lower: [],
      title: [],
      upper: [],
      fold: 1203,
      foldFull: [1203]
    }, {
      code: 1204,
      lower: [],
      title: [],
      upper: [],
      fold: 1205,
      foldFull: [1205]
    }, {
      code: 1206,
      lower: [],
      title: [],
      upper: [],
      fold: 1207,
      foldFull: [1207]
    }, {
      code: 1208,
      lower: [],
      title: [],
      upper: [],
      fold: 1209,
      foldFull: [1209]
    }, {
      code: 1210,
      lower: [],
      title: [],
      upper: [],
      fold: 1211,
      foldFull: [1211]
    }, {
      code: 1212,
      lower: [],
      title: [],
      upper: [],
      fold: 1213,
      foldFull: [1213]
    }, {
      code: 1214,
      lower: [],
      title: [],
      upper: [],
      fold: 1215,
      foldFull: [1215]
    }, {
      code: 1216,
      lower: [],
      title: [],
      upper: [],
      fold: 1231,
      foldFull: [1231]
    }, {
      code: 1217,
      lower: [],
      title: [],
      upper: [],
      fold: 1218,
      foldFull: [1218]
    }, {
      code: 1219,
      lower: [],
      title: [],
      upper: [],
      fold: 1220,
      foldFull: [1220]
    }, {
      code: 1221,
      lower: [],
      title: [],
      upper: [],
      fold: 1222,
      foldFull: [1222]
    }, {
      code: 1223,
      lower: [],
      title: [],
      upper: [],
      fold: 1224,
      foldFull: [1224]
    }, {
      code: 1225,
      lower: [],
      title: [],
      upper: [],
      fold: 1226,
      foldFull: [1226]
    }, {
      code: 1227,
      lower: [],
      title: [],
      upper: [],
      fold: 1228,
      foldFull: [1228]
    }, {
      code: 1229,
      lower: [],
      title: [],
      upper: [],
      fold: 1230,
      foldFull: [1230]
    }, {
      code: 1232,
      lower: [],
      title: [],
      upper: [],
      fold: 1233,
      foldFull: [1233]
    }, {
      code: 1234,
      lower: [],
      title: [],
      upper: [],
      fold: 1235,
      foldFull: [1235]
    }, {
      code: 1236,
      lower: [],
      title: [],
      upper: [],
      fold: 1237,
      foldFull: [1237]
    }, {
      code: 1238,
      lower: [],
      title: [],
      upper: [],
      fold: 1239,
      foldFull: [1239]
    }, {
      code: 1240,
      lower: [],
      title: [],
      upper: [],
      fold: 1241,
      foldFull: [1241]
    }, {
      code: 1242,
      lower: [],
      title: [],
      upper: [],
      fold: 1243,
      foldFull: [1243]
    }, {
      code: 1244,
      lower: [],
      title: [],
      upper: [],
      fold: 1245,
      foldFull: [1245]
    }, {
      code: 1246,
      lower: [],
      title: [],
      upper: [],
      fold: 1247,
      foldFull: [1247]
    }, {
      code: 1248,
      lower: [],
      title: [],
      upper: [],
      fold: 1249,
      foldFull: [1249]
    }, {
      code: 1250,
      lower: [],
      title: [],
      upper: [],
      fold: 1251,
      foldFull: [1251]
    }, {
      code: 1252,
      lower: [],
      title: [],
      upper: [],
      fold: 1253,
      foldFull: [1253]
    }, {
      code: 1254,
      lower: [],
      title: [],
      upper: [],
      fold: 1255,
      foldFull: [1255]
    }, {
      code: 1256,
      lower: [],
      title: [],
      upper: [],
      fold: 1257,
      foldFull: [1257]
    }, {
      code: 1258,
      lower: [],
      title: [],
      upper: [],
      fold: 1259,
      foldFull: [1259]
    }, {
      code: 1260,
      lower: [],
      title: [],
      upper: [],
      fold: 1261,
      foldFull: [1261]
    }, {
      code: 1262,
      lower: [],
      title: [],
      upper: [],
      fold: 1263,
      foldFull: [1263]
    }, {
      code: 1264,
      lower: [],
      title: [],
      upper: [],
      fold: 1265,
      foldFull: [1265]
    }, {
      code: 1266,
      lower: [],
      title: [],
      upper: [],
      fold: 1267,
      foldFull: [1267]
    }, {
      code: 1268,
      lower: [],
      title: [],
      upper: [],
      fold: 1269,
      foldFull: [1269]
    }, {
      code: 1270,
      lower: [],
      title: [],
      upper: [],
      fold: 1271,
      foldFull: [1271]
    }, {
      code: 1272,
      lower: [],
      title: [],
      upper: [],
      fold: 1273,
      foldFull: [1273]
    }, {
      code: 1274,
      lower: [],
      title: [],
      upper: [],
      fold: 1275,
      foldFull: [1275]
    }, {
      code: 1276,
      lower: [],
      title: [],
      upper: [],
      fold: 1277,
      foldFull: [1277]
    }, {
      code: 1278,
      lower: [],
      title: [],
      upper: [],
      fold: 1279,
      foldFull: [1279]
    }, {
      code: 1280,
      lower: [],
      title: [],
      upper: [],
      fold: 1281,
      foldFull: [1281]
    }, {
      code: 1282,
      lower: [],
      title: [],
      upper: [],
      fold: 1283,
      foldFull: [1283]
    }, {
      code: 1284,
      lower: [],
      title: [],
      upper: [],
      fold: 1285,
      foldFull: [1285]
    }, {
      code: 1286,
      lower: [],
      title: [],
      upper: [],
      fold: 1287,
      foldFull: [1287]
    }, {
      code: 1288,
      lower: [],
      title: [],
      upper: [],
      fold: 1289,
      foldFull: [1289]
    }, {
      code: 1290,
      lower: [],
      title: [],
      upper: [],
      fold: 1291,
      foldFull: [1291]
    }, {
      code: 1292,
      lower: [],
      title: [],
      upper: [],
      fold: 1293,
      foldFull: [1293]
    }, {
      code: 1294,
      lower: [],
      title: [],
      upper: [],
      fold: 1295,
      foldFull: [1295]
    }, {
      code: 1296,
      lower: [],
      title: [],
      upper: [],
      fold: 1297,
      foldFull: [1297]
    }, {
      code: 1298,
      lower: [],
      title: [],
      upper: [],
      fold: 1299,
      foldFull: [1299]
    }, {
      code: 1300,
      lower: [],
      title: [],
      upper: [],
      fold: 1301,
      foldFull: [1301]
    }, {
      code: 1302,
      lower: [],
      title: [],
      upper: [],
      fold: 1303,
      foldFull: [1303]
    }, {
      code: 1304,
      lower: [],
      title: [],
      upper: [],
      fold: 1305,
      foldFull: [1305]
    }, {
      code: 1306,
      lower: [],
      title: [],
      upper: [],
      fold: 1307,
      foldFull: [1307]
    }, {
      code: 1308,
      lower: [],
      title: [],
      upper: [],
      fold: 1309,
      foldFull: [1309]
    }, {
      code: 1310,
      lower: [],
      title: [],
      upper: [],
      fold: 1311,
      foldFull: [1311]
    }, {
      code: 1312,
      lower: [],
      title: [],
      upper: [],
      fold: 1313,
      foldFull: [1313]
    }, {
      code: 1314,
      lower: [],
      title: [],
      upper: [],
      fold: 1315,
      foldFull: [1315]
    }, {
      code: 1316,
      lower: [],
      title: [],
      upper: [],
      fold: 1317,
      foldFull: [1317]
    }, {
      code: 1318,
      lower: [],
      title: [],
      upper: [],
      fold: 1319,
      foldFull: [1319]
    }, {
      code: 1320,
      lower: [],
      title: [],
      upper: [],
      fold: 1321,
      foldFull: [1321]
    }, {
      code: 1322,
      lower: [],
      title: [],
      upper: [],
      fold: 1323,
      foldFull: [1323]
    }, {
      code: 1324,
      lower: [],
      title: [],
      upper: [],
      fold: 1325,
      foldFull: [1325]
    }, {
      code: 1326,
      lower: [],
      title: [],
      upper: [],
      fold: 1327,
      foldFull: [1327]
    }, {
      code: 1329,
      lower: [],
      title: [],
      upper: [],
      fold: 1377,
      foldFull: [1377]
    }, {
      code: 1330,
      lower: [],
      title: [],
      upper: [],
      fold: 1378,
      foldFull: [1378]
    }, {
      code: 1331,
      lower: [],
      title: [],
      upper: [],
      fold: 1379,
      foldFull: [1379]
    }, {
      code: 1332,
      lower: [],
      title: [],
      upper: [],
      fold: 1380,
      foldFull: [1380]
    }, {
      code: 1333,
      lower: [],
      title: [],
      upper: [],
      fold: 1381,
      foldFull: [1381]
    }, {
      code: 1334,
      lower: [],
      title: [],
      upper: [],
      fold: 1382,
      foldFull: [1382]
    }, {
      code: 1335,
      lower: [],
      title: [],
      upper: [],
      fold: 1383,
      foldFull: [1383]
    }, {
      code: 1336,
      lower: [],
      title: [],
      upper: [],
      fold: 1384,
      foldFull: [1384]
    }, {
      code: 1337,
      lower: [],
      title: [],
      upper: [],
      fold: 1385,
      foldFull: [1385]
    }, {
      code: 1338,
      lower: [],
      title: [],
      upper: [],
      fold: 1386,
      foldFull: [1386]
    }, {
      code: 1339,
      lower: [],
      title: [],
      upper: [],
      fold: 1387,
      foldFull: [1387]
    }, {
      code: 1340,
      lower: [],
      title: [],
      upper: [],
      fold: 1388,
      foldFull: [1388]
    }, {
      code: 1341,
      lower: [],
      title: [],
      upper: [],
      fold: 1389,
      foldFull: [1389]
    }, {
      code: 1342,
      lower: [],
      title: [],
      upper: [],
      fold: 1390,
      foldFull: [1390]
    }, {
      code: 1343,
      lower: [],
      title: [],
      upper: [],
      fold: 1391,
      foldFull: [1391]
    }, {
      code: 1344,
      lower: [],
      title: [],
      upper: [],
      fold: 1392,
      foldFull: [1392]
    }, {
      code: 1345,
      lower: [],
      title: [],
      upper: [],
      fold: 1393,
      foldFull: [1393]
    }, {
      code: 1346,
      lower: [],
      title: [],
      upper: [],
      fold: 1394,
      foldFull: [1394]
    }, {
      code: 1347,
      lower: [],
      title: [],
      upper: [],
      fold: 1395,
      foldFull: [1395]
    }, {
      code: 1348,
      lower: [],
      title: [],
      upper: [],
      fold: 1396,
      foldFull: [1396]
    }, {
      code: 1349,
      lower: [],
      title: [],
      upper: [],
      fold: 1397,
      foldFull: [1397]
    }, {
      code: 1350,
      lower: [],
      title: [],
      upper: [],
      fold: 1398,
      foldFull: [1398]
    }, {
      code: 1351,
      lower: [],
      title: [],
      upper: [],
      fold: 1399,
      foldFull: [1399]
    }, {
      code: 1352,
      lower: [],
      title: [],
      upper: [],
      fold: 1400,
      foldFull: [1400]
    }, {
      code: 1353,
      lower: [],
      title: [],
      upper: [],
      fold: 1401,
      foldFull: [1401]
    }, {
      code: 1354,
      lower: [],
      title: [],
      upper: [],
      fold: 1402,
      foldFull: [1402]
    }, {
      code: 1355,
      lower: [],
      title: [],
      upper: [],
      fold: 1403,
      foldFull: [1403]
    }, {
      code: 1356,
      lower: [],
      title: [],
      upper: [],
      fold: 1404,
      foldFull: [1404]
    }, {
      code: 1357,
      lower: [],
      title: [],
      upper: [],
      fold: 1405,
      foldFull: [1405]
    }, {
      code: 1358,
      lower: [],
      title: [],
      upper: [],
      fold: 1406,
      foldFull: [1406]
    }, {
      code: 1359,
      lower: [],
      title: [],
      upper: [],
      fold: 1407,
      foldFull: [1407]
    }, {
      code: 1360,
      lower: [],
      title: [],
      upper: [],
      fold: 1408,
      foldFull: [1408]
    }, {
      code: 1361,
      lower: [],
      title: [],
      upper: [],
      fold: 1409,
      foldFull: [1409]
    }, {
      code: 1362,
      lower: [],
      title: [],
      upper: [],
      fold: 1410,
      foldFull: [1410]
    }, {
      code: 1363,
      lower: [],
      title: [],
      upper: [],
      fold: 1411,
      foldFull: [1411]
    }, {
      code: 1364,
      lower: [],
      title: [],
      upper: [],
      fold: 1412,
      foldFull: [1412]
    }, {
      code: 1365,
      lower: [],
      title: [],
      upper: [],
      fold: 1413,
      foldFull: [1413]
    }, {
      code: 1366,
      lower: [],
      title: [],
      upper: [],
      fold: 1414,
      foldFull: [1414]
    }, {
      code: 1415,
      lower: [1415],
      title: [1333, 1410],
      upper: [1333, 1362],
      fold: 0,
      foldFull: [1381, 1410]
    }, {
      code: 1415,
      lower: [1415],
      title: [1333, 1410],
      upper: [1333, 1362],
      fold: 0,
      foldFull: [1381, 1410]
    }, {
      code: 4256,
      lower: [],
      title: [],
      upper: [],
      fold: 11520,
      foldFull: [11520]
    }, {
      code: 4257,
      lower: [],
      title: [],
      upper: [],
      fold: 11521,
      foldFull: [11521]
    }, {
      code: 4258,
      lower: [],
      title: [],
      upper: [],
      fold: 11522,
      foldFull: [11522]
    }, {
      code: 4259,
      lower: [],
      title: [],
      upper: [],
      fold: 11523,
      foldFull: [11523]
    }, {
      code: 4260,
      lower: [],
      title: [],
      upper: [],
      fold: 11524,
      foldFull: [11524]
    }, {
      code: 4261,
      lower: [],
      title: [],
      upper: [],
      fold: 11525,
      foldFull: [11525]
    }, {
      code: 4262,
      lower: [],
      title: [],
      upper: [],
      fold: 11526,
      foldFull: [11526]
    }, {
      code: 4263,
      lower: [],
      title: [],
      upper: [],
      fold: 11527,
      foldFull: [11527]
    }, {
      code: 4264,
      lower: [],
      title: [],
      upper: [],
      fold: 11528,
      foldFull: [11528]
    }, {
      code: 4265,
      lower: [],
      title: [],
      upper: [],
      fold: 11529,
      foldFull: [11529]
    }, {
      code: 4266,
      lower: [],
      title: [],
      upper: [],
      fold: 11530,
      foldFull: [11530]
    }, {
      code: 4267,
      lower: [],
      title: [],
      upper: [],
      fold: 11531,
      foldFull: [11531]
    }, {
      code: 4268,
      lower: [],
      title: [],
      upper: [],
      fold: 11532,
      foldFull: [11532]
    }, {
      code: 4269,
      lower: [],
      title: [],
      upper: [],
      fold: 11533,
      foldFull: [11533]
    }, {
      code: 4270,
      lower: [],
      title: [],
      upper: [],
      fold: 11534,
      foldFull: [11534]
    }, {
      code: 4271,
      lower: [],
      title: [],
      upper: [],
      fold: 11535,
      foldFull: [11535]
    }, {
      code: 4272,
      lower: [],
      title: [],
      upper: [],
      fold: 11536,
      foldFull: [11536]
    }, {
      code: 4273,
      lower: [],
      title: [],
      upper: [],
      fold: 11537,
      foldFull: [11537]
    }, {
      code: 4274,
      lower: [],
      title: [],
      upper: [],
      fold: 11538,
      foldFull: [11538]
    }, {
      code: 4275,
      lower: [],
      title: [],
      upper: [],
      fold: 11539,
      foldFull: [11539]
    }, {
      code: 4276,
      lower: [],
      title: [],
      upper: [],
      fold: 11540,
      foldFull: [11540]
    }, {
      code: 4277,
      lower: [],
      title: [],
      upper: [],
      fold: 11541,
      foldFull: [11541]
    }, {
      code: 4278,
      lower: [],
      title: [],
      upper: [],
      fold: 11542,
      foldFull: [11542]
    }, {
      code: 4279,
      lower: [],
      title: [],
      upper: [],
      fold: 11543,
      foldFull: [11543]
    }, {
      code: 4280,
      lower: [],
      title: [],
      upper: [],
      fold: 11544,
      foldFull: [11544]
    }, {
      code: 4281,
      lower: [],
      title: [],
      upper: [],
      fold: 11545,
      foldFull: [11545]
    }, {
      code: 4282,
      lower: [],
      title: [],
      upper: [],
      fold: 11546,
      foldFull: [11546]
    }, {
      code: 4283,
      lower: [],
      title: [],
      upper: [],
      fold: 11547,
      foldFull: [11547]
    }, {
      code: 4284,
      lower: [],
      title: [],
      upper: [],
      fold: 11548,
      foldFull: [11548]
    }, {
      code: 4285,
      lower: [],
      title: [],
      upper: [],
      fold: 11549,
      foldFull: [11549]
    }, {
      code: 4286,
      lower: [],
      title: [],
      upper: [],
      fold: 11550,
      foldFull: [11550]
    }, {
      code: 4287,
      lower: [],
      title: [],
      upper: [],
      fold: 11551,
      foldFull: [11551]
    }, {
      code: 4288,
      lower: [],
      title: [],
      upper: [],
      fold: 11552,
      foldFull: [11552]
    }, {
      code: 4289,
      lower: [],
      title: [],
      upper: [],
      fold: 11553,
      foldFull: [11553]
    }, {
      code: 4290,
      lower: [],
      title: [],
      upper: [],
      fold: 11554,
      foldFull: [11554]
    }, {
      code: 4291,
      lower: [],
      title: [],
      upper: [],
      fold: 11555,
      foldFull: [11555]
    }, {
      code: 4292,
      lower: [],
      title: [],
      upper: [],
      fold: 11556,
      foldFull: [11556]
    }, {
      code: 4293,
      lower: [],
      title: [],
      upper: [],
      fold: 11557,
      foldFull: [11557]
    }, {
      code: 4295,
      lower: [],
      title: [],
      upper: [],
      fold: 11559,
      foldFull: [11559]
    }, {
      code: 4301,
      lower: [],
      title: [],
      upper: [],
      fold: 11565,
      foldFull: [11565]
    }, {
      code: 5112,
      lower: [],
      title: [],
      upper: [],
      fold: 5104,
      foldFull: [5104]
    }, {
      code: 5113,
      lower: [],
      title: [],
      upper: [],
      fold: 5105,
      foldFull: [5105]
    }, {
      code: 5114,
      lower: [],
      title: [],
      upper: [],
      fold: 5106,
      foldFull: [5106]
    }, {
      code: 5115,
      lower: [],
      title: [],
      upper: [],
      fold: 5107,
      foldFull: [5107]
    }, {
      code: 5116,
      lower: [],
      title: [],
      upper: [],
      fold: 5108,
      foldFull: [5108]
    }, {
      code: 5117,
      lower: [],
      title: [],
      upper: [],
      fold: 5109,
      foldFull: [5109]
    }, {
      code: 7296,
      lower: [],
      title: [],
      upper: [],
      fold: 1074,
      foldFull: [1074]
    }, {
      code: 7297,
      lower: [],
      title: [],
      upper: [],
      fold: 1076,
      foldFull: [1076]
    }, {
      code: 7298,
      lower: [],
      title: [],
      upper: [],
      fold: 1086,
      foldFull: [1086]
    }, {
      code: 7299,
      lower: [],
      title: [],
      upper: [],
      fold: 1089,
      foldFull: [1089]
    }, {
      code: 7300,
      lower: [],
      title: [],
      upper: [],
      fold: 1090,
      foldFull: [1090]
    }, {
      code: 7301,
      lower: [],
      title: [],
      upper: [],
      fold: 1090,
      foldFull: [1090]
    }, {
      code: 7302,
      lower: [],
      title: [],
      upper: [],
      fold: 1098,
      foldFull: [1098]
    }, {
      code: 7303,
      lower: [],
      title: [],
      upper: [],
      fold: 1123,
      foldFull: [1123]
    }, {
      code: 7304,
      lower: [],
      title: [],
      upper: [],
      fold: 42571,
      foldFull: [42571]
    }, {
      code: 7312,
      lower: [],
      title: [],
      upper: [],
      fold: 4304,
      foldFull: [4304]
    }, {
      code: 7313,
      lower: [],
      title: [],
      upper: [],
      fold: 4305,
      foldFull: [4305]
    }, {
      code: 7314,
      lower: [],
      title: [],
      upper: [],
      fold: 4306,
      foldFull: [4306]
    }, {
      code: 7315,
      lower: [],
      title: [],
      upper: [],
      fold: 4307,
      foldFull: [4307]
    }, {
      code: 7316,
      lower: [],
      title: [],
      upper: [],
      fold: 4308,
      foldFull: [4308]
    }, {
      code: 7317,
      lower: [],
      title: [],
      upper: [],
      fold: 4309,
      foldFull: [4309]
    }, {
      code: 7318,
      lower: [],
      title: [],
      upper: [],
      fold: 4310,
      foldFull: [4310]
    }, {
      code: 7319,
      lower: [],
      title: [],
      upper: [],
      fold: 4311,
      foldFull: [4311]
    }, {
      code: 7320,
      lower: [],
      title: [],
      upper: [],
      fold: 4312,
      foldFull: [4312]
    }, {
      code: 7321,
      lower: [],
      title: [],
      upper: [],
      fold: 4313,
      foldFull: [4313]
    }, {
      code: 7322,
      lower: [],
      title: [],
      upper: [],
      fold: 4314,
      foldFull: [4314]
    }, {
      code: 7323,
      lower: [],
      title: [],
      upper: [],
      fold: 4315,
      foldFull: [4315]
    }, {
      code: 7324,
      lower: [],
      title: [],
      upper: [],
      fold: 4316,
      foldFull: [4316]
    }, {
      code: 7325,
      lower: [],
      title: [],
      upper: [],
      fold: 4317,
      foldFull: [4317]
    }, {
      code: 7326,
      lower: [],
      title: [],
      upper: [],
      fold: 4318,
      foldFull: [4318]
    }, {
      code: 7327,
      lower: [],
      title: [],
      upper: [],
      fold: 4319,
      foldFull: [4319]
    }, {
      code: 7328,
      lower: [],
      title: [],
      upper: [],
      fold: 4320,
      foldFull: [4320]
    }, {
      code: 7329,
      lower: [],
      title: [],
      upper: [],
      fold: 4321,
      foldFull: [4321]
    }, {
      code: 7330,
      lower: [],
      title: [],
      upper: [],
      fold: 4322,
      foldFull: [4322]
    }, {
      code: 7331,
      lower: [],
      title: [],
      upper: [],
      fold: 4323,
      foldFull: [4323]
    }, {
      code: 7332,
      lower: [],
      title: [],
      upper: [],
      fold: 4324,
      foldFull: [4324]
    }, {
      code: 7333,
      lower: [],
      title: [],
      upper: [],
      fold: 4325,
      foldFull: [4325]
    }, {
      code: 7334,
      lower: [],
      title: [],
      upper: [],
      fold: 4326,
      foldFull: [4326]
    }, {
      code: 7335,
      lower: [],
      title: [],
      upper: [],
      fold: 4327,
      foldFull: [4327]
    }, {
      code: 7336,
      lower: [],
      title: [],
      upper: [],
      fold: 4328,
      foldFull: [4328]
    }, {
      code: 7337,
      lower: [],
      title: [],
      upper: [],
      fold: 4329,
      foldFull: [4329]
    }, {
      code: 7338,
      lower: [],
      title: [],
      upper: [],
      fold: 4330,
      foldFull: [4330]
    }, {
      code: 7339,
      lower: [],
      title: [],
      upper: [],
      fold: 4331,
      foldFull: [4331]
    }, {
      code: 7340,
      lower: [],
      title: [],
      upper: [],
      fold: 4332,
      foldFull: [4332]
    }, {
      code: 7341,
      lower: [],
      title: [],
      upper: [],
      fold: 4333,
      foldFull: [4333]
    }, {
      code: 7342,
      lower: [],
      title: [],
      upper: [],
      fold: 4334,
      foldFull: [4334]
    }, {
      code: 7343,
      lower: [],
      title: [],
      upper: [],
      fold: 4335,
      foldFull: [4335]
    }, {
      code: 7344,
      lower: [],
      title: [],
      upper: [],
      fold: 4336,
      foldFull: [4336]
    }, {
      code: 7345,
      lower: [],
      title: [],
      upper: [],
      fold: 4337,
      foldFull: [4337]
    }, {
      code: 7346,
      lower: [],
      title: [],
      upper: [],
      fold: 4338,
      foldFull: [4338]
    }, {
      code: 7347,
      lower: [],
      title: [],
      upper: [],
      fold: 4339,
      foldFull: [4339]
    }, {
      code: 7348,
      lower: [],
      title: [],
      upper: [],
      fold: 4340,
      foldFull: [4340]
    }, {
      code: 7349,
      lower: [],
      title: [],
      upper: [],
      fold: 4341,
      foldFull: [4341]
    }, {
      code: 7350,
      lower: [],
      title: [],
      upper: [],
      fold: 4342,
      foldFull: [4342]
    }, {
      code: 7351,
      lower: [],
      title: [],
      upper: [],
      fold: 4343,
      foldFull: [4343]
    }, {
      code: 7352,
      lower: [],
      title: [],
      upper: [],
      fold: 4344,
      foldFull: [4344]
    }, {
      code: 7353,
      lower: [],
      title: [],
      upper: [],
      fold: 4345,
      foldFull: [4345]
    }, {
      code: 7354,
      lower: [],
      title: [],
      upper: [],
      fold: 4346,
      foldFull: [4346]
    }, {
      code: 7357,
      lower: [],
      title: [],
      upper: [],
      fold: 4349,
      foldFull: [4349]
    }, {
      code: 7358,
      lower: [],
      title: [],
      upper: [],
      fold: 4350,
      foldFull: [4350]
    }, {
      code: 7359,
      lower: [],
      title: [],
      upper: [],
      fold: 4351,
      foldFull: [4351]
    }, {
      code: 7680,
      lower: [],
      title: [],
      upper: [],
      fold: 7681,
      foldFull: [7681]
    }, {
      code: 7682,
      lower: [],
      title: [],
      upper: [],
      fold: 7683,
      foldFull: [7683]
    }, {
      code: 7684,
      lower: [],
      title: [],
      upper: [],
      fold: 7685,
      foldFull: [7685]
    }, {
      code: 7686,
      lower: [],
      title: [],
      upper: [],
      fold: 7687,
      foldFull: [7687]
    }, {
      code: 7688,
      lower: [],
      title: [],
      upper: [],
      fold: 7689,
      foldFull: [7689]
    }, {
      code: 7690,
      lower: [],
      title: [],
      upper: [],
      fold: 7691,
      foldFull: [7691]
    }, {
      code: 7692,
      lower: [],
      title: [],
      upper: [],
      fold: 7693,
      foldFull: [7693]
    }, {
      code: 7694,
      lower: [],
      title: [],
      upper: [],
      fold: 7695,
      foldFull: [7695]
    }, {
      code: 7696,
      lower: [],
      title: [],
      upper: [],
      fold: 7697,
      foldFull: [7697]
    }, {
      code: 7698,
      lower: [],
      title: [],
      upper: [],
      fold: 7699,
      foldFull: [7699]
    }, {
      code: 7700,
      lower: [],
      title: [],
      upper: [],
      fold: 7701,
      foldFull: [7701]
    }, {
      code: 7702,
      lower: [],
      title: [],
      upper: [],
      fold: 7703,
      foldFull: [7703]
    }, {
      code: 7704,
      lower: [],
      title: [],
      upper: [],
      fold: 7705,
      foldFull: [7705]
    }, {
      code: 7706,
      lower: [],
      title: [],
      upper: [],
      fold: 7707,
      foldFull: [7707]
    }, {
      code: 7708,
      lower: [],
      title: [],
      upper: [],
      fold: 7709,
      foldFull: [7709]
    }, {
      code: 7710,
      lower: [],
      title: [],
      upper: [],
      fold: 7711,
      foldFull: [7711]
    }, {
      code: 7712,
      lower: [],
      title: [],
      upper: [],
      fold: 7713,
      foldFull: [7713]
    }, {
      code: 7714,
      lower: [],
      title: [],
      upper: [],
      fold: 7715,
      foldFull: [7715]
    }, {
      code: 7716,
      lower: [],
      title: [],
      upper: [],
      fold: 7717,
      foldFull: [7717]
    }, {
      code: 7718,
      lower: [],
      title: [],
      upper: [],
      fold: 7719,
      foldFull: [7719]
    }, {
      code: 7720,
      lower: [],
      title: [],
      upper: [],
      fold: 7721,
      foldFull: [7721]
    }, {
      code: 7722,
      lower: [],
      title: [],
      upper: [],
      fold: 7723,
      foldFull: [7723]
    }, {
      code: 7724,
      lower: [],
      title: [],
      upper: [],
      fold: 7725,
      foldFull: [7725]
    }, {
      code: 7726,
      lower: [],
      title: [],
      upper: [],
      fold: 7727,
      foldFull: [7727]
    }, {
      code: 7728,
      lower: [],
      title: [],
      upper: [],
      fold: 7729,
      foldFull: [7729]
    }, {
      code: 7730,
      lower: [],
      title: [],
      upper: [],
      fold: 7731,
      foldFull: [7731]
    }, {
      code: 7732,
      lower: [],
      title: [],
      upper: [],
      fold: 7733,
      foldFull: [7733]
    }, {
      code: 7734,
      lower: [],
      title: [],
      upper: [],
      fold: 7735,
      foldFull: [7735]
    }, {
      code: 7736,
      lower: [],
      title: [],
      upper: [],
      fold: 7737,
      foldFull: [7737]
    }, {
      code: 7738,
      lower: [],
      title: [],
      upper: [],
      fold: 7739,
      foldFull: [7739]
    }, {
      code: 7740,
      lower: [],
      title: [],
      upper: [],
      fold: 7741,
      foldFull: [7741]
    }, {
      code: 7742,
      lower: [],
      title: [],
      upper: [],
      fold: 7743,
      foldFull: [7743]
    }, {
      code: 7744,
      lower: [],
      title: [],
      upper: [],
      fold: 7745,
      foldFull: [7745]
    }, {
      code: 7746,
      lower: [],
      title: [],
      upper: [],
      fold: 7747,
      foldFull: [7747]
    }, {
      code: 7748,
      lower: [],
      title: [],
      upper: [],
      fold: 7749,
      foldFull: [7749]
    }, {
      code: 7750,
      lower: [],
      title: [],
      upper: [],
      fold: 7751,
      foldFull: [7751]
    }, {
      code: 7752,
      lower: [],
      title: [],
      upper: [],
      fold: 7753,
      foldFull: [7753]
    }, {
      code: 7754,
      lower: [],
      title: [],
      upper: [],
      fold: 7755,
      foldFull: [7755]
    }, {
      code: 7756,
      lower: [],
      title: [],
      upper: [],
      fold: 7757,
      foldFull: [7757]
    }, {
      code: 7758,
      lower: [],
      title: [],
      upper: [],
      fold: 7759,
      foldFull: [7759]
    }, {
      code: 7760,
      lower: [],
      title: [],
      upper: [],
      fold: 7761,
      foldFull: [7761]
    }, {
      code: 7762,
      lower: [],
      title: [],
      upper: [],
      fold: 7763,
      foldFull: [7763]
    }, {
      code: 7764,
      lower: [],
      title: [],
      upper: [],
      fold: 7765,
      foldFull: [7765]
    }, {
      code: 7766,
      lower: [],
      title: [],
      upper: [],
      fold: 7767,
      foldFull: [7767]
    }, {
      code: 7768,
      lower: [],
      title: [],
      upper: [],
      fold: 7769,
      foldFull: [7769]
    }, {
      code: 7770,
      lower: [],
      title: [],
      upper: [],
      fold: 7771,
      foldFull: [7771]
    }, {
      code: 7772,
      lower: [],
      title: [],
      upper: [],
      fold: 7773,
      foldFull: [7773]
    }, {
      code: 7774,
      lower: [],
      title: [],
      upper: [],
      fold: 7775,
      foldFull: [7775]
    }, {
      code: 7776,
      lower: [],
      title: [],
      upper: [],
      fold: 7777,
      foldFull: [7777]
    }, {
      code: 7778,
      lower: [],
      title: [],
      upper: [],
      fold: 7779,
      foldFull: [7779]
    }, {
      code: 7780,
      lower: [],
      title: [],
      upper: [],
      fold: 7781,
      foldFull: [7781]
    }, {
      code: 7782,
      lower: [],
      title: [],
      upper: [],
      fold: 7783,
      foldFull: [7783]
    }, {
      code: 7784,
      lower: [],
      title: [],
      upper: [],
      fold: 7785,
      foldFull: [7785]
    }, {
      code: 7786,
      lower: [],
      title: [],
      upper: [],
      fold: 7787,
      foldFull: [7787]
    }, {
      code: 7788,
      lower: [],
      title: [],
      upper: [],
      fold: 7789,
      foldFull: [7789]
    }, {
      code: 7790,
      lower: [],
      title: [],
      upper: [],
      fold: 7791,
      foldFull: [7791]
    }, {
      code: 7792,
      lower: [],
      title: [],
      upper: [],
      fold: 7793,
      foldFull: [7793]
    }, {
      code: 7794,
      lower: [],
      title: [],
      upper: [],
      fold: 7795,
      foldFull: [7795]
    }, {
      code: 7796,
      lower: [],
      title: [],
      upper: [],
      fold: 7797,
      foldFull: [7797]
    }, {
      code: 7798,
      lower: [],
      title: [],
      upper: [],
      fold: 7799,
      foldFull: [7799]
    }, {
      code: 7800,
      lower: [],
      title: [],
      upper: [],
      fold: 7801,
      foldFull: [7801]
    }, {
      code: 7802,
      lower: [],
      title: [],
      upper: [],
      fold: 7803,
      foldFull: [7803]
    }, {
      code: 7804,
      lower: [],
      title: [],
      upper: [],
      fold: 7805,
      foldFull: [7805]
    }, {
      code: 7806,
      lower: [],
      title: [],
      upper: [],
      fold: 7807,
      foldFull: [7807]
    }, {
      code: 7808,
      lower: [],
      title: [],
      upper: [],
      fold: 7809,
      foldFull: [7809]
    }, {
      code: 7810,
      lower: [],
      title: [],
      upper: [],
      fold: 7811,
      foldFull: [7811]
    }, {
      code: 7812,
      lower: [],
      title: [],
      upper: [],
      fold: 7813,
      foldFull: [7813]
    }, {
      code: 7814,
      lower: [],
      title: [],
      upper: [],
      fold: 7815,
      foldFull: [7815]
    }, {
      code: 7816,
      lower: [],
      title: [],
      upper: [],
      fold: 7817,
      foldFull: [7817]
    }, {
      code: 7818,
      lower: [],
      title: [],
      upper: [],
      fold: 7819,
      foldFull: [7819]
    }, {
      code: 7820,
      lower: [],
      title: [],
      upper: [],
      fold: 7821,
      foldFull: [7821]
    }, {
      code: 7822,
      lower: [],
      title: [],
      upper: [],
      fold: 7823,
      foldFull: [7823]
    }, {
      code: 7824,
      lower: [],
      title: [],
      upper: [],
      fold: 7825,
      foldFull: [7825]
    }, {
      code: 7826,
      lower: [],
      title: [],
      upper: [],
      fold: 7827,
      foldFull: [7827]
    }, {
      code: 7828,
      lower: [],
      title: [],
      upper: [],
      fold: 7829,
      foldFull: [7829]
    }, {
      code: 7830,
      lower: [7830],
      title: [72, 817],
      upper: [72, 817],
      fold: 0,
      foldFull: [104, 817]
    }, {
      code: 7830,
      lower: [7830],
      title: [72, 817],
      upper: [72, 817],
      fold: 0,
      foldFull: [104, 817]
    }, {
      code: 7831,
      lower: [7831],
      title: [84, 776],
      upper: [84, 776],
      fold: 0,
      foldFull: [116, 776]
    }, {
      code: 7831,
      lower: [7831],
      title: [84, 776],
      upper: [84, 776],
      fold: 0,
      foldFull: [116, 776]
    }, {
      code: 7832,
      lower: [7832],
      title: [87, 778],
      upper: [87, 778],
      fold: 0,
      foldFull: [119, 778]
    }, {
      code: 7832,
      lower: [7832],
      title: [87, 778],
      upper: [87, 778],
      fold: 0,
      foldFull: [119, 778]
    }, {
      code: 7833,
      lower: [7833],
      title: [89, 778],
      upper: [89, 778],
      fold: 0,
      foldFull: [121, 778]
    }, {
      code: 7833,
      lower: [7833],
      title: [89, 778],
      upper: [89, 778],
      fold: 0,
      foldFull: [121, 778]
    }, {
      code: 7834,
      lower: [7834],
      title: [65, 702],
      upper: [65, 702],
      fold: 0,
      foldFull: [97, 702]
    }, {
      code: 7834,
      lower: [7834],
      title: [65, 702],
      upper: [65, 702],
      fold: 0,
      foldFull: [97, 702]
    }, {
      code: 7835,
      lower: [],
      title: [],
      upper: [],
      fold: 7777,
      foldFull: [7777]
    }, {
      code: 7838,
      lower: [],
      title: [],
      upper: [],
      fold: 223,
      foldFull: [115, 115]
    }, {
      code: 7840,
      lower: [],
      title: [],
      upper: [],
      fold: 7841,
      foldFull: [7841]
    }, {
      code: 7842,
      lower: [],
      title: [],
      upper: [],
      fold: 7843,
      foldFull: [7843]
    }, {
      code: 7844,
      lower: [],
      title: [],
      upper: [],
      fold: 7845,
      foldFull: [7845]
    }, {
      code: 7846,
      lower: [],
      title: [],
      upper: [],
      fold: 7847,
      foldFull: [7847]
    }, {
      code: 7848,
      lower: [],
      title: [],
      upper: [],
      fold: 7849,
      foldFull: [7849]
    }, {
      code: 7850,
      lower: [],
      title: [],
      upper: [],
      fold: 7851,
      foldFull: [7851]
    }, {
      code: 7852,
      lower: [],
      title: [],
      upper: [],
      fold: 7853,
      foldFull: [7853]
    }, {
      code: 7854,
      lower: [],
      title: [],
      upper: [],
      fold: 7855,
      foldFull: [7855]
    }, {
      code: 7856,
      lower: [],
      title: [],
      upper: [],
      fold: 7857,
      foldFull: [7857]
    }, {
      code: 7858,
      lower: [],
      title: [],
      upper: [],
      fold: 7859,
      foldFull: [7859]
    }, {
      code: 7860,
      lower: [],
      title: [],
      upper: [],
      fold: 7861,
      foldFull: [7861]
    }, {
      code: 7862,
      lower: [],
      title: [],
      upper: [],
      fold: 7863,
      foldFull: [7863]
    }, {
      code: 7864,
      lower: [],
      title: [],
      upper: [],
      fold: 7865,
      foldFull: [7865]
    }, {
      code: 7866,
      lower: [],
      title: [],
      upper: [],
      fold: 7867,
      foldFull: [7867]
    }, {
      code: 7868,
      lower: [],
      title: [],
      upper: [],
      fold: 7869,
      foldFull: [7869]
    }, {
      code: 7870,
      lower: [],
      title: [],
      upper: [],
      fold: 7871,
      foldFull: [7871]
    }, {
      code: 7872,
      lower: [],
      title: [],
      upper: [],
      fold: 7873,
      foldFull: [7873]
    }, {
      code: 7874,
      lower: [],
      title: [],
      upper: [],
      fold: 7875,
      foldFull: [7875]
    }, {
      code: 7876,
      lower: [],
      title: [],
      upper: [],
      fold: 7877,
      foldFull: [7877]
    }, {
      code: 7878,
      lower: [],
      title: [],
      upper: [],
      fold: 7879,
      foldFull: [7879]
    }, {
      code: 7880,
      lower: [],
      title: [],
      upper: [],
      fold: 7881,
      foldFull: [7881]
    }, {
      code: 7882,
      lower: [],
      title: [],
      upper: [],
      fold: 7883,
      foldFull: [7883]
    }, {
      code: 7884,
      lower: [],
      title: [],
      upper: [],
      fold: 7885,
      foldFull: [7885]
    }, {
      code: 7886,
      lower: [],
      title: [],
      upper: [],
      fold: 7887,
      foldFull: [7887]
    }, {
      code: 7888,
      lower: [],
      title: [],
      upper: [],
      fold: 7889,
      foldFull: [7889]
    }, {
      code: 7890,
      lower: [],
      title: [],
      upper: [],
      fold: 7891,
      foldFull: [7891]
    }, {
      code: 7892,
      lower: [],
      title: [],
      upper: [],
      fold: 7893,
      foldFull: [7893]
    }, {
      code: 7894,
      lower: [],
      title: [],
      upper: [],
      fold: 7895,
      foldFull: [7895]
    }, {
      code: 7896,
      lower: [],
      title: [],
      upper: [],
      fold: 7897,
      foldFull: [7897]
    }, {
      code: 7898,
      lower: [],
      title: [],
      upper: [],
      fold: 7899,
      foldFull: [7899]
    }, {
      code: 7900,
      lower: [],
      title: [],
      upper: [],
      fold: 7901,
      foldFull: [7901]
    }, {
      code: 7902,
      lower: [],
      title: [],
      upper: [],
      fold: 7903,
      foldFull: [7903]
    }, {
      code: 7904,
      lower: [],
      title: [],
      upper: [],
      fold: 7905,
      foldFull: [7905]
    }, {
      code: 7906,
      lower: [],
      title: [],
      upper: [],
      fold: 7907,
      foldFull: [7907]
    }, {
      code: 7908,
      lower: [],
      title: [],
      upper: [],
      fold: 7909,
      foldFull: [7909]
    }, {
      code: 7910,
      lower: [],
      title: [],
      upper: [],
      fold: 7911,
      foldFull: [7911]
    }, {
      code: 7912,
      lower: [],
      title: [],
      upper: [],
      fold: 7913,
      foldFull: [7913]
    }, {
      code: 7914,
      lower: [],
      title: [],
      upper: [],
      fold: 7915,
      foldFull: [7915]
    }, {
      code: 7916,
      lower: [],
      title: [],
      upper: [],
      fold: 7917,
      foldFull: [7917]
    }, {
      code: 7918,
      lower: [],
      title: [],
      upper: [],
      fold: 7919,
      foldFull: [7919]
    }, {
      code: 7920,
      lower: [],
      title: [],
      upper: [],
      fold: 7921,
      foldFull: [7921]
    }, {
      code: 7922,
      lower: [],
      title: [],
      upper: [],
      fold: 7923,
      foldFull: [7923]
    }, {
      code: 7924,
      lower: [],
      title: [],
      upper: [],
      fold: 7925,
      foldFull: [7925]
    }, {
      code: 7926,
      lower: [],
      title: [],
      upper: [],
      fold: 7927,
      foldFull: [7927]
    }, {
      code: 7928,
      lower: [],
      title: [],
      upper: [],
      fold: 7929,
      foldFull: [7929]
    }, {
      code: 7930,
      lower: [],
      title: [],
      upper: [],
      fold: 7931,
      foldFull: [7931]
    }, {
      code: 7932,
      lower: [],
      title: [],
      upper: [],
      fold: 7933,
      foldFull: [7933]
    }, {
      code: 7934,
      lower: [],
      title: [],
      upper: [],
      fold: 7935,
      foldFull: [7935]
    }, {
      code: 7944,
      lower: [],
      title: [],
      upper: [],
      fold: 7936,
      foldFull: [7936]
    }, {
      code: 7945,
      lower: [],
      title: [],
      upper: [],
      fold: 7937,
      foldFull: [7937]
    }, {
      code: 7946,
      lower: [],
      title: [],
      upper: [],
      fold: 7938,
      foldFull: [7938]
    }, {
      code: 7947,
      lower: [],
      title: [],
      upper: [],
      fold: 7939,
      foldFull: [7939]
    }, {
      code: 7948,
      lower: [],
      title: [],
      upper: [],
      fold: 7940,
      foldFull: [7940]
    }, {
      code: 7949,
      lower: [],
      title: [],
      upper: [],
      fold: 7941,
      foldFull: [7941]
    }, {
      code: 7950,
      lower: [],
      title: [],
      upper: [],
      fold: 7942,
      foldFull: [7942]
    }, {
      code: 7951,
      lower: [],
      title: [],
      upper: [],
      fold: 7943,
      foldFull: [7943]
    }, {
      code: 7960,
      lower: [],
      title: [],
      upper: [],
      fold: 7952,
      foldFull: [7952]
    }, {
      code: 7961,
      lower: [],
      title: [],
      upper: [],
      fold: 7953,
      foldFull: [7953]
    }, {
      code: 7962,
      lower: [],
      title: [],
      upper: [],
      fold: 7954,
      foldFull: [7954]
    }, {
      code: 7963,
      lower: [],
      title: [],
      upper: [],
      fold: 7955,
      foldFull: [7955]
    }, {
      code: 7964,
      lower: [],
      title: [],
      upper: [],
      fold: 7956,
      foldFull: [7956]
    }, {
      code: 7965,
      lower: [],
      title: [],
      upper: [],
      fold: 7957,
      foldFull: [7957]
    }, {
      code: 7976,
      lower: [],
      title: [],
      upper: [],
      fold: 7968,
      foldFull: [7968]
    }, {
      code: 7977,
      lower: [],
      title: [],
      upper: [],
      fold: 7969,
      foldFull: [7969]
    }, {
      code: 7978,
      lower: [],
      title: [],
      upper: [],
      fold: 7970,
      foldFull: [7970]
    }, {
      code: 7979,
      lower: [],
      title: [],
      upper: [],
      fold: 7971,
      foldFull: [7971]
    }, {
      code: 7980,
      lower: [],
      title: [],
      upper: [],
      fold: 7972,
      foldFull: [7972]
    }, {
      code: 7981,
      lower: [],
      title: [],
      upper: [],
      fold: 7973,
      foldFull: [7973]
    }, {
      code: 7982,
      lower: [],
      title: [],
      upper: [],
      fold: 7974,
      foldFull: [7974]
    }, {
      code: 7983,
      lower: [],
      title: [],
      upper: [],
      fold: 7975,
      foldFull: [7975]
    }, {
      code: 7992,
      lower: [],
      title: [],
      upper: [],
      fold: 7984,
      foldFull: [7984]
    }, {
      code: 7993,
      lower: [],
      title: [],
      upper: [],
      fold: 7985,
      foldFull: [7985]
    }, {
      code: 7994,
      lower: [],
      title: [],
      upper: [],
      fold: 7986,
      foldFull: [7986]
    }, {
      code: 7995,
      lower: [],
      title: [],
      upper: [],
      fold: 7987,
      foldFull: [7987]
    }, {
      code: 7996,
      lower: [],
      title: [],
      upper: [],
      fold: 7988,
      foldFull: [7988]
    }, {
      code: 7997,
      lower: [],
      title: [],
      upper: [],
      fold: 7989,
      foldFull: [7989]
    }, {
      code: 7998,
      lower: [],
      title: [],
      upper: [],
      fold: 7990,
      foldFull: [7990]
    }, {
      code: 7999,
      lower: [],
      title: [],
      upper: [],
      fold: 7991,
      foldFull: [7991]
    }, {
      code: 8008,
      lower: [],
      title: [],
      upper: [],
      fold: 8e3,
      foldFull: [8e3]
    }, {
      code: 8009,
      lower: [],
      title: [],
      upper: [],
      fold: 8001,
      foldFull: [8001]
    }, {
      code: 8010,
      lower: [],
      title: [],
      upper: [],
      fold: 8002,
      foldFull: [8002]
    }, {
      code: 8011,
      lower: [],
      title: [],
      upper: [],
      fold: 8003,
      foldFull: [8003]
    }, {
      code: 8012,
      lower: [],
      title: [],
      upper: [],
      fold: 8004,
      foldFull: [8004]
    }, {
      code: 8013,
      lower: [],
      title: [],
      upper: [],
      fold: 8005,
      foldFull: [8005]
    }, {
      code: 8016,
      lower: [8016],
      title: [933, 787],
      upper: [933, 787],
      fold: 0,
      foldFull: [965, 787]
    }, {
      code: 8016,
      lower: [8016],
      title: [933, 787],
      upper: [933, 787],
      fold: 0,
      foldFull: [965, 787]
    }, {
      code: 8018,
      lower: [8018],
      title: [933, 787, 768],
      upper: [933, 787, 768],
      fold: 0,
      foldFull: [965, 787, 768]
    }, {
      code: 8018,
      lower: [8018],
      title: [933, 787, 768],
      upper: [933, 787, 768],
      fold: 0,
      foldFull: [965, 787, 768]
    }, {
      code: 8020,
      lower: [8020],
      title: [933, 787, 769],
      upper: [933, 787, 769],
      fold: 0,
      foldFull: [965, 787, 769]
    }, {
      code: 8020,
      lower: [8020],
      title: [933, 787, 769],
      upper: [933, 787, 769],
      fold: 0,
      foldFull: [965, 787, 769]
    }, {
      code: 8022,
      lower: [8022],
      title: [933, 787, 834],
      upper: [933, 787, 834],
      fold: 0,
      foldFull: [965, 787, 834]
    }, {
      code: 8022,
      lower: [8022],
      title: [933, 787, 834],
      upper: [933, 787, 834],
      fold: 0,
      foldFull: [965, 787, 834]
    }, {
      code: 8025,
      lower: [],
      title: [],
      upper: [],
      fold: 8017,
      foldFull: [8017]
    }, {
      code: 8027,
      lower: [],
      title: [],
      upper: [],
      fold: 8019,
      foldFull: [8019]
    }, {
      code: 8029,
      lower: [],
      title: [],
      upper: [],
      fold: 8021,
      foldFull: [8021]
    }, {
      code: 8031,
      lower: [],
      title: [],
      upper: [],
      fold: 8023,
      foldFull: [8023]
    }, {
      code: 8040,
      lower: [],
      title: [],
      upper: [],
      fold: 8032,
      foldFull: [8032]
    }, {
      code: 8041,
      lower: [],
      title: [],
      upper: [],
      fold: 8033,
      foldFull: [8033]
    }, {
      code: 8042,
      lower: [],
      title: [],
      upper: [],
      fold: 8034,
      foldFull: [8034]
    }, {
      code: 8043,
      lower: [],
      title: [],
      upper: [],
      fold: 8035,
      foldFull: [8035]
    }, {
      code: 8044,
      lower: [],
      title: [],
      upper: [],
      fold: 8036,
      foldFull: [8036]
    }, {
      code: 8045,
      lower: [],
      title: [],
      upper: [],
      fold: 8037,
      foldFull: [8037]
    }, {
      code: 8046,
      lower: [],
      title: [],
      upper: [],
      fold: 8038,
      foldFull: [8038]
    }, {
      code: 8047,
      lower: [],
      title: [],
      upper: [],
      fold: 8039,
      foldFull: [8039]
    }, {
      code: 8064,
      lower: [8064],
      title: [8072],
      upper: [7944, 921],
      fold: 0,
      foldFull: [7936, 953]
    }, {
      code: 8064,
      lower: [8064],
      title: [8072],
      upper: [7944, 921],
      fold: 0,
      foldFull: [7936, 953]
    }, {
      code: 8065,
      lower: [8065],
      title: [8073],
      upper: [7945, 921],
      fold: 0,
      foldFull: [7937, 953]
    }, {
      code: 8065,
      lower: [8065],
      title: [8073],
      upper: [7945, 921],
      fold: 0,
      foldFull: [7937, 953]
    }, {
      code: 8066,
      lower: [8066],
      title: [8074],
      upper: [7946, 921],
      fold: 0,
      foldFull: [7938, 953]
    }, {
      code: 8066,
      lower: [8066],
      title: [8074],
      upper: [7946, 921],
      fold: 0,
      foldFull: [7938, 953]
    }, {
      code: 8067,
      lower: [8067],
      title: [8075],
      upper: [7947, 921],
      fold: 0,
      foldFull: [7939, 953]
    }, {
      code: 8067,
      lower: [8067],
      title: [8075],
      upper: [7947, 921],
      fold: 0,
      foldFull: [7939, 953]
    }, {
      code: 8068,
      lower: [8068],
      title: [8076],
      upper: [7948, 921],
      fold: 0,
      foldFull: [7940, 953]
    }, {
      code: 8068,
      lower: [8068],
      title: [8076],
      upper: [7948, 921],
      fold: 0,
      foldFull: [7940, 953]
    }, {
      code: 8069,
      lower: [8069],
      title: [8077],
      upper: [7949, 921],
      fold: 0,
      foldFull: [7941, 953]
    }, {
      code: 8069,
      lower: [8069],
      title: [8077],
      upper: [7949, 921],
      fold: 0,
      foldFull: [7941, 953]
    }, {
      code: 8070,
      lower: [8070],
      title: [8078],
      upper: [7950, 921],
      fold: 0,
      foldFull: [7942, 953]
    }, {
      code: 8070,
      lower: [8070],
      title: [8078],
      upper: [7950, 921],
      fold: 0,
      foldFull: [7942, 953]
    }, {
      code: 8071,
      lower: [8071],
      title: [8079],
      upper: [7951, 921],
      fold: 0,
      foldFull: [7943, 953]
    }, {
      code: 8071,
      lower: [8071],
      title: [8079],
      upper: [7951, 921],
      fold: 0,
      foldFull: [7943, 953]
    }, {
      code: 8072,
      lower: [8064],
      title: [8072],
      upper: [7944, 921],
      fold: 8064,
      foldFull: [7936, 953]
    }, {
      code: 8072,
      lower: [8064],
      title: [8072],
      upper: [7944, 921],
      fold: 8064,
      foldFull: [7936, 953]
    }, {
      code: 8073,
      lower: [8065],
      title: [8073],
      upper: [7945, 921],
      fold: 8065,
      foldFull: [7937, 953]
    }, {
      code: 8073,
      lower: [8065],
      title: [8073],
      upper: [7945, 921],
      fold: 8065,
      foldFull: [7937, 953]
    }, {
      code: 8074,
      lower: [8066],
      title: [8074],
      upper: [7946, 921],
      fold: 8066,
      foldFull: [7938, 953]
    }, {
      code: 8074,
      lower: [8066],
      title: [8074],
      upper: [7946, 921],
      fold: 8066,
      foldFull: [7938, 953]
    }, {
      code: 8075,
      lower: [8067],
      title: [8075],
      upper: [7947, 921],
      fold: 8067,
      foldFull: [7939, 953]
    }, {
      code: 8075,
      lower: [8067],
      title: [8075],
      upper: [7947, 921],
      fold: 8067,
      foldFull: [7939, 953]
    }, {
      code: 8076,
      lower: [8068],
      title: [8076],
      upper: [7948, 921],
      fold: 8068,
      foldFull: [7940, 953]
    }, {
      code: 8076,
      lower: [8068],
      title: [8076],
      upper: [7948, 921],
      fold: 8068,
      foldFull: [7940, 953]
    }, {
      code: 8077,
      lower: [8069],
      title: [8077],
      upper: [7949, 921],
      fold: 8069,
      foldFull: [7941, 953]
    }, {
      code: 8077,
      lower: [8069],
      title: [8077],
      upper: [7949, 921],
      fold: 8069,
      foldFull: [7941, 953]
    }, {
      code: 8078,
      lower: [8070],
      title: [8078],
      upper: [7950, 921],
      fold: 8070,
      foldFull: [7942, 953]
    }, {
      code: 8078,
      lower: [8070],
      title: [8078],
      upper: [7950, 921],
      fold: 8070,
      foldFull: [7942, 953]
    }, {
      code: 8079,
      lower: [8071],
      title: [8079],
      upper: [7951, 921],
      fold: 8071,
      foldFull: [7943, 953]
    }, {
      code: 8079,
      lower: [8071],
      title: [8079],
      upper: [7951, 921],
      fold: 8071,
      foldFull: [7943, 953]
    }, {
      code: 8080,
      lower: [8080],
      title: [8088],
      upper: [7976, 921],
      fold: 0,
      foldFull: [7968, 953]
    }, {
      code: 8080,
      lower: [8080],
      title: [8088],
      upper: [7976, 921],
      fold: 0,
      foldFull: [7968, 953]
    }, {
      code: 8081,
      lower: [8081],
      title: [8089],
      upper: [7977, 921],
      fold: 0,
      foldFull: [7969, 953]
    }, {
      code: 8081,
      lower: [8081],
      title: [8089],
      upper: [7977, 921],
      fold: 0,
      foldFull: [7969, 953]
    }, {
      code: 8082,
      lower: [8082],
      title: [8090],
      upper: [7978, 921],
      fold: 0,
      foldFull: [7970, 953]
    }, {
      code: 8082,
      lower: [8082],
      title: [8090],
      upper: [7978, 921],
      fold: 0,
      foldFull: [7970, 953]
    }, {
      code: 8083,
      lower: [8083],
      title: [8091],
      upper: [7979, 921],
      fold: 0,
      foldFull: [7971, 953]
    }, {
      code: 8083,
      lower: [8083],
      title: [8091],
      upper: [7979, 921],
      fold: 0,
      foldFull: [7971, 953]
    }, {
      code: 8084,
      lower: [8084],
      title: [8092],
      upper: [7980, 921],
      fold: 0,
      foldFull: [7972, 953]
    }, {
      code: 8084,
      lower: [8084],
      title: [8092],
      upper: [7980, 921],
      fold: 0,
      foldFull: [7972, 953]
    }, {
      code: 8085,
      lower: [8085],
      title: [8093],
      upper: [7981, 921],
      fold: 0,
      foldFull: [7973, 953]
    }, {
      code: 8085,
      lower: [8085],
      title: [8093],
      upper: [7981, 921],
      fold: 0,
      foldFull: [7973, 953]
    }, {
      code: 8086,
      lower: [8086],
      title: [8094],
      upper: [7982, 921],
      fold: 0,
      foldFull: [7974, 953]
    }, {
      code: 8086,
      lower: [8086],
      title: [8094],
      upper: [7982, 921],
      fold: 0,
      foldFull: [7974, 953]
    }, {
      code: 8087,
      lower: [8087],
      title: [8095],
      upper: [7983, 921],
      fold: 0,
      foldFull: [7975, 953]
    }, {
      code: 8087,
      lower: [8087],
      title: [8095],
      upper: [7983, 921],
      fold: 0,
      foldFull: [7975, 953]
    }, {
      code: 8088,
      lower: [8080],
      title: [8088],
      upper: [7976, 921],
      fold: 8080,
      foldFull: [7968, 953]
    }, {
      code: 8088,
      lower: [8080],
      title: [8088],
      upper: [7976, 921],
      fold: 8080,
      foldFull: [7968, 953]
    }, {
      code: 8089,
      lower: [8081],
      title: [8089],
      upper: [7977, 921],
      fold: 8081,
      foldFull: [7969, 953]
    }, {
      code: 8089,
      lower: [8081],
      title: [8089],
      upper: [7977, 921],
      fold: 8081,
      foldFull: [7969, 953]
    }, {
      code: 8090,
      lower: [8082],
      title: [8090],
      upper: [7978, 921],
      fold: 8082,
      foldFull: [7970, 953]
    }, {
      code: 8090,
      lower: [8082],
      title: [8090],
      upper: [7978, 921],
      fold: 8082,
      foldFull: [7970, 953]
    }, {
      code: 8091,
      lower: [8083],
      title: [8091],
      upper: [7979, 921],
      fold: 8083,
      foldFull: [7971, 953]
    }, {
      code: 8091,
      lower: [8083],
      title: [8091],
      upper: [7979, 921],
      fold: 8083,
      foldFull: [7971, 953]
    }, {
      code: 8092,
      lower: [8084],
      title: [8092],
      upper: [7980, 921],
      fold: 8084,
      foldFull: [7972, 953]
    }, {
      code: 8092,
      lower: [8084],
      title: [8092],
      upper: [7980, 921],
      fold: 8084,
      foldFull: [7972, 953]
    }, {
      code: 8093,
      lower: [8085],
      title: [8093],
      upper: [7981, 921],
      fold: 8085,
      foldFull: [7973, 953]
    }, {
      code: 8093,
      lower: [8085],
      title: [8093],
      upper: [7981, 921],
      fold: 8085,
      foldFull: [7973, 953]
    }, {
      code: 8094,
      lower: [8086],
      title: [8094],
      upper: [7982, 921],
      fold: 8086,
      foldFull: [7974, 953]
    }, {
      code: 8094,
      lower: [8086],
      title: [8094],
      upper: [7982, 921],
      fold: 8086,
      foldFull: [7974, 953]
    }, {
      code: 8095,
      lower: [8087],
      title: [8095],
      upper: [7983, 921],
      fold: 8087,
      foldFull: [7975, 953]
    }, {
      code: 8095,
      lower: [8087],
      title: [8095],
      upper: [7983, 921],
      fold: 8087,
      foldFull: [7975, 953]
    }, {
      code: 8096,
      lower: [8096],
      title: [8104],
      upper: [8040, 921],
      fold: 0,
      foldFull: [8032, 953]
    }, {
      code: 8096,
      lower: [8096],
      title: [8104],
      upper: [8040, 921],
      fold: 0,
      foldFull: [8032, 953]
    }, {
      code: 8097,
      lower: [8097],
      title: [8105],
      upper: [8041, 921],
      fold: 0,
      foldFull: [8033, 953]
    }, {
      code: 8097,
      lower: [8097],
      title: [8105],
      upper: [8041, 921],
      fold: 0,
      foldFull: [8033, 953]
    }, {
      code: 8098,
      lower: [8098],
      title: [8106],
      upper: [8042, 921],
      fold: 0,
      foldFull: [8034, 953]
    }, {
      code: 8098,
      lower: [8098],
      title: [8106],
      upper: [8042, 921],
      fold: 0,
      foldFull: [8034, 953]
    }, {
      code: 8099,
      lower: [8099],
      title: [8107],
      upper: [8043, 921],
      fold: 0,
      foldFull: [8035, 953]
    }, {
      code: 8099,
      lower: [8099],
      title: [8107],
      upper: [8043, 921],
      fold: 0,
      foldFull: [8035, 953]
    }, {
      code: 8100,
      lower: [8100],
      title: [8108],
      upper: [8044, 921],
      fold: 0,
      foldFull: [8036, 953]
    }, {
      code: 8100,
      lower: [8100],
      title: [8108],
      upper: [8044, 921],
      fold: 0,
      foldFull: [8036, 953]
    }, {
      code: 8101,
      lower: [8101],
      title: [8109],
      upper: [8045, 921],
      fold: 0,
      foldFull: [8037, 953]
    }, {
      code: 8101,
      lower: [8101],
      title: [8109],
      upper: [8045, 921],
      fold: 0,
      foldFull: [8037, 953]
    }, {
      code: 8102,
      lower: [8102],
      title: [8110],
      upper: [8046, 921],
      fold: 0,
      foldFull: [8038, 953]
    }, {
      code: 8102,
      lower: [8102],
      title: [8110],
      upper: [8046, 921],
      fold: 0,
      foldFull: [8038, 953]
    }, {
      code: 8103,
      lower: [8103],
      title: [8111],
      upper: [8047, 921],
      fold: 0,
      foldFull: [8039, 953]
    }, {
      code: 8103,
      lower: [8103],
      title: [8111],
      upper: [8047, 921],
      fold: 0,
      foldFull: [8039, 953]
    }, {
      code: 8104,
      lower: [8096],
      title: [8104],
      upper: [8040, 921],
      fold: 8096,
      foldFull: [8032, 953]
    }, {
      code: 8104,
      lower: [8096],
      title: [8104],
      upper: [8040, 921],
      fold: 8096,
      foldFull: [8032, 953]
    }, {
      code: 8105,
      lower: [8097],
      title: [8105],
      upper: [8041, 921],
      fold: 8097,
      foldFull: [8033, 953]
    }, {
      code: 8105,
      lower: [8097],
      title: [8105],
      upper: [8041, 921],
      fold: 8097,
      foldFull: [8033, 953]
    }, {
      code: 8106,
      lower: [8098],
      title: [8106],
      upper: [8042, 921],
      fold: 8098,
      foldFull: [8034, 953]
    }, {
      code: 8106,
      lower: [8098],
      title: [8106],
      upper: [8042, 921],
      fold: 8098,
      foldFull: [8034, 953]
    }, {
      code: 8107,
      lower: [8099],
      title: [8107],
      upper: [8043, 921],
      fold: 8099,
      foldFull: [8035, 953]
    }, {
      code: 8107,
      lower: [8099],
      title: [8107],
      upper: [8043, 921],
      fold: 8099,
      foldFull: [8035, 953]
    }, {
      code: 8108,
      lower: [8100],
      title: [8108],
      upper: [8044, 921],
      fold: 8100,
      foldFull: [8036, 953]
    }, {
      code: 8108,
      lower: [8100],
      title: [8108],
      upper: [8044, 921],
      fold: 8100,
      foldFull: [8036, 953]
    }, {
      code: 8109,
      lower: [8101],
      title: [8109],
      upper: [8045, 921],
      fold: 8101,
      foldFull: [8037, 953]
    }, {
      code: 8109,
      lower: [8101],
      title: [8109],
      upper: [8045, 921],
      fold: 8101,
      foldFull: [8037, 953]
    }, {
      code: 8110,
      lower: [8102],
      title: [8110],
      upper: [8046, 921],
      fold: 8102,
      foldFull: [8038, 953]
    }, {
      code: 8110,
      lower: [8102],
      title: [8110],
      upper: [8046, 921],
      fold: 8102,
      foldFull: [8038, 953]
    }, {
      code: 8111,
      lower: [8103],
      title: [8111],
      upper: [8047, 921],
      fold: 8103,
      foldFull: [8039, 953]
    }, {
      code: 8111,
      lower: [8103],
      title: [8111],
      upper: [8047, 921],
      fold: 8103,
      foldFull: [8039, 953]
    }, {
      code: 8114,
      lower: [8114],
      title: [8122, 837],
      upper: [8122, 921],
      fold: 0,
      foldFull: [8048, 953]
    }, {
      code: 8114,
      lower: [8114],
      title: [8122, 837],
      upper: [8122, 921],
      fold: 0,
      foldFull: [8048, 953]
    }, {
      code: 8115,
      lower: [8115],
      title: [8124],
      upper: [913, 921],
      fold: 0,
      foldFull: [945, 953]
    }, {
      code: 8115,
      lower: [8115],
      title: [8124],
      upper: [913, 921],
      fold: 0,
      foldFull: [945, 953]
    }, {
      code: 8116,
      lower: [8116],
      title: [902, 837],
      upper: [902, 921],
      fold: 0,
      foldFull: [940, 953]
    }, {
      code: 8116,
      lower: [8116],
      title: [902, 837],
      upper: [902, 921],
      fold: 0,
      foldFull: [940, 953]
    }, {
      code: 8118,
      lower: [8118],
      title: [913, 834],
      upper: [913, 834],
      fold: 0,
      foldFull: [945, 834]
    }, {
      code: 8118,
      lower: [8118],
      title: [913, 834],
      upper: [913, 834],
      fold: 0,
      foldFull: [945, 834]
    }, {
      code: 8119,
      lower: [8119],
      title: [913, 834, 837],
      upper: [913, 834, 921],
      fold: 0,
      foldFull: [945, 834, 953]
    }, {
      code: 8119,
      lower: [8119],
      title: [913, 834, 837],
      upper: [913, 834, 921],
      fold: 0,
      foldFull: [945, 834, 953]
    }, {
      code: 8120,
      lower: [],
      title: [],
      upper: [],
      fold: 8112,
      foldFull: [8112]
    }, {
      code: 8121,
      lower: [],
      title: [],
      upper: [],
      fold: 8113,
      foldFull: [8113]
    }, {
      code: 8122,
      lower: [],
      title: [],
      upper: [],
      fold: 8048,
      foldFull: [8048]
    }, {
      code: 8123,
      lower: [],
      title: [],
      upper: [],
      fold: 8049,
      foldFull: [8049]
    }, {
      code: 8124,
      lower: [8115],
      title: [8124],
      upper: [913, 921],
      fold: 8115,
      foldFull: [945, 953]
    }, {
      code: 8124,
      lower: [8115],
      title: [8124],
      upper: [913, 921],
      fold: 8115,
      foldFull: [945, 953]
    }, {
      code: 8126,
      lower: [],
      title: [],
      upper: [],
      fold: 953,
      foldFull: [953]
    }, {
      code: 8130,
      lower: [8130],
      title: [8138, 837],
      upper: [8138, 921],
      fold: 0,
      foldFull: [8052, 953]
    }, {
      code: 8130,
      lower: [8130],
      title: [8138, 837],
      upper: [8138, 921],
      fold: 0,
      foldFull: [8052, 953]
    }, {
      code: 8131,
      lower: [8131],
      title: [8140],
      upper: [919, 921],
      fold: 0,
      foldFull: [951, 953]
    }, {
      code: 8131,
      lower: [8131],
      title: [8140],
      upper: [919, 921],
      fold: 0,
      foldFull: [951, 953]
    }, {
      code: 8132,
      lower: [8132],
      title: [905, 837],
      upper: [905, 921],
      fold: 0,
      foldFull: [942, 953]
    }, {
      code: 8132,
      lower: [8132],
      title: [905, 837],
      upper: [905, 921],
      fold: 0,
      foldFull: [942, 953]
    }, {
      code: 8134,
      lower: [8134],
      title: [919, 834],
      upper: [919, 834],
      fold: 0,
      foldFull: [951, 834]
    }, {
      code: 8134,
      lower: [8134],
      title: [919, 834],
      upper: [919, 834],
      fold: 0,
      foldFull: [951, 834]
    }, {
      code: 8135,
      lower: [8135],
      title: [919, 834, 837],
      upper: [919, 834, 921],
      fold: 0,
      foldFull: [951, 834, 953]
    }, {
      code: 8135,
      lower: [8135],
      title: [919, 834, 837],
      upper: [919, 834, 921],
      fold: 0,
      foldFull: [951, 834, 953]
    }, {
      code: 8136,
      lower: [],
      title: [],
      upper: [],
      fold: 8050,
      foldFull: [8050]
    }, {
      code: 8137,
      lower: [],
      title: [],
      upper: [],
      fold: 8051,
      foldFull: [8051]
    }, {
      code: 8138,
      lower: [],
      title: [],
      upper: [],
      fold: 8052,
      foldFull: [8052]
    }, {
      code: 8139,
      lower: [],
      title: [],
      upper: [],
      fold: 8053,
      foldFull: [8053]
    }, {
      code: 8140,
      lower: [8131],
      title: [8140],
      upper: [919, 921],
      fold: 8131,
      foldFull: [951, 953]
    }, {
      code: 8140,
      lower: [8131],
      title: [8140],
      upper: [919, 921],
      fold: 8131,
      foldFull: [951, 953]
    }, {
      code: 8146,
      lower: [8146],
      title: [921, 776, 768],
      upper: [921, 776, 768],
      fold: 0,
      foldFull: [953, 776, 768]
    }, {
      code: 8146,
      lower: [8146],
      title: [921, 776, 768],
      upper: [921, 776, 768],
      fold: 0,
      foldFull: [953, 776, 768]
    }, {
      code: 8147,
      lower: [8147],
      title: [921, 776, 769],
      upper: [921, 776, 769],
      fold: 0,
      foldFull: [953, 776, 769]
    }, {
      code: 8147,
      lower: [8147],
      title: [921, 776, 769],
      upper: [921, 776, 769],
      fold: 0,
      foldFull: [953, 776, 769]
    }, {
      code: 8150,
      lower: [8150],
      title: [921, 834],
      upper: [921, 834],
      fold: 0,
      foldFull: [953, 834]
    }, {
      code: 8150,
      lower: [8150],
      title: [921, 834],
      upper: [921, 834],
      fold: 0,
      foldFull: [953, 834]
    }, {
      code: 8151,
      lower: [8151],
      title: [921, 776, 834],
      upper: [921, 776, 834],
      fold: 0,
      foldFull: [953, 776, 834]
    }, {
      code: 8151,
      lower: [8151],
      title: [921, 776, 834],
      upper: [921, 776, 834],
      fold: 0,
      foldFull: [953, 776, 834]
    }, {
      code: 8152,
      lower: [],
      title: [],
      upper: [],
      fold: 8144,
      foldFull: [8144]
    }, {
      code: 8153,
      lower: [],
      title: [],
      upper: [],
      fold: 8145,
      foldFull: [8145]
    }, {
      code: 8154,
      lower: [],
      title: [],
      upper: [],
      fold: 8054,
      foldFull: [8054]
    }, {
      code: 8155,
      lower: [],
      title: [],
      upper: [],
      fold: 8055,
      foldFull: [8055]
    }, {
      code: 8162,
      lower: [8162],
      title: [933, 776, 768],
      upper: [933, 776, 768],
      fold: 0,
      foldFull: [965, 776, 768]
    }, {
      code: 8162,
      lower: [8162],
      title: [933, 776, 768],
      upper: [933, 776, 768],
      fold: 0,
      foldFull: [965, 776, 768]
    }, {
      code: 8163,
      lower: [8163],
      title: [933, 776, 769],
      upper: [933, 776, 769],
      fold: 0,
      foldFull: [965, 776, 769]
    }, {
      code: 8163,
      lower: [8163],
      title: [933, 776, 769],
      upper: [933, 776, 769],
      fold: 0,
      foldFull: [965, 776, 769]
    }, {
      code: 8164,
      lower: [8164],
      title: [929, 787],
      upper: [929, 787],
      fold: 0,
      foldFull: [961, 787]
    }, {
      code: 8164,
      lower: [8164],
      title: [929, 787],
      upper: [929, 787],
      fold: 0,
      foldFull: [961, 787]
    }, {
      code: 8166,
      lower: [8166],
      title: [933, 834],
      upper: [933, 834],
      fold: 0,
      foldFull: [965, 834]
    }, {
      code: 8166,
      lower: [8166],
      title: [933, 834],
      upper: [933, 834],
      fold: 0,
      foldFull: [965, 834]
    }, {
      code: 8167,
      lower: [8167],
      title: [933, 776, 834],
      upper: [933, 776, 834],
      fold: 0,
      foldFull: [965, 776, 834]
    }, {
      code: 8167,
      lower: [8167],
      title: [933, 776, 834],
      upper: [933, 776, 834],
      fold: 0,
      foldFull: [965, 776, 834]
    }, {
      code: 8168,
      lower: [],
      title: [],
      upper: [],
      fold: 8160,
      foldFull: [8160]
    }, {
      code: 8169,
      lower: [],
      title: [],
      upper: [],
      fold: 8161,
      foldFull: [8161]
    }, {
      code: 8170,
      lower: [],
      title: [],
      upper: [],
      fold: 8058,
      foldFull: [8058]
    }, {
      code: 8171,
      lower: [],
      title: [],
      upper: [],
      fold: 8059,
      foldFull: [8059]
    }, {
      code: 8172,
      lower: [],
      title: [],
      upper: [],
      fold: 8165,
      foldFull: [8165]
    }, {
      code: 8178,
      lower: [8178],
      title: [8186, 837],
      upper: [8186, 921],
      fold: 0,
      foldFull: [8060, 953]
    }, {
      code: 8178,
      lower: [8178],
      title: [8186, 837],
      upper: [8186, 921],
      fold: 0,
      foldFull: [8060, 953]
    }, {
      code: 8179,
      lower: [8179],
      title: [8188],
      upper: [937, 921],
      fold: 0,
      foldFull: [969, 953]
    }, {
      code: 8179,
      lower: [8179],
      title: [8188],
      upper: [937, 921],
      fold: 0,
      foldFull: [969, 953]
    }, {
      code: 8180,
      lower: [8180],
      title: [911, 837],
      upper: [911, 921],
      fold: 0,
      foldFull: [974, 953]
    }, {
      code: 8180,
      lower: [8180],
      title: [911, 837],
      upper: [911, 921],
      fold: 0,
      foldFull: [974, 953]
    }, {
      code: 8182,
      lower: [8182],
      title: [937, 834],
      upper: [937, 834],
      fold: 0,
      foldFull: [969, 834]
    }, {
      code: 8182,
      lower: [8182],
      title: [937, 834],
      upper: [937, 834],
      fold: 0,
      foldFull: [969, 834]
    }, {
      code: 8183,
      lower: [8183],
      title: [937, 834, 837],
      upper: [937, 834, 921],
      fold: 0,
      foldFull: [969, 834, 953]
    }, {
      code: 8183,
      lower: [8183],
      title: [937, 834, 837],
      upper: [937, 834, 921],
      fold: 0,
      foldFull: [969, 834, 953]
    }, {
      code: 8184,
      lower: [],
      title: [],
      upper: [],
      fold: 8056,
      foldFull: [8056]
    }, {
      code: 8185,
      lower: [],
      title: [],
      upper: [],
      fold: 8057,
      foldFull: [8057]
    }, {
      code: 8186,
      lower: [],
      title: [],
      upper: [],
      fold: 8060,
      foldFull: [8060]
    }, {
      code: 8187,
      lower: [],
      title: [],
      upper: [],
      fold: 8061,
      foldFull: [8061]
    }, {
      code: 8188,
      lower: [8179],
      title: [8188],
      upper: [937, 921],
      fold: 8179,
      foldFull: [969, 953]
    }, {
      code: 8188,
      lower: [8179],
      title: [8188],
      upper: [937, 921],
      fold: 8179,
      foldFull: [969, 953]
    }, {
      code: 8486,
      lower: [],
      title: [],
      upper: [],
      fold: 969,
      foldFull: [969]
    }, {
      code: 8490,
      lower: [],
      title: [],
      upper: [],
      fold: 107,
      foldFull: [107]
    }, {
      code: 8491,
      lower: [],
      title: [],
      upper: [],
      fold: 229,
      foldFull: [229]
    }, {
      code: 8498,
      lower: [],
      title: [],
      upper: [],
      fold: 8526,
      foldFull: [8526]
    }, {
      code: 8544,
      lower: [],
      title: [],
      upper: [],
      fold: 8560,
      foldFull: [8560]
    }, {
      code: 8545,
      lower: [],
      title: [],
      upper: [],
      fold: 8561,
      foldFull: [8561]
    }, {
      code: 8546,
      lower: [],
      title: [],
      upper: [],
      fold: 8562,
      foldFull: [8562]
    }, {
      code: 8547,
      lower: [],
      title: [],
      upper: [],
      fold: 8563,
      foldFull: [8563]
    }, {
      code: 8548,
      lower: [],
      title: [],
      upper: [],
      fold: 8564,
      foldFull: [8564]
    }, {
      code: 8549,
      lower: [],
      title: [],
      upper: [],
      fold: 8565,
      foldFull: [8565]
    }, {
      code: 8550,
      lower: [],
      title: [],
      upper: [],
      fold: 8566,
      foldFull: [8566]
    }, {
      code: 8551,
      lower: [],
      title: [],
      upper: [],
      fold: 8567,
      foldFull: [8567]
    }, {
      code: 8552,
      lower: [],
      title: [],
      upper: [],
      fold: 8568,
      foldFull: [8568]
    }, {
      code: 8553,
      lower: [],
      title: [],
      upper: [],
      fold: 8569,
      foldFull: [8569]
    }, {
      code: 8554,
      lower: [],
      title: [],
      upper: [],
      fold: 8570,
      foldFull: [8570]
    }, {
      code: 8555,
      lower: [],
      title: [],
      upper: [],
      fold: 8571,
      foldFull: [8571]
    }, {
      code: 8556,
      lower: [],
      title: [],
      upper: [],
      fold: 8572,
      foldFull: [8572]
    }, {
      code: 8557,
      lower: [],
      title: [],
      upper: [],
      fold: 8573,
      foldFull: [8573]
    }, {
      code: 8558,
      lower: [],
      title: [],
      upper: [],
      fold: 8574,
      foldFull: [8574]
    }, {
      code: 8559,
      lower: [],
      title: [],
      upper: [],
      fold: 8575,
      foldFull: [8575]
    }, {
      code: 8579,
      lower: [],
      title: [],
      upper: [],
      fold: 8580,
      foldFull: [8580]
    }, {
      code: 9398,
      lower: [],
      title: [],
      upper: [],
      fold: 9424,
      foldFull: [9424]
    }, {
      code: 9399,
      lower: [],
      title: [],
      upper: [],
      fold: 9425,
      foldFull: [9425]
    }, {
      code: 9400,
      lower: [],
      title: [],
      upper: [],
      fold: 9426,
      foldFull: [9426]
    }, {
      code: 9401,
      lower: [],
      title: [],
      upper: [],
      fold: 9427,
      foldFull: [9427]
    }, {
      code: 9402,
      lower: [],
      title: [],
      upper: [],
      fold: 9428,
      foldFull: [9428]
    }, {
      code: 9403,
      lower: [],
      title: [],
      upper: [],
      fold: 9429,
      foldFull: [9429]
    }, {
      code: 9404,
      lower: [],
      title: [],
      upper: [],
      fold: 9430,
      foldFull: [9430]
    }, {
      code: 9405,
      lower: [],
      title: [],
      upper: [],
      fold: 9431,
      foldFull: [9431]
    }, {
      code: 9406,
      lower: [],
      title: [],
      upper: [],
      fold: 9432,
      foldFull: [9432]
    }, {
      code: 9407,
      lower: [],
      title: [],
      upper: [],
      fold: 9433,
      foldFull: [9433]
    }, {
      code: 9408,
      lower: [],
      title: [],
      upper: [],
      fold: 9434,
      foldFull: [9434]
    }, {
      code: 9409,
      lower: [],
      title: [],
      upper: [],
      fold: 9435,
      foldFull: [9435]
    }, {
      code: 9410,
      lower: [],
      title: [],
      upper: [],
      fold: 9436,
      foldFull: [9436]
    }, {
      code: 9411,
      lower: [],
      title: [],
      upper: [],
      fold: 9437,
      foldFull: [9437]
    }, {
      code: 9412,
      lower: [],
      title: [],
      upper: [],
      fold: 9438,
      foldFull: [9438]
    }, {
      code: 9413,
      lower: [],
      title: [],
      upper: [],
      fold: 9439,
      foldFull: [9439]
    }, {
      code: 9414,
      lower: [],
      title: [],
      upper: [],
      fold: 9440,
      foldFull: [9440]
    }, {
      code: 9415,
      lower: [],
      title: [],
      upper: [],
      fold: 9441,
      foldFull: [9441]
    }, {
      code: 9416,
      lower: [],
      title: [],
      upper: [],
      fold: 9442,
      foldFull: [9442]
    }, {
      code: 9417,
      lower: [],
      title: [],
      upper: [],
      fold: 9443,
      foldFull: [9443]
    }, {
      code: 9418,
      lower: [],
      title: [],
      upper: [],
      fold: 9444,
      foldFull: [9444]
    }, {
      code: 9419,
      lower: [],
      title: [],
      upper: [],
      fold: 9445,
      foldFull: [9445]
    }, {
      code: 9420,
      lower: [],
      title: [],
      upper: [],
      fold: 9446,
      foldFull: [9446]
    }, {
      code: 9421,
      lower: [],
      title: [],
      upper: [],
      fold: 9447,
      foldFull: [9447]
    }, {
      code: 9422,
      lower: [],
      title: [],
      upper: [],
      fold: 9448,
      foldFull: [9448]
    }, {
      code: 9423,
      lower: [],
      title: [],
      upper: [],
      fold: 9449,
      foldFull: [9449]
    }, {
      code: 11264,
      lower: [],
      title: [],
      upper: [],
      fold: 11312,
      foldFull: [11312]
    }, {
      code: 11265,
      lower: [],
      title: [],
      upper: [],
      fold: 11313,
      foldFull: [11313]
    }, {
      code: 11266,
      lower: [],
      title: [],
      upper: [],
      fold: 11314,
      foldFull: [11314]
    }, {
      code: 11267,
      lower: [],
      title: [],
      upper: [],
      fold: 11315,
      foldFull: [11315]
    }, {
      code: 11268,
      lower: [],
      title: [],
      upper: [],
      fold: 11316,
      foldFull: [11316]
    }, {
      code: 11269,
      lower: [],
      title: [],
      upper: [],
      fold: 11317,
      foldFull: [11317]
    }, {
      code: 11270,
      lower: [],
      title: [],
      upper: [],
      fold: 11318,
      foldFull: [11318]
    }, {
      code: 11271,
      lower: [],
      title: [],
      upper: [],
      fold: 11319,
      foldFull: [11319]
    }, {
      code: 11272,
      lower: [],
      title: [],
      upper: [],
      fold: 11320,
      foldFull: [11320]
    }, {
      code: 11273,
      lower: [],
      title: [],
      upper: [],
      fold: 11321,
      foldFull: [11321]
    }, {
      code: 11274,
      lower: [],
      title: [],
      upper: [],
      fold: 11322,
      foldFull: [11322]
    }, {
      code: 11275,
      lower: [],
      title: [],
      upper: [],
      fold: 11323,
      foldFull: [11323]
    }, {
      code: 11276,
      lower: [],
      title: [],
      upper: [],
      fold: 11324,
      foldFull: [11324]
    }, {
      code: 11277,
      lower: [],
      title: [],
      upper: [],
      fold: 11325,
      foldFull: [11325]
    }, {
      code: 11278,
      lower: [],
      title: [],
      upper: [],
      fold: 11326,
      foldFull: [11326]
    }, {
      code: 11279,
      lower: [],
      title: [],
      upper: [],
      fold: 11327,
      foldFull: [11327]
    }, {
      code: 11280,
      lower: [],
      title: [],
      upper: [],
      fold: 11328,
      foldFull: [11328]
    }, {
      code: 11281,
      lower: [],
      title: [],
      upper: [],
      fold: 11329,
      foldFull: [11329]
    }, {
      code: 11282,
      lower: [],
      title: [],
      upper: [],
      fold: 11330,
      foldFull: [11330]
    }, {
      code: 11283,
      lower: [],
      title: [],
      upper: [],
      fold: 11331,
      foldFull: [11331]
    }, {
      code: 11284,
      lower: [],
      title: [],
      upper: [],
      fold: 11332,
      foldFull: [11332]
    }, {
      code: 11285,
      lower: [],
      title: [],
      upper: [],
      fold: 11333,
      foldFull: [11333]
    }, {
      code: 11286,
      lower: [],
      title: [],
      upper: [],
      fold: 11334,
      foldFull: [11334]
    }, {
      code: 11287,
      lower: [],
      title: [],
      upper: [],
      fold: 11335,
      foldFull: [11335]
    }, {
      code: 11288,
      lower: [],
      title: [],
      upper: [],
      fold: 11336,
      foldFull: [11336]
    }, {
      code: 11289,
      lower: [],
      title: [],
      upper: [],
      fold: 11337,
      foldFull: [11337]
    }, {
      code: 11290,
      lower: [],
      title: [],
      upper: [],
      fold: 11338,
      foldFull: [11338]
    }, {
      code: 11291,
      lower: [],
      title: [],
      upper: [],
      fold: 11339,
      foldFull: [11339]
    }, {
      code: 11292,
      lower: [],
      title: [],
      upper: [],
      fold: 11340,
      foldFull: [11340]
    }, {
      code: 11293,
      lower: [],
      title: [],
      upper: [],
      fold: 11341,
      foldFull: [11341]
    }, {
      code: 11294,
      lower: [],
      title: [],
      upper: [],
      fold: 11342,
      foldFull: [11342]
    }, {
      code: 11295,
      lower: [],
      title: [],
      upper: [],
      fold: 11343,
      foldFull: [11343]
    }, {
      code: 11296,
      lower: [],
      title: [],
      upper: [],
      fold: 11344,
      foldFull: [11344]
    }, {
      code: 11297,
      lower: [],
      title: [],
      upper: [],
      fold: 11345,
      foldFull: [11345]
    }, {
      code: 11298,
      lower: [],
      title: [],
      upper: [],
      fold: 11346,
      foldFull: [11346]
    }, {
      code: 11299,
      lower: [],
      title: [],
      upper: [],
      fold: 11347,
      foldFull: [11347]
    }, {
      code: 11300,
      lower: [],
      title: [],
      upper: [],
      fold: 11348,
      foldFull: [11348]
    }, {
      code: 11301,
      lower: [],
      title: [],
      upper: [],
      fold: 11349,
      foldFull: [11349]
    }, {
      code: 11302,
      lower: [],
      title: [],
      upper: [],
      fold: 11350,
      foldFull: [11350]
    }, {
      code: 11303,
      lower: [],
      title: [],
      upper: [],
      fold: 11351,
      foldFull: [11351]
    }, {
      code: 11304,
      lower: [],
      title: [],
      upper: [],
      fold: 11352,
      foldFull: [11352]
    }, {
      code: 11305,
      lower: [],
      title: [],
      upper: [],
      fold: 11353,
      foldFull: [11353]
    }, {
      code: 11306,
      lower: [],
      title: [],
      upper: [],
      fold: 11354,
      foldFull: [11354]
    }, {
      code: 11307,
      lower: [],
      title: [],
      upper: [],
      fold: 11355,
      foldFull: [11355]
    }, {
      code: 11308,
      lower: [],
      title: [],
      upper: [],
      fold: 11356,
      foldFull: [11356]
    }, {
      code: 11309,
      lower: [],
      title: [],
      upper: [],
      fold: 11357,
      foldFull: [11357]
    }, {
      code: 11310,
      lower: [],
      title: [],
      upper: [],
      fold: 11358,
      foldFull: [11358]
    }, {
      code: 11360,
      lower: [],
      title: [],
      upper: [],
      fold: 11361,
      foldFull: [11361]
    }, {
      code: 11362,
      lower: [],
      title: [],
      upper: [],
      fold: 619,
      foldFull: [619]
    }, {
      code: 11363,
      lower: [],
      title: [],
      upper: [],
      fold: 7549,
      foldFull: [7549]
    }, {
      code: 11364,
      lower: [],
      title: [],
      upper: [],
      fold: 637,
      foldFull: [637]
    }, {
      code: 11367,
      lower: [],
      title: [],
      upper: [],
      fold: 11368,
      foldFull: [11368]
    }, {
      code: 11369,
      lower: [],
      title: [],
      upper: [],
      fold: 11370,
      foldFull: [11370]
    }, {
      code: 11371,
      lower: [],
      title: [],
      upper: [],
      fold: 11372,
      foldFull: [11372]
    }, {
      code: 11373,
      lower: [],
      title: [],
      upper: [],
      fold: 593,
      foldFull: [593]
    }, {
      code: 11374,
      lower: [],
      title: [],
      upper: [],
      fold: 625,
      foldFull: [625]
    }, {
      code: 11375,
      lower: [],
      title: [],
      upper: [],
      fold: 592,
      foldFull: [592]
    }, {
      code: 11376,
      lower: [],
      title: [],
      upper: [],
      fold: 594,
      foldFull: [594]
    }, {
      code: 11378,
      lower: [],
      title: [],
      upper: [],
      fold: 11379,
      foldFull: [11379]
    }, {
      code: 11381,
      lower: [],
      title: [],
      upper: [],
      fold: 11382,
      foldFull: [11382]
    }, {
      code: 11390,
      lower: [],
      title: [],
      upper: [],
      fold: 575,
      foldFull: [575]
    }, {
      code: 11391,
      lower: [],
      title: [],
      upper: [],
      fold: 576,
      foldFull: [576]
    }, {
      code: 11392,
      lower: [],
      title: [],
      upper: [],
      fold: 11393,
      foldFull: [11393]
    }, {
      code: 11394,
      lower: [],
      title: [],
      upper: [],
      fold: 11395,
      foldFull: [11395]
    }, {
      code: 11396,
      lower: [],
      title: [],
      upper: [],
      fold: 11397,
      foldFull: [11397]
    }, {
      code: 11398,
      lower: [],
      title: [],
      upper: [],
      fold: 11399,
      foldFull: [11399]
    }, {
      code: 11400,
      lower: [],
      title: [],
      upper: [],
      fold: 11401,
      foldFull: [11401]
    }, {
      code: 11402,
      lower: [],
      title: [],
      upper: [],
      fold: 11403,
      foldFull: [11403]
    }, {
      code: 11404,
      lower: [],
      title: [],
      upper: [],
      fold: 11405,
      foldFull: [11405]
    }, {
      code: 11406,
      lower: [],
      title: [],
      upper: [],
      fold: 11407,
      foldFull: [11407]
    }, {
      code: 11408,
      lower: [],
      title: [],
      upper: [],
      fold: 11409,
      foldFull: [11409]
    }, {
      code: 11410,
      lower: [],
      title: [],
      upper: [],
      fold: 11411,
      foldFull: [11411]
    }, {
      code: 11412,
      lower: [],
      title: [],
      upper: [],
      fold: 11413,
      foldFull: [11413]
    }, {
      code: 11414,
      lower: [],
      title: [],
      upper: [],
      fold: 11415,
      foldFull: [11415]
    }, {
      code: 11416,
      lower: [],
      title: [],
      upper: [],
      fold: 11417,
      foldFull: [11417]
    }, {
      code: 11418,
      lower: [],
      title: [],
      upper: [],
      fold: 11419,
      foldFull: [11419]
    }, {
      code: 11420,
      lower: [],
      title: [],
      upper: [],
      fold: 11421,
      foldFull: [11421]
    }, {
      code: 11422,
      lower: [],
      title: [],
      upper: [],
      fold: 11423,
      foldFull: [11423]
    }, {
      code: 11424,
      lower: [],
      title: [],
      upper: [],
      fold: 11425,
      foldFull: [11425]
    }, {
      code: 11426,
      lower: [],
      title: [],
      upper: [],
      fold: 11427,
      foldFull: [11427]
    }, {
      code: 11428,
      lower: [],
      title: [],
      upper: [],
      fold: 11429,
      foldFull: [11429]
    }, {
      code: 11430,
      lower: [],
      title: [],
      upper: [],
      fold: 11431,
      foldFull: [11431]
    }, {
      code: 11432,
      lower: [],
      title: [],
      upper: [],
      fold: 11433,
      foldFull: [11433]
    }, {
      code: 11434,
      lower: [],
      title: [],
      upper: [],
      fold: 11435,
      foldFull: [11435]
    }, {
      code: 11436,
      lower: [],
      title: [],
      upper: [],
      fold: 11437,
      foldFull: [11437]
    }, {
      code: 11438,
      lower: [],
      title: [],
      upper: [],
      fold: 11439,
      foldFull: [11439]
    }, {
      code: 11440,
      lower: [],
      title: [],
      upper: [],
      fold: 11441,
      foldFull: [11441]
    }, {
      code: 11442,
      lower: [],
      title: [],
      upper: [],
      fold: 11443,
      foldFull: [11443]
    }, {
      code: 11444,
      lower: [],
      title: [],
      upper: [],
      fold: 11445,
      foldFull: [11445]
    }, {
      code: 11446,
      lower: [],
      title: [],
      upper: [],
      fold: 11447,
      foldFull: [11447]
    }, {
      code: 11448,
      lower: [],
      title: [],
      upper: [],
      fold: 11449,
      foldFull: [11449]
    }, {
      code: 11450,
      lower: [],
      title: [],
      upper: [],
      fold: 11451,
      foldFull: [11451]
    }, {
      code: 11452,
      lower: [],
      title: [],
      upper: [],
      fold: 11453,
      foldFull: [11453]
    }, {
      code: 11454,
      lower: [],
      title: [],
      upper: [],
      fold: 11455,
      foldFull: [11455]
    }, {
      code: 11456,
      lower: [],
      title: [],
      upper: [],
      fold: 11457,
      foldFull: [11457]
    }, {
      code: 11458,
      lower: [],
      title: [],
      upper: [],
      fold: 11459,
      foldFull: [11459]
    }, {
      code: 11460,
      lower: [],
      title: [],
      upper: [],
      fold: 11461,
      foldFull: [11461]
    }, {
      code: 11462,
      lower: [],
      title: [],
      upper: [],
      fold: 11463,
      foldFull: [11463]
    }, {
      code: 11464,
      lower: [],
      title: [],
      upper: [],
      fold: 11465,
      foldFull: [11465]
    }, {
      code: 11466,
      lower: [],
      title: [],
      upper: [],
      fold: 11467,
      foldFull: [11467]
    }, {
      code: 11468,
      lower: [],
      title: [],
      upper: [],
      fold: 11469,
      foldFull: [11469]
    }, {
      code: 11470,
      lower: [],
      title: [],
      upper: [],
      fold: 11471,
      foldFull: [11471]
    }, {
      code: 11472,
      lower: [],
      title: [],
      upper: [],
      fold: 11473,
      foldFull: [11473]
    }, {
      code: 11474,
      lower: [],
      title: [],
      upper: [],
      fold: 11475,
      foldFull: [11475]
    }, {
      code: 11476,
      lower: [],
      title: [],
      upper: [],
      fold: 11477,
      foldFull: [11477]
    }, {
      code: 11478,
      lower: [],
      title: [],
      upper: [],
      fold: 11479,
      foldFull: [11479]
    }, {
      code: 11480,
      lower: [],
      title: [],
      upper: [],
      fold: 11481,
      foldFull: [11481]
    }, {
      code: 11482,
      lower: [],
      title: [],
      upper: [],
      fold: 11483,
      foldFull: [11483]
    }, {
      code: 11484,
      lower: [],
      title: [],
      upper: [],
      fold: 11485,
      foldFull: [11485]
    }, {
      code: 11486,
      lower: [],
      title: [],
      upper: [],
      fold: 11487,
      foldFull: [11487]
    }, {
      code: 11488,
      lower: [],
      title: [],
      upper: [],
      fold: 11489,
      foldFull: [11489]
    }, {
      code: 11490,
      lower: [],
      title: [],
      upper: [],
      fold: 11491,
      foldFull: [11491]
    }, {
      code: 11499,
      lower: [],
      title: [],
      upper: [],
      fold: 11500,
      foldFull: [11500]
    }, {
      code: 11501,
      lower: [],
      title: [],
      upper: [],
      fold: 11502,
      foldFull: [11502]
    }, {
      code: 11506,
      lower: [],
      title: [],
      upper: [],
      fold: 11507,
      foldFull: [11507]
    }, {
      code: 42560,
      lower: [],
      title: [],
      upper: [],
      fold: 42561,
      foldFull: [42561]
    }, {
      code: 42562,
      lower: [],
      title: [],
      upper: [],
      fold: 42563,
      foldFull: [42563]
    }, {
      code: 42564,
      lower: [],
      title: [],
      upper: [],
      fold: 42565,
      foldFull: [42565]
    }, {
      code: 42566,
      lower: [],
      title: [],
      upper: [],
      fold: 42567,
      foldFull: [42567]
    }, {
      code: 42568,
      lower: [],
      title: [],
      upper: [],
      fold: 42569,
      foldFull: [42569]
    }, {
      code: 42570,
      lower: [],
      title: [],
      upper: [],
      fold: 42571,
      foldFull: [42571]
    }, {
      code: 42572,
      lower: [],
      title: [],
      upper: [],
      fold: 42573,
      foldFull: [42573]
    }, {
      code: 42574,
      lower: [],
      title: [],
      upper: [],
      fold: 42575,
      foldFull: [42575]
    }, {
      code: 42576,
      lower: [],
      title: [],
      upper: [],
      fold: 42577,
      foldFull: [42577]
    }, {
      code: 42578,
      lower: [],
      title: [],
      upper: [],
      fold: 42579,
      foldFull: [42579]
    }, {
      code: 42580,
      lower: [],
      title: [],
      upper: [],
      fold: 42581,
      foldFull: [42581]
    }, {
      code: 42582,
      lower: [],
      title: [],
      upper: [],
      fold: 42583,
      foldFull: [42583]
    }, {
      code: 42584,
      lower: [],
      title: [],
      upper: [],
      fold: 42585,
      foldFull: [42585]
    }, {
      code: 42586,
      lower: [],
      title: [],
      upper: [],
      fold: 42587,
      foldFull: [42587]
    }, {
      code: 42588,
      lower: [],
      title: [],
      upper: [],
      fold: 42589,
      foldFull: [42589]
    }, {
      code: 42590,
      lower: [],
      title: [],
      upper: [],
      fold: 42591,
      foldFull: [42591]
    }, {
      code: 42592,
      lower: [],
      title: [],
      upper: [],
      fold: 42593,
      foldFull: [42593]
    }, {
      code: 42594,
      lower: [],
      title: [],
      upper: [],
      fold: 42595,
      foldFull: [42595]
    }, {
      code: 42596,
      lower: [],
      title: [],
      upper: [],
      fold: 42597,
      foldFull: [42597]
    }, {
      code: 42598,
      lower: [],
      title: [],
      upper: [],
      fold: 42599,
      foldFull: [42599]
    }, {
      code: 42600,
      lower: [],
      title: [],
      upper: [],
      fold: 42601,
      foldFull: [42601]
    }, {
      code: 42602,
      lower: [],
      title: [],
      upper: [],
      fold: 42603,
      foldFull: [42603]
    }, {
      code: 42604,
      lower: [],
      title: [],
      upper: [],
      fold: 42605,
      foldFull: [42605]
    }, {
      code: 42624,
      lower: [],
      title: [],
      upper: [],
      fold: 42625,
      foldFull: [42625]
    }, {
      code: 42626,
      lower: [],
      title: [],
      upper: [],
      fold: 42627,
      foldFull: [42627]
    }, {
      code: 42628,
      lower: [],
      title: [],
      upper: [],
      fold: 42629,
      foldFull: [42629]
    }, {
      code: 42630,
      lower: [],
      title: [],
      upper: [],
      fold: 42631,
      foldFull: [42631]
    }, {
      code: 42632,
      lower: [],
      title: [],
      upper: [],
      fold: 42633,
      foldFull: [42633]
    }, {
      code: 42634,
      lower: [],
      title: [],
      upper: [],
      fold: 42635,
      foldFull: [42635]
    }, {
      code: 42636,
      lower: [],
      title: [],
      upper: [],
      fold: 42637,
      foldFull: [42637]
    }, {
      code: 42638,
      lower: [],
      title: [],
      upper: [],
      fold: 42639,
      foldFull: [42639]
    }, {
      code: 42640,
      lower: [],
      title: [],
      upper: [],
      fold: 42641,
      foldFull: [42641]
    }, {
      code: 42642,
      lower: [],
      title: [],
      upper: [],
      fold: 42643,
      foldFull: [42643]
    }, {
      code: 42644,
      lower: [],
      title: [],
      upper: [],
      fold: 42645,
      foldFull: [42645]
    }, {
      code: 42646,
      lower: [],
      title: [],
      upper: [],
      fold: 42647,
      foldFull: [42647]
    }, {
      code: 42648,
      lower: [],
      title: [],
      upper: [],
      fold: 42649,
      foldFull: [42649]
    }, {
      code: 42650,
      lower: [],
      title: [],
      upper: [],
      fold: 42651,
      foldFull: [42651]
    }, {
      code: 42786,
      lower: [],
      title: [],
      upper: [],
      fold: 42787,
      foldFull: [42787]
    }, {
      code: 42788,
      lower: [],
      title: [],
      upper: [],
      fold: 42789,
      foldFull: [42789]
    }, {
      code: 42790,
      lower: [],
      title: [],
      upper: [],
      fold: 42791,
      foldFull: [42791]
    }, {
      code: 42792,
      lower: [],
      title: [],
      upper: [],
      fold: 42793,
      foldFull: [42793]
    }, {
      code: 42794,
      lower: [],
      title: [],
      upper: [],
      fold: 42795,
      foldFull: [42795]
    }, {
      code: 42796,
      lower: [],
      title: [],
      upper: [],
      fold: 42797,
      foldFull: [42797]
    }, {
      code: 42798,
      lower: [],
      title: [],
      upper: [],
      fold: 42799,
      foldFull: [42799]
    }, {
      code: 42802,
      lower: [],
      title: [],
      upper: [],
      fold: 42803,
      foldFull: [42803]
    }, {
      code: 42804,
      lower: [],
      title: [],
      upper: [],
      fold: 42805,
      foldFull: [42805]
    }, {
      code: 42806,
      lower: [],
      title: [],
      upper: [],
      fold: 42807,
      foldFull: [42807]
    }, {
      code: 42808,
      lower: [],
      title: [],
      upper: [],
      fold: 42809,
      foldFull: [42809]
    }, {
      code: 42810,
      lower: [],
      title: [],
      upper: [],
      fold: 42811,
      foldFull: [42811]
    }, {
      code: 42812,
      lower: [],
      title: [],
      upper: [],
      fold: 42813,
      foldFull: [42813]
    }, {
      code: 42814,
      lower: [],
      title: [],
      upper: [],
      fold: 42815,
      foldFull: [42815]
    }, {
      code: 42816,
      lower: [],
      title: [],
      upper: [],
      fold: 42817,
      foldFull: [42817]
    }, {
      code: 42818,
      lower: [],
      title: [],
      upper: [],
      fold: 42819,
      foldFull: [42819]
    }, {
      code: 42820,
      lower: [],
      title: [],
      upper: [],
      fold: 42821,
      foldFull: [42821]
    }, {
      code: 42822,
      lower: [],
      title: [],
      upper: [],
      fold: 42823,
      foldFull: [42823]
    }, {
      code: 42824,
      lower: [],
      title: [],
      upper: [],
      fold: 42825,
      foldFull: [42825]
    }, {
      code: 42826,
      lower: [],
      title: [],
      upper: [],
      fold: 42827,
      foldFull: [42827]
    }, {
      code: 42828,
      lower: [],
      title: [],
      upper: [],
      fold: 42829,
      foldFull: [42829]
    }, {
      code: 42830,
      lower: [],
      title: [],
      upper: [],
      fold: 42831,
      foldFull: [42831]
    }, {
      code: 42832,
      lower: [],
      title: [],
      upper: [],
      fold: 42833,
      foldFull: [42833]
    }, {
      code: 42834,
      lower: [],
      title: [],
      upper: [],
      fold: 42835,
      foldFull: [42835]
    }, {
      code: 42836,
      lower: [],
      title: [],
      upper: [],
      fold: 42837,
      foldFull: [42837]
    }, {
      code: 42838,
      lower: [],
      title: [],
      upper: [],
      fold: 42839,
      foldFull: [42839]
    }, {
      code: 42840,
      lower: [],
      title: [],
      upper: [],
      fold: 42841,
      foldFull: [42841]
    }, {
      code: 42842,
      lower: [],
      title: [],
      upper: [],
      fold: 42843,
      foldFull: [42843]
    }, {
      code: 42844,
      lower: [],
      title: [],
      upper: [],
      fold: 42845,
      foldFull: [42845]
    }, {
      code: 42846,
      lower: [],
      title: [],
      upper: [],
      fold: 42847,
      foldFull: [42847]
    }, {
      code: 42848,
      lower: [],
      title: [],
      upper: [],
      fold: 42849,
      foldFull: [42849]
    }, {
      code: 42850,
      lower: [],
      title: [],
      upper: [],
      fold: 42851,
      foldFull: [42851]
    }, {
      code: 42852,
      lower: [],
      title: [],
      upper: [],
      fold: 42853,
      foldFull: [42853]
    }, {
      code: 42854,
      lower: [],
      title: [],
      upper: [],
      fold: 42855,
      foldFull: [42855]
    }, {
      code: 42856,
      lower: [],
      title: [],
      upper: [],
      fold: 42857,
      foldFull: [42857]
    }, {
      code: 42858,
      lower: [],
      title: [],
      upper: [],
      fold: 42859,
      foldFull: [42859]
    }, {
      code: 42860,
      lower: [],
      title: [],
      upper: [],
      fold: 42861,
      foldFull: [42861]
    }, {
      code: 42862,
      lower: [],
      title: [],
      upper: [],
      fold: 42863,
      foldFull: [42863]
    }, {
      code: 42873,
      lower: [],
      title: [],
      upper: [],
      fold: 42874,
      foldFull: [42874]
    }, {
      code: 42875,
      lower: [],
      title: [],
      upper: [],
      fold: 42876,
      foldFull: [42876]
    }, {
      code: 42877,
      lower: [],
      title: [],
      upper: [],
      fold: 7545,
      foldFull: [7545]
    }, {
      code: 42878,
      lower: [],
      title: [],
      upper: [],
      fold: 42879,
      foldFull: [42879]
    }, {
      code: 42880,
      lower: [],
      title: [],
      upper: [],
      fold: 42881,
      foldFull: [42881]
    }, {
      code: 42882,
      lower: [],
      title: [],
      upper: [],
      fold: 42883,
      foldFull: [42883]
    }, {
      code: 42884,
      lower: [],
      title: [],
      upper: [],
      fold: 42885,
      foldFull: [42885]
    }, {
      code: 42886,
      lower: [],
      title: [],
      upper: [],
      fold: 42887,
      foldFull: [42887]
    }, {
      code: 42891,
      lower: [],
      title: [],
      upper: [],
      fold: 42892,
      foldFull: [42892]
    }, {
      code: 42893,
      lower: [],
      title: [],
      upper: [],
      fold: 613,
      foldFull: [613]
    }, {
      code: 42896,
      lower: [],
      title: [],
      upper: [],
      fold: 42897,
      foldFull: [42897]
    }, {
      code: 42898,
      lower: [],
      title: [],
      upper: [],
      fold: 42899,
      foldFull: [42899]
    }, {
      code: 42902,
      lower: [],
      title: [],
      upper: [],
      fold: 42903,
      foldFull: [42903]
    }, {
      code: 42904,
      lower: [],
      title: [],
      upper: [],
      fold: 42905,
      foldFull: [42905]
    }, {
      code: 42906,
      lower: [],
      title: [],
      upper: [],
      fold: 42907,
      foldFull: [42907]
    }, {
      code: 42908,
      lower: [],
      title: [],
      upper: [],
      fold: 42909,
      foldFull: [42909]
    }, {
      code: 42910,
      lower: [],
      title: [],
      upper: [],
      fold: 42911,
      foldFull: [42911]
    }, {
      code: 42912,
      lower: [],
      title: [],
      upper: [],
      fold: 42913,
      foldFull: [42913]
    }, {
      code: 42914,
      lower: [],
      title: [],
      upper: [],
      fold: 42915,
      foldFull: [42915]
    }, {
      code: 42916,
      lower: [],
      title: [],
      upper: [],
      fold: 42917,
      foldFull: [42917]
    }, {
      code: 42918,
      lower: [],
      title: [],
      upper: [],
      fold: 42919,
      foldFull: [42919]
    }, {
      code: 42920,
      lower: [],
      title: [],
      upper: [],
      fold: 42921,
      foldFull: [42921]
    }, {
      code: 42922,
      lower: [],
      title: [],
      upper: [],
      fold: 614,
      foldFull: [614]
    }, {
      code: 42923,
      lower: [],
      title: [],
      upper: [],
      fold: 604,
      foldFull: [604]
    }, {
      code: 42924,
      lower: [],
      title: [],
      upper: [],
      fold: 609,
      foldFull: [609]
    }, {
      code: 42925,
      lower: [],
      title: [],
      upper: [],
      fold: 620,
      foldFull: [620]
    }, {
      code: 42926,
      lower: [],
      title: [],
      upper: [],
      fold: 618,
      foldFull: [618]
    }, {
      code: 42928,
      lower: [],
      title: [],
      upper: [],
      fold: 670,
      foldFull: [670]
    }, {
      code: 42929,
      lower: [],
      title: [],
      upper: [],
      fold: 647,
      foldFull: [647]
    }, {
      code: 42930,
      lower: [],
      title: [],
      upper: [],
      fold: 669,
      foldFull: [669]
    }, {
      code: 42931,
      lower: [],
      title: [],
      upper: [],
      fold: 43859,
      foldFull: [43859]
    }, {
      code: 42932,
      lower: [],
      title: [],
      upper: [],
      fold: 42933,
      foldFull: [42933]
    }, {
      code: 42934,
      lower: [],
      title: [],
      upper: [],
      fold: 42935,
      foldFull: [42935]
    }, {
      code: 42936,
      lower: [],
      title: [],
      upper: [],
      fold: 42937,
      foldFull: [42937]
    }, {
      code: 42938,
      lower: [],
      title: [],
      upper: [],
      fold: 42939,
      foldFull: [42939]
    }, {
      code: 42940,
      lower: [],
      title: [],
      upper: [],
      fold: 42941,
      foldFull: [42941]
    }, {
      code: 42942,
      lower: [],
      title: [],
      upper: [],
      fold: 42943,
      foldFull: [42943]
    }, {
      code: 42946,
      lower: [],
      title: [],
      upper: [],
      fold: 42947,
      foldFull: [42947]
    }, {
      code: 42948,
      lower: [],
      title: [],
      upper: [],
      fold: 42900,
      foldFull: [42900]
    }, {
      code: 42949,
      lower: [],
      title: [],
      upper: [],
      fold: 642,
      foldFull: [642]
    }, {
      code: 42950,
      lower: [],
      title: [],
      upper: [],
      fold: 7566,
      foldFull: [7566]
    }, {
      code: 42951,
      lower: [],
      title: [],
      upper: [],
      fold: 42952,
      foldFull: [42952]
    }, {
      code: 42953,
      lower: [],
      title: [],
      upper: [],
      fold: 42954,
      foldFull: [42954]
    }, {
      code: 42997,
      lower: [],
      title: [],
      upper: [],
      fold: 42998,
      foldFull: [42998]
    }, {
      code: 43888,
      lower: [],
      title: [],
      upper: [],
      fold: 5024,
      foldFull: [5024]
    }, {
      code: 43889,
      lower: [],
      title: [],
      upper: [],
      fold: 5025,
      foldFull: [5025]
    }, {
      code: 43890,
      lower: [],
      title: [],
      upper: [],
      fold: 5026,
      foldFull: [5026]
    }, {
      code: 43891,
      lower: [],
      title: [],
      upper: [],
      fold: 5027,
      foldFull: [5027]
    }, {
      code: 43892,
      lower: [],
      title: [],
      upper: [],
      fold: 5028,
      foldFull: [5028]
    }, {
      code: 43893,
      lower: [],
      title: [],
      upper: [],
      fold: 5029,
      foldFull: [5029]
    }, {
      code: 43894,
      lower: [],
      title: [],
      upper: [],
      fold: 5030,
      foldFull: [5030]
    }, {
      code: 43895,
      lower: [],
      title: [],
      upper: [],
      fold: 5031,
      foldFull: [5031]
    }, {
      code: 43896,
      lower: [],
      title: [],
      upper: [],
      fold: 5032,
      foldFull: [5032]
    }, {
      code: 43897,
      lower: [],
      title: [],
      upper: [],
      fold: 5033,
      foldFull: [5033]
    }, {
      code: 43898,
      lower: [],
      title: [],
      upper: [],
      fold: 5034,
      foldFull: [5034]
    }, {
      code: 43899,
      lower: [],
      title: [],
      upper: [],
      fold: 5035,
      foldFull: [5035]
    }, {
      code: 43900,
      lower: [],
      title: [],
      upper: [],
      fold: 5036,
      foldFull: [5036]
    }, {
      code: 43901,
      lower: [],
      title: [],
      upper: [],
      fold: 5037,
      foldFull: [5037]
    }, {
      code: 43902,
      lower: [],
      title: [],
      upper: [],
      fold: 5038,
      foldFull: [5038]
    }, {
      code: 43903,
      lower: [],
      title: [],
      upper: [],
      fold: 5039,
      foldFull: [5039]
    }, {
      code: 43904,
      lower: [],
      title: [],
      upper: [],
      fold: 5040,
      foldFull: [5040]
    }, {
      code: 43905,
      lower: [],
      title: [],
      upper: [],
      fold: 5041,
      foldFull: [5041]
    }, {
      code: 43906,
      lower: [],
      title: [],
      upper: [],
      fold: 5042,
      foldFull: [5042]
    }, {
      code: 43907,
      lower: [],
      title: [],
      upper: [],
      fold: 5043,
      foldFull: [5043]
    }, {
      code: 43908,
      lower: [],
      title: [],
      upper: [],
      fold: 5044,
      foldFull: [5044]
    }, {
      code: 43909,
      lower: [],
      title: [],
      upper: [],
      fold: 5045,
      foldFull: [5045]
    }, {
      code: 43910,
      lower: [],
      title: [],
      upper: [],
      fold: 5046,
      foldFull: [5046]
    }, {
      code: 43911,
      lower: [],
      title: [],
      upper: [],
      fold: 5047,
      foldFull: [5047]
    }, {
      code: 43912,
      lower: [],
      title: [],
      upper: [],
      fold: 5048,
      foldFull: [5048]
    }, {
      code: 43913,
      lower: [],
      title: [],
      upper: [],
      fold: 5049,
      foldFull: [5049]
    }, {
      code: 43914,
      lower: [],
      title: [],
      upper: [],
      fold: 5050,
      foldFull: [5050]
    }, {
      code: 43915,
      lower: [],
      title: [],
      upper: [],
      fold: 5051,
      foldFull: [5051]
    }, {
      code: 43916,
      lower: [],
      title: [],
      upper: [],
      fold: 5052,
      foldFull: [5052]
    }, {
      code: 43917,
      lower: [],
      title: [],
      upper: [],
      fold: 5053,
      foldFull: [5053]
    }, {
      code: 43918,
      lower: [],
      title: [],
      upper: [],
      fold: 5054,
      foldFull: [5054]
    }, {
      code: 43919,
      lower: [],
      title: [],
      upper: [],
      fold: 5055,
      foldFull: [5055]
    }, {
      code: 43920,
      lower: [],
      title: [],
      upper: [],
      fold: 5056,
      foldFull: [5056]
    }, {
      code: 43921,
      lower: [],
      title: [],
      upper: [],
      fold: 5057,
      foldFull: [5057]
    }, {
      code: 43922,
      lower: [],
      title: [],
      upper: [],
      fold: 5058,
      foldFull: [5058]
    }, {
      code: 43923,
      lower: [],
      title: [],
      upper: [],
      fold: 5059,
      foldFull: [5059]
    }, {
      code: 43924,
      lower: [],
      title: [],
      upper: [],
      fold: 5060,
      foldFull: [5060]
    }, {
      code: 43925,
      lower: [],
      title: [],
      upper: [],
      fold: 5061,
      foldFull: [5061]
    }, {
      code: 43926,
      lower: [],
      title: [],
      upper: [],
      fold: 5062,
      foldFull: [5062]
    }, {
      code: 43927,
      lower: [],
      title: [],
      upper: [],
      fold: 5063,
      foldFull: [5063]
    }, {
      code: 43928,
      lower: [],
      title: [],
      upper: [],
      fold: 5064,
      foldFull: [5064]
    }, {
      code: 43929,
      lower: [],
      title: [],
      upper: [],
      fold: 5065,
      foldFull: [5065]
    }, {
      code: 43930,
      lower: [],
      title: [],
      upper: [],
      fold: 5066,
      foldFull: [5066]
    }, {
      code: 43931,
      lower: [],
      title: [],
      upper: [],
      fold: 5067,
      foldFull: [5067]
    }, {
      code: 43932,
      lower: [],
      title: [],
      upper: [],
      fold: 5068,
      foldFull: [5068]
    }, {
      code: 43933,
      lower: [],
      title: [],
      upper: [],
      fold: 5069,
      foldFull: [5069]
    }, {
      code: 43934,
      lower: [],
      title: [],
      upper: [],
      fold: 5070,
      foldFull: [5070]
    }, {
      code: 43935,
      lower: [],
      title: [],
      upper: [],
      fold: 5071,
      foldFull: [5071]
    }, {
      code: 43936,
      lower: [],
      title: [],
      upper: [],
      fold: 5072,
      foldFull: [5072]
    }, {
      code: 43937,
      lower: [],
      title: [],
      upper: [],
      fold: 5073,
      foldFull: [5073]
    }, {
      code: 43938,
      lower: [],
      title: [],
      upper: [],
      fold: 5074,
      foldFull: [5074]
    }, {
      code: 43939,
      lower: [],
      title: [],
      upper: [],
      fold: 5075,
      foldFull: [5075]
    }, {
      code: 43940,
      lower: [],
      title: [],
      upper: [],
      fold: 5076,
      foldFull: [5076]
    }, {
      code: 43941,
      lower: [],
      title: [],
      upper: [],
      fold: 5077,
      foldFull: [5077]
    }, {
      code: 43942,
      lower: [],
      title: [],
      upper: [],
      fold: 5078,
      foldFull: [5078]
    }, {
      code: 43943,
      lower: [],
      title: [],
      upper: [],
      fold: 5079,
      foldFull: [5079]
    }, {
      code: 43944,
      lower: [],
      title: [],
      upper: [],
      fold: 5080,
      foldFull: [5080]
    }, {
      code: 43945,
      lower: [],
      title: [],
      upper: [],
      fold: 5081,
      foldFull: [5081]
    }, {
      code: 43946,
      lower: [],
      title: [],
      upper: [],
      fold: 5082,
      foldFull: [5082]
    }, {
      code: 43947,
      lower: [],
      title: [],
      upper: [],
      fold: 5083,
      foldFull: [5083]
    }, {
      code: 43948,
      lower: [],
      title: [],
      upper: [],
      fold: 5084,
      foldFull: [5084]
    }, {
      code: 43949,
      lower: [],
      title: [],
      upper: [],
      fold: 5085,
      foldFull: [5085]
    }, {
      code: 43950,
      lower: [],
      title: [],
      upper: [],
      fold: 5086,
      foldFull: [5086]
    }, {
      code: 43951,
      lower: [],
      title: [],
      upper: [],
      fold: 5087,
      foldFull: [5087]
    }, {
      code: 43952,
      lower: [],
      title: [],
      upper: [],
      fold: 5088,
      foldFull: [5088]
    }, {
      code: 43953,
      lower: [],
      title: [],
      upper: [],
      fold: 5089,
      foldFull: [5089]
    }, {
      code: 43954,
      lower: [],
      title: [],
      upper: [],
      fold: 5090,
      foldFull: [5090]
    }, {
      code: 43955,
      lower: [],
      title: [],
      upper: [],
      fold: 5091,
      foldFull: [5091]
    }, {
      code: 43956,
      lower: [],
      title: [],
      upper: [],
      fold: 5092,
      foldFull: [5092]
    }, {
      code: 43957,
      lower: [],
      title: [],
      upper: [],
      fold: 5093,
      foldFull: [5093]
    }, {
      code: 43958,
      lower: [],
      title: [],
      upper: [],
      fold: 5094,
      foldFull: [5094]
    }, {
      code: 43959,
      lower: [],
      title: [],
      upper: [],
      fold: 5095,
      foldFull: [5095]
    }, {
      code: 43960,
      lower: [],
      title: [],
      upper: [],
      fold: 5096,
      foldFull: [5096]
    }, {
      code: 43961,
      lower: [],
      title: [],
      upper: [],
      fold: 5097,
      foldFull: [5097]
    }, {
      code: 43962,
      lower: [],
      title: [],
      upper: [],
      fold: 5098,
      foldFull: [5098]
    }, {
      code: 43963,
      lower: [],
      title: [],
      upper: [],
      fold: 5099,
      foldFull: [5099]
    }, {
      code: 43964,
      lower: [],
      title: [],
      upper: [],
      fold: 5100,
      foldFull: [5100]
    }, {
      code: 43965,
      lower: [],
      title: [],
      upper: [],
      fold: 5101,
      foldFull: [5101]
    }, {
      code: 43966,
      lower: [],
      title: [],
      upper: [],
      fold: 5102,
      foldFull: [5102]
    }, {
      code: 43967,
      lower: [],
      title: [],
      upper: [],
      fold: 5103,
      foldFull: [5103]
    }, {
      code: 64256,
      lower: [64256],
      title: [70, 102],
      upper: [70, 70],
      fold: 0,
      foldFull: [102, 102]
    }, {
      code: 64256,
      lower: [64256],
      title: [70, 102],
      upper: [70, 70],
      fold: 0,
      foldFull: [102, 102]
    }, {
      code: 64257,
      lower: [64257],
      title: [70, 105],
      upper: [70, 73],
      fold: 0,
      foldFull: [102, 105]
    }, {
      code: 64257,
      lower: [64257],
      title: [70, 105],
      upper: [70, 73],
      fold: 0,
      foldFull: [102, 105]
    }, {
      code: 64258,
      lower: [64258],
      title: [70, 108],
      upper: [70, 76],
      fold: 0,
      foldFull: [102, 108]
    }, {
      code: 64258,
      lower: [64258],
      title: [70, 108],
      upper: [70, 76],
      fold: 0,
      foldFull: [102, 108]
    }, {
      code: 64259,
      lower: [64259],
      title: [70, 102, 105],
      upper: [70, 70, 73],
      fold: 0,
      foldFull: [102, 102, 105]
    }, {
      code: 64259,
      lower: [64259],
      title: [70, 102, 105],
      upper: [70, 70, 73],
      fold: 0,
      foldFull: [102, 102, 105]
    }, {
      code: 64260,
      lower: [64260],
      title: [70, 102, 108],
      upper: [70, 70, 76],
      fold: 0,
      foldFull: [102, 102, 108]
    }, {
      code: 64260,
      lower: [64260],
      title: [70, 102, 108],
      upper: [70, 70, 76],
      fold: 0,
      foldFull: [102, 102, 108]
    }, {
      code: 64261,
      lower: [64261],
      title: [83, 116],
      upper: [83, 84],
      fold: 0,
      foldFull: [115, 116]
    }, {
      code: 64261,
      lower: [64261],
      title: [83, 116],
      upper: [83, 84],
      fold: 0,
      foldFull: [115, 116]
    }, {
      code: 64262,
      lower: [64262],
      title: [83, 116],
      upper: [83, 84],
      fold: 0,
      foldFull: [115, 116]
    }, {
      code: 64262,
      lower: [64262],
      title: [83, 116],
      upper: [83, 84],
      fold: 0,
      foldFull: [115, 116]
    }, {
      code: 64275,
      lower: [64275],
      title: [1348, 1398],
      upper: [1348, 1350],
      fold: 0,
      foldFull: [1396, 1398]
    }, {
      code: 64275,
      lower: [64275],
      title: [1348, 1398],
      upper: [1348, 1350],
      fold: 0,
      foldFull: [1396, 1398]
    }, {
      code: 64276,
      lower: [64276],
      title: [1348, 1381],
      upper: [1348, 1333],
      fold: 0,
      foldFull: [1396, 1381]
    }, {
      code: 64276,
      lower: [64276],
      title: [1348, 1381],
      upper: [1348, 1333],
      fold: 0,
      foldFull: [1396, 1381]
    }, {
      code: 64277,
      lower: [64277],
      title: [1348, 1387],
      upper: [1348, 1339],
      fold: 0,
      foldFull: [1396, 1387]
    }, {
      code: 64277,
      lower: [64277],
      title: [1348, 1387],
      upper: [1348, 1339],
      fold: 0,
      foldFull: [1396, 1387]
    }, {
      code: 64278,
      lower: [64278],
      title: [1358, 1398],
      upper: [1358, 1350],
      fold: 0,
      foldFull: [1406, 1398]
    }, {
      code: 64278,
      lower: [64278],
      title: [1358, 1398],
      upper: [1358, 1350],
      fold: 0,
      foldFull: [1406, 1398]
    }, {
      code: 64279,
      lower: [64279],
      title: [1348, 1389],
      upper: [1348, 1341],
      fold: 0,
      foldFull: [1396, 1389]
    }, {
      code: 64279,
      lower: [64279],
      title: [1348, 1389],
      upper: [1348, 1341],
      fold: 0,
      foldFull: [1396, 1389]
    }, {
      code: 65313,
      lower: [],
      title: [],
      upper: [],
      fold: 65345,
      foldFull: [65345]
    }, {
      code: 65314,
      lower: [],
      title: [],
      upper: [],
      fold: 65346,
      foldFull: [65346]
    }, {
      code: 65315,
      lower: [],
      title: [],
      upper: [],
      fold: 65347,
      foldFull: [65347]
    }, {
      code: 65316,
      lower: [],
      title: [],
      upper: [],
      fold: 65348,
      foldFull: [65348]
    }, {
      code: 65317,
      lower: [],
      title: [],
      upper: [],
      fold: 65349,
      foldFull: [65349]
    }, {
      code: 65318,
      lower: [],
      title: [],
      upper: [],
      fold: 65350,
      foldFull: [65350]
    }, {
      code: 65319,
      lower: [],
      title: [],
      upper: [],
      fold: 65351,
      foldFull: [65351]
    }, {
      code: 65320,
      lower: [],
      title: [],
      upper: [],
      fold: 65352,
      foldFull: [65352]
    }, {
      code: 65321,
      lower: [],
      title: [],
      upper: [],
      fold: 65353,
      foldFull: [65353]
    }, {
      code: 65322,
      lower: [],
      title: [],
      upper: [],
      fold: 65354,
      foldFull: [65354]
    }, {
      code: 65323,
      lower: [],
      title: [],
      upper: [],
      fold: 65355,
      foldFull: [65355]
    }, {
      code: 65324,
      lower: [],
      title: [],
      upper: [],
      fold: 65356,
      foldFull: [65356]
    }, {
      code: 65325,
      lower: [],
      title: [],
      upper: [],
      fold: 65357,
      foldFull: [65357]
    }, {
      code: 65326,
      lower: [],
      title: [],
      upper: [],
      fold: 65358,
      foldFull: [65358]
    }, {
      code: 65327,
      lower: [],
      title: [],
      upper: [],
      fold: 65359,
      foldFull: [65359]
    }, {
      code: 65328,
      lower: [],
      title: [],
      upper: [],
      fold: 65360,
      foldFull: [65360]
    }, {
      code: 65329,
      lower: [],
      title: [],
      upper: [],
      fold: 65361,
      foldFull: [65361]
    }, {
      code: 65330,
      lower: [],
      title: [],
      upper: [],
      fold: 65362,
      foldFull: [65362]
    }, {
      code: 65331,
      lower: [],
      title: [],
      upper: [],
      fold: 65363,
      foldFull: [65363]
    }, {
      code: 65332,
      lower: [],
      title: [],
      upper: [],
      fold: 65364,
      foldFull: [65364]
    }, {
      code: 65333,
      lower: [],
      title: [],
      upper: [],
      fold: 65365,
      foldFull: [65365]
    }, {
      code: 65334,
      lower: [],
      title: [],
      upper: [],
      fold: 65366,
      foldFull: [65366]
    }, {
      code: 65335,
      lower: [],
      title: [],
      upper: [],
      fold: 65367,
      foldFull: [65367]
    }, {
      code: 65336,
      lower: [],
      title: [],
      upper: [],
      fold: 65368,
      foldFull: [65368]
    }, {
      code: 65337,
      lower: [],
      title: [],
      upper: [],
      fold: 65369,
      foldFull: [65369]
    }, {
      code: 65338,
      lower: [],
      title: [],
      upper: [],
      fold: 65370,
      foldFull: [65370]
    }, {
      code: 66560,
      lower: [],
      title: [],
      upper: [],
      fold: 66600,
      foldFull: [66600]
    }, {
      code: 66561,
      lower: [],
      title: [],
      upper: [],
      fold: 66601,
      foldFull: [66601]
    }, {
      code: 66562,
      lower: [],
      title: [],
      upper: [],
      fold: 66602,
      foldFull: [66602]
    }, {
      code: 66563,
      lower: [],
      title: [],
      upper: [],
      fold: 66603,
      foldFull: [66603]
    }, {
      code: 66564,
      lower: [],
      title: [],
      upper: [],
      fold: 66604,
      foldFull: [66604]
    }, {
      code: 66565,
      lower: [],
      title: [],
      upper: [],
      fold: 66605,
      foldFull: [66605]
    }, {
      code: 66566,
      lower: [],
      title: [],
      upper: [],
      fold: 66606,
      foldFull: [66606]
    }, {
      code: 66567,
      lower: [],
      title: [],
      upper: [],
      fold: 66607,
      foldFull: [66607]
    }, {
      code: 66568,
      lower: [],
      title: [],
      upper: [],
      fold: 66608,
      foldFull: [66608]
    }, {
      code: 66569,
      lower: [],
      title: [],
      upper: [],
      fold: 66609,
      foldFull: [66609]
    }, {
      code: 66570,
      lower: [],
      title: [],
      upper: [],
      fold: 66610,
      foldFull: [66610]
    }, {
      code: 66571,
      lower: [],
      title: [],
      upper: [],
      fold: 66611,
      foldFull: [66611]
    }, {
      code: 66572,
      lower: [],
      title: [],
      upper: [],
      fold: 66612,
      foldFull: [66612]
    }, {
      code: 66573,
      lower: [],
      title: [],
      upper: [],
      fold: 66613,
      foldFull: [66613]
    }, {
      code: 66574,
      lower: [],
      title: [],
      upper: [],
      fold: 66614,
      foldFull: [66614]
    }, {
      code: 66575,
      lower: [],
      title: [],
      upper: [],
      fold: 66615,
      foldFull: [66615]
    }, {
      code: 66576,
      lower: [],
      title: [],
      upper: [],
      fold: 66616,
      foldFull: [66616]
    }, {
      code: 66577,
      lower: [],
      title: [],
      upper: [],
      fold: 66617,
      foldFull: [66617]
    }, {
      code: 66578,
      lower: [],
      title: [],
      upper: [],
      fold: 66618,
      foldFull: [66618]
    }, {
      code: 66579,
      lower: [],
      title: [],
      upper: [],
      fold: 66619,
      foldFull: [66619]
    }, {
      code: 66580,
      lower: [],
      title: [],
      upper: [],
      fold: 66620,
      foldFull: [66620]
    }, {
      code: 66581,
      lower: [],
      title: [],
      upper: [],
      fold: 66621,
      foldFull: [66621]
    }, {
      code: 66582,
      lower: [],
      title: [],
      upper: [],
      fold: 66622,
      foldFull: [66622]
    }, {
      code: 66583,
      lower: [],
      title: [],
      upper: [],
      fold: 66623,
      foldFull: [66623]
    }, {
      code: 66584,
      lower: [],
      title: [],
      upper: [],
      fold: 66624,
      foldFull: [66624]
    }, {
      code: 66585,
      lower: [],
      title: [],
      upper: [],
      fold: 66625,
      foldFull: [66625]
    }, {
      code: 66586,
      lower: [],
      title: [],
      upper: [],
      fold: 66626,
      foldFull: [66626]
    }, {
      code: 66587,
      lower: [],
      title: [],
      upper: [],
      fold: 66627,
      foldFull: [66627]
    }, {
      code: 66588,
      lower: [],
      title: [],
      upper: [],
      fold: 66628,
      foldFull: [66628]
    }, {
      code: 66589,
      lower: [],
      title: [],
      upper: [],
      fold: 66629,
      foldFull: [66629]
    }, {
      code: 66590,
      lower: [],
      title: [],
      upper: [],
      fold: 66630,
      foldFull: [66630]
    }, {
      code: 66591,
      lower: [],
      title: [],
      upper: [],
      fold: 66631,
      foldFull: [66631]
    }, {
      code: 66592,
      lower: [],
      title: [],
      upper: [],
      fold: 66632,
      foldFull: [66632]
    }, {
      code: 66593,
      lower: [],
      title: [],
      upper: [],
      fold: 66633,
      foldFull: [66633]
    }, {
      code: 66594,
      lower: [],
      title: [],
      upper: [],
      fold: 66634,
      foldFull: [66634]
    }, {
      code: 66595,
      lower: [],
      title: [],
      upper: [],
      fold: 66635,
      foldFull: [66635]
    }, {
      code: 66596,
      lower: [],
      title: [],
      upper: [],
      fold: 66636,
      foldFull: [66636]
    }, {
      code: 66597,
      lower: [],
      title: [],
      upper: [],
      fold: 66637,
      foldFull: [66637]
    }, {
      code: 66598,
      lower: [],
      title: [],
      upper: [],
      fold: 66638,
      foldFull: [66638]
    }, {
      code: 66599,
      lower: [],
      title: [],
      upper: [],
      fold: 66639,
      foldFull: [66639]
    }, {
      code: 66736,
      lower: [],
      title: [],
      upper: [],
      fold: 66776,
      foldFull: [66776]
    }, {
      code: 66737,
      lower: [],
      title: [],
      upper: [],
      fold: 66777,
      foldFull: [66777]
    }, {
      code: 66738,
      lower: [],
      title: [],
      upper: [],
      fold: 66778,
      foldFull: [66778]
    }, {
      code: 66739,
      lower: [],
      title: [],
      upper: [],
      fold: 66779,
      foldFull: [66779]
    }, {
      code: 66740,
      lower: [],
      title: [],
      upper: [],
      fold: 66780,
      foldFull: [66780]
    }, {
      code: 66741,
      lower: [],
      title: [],
      upper: [],
      fold: 66781,
      foldFull: [66781]
    }, {
      code: 66742,
      lower: [],
      title: [],
      upper: [],
      fold: 66782,
      foldFull: [66782]
    }, {
      code: 66743,
      lower: [],
      title: [],
      upper: [],
      fold: 66783,
      foldFull: [66783]
    }, {
      code: 66744,
      lower: [],
      title: [],
      upper: [],
      fold: 66784,
      foldFull: [66784]
    }, {
      code: 66745,
      lower: [],
      title: [],
      upper: [],
      fold: 66785,
      foldFull: [66785]
    }, {
      code: 66746,
      lower: [],
      title: [],
      upper: [],
      fold: 66786,
      foldFull: [66786]
    }, {
      code: 66747,
      lower: [],
      title: [],
      upper: [],
      fold: 66787,
      foldFull: [66787]
    }, {
      code: 66748,
      lower: [],
      title: [],
      upper: [],
      fold: 66788,
      foldFull: [66788]
    }, {
      code: 66749,
      lower: [],
      title: [],
      upper: [],
      fold: 66789,
      foldFull: [66789]
    }, {
      code: 66750,
      lower: [],
      title: [],
      upper: [],
      fold: 66790,
      foldFull: [66790]
    }, {
      code: 66751,
      lower: [],
      title: [],
      upper: [],
      fold: 66791,
      foldFull: [66791]
    }, {
      code: 66752,
      lower: [],
      title: [],
      upper: [],
      fold: 66792,
      foldFull: [66792]
    }, {
      code: 66753,
      lower: [],
      title: [],
      upper: [],
      fold: 66793,
      foldFull: [66793]
    }, {
      code: 66754,
      lower: [],
      title: [],
      upper: [],
      fold: 66794,
      foldFull: [66794]
    }, {
      code: 66755,
      lower: [],
      title: [],
      upper: [],
      fold: 66795,
      foldFull: [66795]
    }, {
      code: 66756,
      lower: [],
      title: [],
      upper: [],
      fold: 66796,
      foldFull: [66796]
    }, {
      code: 66757,
      lower: [],
      title: [],
      upper: [],
      fold: 66797,
      foldFull: [66797]
    }, {
      code: 66758,
      lower: [],
      title: [],
      upper: [],
      fold: 66798,
      foldFull: [66798]
    }, {
      code: 66759,
      lower: [],
      title: [],
      upper: [],
      fold: 66799,
      foldFull: [66799]
    }, {
      code: 66760,
      lower: [],
      title: [],
      upper: [],
      fold: 66800,
      foldFull: [66800]
    }, {
      code: 66761,
      lower: [],
      title: [],
      upper: [],
      fold: 66801,
      foldFull: [66801]
    }, {
      code: 66762,
      lower: [],
      title: [],
      upper: [],
      fold: 66802,
      foldFull: [66802]
    }, {
      code: 66763,
      lower: [],
      title: [],
      upper: [],
      fold: 66803,
      foldFull: [66803]
    }, {
      code: 66764,
      lower: [],
      title: [],
      upper: [],
      fold: 66804,
      foldFull: [66804]
    }, {
      code: 66765,
      lower: [],
      title: [],
      upper: [],
      fold: 66805,
      foldFull: [66805]
    }, {
      code: 66766,
      lower: [],
      title: [],
      upper: [],
      fold: 66806,
      foldFull: [66806]
    }, {
      code: 66767,
      lower: [],
      title: [],
      upper: [],
      fold: 66807,
      foldFull: [66807]
    }, {
      code: 66768,
      lower: [],
      title: [],
      upper: [],
      fold: 66808,
      foldFull: [66808]
    }, {
      code: 66769,
      lower: [],
      title: [],
      upper: [],
      fold: 66809,
      foldFull: [66809]
    }, {
      code: 66770,
      lower: [],
      title: [],
      upper: [],
      fold: 66810,
      foldFull: [66810]
    }, {
      code: 66771,
      lower: [],
      title: [],
      upper: [],
      fold: 66811,
      foldFull: [66811]
    }, {
      code: 68736,
      lower: [],
      title: [],
      upper: [],
      fold: 68800,
      foldFull: [68800]
    }, {
      code: 68737,
      lower: [],
      title: [],
      upper: [],
      fold: 68801,
      foldFull: [68801]
    }, {
      code: 68738,
      lower: [],
      title: [],
      upper: [],
      fold: 68802,
      foldFull: [68802]
    }, {
      code: 68739,
      lower: [],
      title: [],
      upper: [],
      fold: 68803,
      foldFull: [68803]
    }, {
      code: 68740,
      lower: [],
      title: [],
      upper: [],
      fold: 68804,
      foldFull: [68804]
    }, {
      code: 68741,
      lower: [],
      title: [],
      upper: [],
      fold: 68805,
      foldFull: [68805]
    }, {
      code: 68742,
      lower: [],
      title: [],
      upper: [],
      fold: 68806,
      foldFull: [68806]
    }, {
      code: 68743,
      lower: [],
      title: [],
      upper: [],
      fold: 68807,
      foldFull: [68807]
    }, {
      code: 68744,
      lower: [],
      title: [],
      upper: [],
      fold: 68808,
      foldFull: [68808]
    }, {
      code: 68745,
      lower: [],
      title: [],
      upper: [],
      fold: 68809,
      foldFull: [68809]
    }, {
      code: 68746,
      lower: [],
      title: [],
      upper: [],
      fold: 68810,
      foldFull: [68810]
    }, {
      code: 68747,
      lower: [],
      title: [],
      upper: [],
      fold: 68811,
      foldFull: [68811]
    }, {
      code: 68748,
      lower: [],
      title: [],
      upper: [],
      fold: 68812,
      foldFull: [68812]
    }, {
      code: 68749,
      lower: [],
      title: [],
      upper: [],
      fold: 68813,
      foldFull: [68813]
    }, {
      code: 68750,
      lower: [],
      title: [],
      upper: [],
      fold: 68814,
      foldFull: [68814]
    }, {
      code: 68751,
      lower: [],
      title: [],
      upper: [],
      fold: 68815,
      foldFull: [68815]
    }, {
      code: 68752,
      lower: [],
      title: [],
      upper: [],
      fold: 68816,
      foldFull: [68816]
    }, {
      code: 68753,
      lower: [],
      title: [],
      upper: [],
      fold: 68817,
      foldFull: [68817]
    }, {
      code: 68754,
      lower: [],
      title: [],
      upper: [],
      fold: 68818,
      foldFull: [68818]
    }, {
      code: 68755,
      lower: [],
      title: [],
      upper: [],
      fold: 68819,
      foldFull: [68819]
    }, {
      code: 68756,
      lower: [],
      title: [],
      upper: [],
      fold: 68820,
      foldFull: [68820]
    }, {
      code: 68757,
      lower: [],
      title: [],
      upper: [],
      fold: 68821,
      foldFull: [68821]
    }, {
      code: 68758,
      lower: [],
      title: [],
      upper: [],
      fold: 68822,
      foldFull: [68822]
    }, {
      code: 68759,
      lower: [],
      title: [],
      upper: [],
      fold: 68823,
      foldFull: [68823]
    }, {
      code: 68760,
      lower: [],
      title: [],
      upper: [],
      fold: 68824,
      foldFull: [68824]
    }, {
      code: 68761,
      lower: [],
      title: [],
      upper: [],
      fold: 68825,
      foldFull: [68825]
    }, {
      code: 68762,
      lower: [],
      title: [],
      upper: [],
      fold: 68826,
      foldFull: [68826]
    }, {
      code: 68763,
      lower: [],
      title: [],
      upper: [],
      fold: 68827,
      foldFull: [68827]
    }, {
      code: 68764,
      lower: [],
      title: [],
      upper: [],
      fold: 68828,
      foldFull: [68828]
    }, {
      code: 68765,
      lower: [],
      title: [],
      upper: [],
      fold: 68829,
      foldFull: [68829]
    }, {
      code: 68766,
      lower: [],
      title: [],
      upper: [],
      fold: 68830,
      foldFull: [68830]
    }, {
      code: 68767,
      lower: [],
      title: [],
      upper: [],
      fold: 68831,
      foldFull: [68831]
    }, {
      code: 68768,
      lower: [],
      title: [],
      upper: [],
      fold: 68832,
      foldFull: [68832]
    }, {
      code: 68769,
      lower: [],
      title: [],
      upper: [],
      fold: 68833,
      foldFull: [68833]
    }, {
      code: 68770,
      lower: [],
      title: [],
      upper: [],
      fold: 68834,
      foldFull: [68834]
    }, {
      code: 68771,
      lower: [],
      title: [],
      upper: [],
      fold: 68835,
      foldFull: [68835]
    }, {
      code: 68772,
      lower: [],
      title: [],
      upper: [],
      fold: 68836,
      foldFull: [68836]
    }, {
      code: 68773,
      lower: [],
      title: [],
      upper: [],
      fold: 68837,
      foldFull: [68837]
    }, {
      code: 68774,
      lower: [],
      title: [],
      upper: [],
      fold: 68838,
      foldFull: [68838]
    }, {
      code: 68775,
      lower: [],
      title: [],
      upper: [],
      fold: 68839,
      foldFull: [68839]
    }, {
      code: 68776,
      lower: [],
      title: [],
      upper: [],
      fold: 68840,
      foldFull: [68840]
    }, {
      code: 68777,
      lower: [],
      title: [],
      upper: [],
      fold: 68841,
      foldFull: [68841]
    }, {
      code: 68778,
      lower: [],
      title: [],
      upper: [],
      fold: 68842,
      foldFull: [68842]
    }, {
      code: 68779,
      lower: [],
      title: [],
      upper: [],
      fold: 68843,
      foldFull: [68843]
    }, {
      code: 68780,
      lower: [],
      title: [],
      upper: [],
      fold: 68844,
      foldFull: [68844]
    }, {
      code: 68781,
      lower: [],
      title: [],
      upper: [],
      fold: 68845,
      foldFull: [68845]
    }, {
      code: 68782,
      lower: [],
      title: [],
      upper: [],
      fold: 68846,
      foldFull: [68846]
    }, {
      code: 68783,
      lower: [],
      title: [],
      upper: [],
      fold: 68847,
      foldFull: [68847]
    }, {
      code: 68784,
      lower: [],
      title: [],
      upper: [],
      fold: 68848,
      foldFull: [68848]
    }, {
      code: 68785,
      lower: [],
      title: [],
      upper: [],
      fold: 68849,
      foldFull: [68849]
    }, {
      code: 68786,
      lower: [],
      title: [],
      upper: [],
      fold: 68850,
      foldFull: [68850]
    }, {
      code: 71840,
      lower: [],
      title: [],
      upper: [],
      fold: 71872,
      foldFull: [71872]
    }, {
      code: 71841,
      lower: [],
      title: [],
      upper: [],
      fold: 71873,
      foldFull: [71873]
    }, {
      code: 71842,
      lower: [],
      title: [],
      upper: [],
      fold: 71874,
      foldFull: [71874]
    }, {
      code: 71843,
      lower: [],
      title: [],
      upper: [],
      fold: 71875,
      foldFull: [71875]
    }, {
      code: 71844,
      lower: [],
      title: [],
      upper: [],
      fold: 71876,
      foldFull: [71876]
    }, {
      code: 71845,
      lower: [],
      title: [],
      upper: [],
      fold: 71877,
      foldFull: [71877]
    }, {
      code: 71846,
      lower: [],
      title: [],
      upper: [],
      fold: 71878,
      foldFull: [71878]
    }, {
      code: 71847,
      lower: [],
      title: [],
      upper: [],
      fold: 71879,
      foldFull: [71879]
    }, {
      code: 71848,
      lower: [],
      title: [],
      upper: [],
      fold: 71880,
      foldFull: [71880]
    }, {
      code: 71849,
      lower: [],
      title: [],
      upper: [],
      fold: 71881,
      foldFull: [71881]
    }, {
      code: 71850,
      lower: [],
      title: [],
      upper: [],
      fold: 71882,
      foldFull: [71882]
    }, {
      code: 71851,
      lower: [],
      title: [],
      upper: [],
      fold: 71883,
      foldFull: [71883]
    }, {
      code: 71852,
      lower: [],
      title: [],
      upper: [],
      fold: 71884,
      foldFull: [71884]
    }, {
      code: 71853,
      lower: [],
      title: [],
      upper: [],
      fold: 71885,
      foldFull: [71885]
    }, {
      code: 71854,
      lower: [],
      title: [],
      upper: [],
      fold: 71886,
      foldFull: [71886]
    }, {
      code: 71855,
      lower: [],
      title: [],
      upper: [],
      fold: 71887,
      foldFull: [71887]
    }, {
      code: 71856,
      lower: [],
      title: [],
      upper: [],
      fold: 71888,
      foldFull: [71888]
    }, {
      code: 71857,
      lower: [],
      title: [],
      upper: [],
      fold: 71889,
      foldFull: [71889]
    }, {
      code: 71858,
      lower: [],
      title: [],
      upper: [],
      fold: 71890,
      foldFull: [71890]
    }, {
      code: 71859,
      lower: [],
      title: [],
      upper: [],
      fold: 71891,
      foldFull: [71891]
    }, {
      code: 71860,
      lower: [],
      title: [],
      upper: [],
      fold: 71892,
      foldFull: [71892]
    }, {
      code: 71861,
      lower: [],
      title: [],
      upper: [],
      fold: 71893,
      foldFull: [71893]
    }, {
      code: 71862,
      lower: [],
      title: [],
      upper: [],
      fold: 71894,
      foldFull: [71894]
    }, {
      code: 71863,
      lower: [],
      title: [],
      upper: [],
      fold: 71895,
      foldFull: [71895]
    }, {
      code: 71864,
      lower: [],
      title: [],
      upper: [],
      fold: 71896,
      foldFull: [71896]
    }, {
      code: 71865,
      lower: [],
      title: [],
      upper: [],
      fold: 71897,
      foldFull: [71897]
    }, {
      code: 71866,
      lower: [],
      title: [],
      upper: [],
      fold: 71898,
      foldFull: [71898]
    }, {
      code: 71867,
      lower: [],
      title: [],
      upper: [],
      fold: 71899,
      foldFull: [71899]
    }, {
      code: 71868,
      lower: [],
      title: [],
      upper: [],
      fold: 71900,
      foldFull: [71900]
    }, {
      code: 71869,
      lower: [],
      title: [],
      upper: [],
      fold: 71901,
      foldFull: [71901]
    }, {
      code: 71870,
      lower: [],
      title: [],
      upper: [],
      fold: 71902,
      foldFull: [71902]
    }, {
      code: 71871,
      lower: [],
      title: [],
      upper: [],
      fold: 71903,
      foldFull: [71903]
    }, {
      code: 93760,
      lower: [],
      title: [],
      upper: [],
      fold: 93792,
      foldFull: [93792]
    }, {
      code: 93761,
      lower: [],
      title: [],
      upper: [],
      fold: 93793,
      foldFull: [93793]
    }, {
      code: 93762,
      lower: [],
      title: [],
      upper: [],
      fold: 93794,
      foldFull: [93794]
    }, {
      code: 93763,
      lower: [],
      title: [],
      upper: [],
      fold: 93795,
      foldFull: [93795]
    }, {
      code: 93764,
      lower: [],
      title: [],
      upper: [],
      fold: 93796,
      foldFull: [93796]
    }, {
      code: 93765,
      lower: [],
      title: [],
      upper: [],
      fold: 93797,
      foldFull: [93797]
    }, {
      code: 93766,
      lower: [],
      title: [],
      upper: [],
      fold: 93798,
      foldFull: [93798]
    }, {
      code: 93767,
      lower: [],
      title: [],
      upper: [],
      fold: 93799,
      foldFull: [93799]
    }, {
      code: 93768,
      lower: [],
      title: [],
      upper: [],
      fold: 93800,
      foldFull: [93800]
    }, {
      code: 93769,
      lower: [],
      title: [],
      upper: [],
      fold: 93801,
      foldFull: [93801]
    }, {
      code: 93770,
      lower: [],
      title: [],
      upper: [],
      fold: 93802,
      foldFull: [93802]
    }, {
      code: 93771,
      lower: [],
      title: [],
      upper: [],
      fold: 93803,
      foldFull: [93803]
    }, {
      code: 93772,
      lower: [],
      title: [],
      upper: [],
      fold: 93804,
      foldFull: [93804]
    }, {
      code: 93773,
      lower: [],
      title: [],
      upper: [],
      fold: 93805,
      foldFull: [93805]
    }, {
      code: 93774,
      lower: [],
      title: [],
      upper: [],
      fold: 93806,
      foldFull: [93806]
    }, {
      code: 93775,
      lower: [],
      title: [],
      upper: [],
      fold: 93807,
      foldFull: [93807]
    }, {
      code: 93776,
      lower: [],
      title: [],
      upper: [],
      fold: 93808,
      foldFull: [93808]
    }, {
      code: 93777,
      lower: [],
      title: [],
      upper: [],
      fold: 93809,
      foldFull: [93809]
    }, {
      code: 93778,
      lower: [],
      title: [],
      upper: [],
      fold: 93810,
      foldFull: [93810]
    }, {
      code: 93779,
      lower: [],
      title: [],
      upper: [],
      fold: 93811,
      foldFull: [93811]
    }, {
      code: 93780,
      lower: [],
      title: [],
      upper: [],
      fold: 93812,
      foldFull: [93812]
    }, {
      code: 93781,
      lower: [],
      title: [],
      upper: [],
      fold: 93813,
      foldFull: [93813]
    }, {
      code: 93782,
      lower: [],
      title: [],
      upper: [],
      fold: 93814,
      foldFull: [93814]
    }, {
      code: 93783,
      lower: [],
      title: [],
      upper: [],
      fold: 93815,
      foldFull: [93815]
    }, {
      code: 93784,
      lower: [],
      title: [],
      upper: [],
      fold: 93816,
      foldFull: [93816]
    }, {
      code: 93785,
      lower: [],
      title: [],
      upper: [],
      fold: 93817,
      foldFull: [93817]
    }, {
      code: 93786,
      lower: [],
      title: [],
      upper: [],
      fold: 93818,
      foldFull: [93818]
    }, {
      code: 93787,
      lower: [],
      title: [],
      upper: [],
      fold: 93819,
      foldFull: [93819]
    }, {
      code: 93788,
      lower: [],
      title: [],
      upper: [],
      fold: 93820,
      foldFull: [93820]
    }, {
      code: 93789,
      lower: [],
      title: [],
      upper: [],
      fold: 93821,
      foldFull: [93821]
    }, {
      code: 93790,
      lower: [],
      title: [],
      upper: [],
      fold: 93822,
      foldFull: [93822]
    }, {
      code: 93791,
      lower: [],
      title: [],
      upper: [],
      fold: 93823,
      foldFull: [93823]
    }, {
      code: 125184,
      lower: [],
      title: [],
      upper: [],
      fold: 125218,
      foldFull: [125218]
    }, {
      code: 125185,
      lower: [],
      title: [],
      upper: [],
      fold: 125219,
      foldFull: [125219]
    }, {
      code: 125186,
      lower: [],
      title: [],
      upper: [],
      fold: 125220,
      foldFull: [125220]
    }, {
      code: 125187,
      lower: [],
      title: [],
      upper: [],
      fold: 125221,
      foldFull: [125221]
    }, {
      code: 125188,
      lower: [],
      title: [],
      upper: [],
      fold: 125222,
      foldFull: [125222]
    }, {
      code: 125189,
      lower: [],
      title: [],
      upper: [],
      fold: 125223,
      foldFull: [125223]
    }, {
      code: 125190,
      lower: [],
      title: [],
      upper: [],
      fold: 125224,
      foldFull: [125224]
    }, {
      code: 125191,
      lower: [],
      title: [],
      upper: [],
      fold: 125225,
      foldFull: [125225]
    }, {
      code: 125192,
      lower: [],
      title: [],
      upper: [],
      fold: 125226,
      foldFull: [125226]
    }, {
      code: 125193,
      lower: [],
      title: [],
      upper: [],
      fold: 125227,
      foldFull: [125227]
    }, {
      code: 125194,
      lower: [],
      title: [],
      upper: [],
      fold: 125228,
      foldFull: [125228]
    }, {
      code: 125195,
      lower: [],
      title: [],
      upper: [],
      fold: 125229,
      foldFull: [125229]
    }, {
      code: 125196,
      lower: [],
      title: [],
      upper: [],
      fold: 125230,
      foldFull: [125230]
    }, {
      code: 125197,
      lower: [],
      title: [],
      upper: [],
      fold: 125231,
      foldFull: [125231]
    }, {
      code: 125198,
      lower: [],
      title: [],
      upper: [],
      fold: 125232,
      foldFull: [125232]
    }, {
      code: 125199,
      lower: [],
      title: [],
      upper: [],
      fold: 125233,
      foldFull: [125233]
    }, {
      code: 125200,
      lower: [],
      title: [],
      upper: [],
      fold: 125234,
      foldFull: [125234]
    }, {
      code: 125201,
      lower: [],
      title: [],
      upper: [],
      fold: 125235,
      foldFull: [125235]
    }, {
      code: 125202,
      lower: [],
      title: [],
      upper: [],
      fold: 125236,
      foldFull: [125236]
    }, {
      code: 125203,
      lower: [],
      title: [],
      upper: [],
      fold: 125237,
      foldFull: [125237]
    }, {
      code: 125204,
      lower: [],
      title: [],
      upper: [],
      fold: 125238,
      foldFull: [125238]
    }, {
      code: 125205,
      lower: [],
      title: [],
      upper: [],
      fold: 125239,
      foldFull: [125239]
    }, {
      code: 125206,
      lower: [],
      title: [],
      upper: [],
      fold: 125240,
      foldFull: [125240]
    }, {
      code: 125207,
      lower: [],
      title: [],
      upper: [],
      fold: 125241,
      foldFull: [125241]
    }, {
      code: 125208,
      lower: [],
      title: [],
      upper: [],
      fold: 125242,
      foldFull: [125242]
    }, {
      code: 125209,
      lower: [],
      title: [],
      upper: [],
      fold: 125243,
      foldFull: [125243]
    }, {
      code: 125210,
      lower: [],
      title: [],
      upper: [],
      fold: 125244,
      foldFull: [125244]
    }, {
      code: 125211,
      lower: [],
      title: [],
      upper: [],
      fold: 125245,
      foldFull: [125245]
    }, {
      code: 125212,
      lower: [],
      title: [],
      upper: [],
      fold: 125246,
      foldFull: [125246]
    }, {
      code: 125213,
      lower: [],
      title: [],
      upper: [],
      fold: 125247,
      foldFull: [125247]
    }, {
      code: 125214,
      lower: [],
      title: [],
      upper: [],
      fold: 125248,
      foldFull: [125248]
    }, {
      code: 125215,
      lower: [],
      title: [],
      upper: [],
      fold: 125249,
      foldFull: [125249]
    }, {
      code: 125216,
      lower: [],
      title: [],
      upper: [],
      fold: 125250,
      foldFull: [125250]
    }, {
      code: 125217,
      lower: [],
      title: [],
      upper: [],
      fold: 125251,
      foldFull: [125251]
    }];
    recCmp = function(v) {
      return function(v1) {
        return compare2(v.code)(v1.code);
      };
    };
    findRule = function(code2) {
      var v = bsearch(zeroRec(code2))(rules)(length(rules))(recCmp);
      if (v instanceof Nothing) {
        return zeroRec(code2);
      }
      ;
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal.Casing (line 1627, column 17 - line 1629, column 14): " + [v.constructor.name]);
    };
    lower = function(code2) {
      var lowered = findRule(code2).lower;
      var $13 = $$null(lowered);
      if ($13) {
        return [uTowlower(code2)];
      }
      ;
      return lowered;
    };
    hasArrayFrom = typeof Array.from === "function";
    hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
    hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
    hasCodePointAt = typeof String.prototype.codePointAt === "function";
    _unsafeCodePointAt0 = function(fallback) {
      return hasCodePointAt ? function(str) {
        return str.codePointAt(0);
      } : fallback;
    };
    _codePointAt = function(fallback) {
      return function(Just2) {
        return function(Nothing2) {
          return function(unsafeCodePointAt02) {
            return function(index3) {
              return function(str) {
                var length6 = str.length;
                if (index3 < 0 || index3 >= length6) return Nothing2;
                if (hasStringIterator) {
                  var iter = str[Symbol.iterator]();
                  for (var i = index3; ; --i) {
                    var o = iter.next();
                    if (o.done) return Nothing2;
                    if (i === 0) return Just2(unsafeCodePointAt02(o.value));
                  }
                }
                return fallback(index3)(str);
              };
            };
          };
        };
      };
    };
    _countPrefix = function(fallback) {
      return function(unsafeCodePointAt02) {
        if (hasStringIterator) {
          return function(pred2) {
            return function(str) {
              var iter = str[Symbol.iterator]();
              for (var cpCount = 0; ; ++cpCount) {
                var o = iter.next();
                if (o.done) return cpCount;
                var cp = unsafeCodePointAt02(o.value);
                if (!pred2(cp)) return cpCount;
              }
            };
          };
        }
        return fallback;
      };
    };
    _fromCodePointArray = function(singleton10) {
      return hasFromCodePoint ? function(cps) {
        if (cps.length < 1e4) {
          return String.fromCodePoint.apply(String, cps);
        }
        return cps.map(singleton10).join("");
      } : function(cps) {
        return cps.map(singleton10).join("");
      };
    };
    _singleton = function(fallback) {
      return hasFromCodePoint ? String.fromCodePoint : fallback;
    };
    _take = function(fallback) {
      return function(n) {
        if (hasStringIterator) {
          return function(str) {
            var accum = "";
            var iter = str[Symbol.iterator]();
            for (var i = 0; i < n; ++i) {
              var o = iter.next();
              if (o.done) return accum;
              accum += o.value;
            }
            return accum;
          };
        }
        return fallback(n);
      };
    };
    _toCodePointArray = function(fallback) {
      return function(unsafeCodePointAt02) {
        if (hasArrayFrom) {
          return function(str) {
            return Array.from(str, unsafeCodePointAt02);
          };
        }
        return fallback;
      };
    };
    fromCharArray = function(a) {
      return a.join("");
    };
    toCharArray = function(s) {
      return s.split("");
    };
    singleton2 = function(c) {
      return c;
    };
    _toChar = function(just) {
      return function(nothing) {
        return function(s) {
          return s.length === 1 ? just(s) : nothing;
        };
      };
    };
    length2 = function(s) {
      return s.length;
    };
    drop = function(n) {
      return function(s) {
        return s.substring(n);
      };
    };
    splitAt = function(i) {
      return function(s) {
        return { before: s.substring(0, i), after: s.substring(i) };
      };
    };
    charAt = function(i) {
      return function(s) {
        if (i >= 0 && i < s.length) return s.charAt(i);
        throw new Error("Data.String.Unsafe.charAt: Invalid index.");
      };
    };
    uncons2 = function(v) {
      if (v === "") {
        return Nothing.value;
      }
      ;
      return new Just({
        head: charAt(0)(v),
        tail: drop(1)(v)
      });
    };
    toChar = /* @__PURE__ */ function() {
      return _toChar(Just.create)(Nothing.value);
    }();
    stripPrefix = function(v) {
      return function(str) {
        var v1 = splitAt(length2(v))(str);
        var $20 = v1.before === v;
        if ($20) {
          return new Just(v1.after);
        }
        ;
        return Nothing.value;
      };
    };
    split = function(sep2) {
      return function(s) {
        return s.split(sep2);
      };
    };
    toLower = function(s) {
      return s.toLowerCase();
    };
    $$null2 = function(s) {
      return s === "";
    };
    $runtime_lazy3 = function(name2, moduleName, init3) {
      var state2 = 0;
      var val;
      return function(lineNumber) {
        if (state2 === 2) return val;
        if (state2 === 1) throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state2 = 1;
        val = init3();
        state2 = 2;
        return val;
      };
    };
    fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
    map5 = /* @__PURE__ */ map(functorMaybe);
    unfoldr2 = /* @__PURE__ */ unfoldr(unfoldableArray);
    div2 = /* @__PURE__ */ div(euclideanRingInt);
    mod2 = /* @__PURE__ */ mod(euclideanRingInt);
    compare3 = /* @__PURE__ */ compare(ordInt);
    CodePoint = function(x) {
      return x;
    };
    unsurrogate = function(lead) {
      return function(trail) {
        return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
    };
    isTrail = function(cu) {
      return 56320 <= cu && cu <= 57343;
    };
    isLead = function(cu) {
      return 55296 <= cu && cu <= 56319;
    };
    uncons3 = function(s) {
      var v = length2(s);
      if (v === 0) {
        return Nothing.value;
      }
      ;
      if (v === 1) {
        return new Just({
          head: fromEnum2(charAt(0)(s)),
          tail: ""
        });
      }
      ;
      var cu1 = fromEnum2(charAt(1)(s));
      var cu0 = fromEnum2(charAt(0)(s));
      var $43 = isLead(cu0) && isTrail(cu1);
      if ($43) {
        return new Just({
          head: unsurrogate(cu0)(cu1),
          tail: drop(2)(s)
        });
      }
      ;
      return new Just({
        head: cu0,
        tail: drop(1)(s)
      });
    };
    unconsButWithTuple = function(s) {
      return map5(function(v) {
        return new Tuple(v.head, v.tail);
      })(uncons3(s));
    };
    toCodePointArrayFallback = function(s) {
      return unfoldr2(unconsButWithTuple)(s);
    };
    unsafeCodePointAt0Fallback = function(s) {
      var cu0 = fromEnum2(charAt(0)(s));
      var $47 = isLead(cu0) && length2(s) > 1;
      if ($47) {
        var cu1 = fromEnum2(charAt(1)(s));
        var $48 = isTrail(cu1);
        if ($48) {
          return unsurrogate(cu0)(cu1);
        }
        ;
        return cu0;
      }
      ;
      return cu0;
    };
    unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
    toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
    fromCharCode3 = /* @__PURE__ */ function() {
      var $75 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
      return function($76) {
        return singleton2($75($76));
      };
    }();
    singletonFallback = function(v) {
      if (v <= 65535) {
        return fromCharCode3(v);
      }
      ;
      var lead = div2(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = mod2(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode3(lead) + fromCharCode3(trail);
    };
    fromCodePointArray = /* @__PURE__ */ _fromCodePointArray(singletonFallback);
    singleton3 = /* @__PURE__ */ _singleton(singletonFallback);
    takeFallback = function(v) {
      return function(v1) {
        if (v < 1) {
          return "";
        }
        ;
        var v2 = uncons3(v1);
        if (v2 instanceof Just) {
          return singleton3(v2.value0.head) + takeFallback(v - 1 | 0)(v2.value0.tail);
        }
        ;
        return v1;
      };
    };
    take2 = /* @__PURE__ */ _take(takeFallback);
    eqCodePoint = {
      eq: function(x) {
        return function(y) {
          return x === y;
        };
      }
    };
    ordCodePoint = {
      compare: function(x) {
        return function(y) {
          return compare3(x)(y);
        };
      },
      Eq0: function() {
        return eqCodePoint;
      }
    };
    countTail = function($copy_p) {
      return function($copy_s) {
        return function($copy_accum) {
          var $tco_var_p = $copy_p;
          var $tco_var_s = $copy_s;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(p, s, accum) {
            var v = uncons3(s);
            if (v instanceof Just) {
              var $61 = p(v.value0.head);
              if ($61) {
                $tco_var_p = p;
                $tco_var_s = v.value0.tail;
                $copy_accum = accum + 1 | 0;
                return;
              }
              ;
              $tco_done = true;
              return accum;
            }
            ;
            $tco_done = true;
            return accum;
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
          }
          ;
          return $tco_result;
        };
      };
    };
    countFallback = function(p) {
      return function(s) {
        return countTail(p)(s)(0);
      };
    };
    countPrefix2 = /* @__PURE__ */ _countPrefix(countFallback)(unsafeCodePointAt0);
    takeWhile = function(p) {
      return function(s) {
        return take2(countPrefix2(p)(s))(s);
      };
    };
    codePointFromChar = function($77) {
      return CodePoint(fromEnum2($77));
    };
    codePointAtFallback = function($copy_n) {
      return function($copy_s) {
        var $tco_var_n = $copy_n;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(n, s) {
          var v = uncons3(s);
          if (v instanceof Just) {
            var $66 = n === 0;
            if ($66) {
              $tco_done = true;
              return new Just(v.value0.head);
            }
            ;
            $tco_var_n = n - 1 | 0;
            $copy_s = v.value0.tail;
            return;
          }
          ;
          $tco_done = true;
          return Nothing.value;
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_n, $copy_s);
        }
        ;
        return $tco_result;
      };
    };
    codePointAt = function(v) {
      return function(v1) {
        if (v < 0) {
          return Nothing.value;
        }
        ;
        if (v === 0 && v1 === "") {
          return Nothing.value;
        }
        ;
        if (v === 0) {
          return new Just(unsafeCodePointAt0(v1));
        }
        ;
        return _codePointAt(codePointAtFallback)(Just.create)(Nothing.value)(unsafeCodePointAt0)(v)(v1);
      };
    };
    boundedCodePoint = {
      bottom: 0,
      top: 1114111,
      Ord0: function() {
        return ordCodePoint;
      }
    };
    boundedEnumCodePoint = /* @__PURE__ */ function() {
      return {
        cardinality: 1114111 + 1 | 0,
        fromEnum: function(v) {
          return v;
        },
        toEnum: function(n) {
          if (n >= 0 && n <= 1114111) {
            return new Just(n);
          }
          ;
          if (otherwise) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Data.String.CodePoints (line 63, column 1 - line 68, column 26): " + [n.constructor.name]);
        },
        Bounded0: function() {
          return boundedCodePoint;
        },
        Enum1: function() {
          return $lazy_enumCodePoint(0);
        }
      };
    }();
    $lazy_enumCodePoint = /* @__PURE__ */ $runtime_lazy3("enumCodePoint", "Data.String.CodePoints", function() {
      return {
        succ: defaultSucc(toEnum(boundedEnumCodePoint))(fromEnum(boundedEnumCodePoint)),
        pred: defaultPred(toEnum(boundedEnumCodePoint))(fromEnum(boundedEnumCodePoint)),
        Ord0: function() {
          return ordCodePoint;
        }
      };
    });
    fromEnum3 = /* @__PURE__ */ fromEnum(boundedEnumCodePoint);
    modifyFull = unsafeCoerce2;
    toLower2 = /* @__PURE__ */ modifyFull(lower);
    modify3 = unsafeCoerce2;
    toLowerSimple = /* @__PURE__ */ modify3(uTowlower);
    toUpperSimple = /* @__PURE__ */ modify3(uTowupper);
    isUpper = function($66) {
      return uIswupper(fromEnum3($66));
    };
    isSpace = function(c) {
      var uc = fromEnum3(c);
      var $28 = uc <= 823;
      if ($28) {
        return uc === 32 || (uc >= 9 && uc <= 13 || uc === 160);
      }
      ;
      return uIswspace(uc);
    };
    isOctDigit = function(c) {
      var diff = fromEnum3(c) - toCharCode2("0") | 0;
      return diff <= 7 && diff >= 0;
    };
    isDecDigit = function(c) {
      var diff = fromEnum3(c) - toCharCode2("0") | 0;
      return diff <= 9 && diff >= 0;
    };
    isHexDigit = function(c) {
      return isDecDigit(c) || (function() {
        var diff = fromEnum3(c) - toCharCode2("A") | 0;
        return diff <= 5 && diff >= 0;
      }() || function() {
        var diff = fromEnum3(c) - toCharCode2("a") | 0;
        return diff <= 5 && diff >= 0;
      }());
    };
    isAlphaNum = function($70) {
      return uIswalnum(fromEnum3($70));
    };
    isAlpha = function($71) {
      return uIswalpha(fromEnum3($71));
    };
    hexDigitToInt = function(c) {
      var hexUpper = fromEnum3(c) - toCharCode2("A") | 0;
      var hexLower = fromEnum3(c) - toCharCode2("a") | 0;
      var dec = fromEnum3(c) - toCharCode2("0") | 0;
      var result = function() {
        if (dec <= 9 && dec >= 0) {
          return new Just(dec);
        }
        ;
        if (hexLower <= 5 && hexLower >= 0) {
          return new Just(hexLower + 10 | 0);
        }
        ;
        if (hexUpper <= 5 && hexUpper >= 0) {
          return new Just(hexUpper + 10 | 0);
        }
        ;
        if (otherwise) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode (line 591, column 3 - line 591, column 22): ");
      }();
      return result;
    };
    intercalate3 = /* @__PURE__ */ intercalate2(monoidString);
    map6 = /* @__PURE__ */ map(functorArray);
    ucLower = function(v) {
      if (v === "") {
        return "";
      }
      ;
      var v1 = uncons3(v);
      if (v1 instanceof Just) {
        return fromCodePointArray(toLower2(v1.value0.head)) + v1.value0.tail;
      }
      ;
      if (v1 instanceof Nothing) {
        return "";
      }
      ;
      throw new Error("Failed pattern match at Data.String.Utils (line 13, column 3 - line 15, column 18): " + [v1.constructor.name]);
    };
    splitLines = function(str) {
      return split("\n")(str);
    };
    concatWith = function(xs) {
      return function(f) {
        return intercalate3(",")(map6(f)(xs));
      };
    };
    intercalate4 = /* @__PURE__ */ intercalate2(monoidString);
    map7 = /* @__PURE__ */ map(functorArray);
    show2 = /* @__PURE__ */ show(showInt);
    max3 = /* @__PURE__ */ max(ordInt);
    Diagnostic = /* @__PURE__ */ function() {
      function Diagnostic2(value0) {
        this.value0 = value0;
      }
      ;
      Diagnostic2.create = function(value0) {
        return new Diagnostic2(value0);
      };
      return Diagnostic2;
    }();
    ppSourceCode = function(lines) {
      return intercalate4("\n")(map7(function(l) {
        return "| " + l;
      })(lines));
    };
    ppPosition = function(span3) {
      return function(filepath) {
        return intercalate4("")(["--> ", filepath, ":", show2(span3.value0.value1), ":", show2(span3.value0.value2), " - ", show2(span3.value1.value1), ":", show2(span3.value1.value2), " (line ", show2(span3.value0.value1), ", column ", show2(span3.value0.value2), " - ", "line ", show2(span3.value1.value1), ", column ", show2(span3.value1.value2), ") "]);
      };
    };
    ppMessage = function(span3) {
      return function(message2) {
        return intercalate4("")(["| ", intercalate4("")(replicate(span3.value0.value2 - 1 | 0)(" ")), intercalate4("")(replicate(max3(span3.value1.value0 - span3.value0.value0 | 0)(1))("^")), " " + message2, "\n|"]);
      };
    };
    getSourceCode = function(source2) {
      return function(startLine) {
        return function(endLine) {
          var startLine$prime = max3(startLine - 4 | 0)(0);
          var lines = splitLines(source2);
          var $28 = startLine$prime >= 0 && endLine < length(lines);
          if ($28) {
            return slice(startLine$prime)(endLine)(lines);
          }
          ;
          return [];
        };
      };
    };
    ppDiagnostic = function(v) {
      var above = getSourceCode(v.value0.source)(v.value0.span.value0.value1)(v.value0.span.value1.value1);
      return intercalate4("\n")([ppPosition(v.value0.span)(v.value0.filepath), ppSourceCode(above), ppMessage(v.value0.span)(v.value0.info)]);
    };
    genericEqNoArguments = {
      "genericEq'": function(v) {
        return function(v1) {
          return true;
        };
      }
    };
    genericEqArgument = function(dictEq) {
      var eq3 = eq(dictEq);
      return {
        "genericEq'": function(v) {
          return function(v1) {
            return eq3(v)(v1);
          };
        }
      };
    };
    genericEq$prime = function(dict) {
      return dict["genericEq'"];
    };
    genericEqConstructor = function(dictGenericEq) {
      var genericEq$prime1 = genericEq$prime(dictGenericEq);
      return {
        "genericEq'": function(v) {
          return function(v1) {
            return genericEq$prime1(v)(v1);
          };
        }
      };
    };
    genericEqProduct = function(dictGenericEq) {
      var genericEq$prime1 = genericEq$prime(dictGenericEq);
      return function(dictGenericEq1) {
        var genericEq$prime2 = genericEq$prime(dictGenericEq1);
        return {
          "genericEq'": function(v) {
            return function(v1) {
              return genericEq$prime1(v.value0)(v1.value0) && genericEq$prime2(v.value1)(v1.value1);
            };
          }
        };
      };
    };
    genericEqSum = function(dictGenericEq) {
      var genericEq$prime1 = genericEq$prime(dictGenericEq);
      return function(dictGenericEq1) {
        var genericEq$prime2 = genericEq$prime(dictGenericEq1);
        return {
          "genericEq'": function(v) {
            return function(v1) {
              if (v instanceof Inl && v1 instanceof Inl) {
                return genericEq$prime1(v.value0)(v1.value0);
              }
              ;
              if (v instanceof Inr && v1 instanceof Inr) {
                return genericEq$prime2(v.value0)(v1.value0);
              }
              ;
              return false;
            };
          }
        };
      };
    };
    genericEq = function(dictGeneric) {
      var from3 = from(dictGeneric);
      return function(dictGenericEq) {
        var genericEq$prime1 = genericEq$prime(dictGenericEq);
        return function(x) {
          return function(y) {
            return genericEq$prime1(from3(x))(from3(y));
          };
        };
      };
    };
    $runtime_lazy4 = function(name2, moduleName, init3) {
      var state2 = 0;
      var val;
      return function(lineNumber) {
        if (state2 === 2) return val;
        if (state2 === 1) throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state2 = 1;
        val = init3();
        state2 = 2;
        return val;
      };
    };
    genericEqConstructor2 = /* @__PURE__ */ genericEqConstructor(/* @__PURE__ */ genericEqArgument(eqString));
    genericEqSum2 = /* @__PURE__ */ genericEqSum(genericEqConstructor2);
    genericEqConstructor1 = /* @__PURE__ */ genericEqConstructor(genericEqNoArguments);
    genericEqSum1 = /* @__PURE__ */ genericEqSum(genericEqConstructor1);
    CommonJs = /* @__PURE__ */ function() {
      function CommonJs2() {
      }
      ;
      CommonJs2.value = new CommonJs2();
      return CommonJs2;
    }();
    EsNext = /* @__PURE__ */ function() {
      function EsNext2() {
      }
      ;
      EsNext2.value = new EsNext2();
      return EsNext2;
    }();
    JSString = /* @__PURE__ */ function() {
      function JSString2(value0) {
        this.value0 = value0;
      }
      ;
      JSString2.create = function(value0) {
        return new JSString2(value0);
      };
      return JSString2;
    }();
    JSUndefined = /* @__PURE__ */ function() {
      function JSUndefined2() {
      }
      ;
      JSUndefined2.value = new JSUndefined2();
      return JSUndefined2;
    }();
    JSNull = /* @__PURE__ */ function() {
      function JSNull2() {
      }
      ;
      JSNull2.value = new JSNull2();
      return JSNull2;
    }();
    JSNumber = /* @__PURE__ */ function() {
      function JSNumber2(value0) {
        this.value0 = value0;
      }
      ;
      JSNumber2.create = function(value0) {
        return new JSNumber2(value0);
      };
      return JSNumber2;
    }();
    JSBoolean = /* @__PURE__ */ function() {
      function JSBoolean2(value0) {
        this.value0 = value0;
      }
      ;
      JSBoolean2.create = function(value0) {
        return new JSBoolean2(value0);
      };
      return JSBoolean2;
    }();
    JSArray = /* @__PURE__ */ function() {
      function JSArray2(value0) {
        this.value0 = value0;
      }
      ;
      JSArray2.create = function(value0) {
        return new JSArray2(value0);
      };
      return JSArray2;
    }();
    JSObject = /* @__PURE__ */ function() {
      function JSObject2(value0) {
        this.value0 = value0;
      }
      ;
      JSObject2.create = function(value0) {
        return new JSObject2(value0);
      };
      return JSObject2;
    }();
    JSLiteral = /* @__PURE__ */ function() {
      function JSLiteral2(value0) {
        this.value0 = value0;
      }
      ;
      JSLiteral2.create = function(value0) {
        return new JSLiteral2(value0);
      };
      return JSLiteral2;
    }();
    JSIdentifier = /* @__PURE__ */ function() {
      function JSIdentifier2(value0) {
        this.value0 = value0;
      }
      ;
      JSIdentifier2.create = function(value0) {
        return new JSIdentifier2(value0);
      };
      return JSIdentifier2;
    }();
    JSCallExpression = /* @__PURE__ */ function() {
      function JSCallExpression2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JSCallExpression2.create = function(value0) {
        return function(value1) {
          return new JSCallExpression2(value0, value1);
        };
      };
      return JSCallExpression2;
    }();
    JSArrowFunctionExpression = /* @__PURE__ */ function() {
      function JSArrowFunctionExpression2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JSArrowFunctionExpression2.create = function(value0) {
        return function(value1) {
          return new JSArrowFunctionExpression2(value0, value1);
        };
      };
      return JSArrowFunctionExpression2;
    }();
    JSCode = /* @__PURE__ */ function() {
      function JSCode2(value0) {
        this.value0 = value0;
      }
      ;
      JSCode2.create = function(value0) {
        return new JSCode2(value0);
      };
      return JSCode2;
    }();
    JsObjectProperty1 = /* @__PURE__ */ function() {
      function JsObjectProperty12(value0) {
        this.value0 = value0;
      }
      ;
      JsObjectProperty12.create = function(value0) {
        return new JsObjectProperty12(value0);
      };
      return JsObjectProperty12;
    }();
    JsObjectProperty2 = /* @__PURE__ */ function() {
      function JsObjectProperty22(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JsObjectProperty22.create = function(value0) {
        return function(value1) {
          return new JsObjectProperty22(value0, value1);
        };
      };
      return JsObjectProperty22;
    }();
    JsImportSpecifier = /* @__PURE__ */ function() {
      function JsImportSpecifier2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JsImportSpecifier2.create = function(value0) {
        return function(value1) {
          return new JsImportSpecifier2(value0, value1);
        };
      };
      return JsImportSpecifier2;
    }();
    JsSpecifiers = /* @__PURE__ */ function() {
      function JsSpecifiers2(value0) {
        this.value0 = value0;
      }
      ;
      JsSpecifiers2.create = function(value0) {
        return new JsSpecifiers2(value0);
      };
      return JsSpecifiers2;
    }();
    JSImportDeclaration = /* @__PURE__ */ function() {
      function JSImportDeclaration2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JSImportDeclaration2.create = function(value0) {
        return function(value1) {
          return new JSImportDeclaration2(value0, value1);
        };
      };
      return JSImportDeclaration2;
    }();
    JSVariableDeclaration = /* @__PURE__ */ function() {
      function JSVariableDeclaration2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      JSVariableDeclaration2.create = function(value0) {
        return function(value1) {
          return new JSVariableDeclaration2(value0, value1);
        };
      };
      return JSVariableDeclaration2;
    }();
    JSExportNamedDeclaration = /* @__PURE__ */ function() {
      function JSExportNamedDeclaration2(value0) {
        this.value0 = value0;
      }
      ;
      JSExportNamedDeclaration2.create = function(value0) {
        return new JSExportNamedDeclaration2(value0);
      };
      return JSExportNamedDeclaration2;
    }();
    JSEmptyStatement = /* @__PURE__ */ function() {
      function JSEmptyStatement2() {
      }
      ;
      JSEmptyStatement2.value = new JSEmptyStatement2();
      return JSEmptyStatement2;
    }();
    JsStatements = /* @__PURE__ */ function() {
      function JsStatements2(value0) {
        this.value0 = value0;
      }
      ;
      JsStatements2.create = function(value0) {
        return new JsStatements2(value0);
      };
      return JsStatements2;
    }();
    variable = /* @__PURE__ */ function() {
      return JSVariableDeclaration.create;
    }();
    $$undefined = /* @__PURE__ */ function() {
      return new JSLiteral(JSUndefined.value);
    }();
    string = function(s) {
      return new JSLiteral(new JSString(s));
    };
    statements = /* @__PURE__ */ function() {
      return JsStatements.create;
    }();
    specifiers = /* @__PURE__ */ function() {
      return JsSpecifiers.create;
    }();
    objectProperty2$prime = function(key) {
      return function(tree) {
        return new JsObjectProperty2(key, tree);
      };
    };
    object = function(o) {
      return new JSLiteral(new JSObject(o));
    };
    $$null3 = /* @__PURE__ */ function() {
      return new JSLiteral(JSNull.value);
    }();
    $$int = function(i) {
      return new JSLiteral(new JSNumber(toNumber(i)));
    };
    import_ = /* @__PURE__ */ function() {
      return JSImportDeclaration.create;
    }();
    importSpecifier2 = function(x) {
      return function(y) {
        return new JsImportSpecifier(x, new Just(y));
      };
    };
    importSpecifier1 = function(x) {
      return new JsImportSpecifier(x, Nothing.value);
    };
    identifier = function(s) {
      return new JSIdentifier(s);
    };
    objectProperty1 = function(ident) {
      return new JsObjectProperty1(identifier(ident));
    };
    objectProperty2 = function(ident) {
      return function(tree) {
        return new JsObjectProperty2(identifier(ident), tree);
      };
    };
    genericJsTree = {
      to: function(x) {
        if (x instanceof Inl) {
          return new JSLiteral(x.value0);
        }
        ;
        if (x instanceof Inr && x.value0 instanceof Inl) {
          return new JSIdentifier(x.value0.value0);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
          return new JSCallExpression(x.value0.value0.value0.value0, x.value0.value0.value0.value1);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
          return new JSArrowFunctionExpression(x.value0.value0.value0.value0.value0, x.value0.value0.value0.value0.value1);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inr))) {
          return new JSCode(x.value0.value0.value0.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 76, column 1 - line 76, column 50): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof JSLiteral) {
          return new Inl(x.value0);
        }
        ;
        if (x instanceof JSIdentifier) {
          return new Inr(new Inl(x.value0));
        }
        ;
        if (x instanceof JSCallExpression) {
          return new Inr(new Inr(new Inl(new Product(x.value0, x.value1))));
        }
        ;
        if (x instanceof JSArrowFunctionExpression) {
          return new Inr(new Inr(new Inr(new Inl(new Product(x.value0, x.value1)))));
        }
        ;
        if (x instanceof JSCode) {
          return new Inr(new Inr(new Inr(new Inr(x.value0))));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 76, column 1 - line 76, column 50): " + [x.constructor.name]);
      }
    };
    genericEq2 = /* @__PURE__ */ genericEq(genericJsTree);
    genericJsLiteral = {
      to: function(x) {
        if (x instanceof Inl) {
          return new JSString(x.value0);
        }
        ;
        if (x instanceof Inr && x.value0 instanceof Inl) {
          return JSUndefined.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
          return JSNull.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
          return new JSNumber(x.value0.value0.value0.value0);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
          return new JSBoolean(x.value0.value0.value0.value0.value0);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
          return new JSArray(x.value0.value0.value0.value0.value0.value0);
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inr))))) {
          return new JSObject(x.value0.value0.value0.value0.value0.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 23, column 1 - line 23, column 56): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof JSString) {
          return new Inl(x.value0);
        }
        ;
        if (x instanceof JSUndefined) {
          return new Inr(new Inl(NoArguments.value));
        }
        ;
        if (x instanceof JSNull) {
          return new Inr(new Inr(new Inl(NoArguments.value)));
        }
        ;
        if (x instanceof JSNumber) {
          return new Inr(new Inr(new Inr(new Inl(x.value0))));
        }
        ;
        if (x instanceof JSBoolean) {
          return new Inr(new Inr(new Inr(new Inr(new Inl(x.value0)))));
        }
        ;
        if (x instanceof JSArray) {
          return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x.value0))))));
        }
        ;
        if (x instanceof JSObject) {
          return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(x.value0))))));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 23, column 1 - line 23, column 56): " + [x.constructor.name]);
      }
    };
    genericJSObjectProperty = {
      to: function(x) {
        if (x instanceof Inl) {
          return new JsObjectProperty1(x.value0);
        }
        ;
        if (x instanceof Inr) {
          return new JsObjectProperty2(x.value0.value0, x.value0.value1);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 32, column 1 - line 32, column 70): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof JsObjectProperty1) {
          return new Inl(x.value0);
        }
        ;
        if (x instanceof JsObjectProperty2) {
          return new Inr(new Product(x.value0, x.value1));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Tree (line 32, column 1 - line 32, column 70): " + [x.constructor.name]);
      }
    };
    $$float = function(f) {
      return new JSLiteral(new JSNumber(f));
    };
    exportNamed = /* @__PURE__ */ function() {
      return JSExportNamedDeclaration.create;
    }();
    eqJsTree = {
      eq: function(x) {
        return genericEq2(genericEqSum(genericEqConstructor(genericEqArgument($lazy_eqJsLiteral(0))))(genericEqSum2(genericEqSum(genericEqConstructor(genericEqProduct(genericEqArgument(eqJsTree))(genericEqArgument(eqArray(eqJsTree)))))(genericEqSum(genericEqConstructor(genericEqProduct(genericEqArgument(eqArray(eqJsTree)))(genericEqArgument(eqJsTree))))(genericEqConstructor2)))))(x);
      }
    };
    $lazy_eqJsLiteral = /* @__PURE__ */ $runtime_lazy4("eqJsLiteral", "Aeria.Codegen.Javascript.Tree", function() {
      return {
        eq: genericEq(genericJsLiteral)(genericEqSum2(genericEqSum1(genericEqSum1(genericEqSum(genericEqConstructor(genericEqArgument(eqNumber)))(genericEqSum(genericEqConstructor(genericEqArgument(eqBoolean)))(genericEqSum(genericEqConstructor(genericEqArgument(eqArray(eqJsTree))))(genericEqConstructor(genericEqArgument(eqArray($lazy_eqJsObjectProperty(0)))))))))))
      };
    });
    $lazy_eqJsObjectProperty = /* @__PURE__ */ $runtime_lazy4("eqJsObjectProperty", "Aeria.Codegen.Javascript.Tree", function() {
      return {
        eq: genericEq(genericJSObjectProperty)(genericEqSum(genericEqConstructor(genericEqArgument(eqJsTree)))(genericEqConstructor(genericEqProduct(genericEqArgument(eqJsTree))(genericEqArgument(eqJsTree)))))
      };
    });
    eqJsObjectProperty = /* @__PURE__ */ $lazy_eqJsObjectProperty(34);
    emptyStatement = /* @__PURE__ */ function() {
      return JSEmptyStatement.value;
    }();
    code = /* @__PURE__ */ function() {
      return JSCode.create;
    }();
    call = /* @__PURE__ */ function() {
      return JSCallExpression.create;
    }();
    $$boolean = function(b) {
      return new JSLiteral(new JSBoolean(b));
    };
    arrowFunction = /* @__PURE__ */ function() {
      return JSArrowFunctionExpression.create;
    }();
    array = function(a) {
      return new JSLiteral(new JSArray(a));
    };
    TsDeclareKeyword = /* @__PURE__ */ function() {
      function TsDeclareKeyword2() {
      }
      ;
      TsDeclareKeyword2.value = new TsDeclareKeyword2();
      return TsDeclareKeyword2;
    }();
    TsConstKeyword = /* @__PURE__ */ function() {
      function TsConstKeyword2() {
      }
      ;
      TsConstKeyword2.value = new TsConstKeyword2();
      return TsConstKeyword2;
    }();
    TsIdentifier = /* @__PURE__ */ function() {
      function TsIdentifier2(value0) {
        this.value0 = value0;
      }
      ;
      TsIdentifier2.create = function(value0) {
        return new TsIdentifier2(value0);
      };
      return TsIdentifier2;
    }();
    TsImportSpecifier = /* @__PURE__ */ function() {
      function TsImportSpecifier2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TsImportSpecifier2.create = function(value0) {
        return function(value1) {
          return new TsImportSpecifier2(value0, value1);
        };
      };
      return TsImportSpecifier2;
    }();
    TsSpecifiers = /* @__PURE__ */ function() {
      function TsSpecifiers2(value0) {
        this.value0 = value0;
      }
      ;
      TsSpecifiers2.create = function(value0) {
        return new TsSpecifiers2(value0);
      };
      return TsSpecifiers2;
    }();
    TsTypeObjectProperty = /* @__PURE__ */ function() {
      function TsTypeObjectProperty2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TsTypeObjectProperty2.create = function(value0) {
        return function(value1) {
          return new TsTypeObjectProperty2(value0, value1);
        };
      };
      return TsTypeObjectProperty2;
    }();
    TSTypeAny = /* @__PURE__ */ function() {
      function TSTypeAny2() {
      }
      ;
      TSTypeAny2.value = new TSTypeAny2();
      return TSTypeAny2;
    }();
    TSTypeString = /* @__PURE__ */ function() {
      function TSTypeString2() {
      }
      ;
      TSTypeString2.value = new TSTypeString2();
      return TSTypeString2;
    }();
    TSTypeLiteral = /* @__PURE__ */ function() {
      function TSTypeLiteral2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLiteral2.create = function(value0) {
        return new TSTypeLiteral2(value0);
      };
      return TSTypeLiteral2;
    }();
    TSTypeQuery = /* @__PURE__ */ function() {
      function TSTypeQuery2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeQuery2.create = function(value0) {
        return new TSTypeQuery2(value0);
      };
      return TSTypeQuery2;
    }();
    TSTypeExtends = /* @__PURE__ */ function() {
      function TSTypeExtends2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSTypeExtends2.create = function(value0) {
        return function(value1) {
          return new TSTypeExtends2(value0, value1);
        };
      };
      return TSTypeExtends2;
    }();
    TSIntersectionType = /* @__PURE__ */ function() {
      function TSIntersectionType2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSIntersectionType2.create = function(value0) {
        return function(value1) {
          return new TSIntersectionType2(value0, value1);
        };
      };
      return TSIntersectionType2;
    }();
    TSCallExpression = /* @__PURE__ */ function() {
      function TSCallExpression2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSCallExpression2.create = function(value0) {
        return function(value1) {
          return new TSCallExpression2(value0, value1);
        };
      };
      return TSCallExpression2;
    }();
    TSTypeReference = /* @__PURE__ */ function() {
      function TSTypeReference2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSTypeReference2.create = function(value0) {
        return function(value1) {
          return new TSTypeReference2(value0, value1);
        };
      };
      return TSTypeReference2;
    }();
    TSFunctionType = /* @__PURE__ */ function() {
      function TSFunctionType2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TSFunctionType2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TSFunctionType2(value0, value1, value2);
          };
        };
      };
      return TSFunctionType2;
    }();
    TSTypeLitString = /* @__PURE__ */ function() {
      function TSTypeLitString2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLitString2.create = function(value0) {
        return new TSTypeLitString2(value0);
      };
      return TSTypeLitString2;
    }();
    TSTypeLitBoolean = /* @__PURE__ */ function() {
      function TSTypeLitBoolean2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLitBoolean2.create = function(value0) {
        return new TSTypeLitBoolean2(value0);
      };
      return TSTypeLitBoolean2;
    }();
    TSTypeLitUndefined = /* @__PURE__ */ function() {
      function TSTypeLitUndefined2() {
      }
      ;
      TSTypeLitUndefined2.value = new TSTypeLitUndefined2();
      return TSTypeLitUndefined2;
    }();
    TSTypeLitNull = /* @__PURE__ */ function() {
      function TSTypeLitNull2() {
      }
      ;
      TSTypeLitNull2.value = new TSTypeLitNull2();
      return TSTypeLitNull2;
    }();
    TSTypeLitArray = /* @__PURE__ */ function() {
      function TSTypeLitArray2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLitArray2.create = function(value0) {
        return new TSTypeLitArray2(value0);
      };
      return TSTypeLitArray2;
    }();
    TSTypeLitNumber = /* @__PURE__ */ function() {
      function TSTypeLitNumber2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLitNumber2.create = function(value0) {
        return new TSTypeLitNumber2(value0);
      };
      return TSTypeLitNumber2;
    }();
    TSTypeLitObject = /* @__PURE__ */ function() {
      function TSTypeLitObject2(value0) {
        this.value0 = value0;
      }
      ;
      TSTypeLitObject2.create = function(value0) {
        return new TSTypeLitObject2(value0);
      };
      return TSTypeLitObject2;
    }();
    TsTypeParameter = /* @__PURE__ */ function() {
      function TsTypeParameter2(value0) {
        this.value0 = value0;
      }
      ;
      TsTypeParameter2.create = function(value0) {
        return new TsTypeParameter2(value0);
      };
      return TsTypeParameter2;
    }();
    TsParameter = /* @__PURE__ */ function() {
      function TsParameter2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TsParameter2.create = function(value0) {
        return function(value1) {
          return new TsParameter2(value0, value1);
        };
      };
      return TsParameter2;
    }();
    TSImportDeclaration = /* @__PURE__ */ function() {
      function TSImportDeclaration2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSImportDeclaration2.create = function(value0) {
        return function(value1) {
          return new TSImportDeclaration2(value0, value1);
        };
      };
      return TSImportDeclaration2;
    }();
    TSVariableDeclaration = /* @__PURE__ */ function() {
      function TSVariableDeclaration2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      TSVariableDeclaration2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new TSVariableDeclaration2(value0, value1, value2);
          };
        };
      };
      return TSVariableDeclaration2;
    }();
    TSTypeAliasDeclaration = /* @__PURE__ */ function() {
      function TSTypeAliasDeclaration2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TSTypeAliasDeclaration2.create = function(value0) {
        return function(value1) {
          return new TSTypeAliasDeclaration2(value0, value1);
        };
      };
      return TSTypeAliasDeclaration2;
    }();
    TSExportNamedDeclaration = /* @__PURE__ */ function() {
      function TSExportNamedDeclaration2(value0) {
        this.value0 = value0;
      }
      ;
      TSExportNamedDeclaration2.create = function(value0) {
        return new TSExportNamedDeclaration2(value0);
      };
      return TSExportNamedDeclaration2;
    }();
    TSEmptyStatement = /* @__PURE__ */ function() {
      function TSEmptyStatement2() {
      }
      ;
      TSEmptyStatement2.value = new TSEmptyStatement2();
      return TSEmptyStatement2;
    }();
    TsStatements = /* @__PURE__ */ function() {
      function TsStatements2(value0) {
        this.value0 = value0;
      }
      ;
      TsStatements2.create = function(value0) {
        return new TsStatements2(value0);
      };
      return TsStatements2;
    }();
    variable2 = /* @__PURE__ */ function() {
      return TSVariableDeclaration.create;
    }();
    typeReference = /* @__PURE__ */ function() {
      return TSTypeReference.create;
    }();
    typeQuery = /* @__PURE__ */ function() {
      return TSTypeQuery.create;
    }();
    typeParameter = /* @__PURE__ */ function() {
      return TsTypeParameter.create;
    }();
    typeObjectProperty = /* @__PURE__ */ function() {
      return TsTypeObjectProperty.create;
    }();
    typeLiteral = /* @__PURE__ */ function() {
      return TSTypeLiteral.create;
    }();
    typeLitUndefined = /* @__PURE__ */ function() {
      return TSTypeLitUndefined.value;
    }();
    typeLitString = /* @__PURE__ */ function() {
      return TSTypeLitString.create;
    }();
    typeLitObject = /* @__PURE__ */ function() {
      return TSTypeLitObject.create;
    }();
    typeLitNumber = /* @__PURE__ */ function() {
      return TSTypeLitNumber.create;
    }();
    typeLitNull = /* @__PURE__ */ function() {
      return TSTypeLitNull.value;
    }();
    typeLitBoolean = /* @__PURE__ */ function() {
      return TSTypeLitBoolean.create;
    }();
    typeLitArray = /* @__PURE__ */ function() {
      return TSTypeLitArray.create;
    }();
    typeExtends = /* @__PURE__ */ function() {
      return TSTypeExtends.create;
    }();
    typeAny = /* @__PURE__ */ function() {
      return TSTypeAny.value;
    }();
    typeAlias = /* @__PURE__ */ function() {
      return TSTypeAliasDeclaration.create;
    }();
    statements2 = /* @__PURE__ */ function() {
      return TsStatements.create;
    }();
    specifiers2 = /* @__PURE__ */ function() {
      return TsSpecifiers.create;
    }();
    parameter = /* @__PURE__ */ function() {
      return TsParameter.create;
    }();
    intersectionType = /* @__PURE__ */ function() {
      return TSIntersectionType.create;
    }();
    import_2 = /* @__PURE__ */ function() {
      return TSImportDeclaration.create;
    }();
    importSpecifier22 = function(x) {
      return function(y) {
        return new TsImportSpecifier(x, new Just(y));
      };
    };
    importSpecifier = function(x) {
      return new TsImportSpecifier(x, Nothing.value);
    };
    identifier2 = /* @__PURE__ */ function() {
      return TsIdentifier.create;
    }();
    functionType = /* @__PURE__ */ function() {
      return TSFunctionType.create;
    }();
    exportNamed2 = /* @__PURE__ */ function() {
      return TSExportNamedDeclaration.create;
    }();
    emptyStatement2 = /* @__PURE__ */ function() {
      return TSEmptyStatement.value;
    }();
    declareKeyword = /* @__PURE__ */ function() {
      return TsDeclareKeyword.value;
    }();
    constKeyword = /* @__PURE__ */ function() {
      return TsConstKeyword.value;
    }();
    map8 = /* @__PURE__ */ map(functorArray);
    codegenIdent = function(v) {
      if (v instanceof JSIdentifier) {
        return identifier2(v.value0);
      }
      ;
      return identifier2("error");
    };
    codegenParameter = function(ident) {
      return parameter(codegenIdent(ident))(typeAny);
    };
    codegenType = function(v) {
      if (v instanceof JSCode) {
        return typeAny;
      }
      ;
      if (v instanceof JSIdentifier) {
        return typeReference([])(codegenIdent(new JSIdentifier(v.value0)));
      }
      ;
      if (v instanceof JSLiteral) {
        return codegenLiteral(v.value0);
      }
      ;
      if (v instanceof JSCallExpression) {
        return typeAny;
      }
      ;
      if (v instanceof JSArrowFunctionExpression) {
        return functionType([])(map8(codegenParameter)(v.value0))(codegenType(v.value1));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Type (line 13, column 3 - line 19, column 74): " + [v.constructor.name]);
    };
    codegenObjectProperty = function(property) {
      if (property instanceof JsObjectProperty1) {
        return typeObjectProperty(codegenIdent(property.value0))(typeQuery(codegenIdent(property.value0)));
      }
      ;
      if (property instanceof JsObjectProperty2) {
        return typeObjectProperty(codegenIdent(property.value0))(codegenType(property.value1));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Type (line 34, column 3 - line 36, column 100): " + [property.constructor.name]);
    };
    codegenLiteral = function(literal) {
      return typeLiteral(function() {
        if (literal instanceof JSNull) {
          return typeLitNull;
        }
        ;
        if (literal instanceof JSUndefined) {
          return typeLitUndefined;
        }
        ;
        if (literal instanceof JSString) {
          return typeLitString(literal.value0);
        }
        ;
        if (literal instanceof JSNumber) {
          return typeLitNumber(literal.value0);
        }
        ;
        if (literal instanceof JSBoolean) {
          return typeLitBoolean(literal.value0);
        }
        ;
        if (literal instanceof JSArray) {
          return typeLitArray(map8(codegenType)(literal.value0));
        }
        ;
        if (literal instanceof JSObject) {
          return typeLitObject(map8(codegenObjectProperty)(literal.value0));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Type (line 23, column 3 - line 30, column 73): " + [literal.constructor.name]);
      }());
    };
    intercalate5 = function(separator) {
      return function(xs) {
        return xs.join(separator);
      };
    };
    append3 = /* @__PURE__ */ append(semigroupArray);
    genericShowArgsNoArguments = {
      genericShowArgs: function(v) {
        return [];
      }
    };
    genericShowArgs = function(dict) {
      return dict.genericShowArgs;
    };
    genericShowConstructor = function(dictGenericShowArgs) {
      var genericShowArgs1 = genericShowArgs(dictGenericShowArgs);
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return {
          "genericShow'": function(v) {
            var ctor = reflectSymbol2($$Proxy.value);
            var v1 = genericShowArgs1(v);
            if (v1.length === 0) {
              return ctor;
            }
            ;
            return "(" + (intercalate5(" ")(append3([ctor])(v1)) + ")");
          }
        };
      };
    };
    genericShow$prime = function(dict) {
      return dict["genericShow'"];
    };
    genericShowSum = function(dictGenericShow) {
      var genericShow$prime1 = genericShow$prime(dictGenericShow);
      return function(dictGenericShow1) {
        var genericShow$prime2 = genericShow$prime(dictGenericShow1);
        return {
          "genericShow'": function(v) {
            if (v instanceof Inl) {
              return genericShow$prime1(v.value0);
            }
            ;
            if (v instanceof Inr) {
              return genericShow$prime2(v.value0);
            }
            ;
            throw new Error("Failed pattern match at Data.Show.Generic (line 26, column 1 - line 28, column 40): " + [v.constructor.name]);
          }
        };
      };
    };
    genericShow = function(dictGeneric) {
      var from3 = from(dictGeneric);
      return function(dictGenericShow) {
        var genericShow$prime1 = genericShow$prime(dictGenericShow);
        return function(x) {
          return genericShow$prime1(from3(x));
        };
      };
    };
    SourcePos = /* @__PURE__ */ function() {
      function SourcePos2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      SourcePos2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new SourcePos2(value0, value1, value2);
          };
        };
      };
      return SourcePos2;
    }();
    Span = /* @__PURE__ */ function() {
      function Span2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Span2.create = function(value0) {
        return function(value1) {
          return new Span2(value0, value1);
        };
      };
      return Span2;
    }();
    NonEmpty = /* @__PURE__ */ function() {
      function NonEmpty2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      NonEmpty2.create = function(value0) {
        return function(value1) {
          return new NonEmpty2(value0, value1);
        };
      };
      return NonEmpty2;
    }();
    Nil = /* @__PURE__ */ function() {
      function Nil3() {
      }
      ;
      Nil3.value = new Nil3();
      return Nil3;
    }();
    Cons = /* @__PURE__ */ function() {
      function Cons3(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Cons3.create = function(value0) {
        return function(value1) {
          return new Cons3(value0, value1);
        };
      };
      return Cons3;
    }();
    listMap = function(f) {
      var chunkedRevMap = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Cons)) {
              $tco_var_v = new Cons(v1, v);
              $copy_v1 = v1.value1.value1.value1;
              return;
            }
            ;
            var unrolledMap = function(v2) {
              if (v2 instanceof Cons && (v2.value1 instanceof Cons && v2.value1.value1 instanceof Nil)) {
                return new Cons(f(v2.value0), new Cons(f(v2.value1.value0), Nil.value));
              }
              ;
              if (v2 instanceof Cons && v2.value1 instanceof Nil) {
                return new Cons(f(v2.value0), Nil.value);
              }
              ;
              return Nil.value;
            };
            var reverseUnrolledMap = function($copy_v2) {
              return function($copy_v3) {
                var $tco_var_v2 = $copy_v2;
                var $tco_done1 = false;
                var $tco_result2;
                function $tco_loop2(v2, v3) {
                  if (v2 instanceof Cons && (v2.value0 instanceof Cons && (v2.value0.value1 instanceof Cons && v2.value0.value1.value1 instanceof Cons))) {
                    $tco_var_v2 = v2.value1;
                    $copy_v3 = new Cons(f(v2.value0.value0), new Cons(f(v2.value0.value1.value0), new Cons(f(v2.value0.value1.value1.value0), v3)));
                    return;
                  }
                  ;
                  $tco_done1 = true;
                  return v3;
                }
                ;
                while (!$tco_done1) {
                  $tco_result2 = $tco_loop2($tco_var_v2, $copy_v3);
                }
                ;
                return $tco_result2;
              };
            };
            $tco_done = true;
            return reverseUnrolledMap(v)(unrolledMap(v1));
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return chunkedRevMap(Nil.value);
    };
    functorList = {
      map: listMap
    };
    foldableList = {
      foldr: function(f) {
        return function(b) {
          var rev = function() {
            var go = function($copy_v) {
              return function($copy_v1) {
                var $tco_var_v = $copy_v;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v, v1) {
                  if (v1 instanceof Nil) {
                    $tco_done = true;
                    return v;
                  }
                  ;
                  if (v1 instanceof Cons) {
                    $tco_var_v = new Cons(v1.value0, v);
                    $copy_v1 = v1.value1;
                    return;
                  }
                  ;
                  throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [v.constructor.name, v1.constructor.name]);
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $copy_v1);
                }
                ;
                return $tco_result;
              };
            };
            return go(Nil.value);
          }();
          var $284 = foldl(foldableList)(flip(f))(b);
          return function($285) {
            return $284(rev($285));
          };
        };
      },
      foldl: function(f) {
        var go = function($copy_b) {
          return function($copy_v) {
            var $tco_var_b = $copy_b;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(b, v) {
              if (v instanceof Nil) {
                $tco_done1 = true;
                return b;
              }
              ;
              if (v instanceof Cons) {
                $tco_var_b = f(b)(v.value0);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_b, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go;
      },
      foldMap: function(dictMonoid) {
        var append22 = append(dictMonoid.Semigroup0());
        var mempty2 = mempty(dictMonoid);
        return function(f) {
          return foldl(foldableList)(function(acc) {
            var $286 = append22(acc);
            return function($287) {
              return $286(f($287));
            };
          })(mempty2);
        };
      }
    };
    map9 = /* @__PURE__ */ map(functorMaybe);
    bimap2 = /* @__PURE__ */ bimap(bifunctorStep);
    uncons4 = function(v) {
      if (v instanceof Nil) {
        return Nothing.value;
      }
      ;
      if (v instanceof Cons) {
        return new Just({
          head: v.value0,
          tail: v.value1
        });
      }
      ;
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [v.constructor.name]);
    };
    toUnfoldable = function(dictUnfoldable) {
      return unfoldr(dictUnfoldable)(function(xs) {
        return map9(function(rec) {
          return new Tuple(rec.head, rec.tail);
        })(uncons4(xs));
      });
    };
    singleton5 = function(a) {
      return new Cons(a, Nil.value);
    };
    reverse2 = /* @__PURE__ */ function() {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Nil) {
              $tco_done = true;
              return v;
            }
            ;
            if (v1 instanceof Cons) {
              $tco_var_v = new Cons(v1.value0, v);
              $copy_v1 = v1.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(Nil.value);
    }();
    manyRec = function(dictMonadRec) {
      var bind12 = bind(dictMonadRec.Monad0().Bind1());
      var tailRecM4 = tailRecM(dictMonadRec);
      return function(dictAlternative) {
        var Alt0 = dictAlternative.Plus1().Alt0();
        var alt7 = alt(Alt0);
        var map19 = map(Alt0.Functor0());
        var pure7 = pure(dictAlternative.Applicative0());
        return function(p) {
          var go = function(acc) {
            return bind12(alt7(map19(Loop.create)(p))(pure7(new Done(unit))))(function(aa) {
              return pure7(bimap2(function(v) {
                return new Cons(v, acc);
              })(function(v) {
                return reverse2(acc);
              })(aa));
            });
          };
          return tailRecM4(go)(Nil.value);
        };
      };
    };
    some2 = function(dictAlternative) {
      var apply2 = apply(dictAlternative.Applicative0().Apply0());
      var map19 = map(dictAlternative.Plus1().Alt0().Functor0());
      return function(dictLazy) {
        var defer42 = defer(dictLazy);
        return function(v) {
          return apply2(map19(Cons.create)(v))(defer42(function(v1) {
            return many2(dictAlternative)(dictLazy)(v);
          }));
        };
      };
    };
    many2 = function(dictAlternative) {
      var alt7 = alt(dictAlternative.Plus1().Alt0());
      var pure7 = pure(dictAlternative.Applicative0());
      return function(dictLazy) {
        return function(v) {
          return alt7(some2(dictAlternative)(dictLazy)(v))(pure7(Nil.value));
        };
      };
    };
    foldM = function(dictMonad) {
      var pure7 = pure(dictMonad.Applicative0());
      var bind12 = bind(dictMonad.Bind1());
      return function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 instanceof Nil) {
              return pure7(v1);
            }
            ;
            if (v2 instanceof Cons) {
              return bind12(v(v1)(v2.value0))(function(b$prime) {
                return foldM(dictMonad)(v)(b$prime)(v2.value1);
              });
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 824, column 1 - line 824, column 72): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
          };
        };
      };
    };
    filter = function(p) {
      var go = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v, v1) {
            if (v1 instanceof Nil) {
              $tco_done = true;
              return reverse2(v);
            }
            ;
            if (v1 instanceof Cons) {
              if (p(v1.value0)) {
                $tco_var_v = new Cons(v1.value0, v);
                $copy_v1 = v1.value1;
                return;
              }
              ;
              if (otherwise) {
                $tco_var_v = v;
                $copy_v1 = v1.value1;
                return;
              }
              ;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [v.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go(Nil.value);
    };
    throwError = function(dict) {
      return dict.throwError;
    };
    local = function(dict) {
      return dict.local;
    };
    ask = function(dict) {
      return dict.ask;
    };
    lift = function(dict) {
      return dict.lift;
    };
    defer2 = function(thunk) {
      var v = null;
      return function() {
        if (thunk === void 0) return v;
        v = thunk();
        thunk = void 0;
        return v;
      };
    };
    force = function(l) {
      return l();
    };
    map10 = /* @__PURE__ */ map(functorEither);
    ExceptT = function(x) {
      return x;
    };
    runExceptT = function(v) {
      return v;
    };
    mapExceptT = function(f) {
      return function(v) {
        return f(v);
      };
    };
    functorExceptT = function(dictFunctor) {
      var map19 = map(dictFunctor);
      return {
        map: function(f) {
          return mapExceptT(map19(map10(f)));
        }
      };
    };
    monadExceptT = function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeExceptT(dictMonad);
        },
        Bind1: function() {
          return bindExceptT(dictMonad);
        }
      };
    };
    bindExceptT = function(dictMonad) {
      var bind7 = bind(dictMonad.Bind1());
      var pure7 = pure(dictMonad.Applicative0());
      return {
        bind: function(v) {
          return function(k) {
            return bind7(v)(either(function($187) {
              return pure7(Left.create($187));
            })(function(a) {
              var v1 = k(a);
              return v1;
            }));
          };
        },
        Apply0: function() {
          return applyExceptT(dictMonad);
        }
      };
    };
    applyExceptT = function(dictMonad) {
      var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
      return {
        apply: ap(monadExceptT(dictMonad)),
        Functor0: function() {
          return functorExceptT1;
        }
      };
    };
    applicativeExceptT = function(dictMonad) {
      return {
        pure: function() {
          var $188 = pure(dictMonad.Applicative0());
          return function($189) {
            return ExceptT($188(Right.create($189)));
          };
        }(),
        Apply0: function() {
          return applyExceptT(dictMonad);
        }
      };
    };
    monadThrowExceptT = function(dictMonad) {
      var monadExceptT1 = monadExceptT(dictMonad);
      return {
        throwError: function() {
          var $198 = pure(dictMonad.Applicative0());
          return function($199) {
            return ExceptT($198(Left.create($199)));
          };
        }(),
        Monad0: function() {
          return monadExceptT1;
        }
      };
    };
    unwrap2 = /* @__PURE__ */ unwrap();
    runExcept = function($3) {
      return unwrap2(runExceptT($3));
    };
    isArray = Array.isArray || function(value) {
      return Object.prototype.toString.call(value) === "[object Array]";
    };
    toList = function(v) {
      return new Cons(v.value0, v.value1);
    };
    cons$prime = function(x) {
      return function(xs) {
        return new NonEmpty(x, xs);
      };
    };
    Leaf = /* @__PURE__ */ function() {
      function Leaf2() {
      }
      ;
      Leaf2.value = new Leaf2();
      return Leaf2;
    }();
    Node = /* @__PURE__ */ function() {
      function Node2(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
      }
      ;
      Node2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return function(value3) {
              return function(value4) {
                return function(value5) {
                  return new Node2(value0, value1, value2, value3, value4, value5);
                };
              };
            };
          };
        };
      };
      return Node2;
    }();
    unsafeNode = function(k, v, l, r) {
      if (l instanceof Leaf) {
        if (r instanceof Leaf) {
          return new Node(1, 1, k, v, l, r);
        }
        ;
        if (r instanceof Node) {
          return new Node(1 + r.value0 | 0, 1 + r.value1 | 0, k, v, l, r);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 680, column 5 - line 684, column 39): " + [r.constructor.name]);
      }
      ;
      if (l instanceof Node) {
        if (r instanceof Leaf) {
          return new Node(1 + l.value0 | 0, 1 + l.value1 | 0, k, v, l, r);
        }
        ;
        if (r instanceof Node) {
          return new Node(1 + function() {
            var $277 = l.value0 > r.value0;
            if ($277) {
              return l.value0;
            }
            ;
            return r.value0;
          }() | 0, (1 + l.value1 | 0) + r.value1 | 0, k, v, l, r);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 686, column 5 - line 690, column 68): " + [r.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 678, column 32 - line 690, column 68): " + [l.constructor.name]);
    };
    singleton8 = function(k) {
      return function(v) {
        return new Node(1, 1, k, v, Leaf.value, Leaf.value);
      };
    };
    unsafeBalancedNode = /* @__PURE__ */ function() {
      var height = function(v) {
        if (v instanceof Leaf) {
          return 0;
        }
        ;
        if (v instanceof Node) {
          return v.value0;
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 735, column 12 - line 737, column 26): " + [v.constructor.name]);
      };
      var rotateLeft = function(k, v, l, rk, rv, rl, rr) {
        if (rl instanceof Node && rl.value0 > height(rr)) {
          return unsafeNode(rl.value2, rl.value3, unsafeNode(k, v, l, rl.value4), unsafeNode(rk, rv, rl.value5, rr));
        }
        ;
        return unsafeNode(rk, rv, unsafeNode(k, v, l, rl), rr);
      };
      var rotateRight = function(k, v, lk, lv, ll, lr, r) {
        if (lr instanceof Node && height(ll) <= lr.value0) {
          return unsafeNode(lr.value2, lr.value3, unsafeNode(lk, lv, ll, lr.value4), unsafeNode(k, v, lr.value5, r));
        }
        ;
        return unsafeNode(lk, lv, ll, unsafeNode(k, v, lr, r));
      };
      return function(k, v, l, r) {
        if (l instanceof Leaf) {
          if (r instanceof Leaf) {
            return singleton8(k)(v);
          }
          ;
          if (r instanceof Node && r.value0 > 1) {
            return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
          }
          ;
          return unsafeNode(k, v, l, r);
        }
        ;
        if (l instanceof Node) {
          if (r instanceof Node) {
            if (r.value0 > (l.value0 + 1 | 0)) {
              return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
            }
            ;
            if (l.value0 > (r.value0 + 1 | 0)) {
              return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
            }
            ;
          }
          ;
          if (r instanceof Leaf && l.value0 > 1) {
            return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
          }
          ;
          return unsafeNode(k, v, l, r);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 695, column 40 - line 716, column 34): " + [l.constructor.name]);
      };
    }();
    lookup = function(dictOrd) {
      var compare5 = compare(dictOrd);
      return function(k) {
        var go = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof Leaf) {
              $tco_done = true;
              return Nothing.value;
            }
            ;
            if (v instanceof Node) {
              var v1 = compare5(k)(v.value2);
              if (v1 instanceof LT) {
                $copy_v = v.value4;
                return;
              }
              ;
              if (v1 instanceof GT) {
                $copy_v = v.value5;
                return;
              }
              ;
              if (v1 instanceof EQ) {
                $tco_done = true;
                return new Just(v.value3);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 281, column 7 - line 284, column 22): " + [v1.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 278, column 8 - line 284, column 22): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go;
      };
    };
    insert2 = function(dictOrd) {
      var compare5 = compare(dictOrd);
      return function(k) {
        return function(v) {
          var go = function(v1) {
            if (v1 instanceof Leaf) {
              return singleton8(k)(v);
            }
            ;
            if (v1 instanceof Node) {
              var v2 = compare5(k)(v1.value2);
              if (v2 instanceof LT) {
                return unsafeBalancedNode(v1.value2, v1.value3, go(v1.value4), v1.value5);
              }
              ;
              if (v2 instanceof GT) {
                return unsafeBalancedNode(v1.value2, v1.value3, v1.value4, go(v1.value5));
              }
              ;
              if (v2 instanceof EQ) {
                return new Node(v1.value0, v1.value1, k, v, v1.value4, v1.value5);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 469, column 7 - line 472, column 35): " + [v2.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 466, column 8 - line 472, column 35): " + [v1.constructor.name]);
          };
          return go;
        };
      };
    };
    empty4 = /* @__PURE__ */ function() {
      return Leaf.value;
    }();
    fromFoldable3 = function(dictOrd) {
      var insert1 = insert2(dictOrd);
      return function(dictFoldable) {
        return foldl(dictFoldable)(function(m) {
          return function(v) {
            return insert1(v.value0)(v.value1)(m);
          };
        })(empty4);
      };
    };
    keys = Object.keys || toArrayWithKey(function(k) {
      return function() {
        return k;
      };
    });
    genericShowConstructor2 = /* @__PURE__ */ genericShowConstructor(genericShowArgsNoArguments);
    genericEqConstructor3 = /* @__PURE__ */ genericEqConstructor(genericEqNoArguments);
    genericEqSum3 = /* @__PURE__ */ genericEqSum(genericEqConstructor3);
    TInteger = /* @__PURE__ */ function() {
      function TInteger2() {
      }
      ;
      TInteger2.value = new TInteger2();
      return TInteger2;
    }();
    TNum = /* @__PURE__ */ function() {
      function TNum2() {
      }
      ;
      TNum2.value = new TNum2();
      return TNum2;
    }();
    TUndefined = /* @__PURE__ */ function() {
      function TUndefined2() {
      }
      ;
      TUndefined2.value = new TUndefined2();
      return TUndefined2;
    }();
    TNull = /* @__PURE__ */ function() {
      function TNull2() {
      }
      ;
      TNull2.value = new TNull2();
      return TNull2;
    }();
    TString = /* @__PURE__ */ function() {
      function TString2() {
      }
      ;
      TString2.value = new TString2();
      return TString2;
    }();
    TBoolean = /* @__PURE__ */ function() {
      function TBoolean2() {
      }
      ;
      TBoolean2.value = new TBoolean2();
      return TBoolean2;
    }();
    TProperty = /* @__PURE__ */ function() {
      function TProperty2() {
      }
      ;
      TProperty2.value = new TProperty2();
      return TProperty2;
    }();
    TArray = /* @__PURE__ */ function() {
      function TArray2() {
      }
      ;
      TArray2.value = new TArray2();
      return TArray2;
    }();
    SecurityRateLimiting = /* @__PURE__ */ function() {
      function SecurityRateLimiting2(value0) {
        this.value0 = value0;
      }
      ;
      SecurityRateLimiting2.create = function(value0) {
        return new SecurityRateLimiting2(value0);
      };
      return SecurityRateLimiting2;
    }();
    SecurityLogging = /* @__PURE__ */ function() {
      function SecurityLogging2(value0) {
        this.value0 = value0;
      }
      ;
      SecurityLogging2.create = function(value0) {
        return new SecurityLogging2(value0);
      };
      return SecurityLogging2;
    }();
    Macro = /* @__PURE__ */ function() {
      function Macro2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Macro2.create = function(value0) {
        return function(value1) {
          return new Macro2(value0, value1);
        };
      };
      return Macro2;
    }();
    LayoutItemComponent = /* @__PURE__ */ function() {
      function LayoutItemComponent2(value0) {
        this.value0 = value0;
      }
      ;
      LayoutItemComponent2.create = function(value0) {
        return new LayoutItemComponent2(value0);
      };
      return LayoutItemComponent2;
    }();
    PropertyName = /* @__PURE__ */ function() {
      function PropertyName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      PropertyName2.create = function(value0) {
        return function(value1) {
          return new PropertyName2(value0, value1);
        };
      };
      return PropertyName2;
    }();
    ImmutableItem = /* @__PURE__ */ function() {
      function ImmutableItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ImmutableItem2.create = function(value0) {
        return function(value1) {
          return new ImmutableItem2(value0, value1);
        };
      };
      return ImmutableItem2;
    }();
    IndexesItem = /* @__PURE__ */ function() {
      function IndexesItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      IndexesItem2.create = function(value0) {
        return function(value1) {
          return new IndexesItem2(value0, value1);
        };
      };
      return IndexesItem2;
    }();
    LNull = /* @__PURE__ */ function() {
      function LNull2(value0) {
        this.value0 = value0;
      }
      ;
      LNull2.create = function(value0) {
        return new LNull2(value0);
      };
      return LNull2;
    }();
    LUndefined = /* @__PURE__ */ function() {
      function LUndefined2(value0) {
        this.value0 = value0;
      }
      ;
      LUndefined2.create = function(value0) {
        return new LUndefined2(value0);
      };
      return LUndefined2;
    }();
    LInteger = /* @__PURE__ */ function() {
      function LInteger2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LInteger2.create = function(value0) {
        return function(value1) {
          return new LInteger2(value0, value1);
        };
      };
      return LInteger2;
    }();
    LNum = /* @__PURE__ */ function() {
      function LNum2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LNum2.create = function(value0) {
        return function(value1) {
          return new LNum2(value0, value1);
        };
      };
      return LNum2;
    }();
    LString = /* @__PURE__ */ function() {
      function LString2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LString2.create = function(value0) {
        return function(value1) {
          return new LString2(value0, value1);
        };
      };
      return LString2;
    }();
    LBoolean = /* @__PURE__ */ function() {
      function LBoolean2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LBoolean2.create = function(value0) {
        return function(value1) {
          return new LBoolean2(value0, value1);
        };
      };
      return LBoolean2;
    }();
    LProperty = /* @__PURE__ */ function() {
      function LProperty2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LProperty2.create = function(value0) {
        return function(value1) {
          return new LProperty2(value0, value1);
        };
      };
      return LProperty2;
    }();
    LArray = /* @__PURE__ */ function() {
      function LArray2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      LArray2.create = function(value0) {
        return function(value1) {
          return new LArray2(value0, value1);
        };
      };
      return LArray2;
    }();
    PresetItem = /* @__PURE__ */ function() {
      function PresetItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      PresetItem2.create = function(value0) {
        return function(value1) {
          return new PresetItem2(value0, value1);
        };
      };
      return PresetItem2;
    }();
    RequireItem = /* @__PURE__ */ function() {
      function RequireItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      RequireItem2.create = function(value0) {
        return function(value1) {
          return new RequireItem2(value0, value1);
        };
      };
      return RequireItem2;
    }();
    TableItem = /* @__PURE__ */ function() {
      function TableItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TableItem2.create = function(value0) {
        return function(value1) {
          return new TableItem2(value0, value1);
        };
      };
      return TableItem2;
    }();
    TableMetaItem = /* @__PURE__ */ function() {
      function TableMetaItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      TableMetaItem2.create = function(value0) {
        return function(value1) {
          return new TableMetaItem2(value0, value1);
        };
      };
      return TableMetaItem2;
    }();
    WritableItem = /* @__PURE__ */ function() {
      function WritableItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      WritableItem2.create = function(value0) {
        return function(value1) {
          return new WritableItem2(value0, value1);
        };
      };
      return WritableItem2;
    }();
    Getter = /* @__PURE__ */ function() {
      function Getter2(value0) {
        this.value0 = value0;
      }
      ;
      Getter2.create = function(value0) {
        return new Getter2(value0);
      };
      return Getter2;
    }();
    FunctionName = /* @__PURE__ */ function() {
      function FunctionName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      FunctionName2.create = function(value0) {
        return function(value1) {
          return new FunctionName2(value0, value1);
        };
      };
      return FunctionName2;
    }();
    SecurityItem = /* @__PURE__ */ function() {
      function SecurityItem2(value0) {
        this.value0 = value0;
      }
      ;
      SecurityItem2.create = function(value0) {
        return new SecurityItem2(value0);
      };
      return SecurityItem2;
    }();
    FormItem = /* @__PURE__ */ function() {
      function FormItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      FormItem2.create = function(value0) {
        return function(value1) {
          return new FormItem2(value0, value1);
        };
      };
      return FormItem2;
    }();
    FiltersPresetsItem = /* @__PURE__ */ function() {
      function FiltersPresetsItem2(value0) {
        this.value0 = value0;
      }
      ;
      FiltersPresetsItem2.create = function(value0) {
        return new FiltersPresetsItem2(value0);
      };
      return FiltersPresetsItem2;
    }();
    FilterItem = /* @__PURE__ */ function() {
      function FilterItem2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      FilterItem2.create = function(value0) {
        return function(value1) {
          return new FilterItem2(value0, value1);
        };
      };
      return FilterItem2;
    }();
    ExtendsName = /* @__PURE__ */ function() {
      function ExtendsName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ExtendsName2.create = function(value0) {
        return function(value1) {
          return new ExtendsName2(value0, value1);
        };
      };
      return ExtendsName2;
    }();
    ELiteral = /* @__PURE__ */ function() {
      function ELiteral2(value0) {
        this.value0 = value0;
      }
      ;
      ELiteral2.create = function(value0) {
        return new ELiteral2(value0);
      };
      return ELiteral2;
    }();
    ELte = /* @__PURE__ */ function() {
      function ELte2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ELte2.create = function(value0) {
        return function(value1) {
          return new ELte2(value0, value1);
        };
      };
      return ELte2;
    }();
    EGte = /* @__PURE__ */ function() {
      function EGte2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EGte2.create = function(value0) {
        return function(value1) {
          return new EGte2(value0, value1);
        };
      };
      return EGte2;
    }();
    EAnd = /* @__PURE__ */ function() {
      function EAnd2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EAnd2.create = function(value0) {
        return function(value1) {
          return new EAnd2(value0, value1);
        };
      };
      return EAnd2;
    }();
    EIn = /* @__PURE__ */ function() {
      function EIn2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EIn2.create = function(value0) {
        return function(value1) {
          return new EIn2(value0, value1);
        };
      };
      return EIn2;
    }();
    ELt = /* @__PURE__ */ function() {
      function ELt2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ELt2.create = function(value0) {
        return function(value1) {
          return new ELt2(value0, value1);
        };
      };
      return ELt2;
    }();
    EGt = /* @__PURE__ */ function() {
      function EGt2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EGt2.create = function(value0) {
        return function(value1) {
          return new EGt2(value0, value1);
        };
      };
      return EGt2;
    }();
    EEq = /* @__PURE__ */ function() {
      function EEq2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EEq2.create = function(value0) {
        return function(value1) {
          return new EEq2(value0, value1);
        };
      };
      return EEq2;
    }();
    EOr = /* @__PURE__ */ function() {
      function EOr2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      EOr2.create = function(value0) {
        return function(value1) {
          return new EOr2(value0, value1);
        };
      };
      return EOr2;
    }();
    EExists = /* @__PURE__ */ function() {
      function EExists2(value0) {
        this.value0 = value0;
      }
      ;
      EExists2.create = function(value0) {
        return new EExists2(value0);
      };
      return EExists2;
    }();
    ENot = /* @__PURE__ */ function() {
      function ENot2(value0) {
        this.value0 = value0;
      }
      ;
      ENot2.create = function(value0) {
        return new ENot2(value0);
      };
      return ENot2;
    }();
    Cond = /* @__PURE__ */ function() {
      function Cond2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Cond2.create = function(value0) {
        return function(value1) {
          return new Cond2(value0, value1);
        };
      };
      return Cond2;
    }();
    LayoutItem = /* @__PURE__ */ function() {
      function LayoutItem2(value0) {
        this.value0 = value0;
      }
      ;
      LayoutItem2.create = function(value0) {
        return new LayoutItem2(value0);
      };
      return LayoutItem2;
    }();
    Required = /* @__PURE__ */ function() {
      function Required2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Required2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Required2(value0, value1, value2);
          };
        };
      };
      return Required2;
    }();
    CollectionTimestamps = /* @__PURE__ */ function() {
      function CollectionTimestamps2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionTimestamps2.create = function(value0) {
        return new CollectionTimestamps2(value0);
      };
      return CollectionTimestamps2;
    }();
    CollectionTemporary = /* @__PURE__ */ function() {
      function CollectionTemporary2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionTemporary2.create = function(value0) {
        return new CollectionTemporary2(value0);
      };
      return CollectionTemporary2;
    }();
    CollectionSearch = /* @__PURE__ */ function() {
      function CollectionSearch2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionSearch2.create = function(value0) {
        return new CollectionSearch2(value0);
      };
      return CollectionSearch2;
    }();
    CollectionOwned = /* @__PURE__ */ function() {
      function CollectionOwned2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionOwned2.create = function(value0) {
        return new CollectionOwned2(value0);
      };
      return CollectionOwned2;
    }();
    CollectionName = /* @__PURE__ */ function() {
      function CollectionName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      CollectionName2.create = function(value0) {
        return function(value1) {
          return new CollectionName2(value0, value1);
        };
      };
      return CollectionName2;
    }();
    CollectionImmutableBool = /* @__PURE__ */ function() {
      function CollectionImmutableBool2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionImmutableBool2.create = function(value0) {
        return new CollectionImmutableBool2(value0);
      };
      return CollectionImmutableBool2;
    }();
    CollectionImmutableList = /* @__PURE__ */ function() {
      function CollectionImmutableList2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionImmutableList2.create = function(value0) {
        return new CollectionImmutableList2(value0);
      };
      return CollectionImmutableList2;
    }();
    CollectionIcon = /* @__PURE__ */ function() {
      function CollectionIcon2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionIcon2.create = function(value0) {
        return new CollectionIcon2(value0);
      };
      return CollectionIcon2;
    }();
    ALiteral = /* @__PURE__ */ function() {
      function ALiteral2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ALiteral2.create = function(value0) {
        return function(value1) {
          return new ALiteral2(value0, value1);
        };
      };
      return ALiteral2;
    }();
    AExpr = /* @__PURE__ */ function() {
      function AExpr2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AExpr2.create = function(value0) {
        return function(value1) {
          return new AExpr2(value0, value1);
        };
      };
      return AExpr2;
    }();
    AttributeName = /* @__PURE__ */ function() {
      function AttributeName2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      AttributeName2.create = function(value0) {
        return function(value1) {
          return new AttributeName2(value0, value1);
        };
      };
      return AttributeName2;
    }();
    Attribute = /* @__PURE__ */ function() {
      function Attribute2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Attribute2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Attribute2(value0, value1, value2);
          };
        };
      };
      return Attribute2;
    }();
    Property = /* @__PURE__ */ function() {
      function Property2(value0) {
        this.value0 = value0;
      }
      ;
      Property2.create = function(value0) {
        return new Property2(value0);
      };
      return Property2;
    }();
    PEnum = /* @__PURE__ */ function() {
      function PEnum2(value0) {
        this.value0 = value0;
      }
      ;
      PEnum2.create = function(value0) {
        return new PEnum2(value0);
      };
      return PEnum2;
    }();
    PNum = /* @__PURE__ */ function() {
      function PNum2(value0) {
        this.value0 = value0;
      }
      ;
      PNum2.create = function(value0) {
        return new PNum2(value0);
      };
      return PNum2;
    }();
    PString = /* @__PURE__ */ function() {
      function PString2(value0) {
        this.value0 = value0;
      }
      ;
      PString2.create = function(value0) {
        return new PString2(value0);
      };
      return PString2;
    }();
    PInteger = /* @__PURE__ */ function() {
      function PInteger2(value0) {
        this.value0 = value0;
      }
      ;
      PInteger2.create = function(value0) {
        return new PInteger2(value0);
      };
      return PInteger2;
    }();
    PBoolean = /* @__PURE__ */ function() {
      function PBoolean2(value0) {
        this.value0 = value0;
      }
      ;
      PBoolean2.create = function(value0) {
        return new PBoolean2(value0);
      };
      return PBoolean2;
    }();
    PConst = /* @__PURE__ */ function() {
      function PConst2(value0) {
        this.value0 = value0;
      }
      ;
      PConst2.create = function(value0) {
        return new PConst2(value0);
      };
      return PConst2;
    }();
    PRef = /* @__PURE__ */ function() {
      function PRef2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      PRef2.create = function(value0) {
        return function(value1) {
          return new PRef2(value0, value1);
        };
      };
      return PRef2;
    }();
    PArray = /* @__PURE__ */ function() {
      function PArray2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      PArray2.create = function(value0) {
        return function(value1) {
          return new PArray2(value0, value1);
        };
      };
      return PArray2;
    }();
    PObject = /* @__PURE__ */ function() {
      function PObject2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      PObject2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new PObject2(value0, value1, value2);
          };
        };
      };
      return PObject2;
    }();
    FunctionItem = /* @__PURE__ */ function() {
      function FunctionItem2(value0) {
        this.value0 = value0;
      }
      ;
      FunctionItem2.create = function(value0) {
        return new FunctionItem2(value0);
      };
      return FunctionItem2;
    }();
    ActionItem = /* @__PURE__ */ function() {
      function ActionItem2(value0) {
        this.value0 = value0;
      }
      ;
      ActionItem2.create = function(value0) {
        return new ActionItem2(value0);
      };
      return ActionItem2;
    }();
    TableLayoutItem = /* @__PURE__ */ function() {
      function TableLayoutItem2(value0) {
        this.value0 = value0;
      }
      ;
      TableLayoutItem2.create = function(value0) {
        return new TableLayoutItem2(value0);
      };
      return TableLayoutItem2;
    }();
    PreferredItem = /* @__PURE__ */ function() {
      function PreferredItem2(value0) {
        this.value0 = value0;
      }
      ;
      PreferredItem2.create = function(value0) {
        return new PreferredItem2(value0);
      };
      return PreferredItem2;
    }();
    Collection = /* @__PURE__ */ function() {
      function Collection2(value0) {
        this.value0 = value0;
      }
      ;
      Collection2.create = function(value0) {
        return new Collection2(value0);
      };
      return Collection2;
    }();
    Program = /* @__PURE__ */ function() {
      function Program2(value0) {
        this.value0 = value0;
      }
      ;
      Program2.create = function(value0) {
        return new Program2(value0);
      };
      return Program2;
    }();
    genericTyp = {
      to: function(x) {
        if (x instanceof Inl) {
          return TInteger.value;
        }
        ;
        if (x instanceof Inr && x.value0 instanceof Inl) {
          return TNum.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
          return TUndefined.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && x.value0.value0.value0 instanceof Inl))) {
          return TNull.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0 instanceof Inl)))) {
          return TString.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0 instanceof Inl))))) {
          return TBoolean.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
          return TProperty.value;
        }
        ;
        if (x instanceof Inr && (x.value0 instanceof Inr && (x.value0.value0 instanceof Inr && (x.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0 instanceof Inr && (x.value0.value0.value0.value0.value0 instanceof Inr && x.value0.value0.value0.value0.value0.value0 instanceof Inr)))))) {
          return TArray.value;
        }
        ;
        throw new Error("Failed pattern match at Aeria.Syntax.Tree (line 131, column 1 - line 131, column 44): " + [x.constructor.name]);
      },
      from: function(x) {
        if (x instanceof TInteger) {
          return new Inl(NoArguments.value);
        }
        ;
        if (x instanceof TNum) {
          return new Inr(new Inl(NoArguments.value));
        }
        ;
        if (x instanceof TUndefined) {
          return new Inr(new Inr(new Inl(NoArguments.value)));
        }
        ;
        if (x instanceof TNull) {
          return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
        }
        ;
        if (x instanceof TString) {
          return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
        }
        ;
        if (x instanceof TBoolean) {
          return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))));
        }
        ;
        if (x instanceof TProperty) {
          return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
        }
        ;
        if (x instanceof TArray) {
          return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value)))))));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Syntax.Tree (line 131, column 1 - line 131, column 44): " + [x.constructor.name]);
      }
    };
    showTyp = {
      show: /* @__PURE__ */ genericShow(genericTyp)(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TInteger";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TNum";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TUndefined";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TNull";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TString";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TBoolean";
        }
      }))(/* @__PURE__ */ genericShowSum(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TProperty";
        }
      }))(/* @__PURE__ */ genericShowConstructor2({
        reflectSymbol: function() {
          return "TArray";
        }
      })))))))))
    };
    eqTyp = {
      eq: /* @__PURE__ */ genericEq(genericTyp)(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(/* @__PURE__ */ genericEqSum3(genericEqConstructor3))))))))
    };
    toUnfoldable4 = /* @__PURE__ */ toUnfoldable(unfoldableArray);
    map11 = /* @__PURE__ */ map(functorList);
    all4 = /* @__PURE__ */ all(foldableList)(heytingAlgebraBoolean);
    find3 = /* @__PURE__ */ find(foldableList);
    elem3 = /* @__PURE__ */ elem2(eqString);
    union3 = /* @__PURE__ */ union(eqJsObjectProperty);
    union1 = /* @__PURE__ */ union(/* @__PURE__ */ eqArray(eqJsObjectProperty));
    map1 = /* @__PURE__ */ map(functorArray);
    Codegen = /* @__PURE__ */ function() {
      function Codegen2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      Codegen2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new Codegen2(value0, value1, value2);
          };
        };
      };
      return Codegen2;
    }();
    getPropertyName = function(v) {
      return v.value1;
    };
    getFunctionName = function(v) {
      return v.value1;
    };
    getCollectionName = function(v) {
      return ucLower(v.value1);
    };
    getAttributeName = function(v) {
      return v.value1;
    };
    collectionPropertyM = function(k) {
      return function(f) {
        return function(x) {
          if (x instanceof Just) {
            return [objectProperty2(k)(f(x.value0))];
          }
          ;
          if (x instanceof Nothing) {
            return [];
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen (line 253, column 3 - line 255, column 18): " + [x.constructor.name]);
        };
      };
    };
    collectionPropertyL = function(k) {
      return function(f) {
        return function(x) {
          if (x instanceof Nil) {
            return [];
          }
          ;
          return [objectProperty2(k)(f(x))];
        };
      };
    };
    collectionProperties = function($452) {
      return object(concat($452));
    };
    cUnaryExpr = function(oper) {
      return function(e1) {
        return object([objectProperty2("operator")(string(oper)), objectProperty2("term1")(e1)]);
      };
    };
    cTimestamps = function(v) {
      return $$boolean(v.value0);
    };
    cTemporary = function(v) {
      return object([objectProperty2("index")(string(v.value0.index.value1)), objectProperty2("expireAfterSeconds")($$int(v.value0.expireAfterSeconds))]);
    };
    cSecurity = function(secutiry) {
      var cSecurityRateLimiting = function(v) {
        return collectionProperties([collectionPropertyM("strategy")(string)(v.value0.strategy), collectionPropertyM("scale")($$int)(v.value0.scale)]);
      };
      var cSecurityLogging = function(v) {
        return collectionProperties([collectionPropertyM("strategy")(string)(v.value0.strategy)]);
      };
      var go = function(v) {
        return objectProperty2(getFunctionName(v.value0.functionName))(collectionProperties([collectionPropertyM("rateLimiting")(cSecurityRateLimiting)(v.value0.rateLimiting), collectionPropertyM("logging")(cSecurityLogging)(v.value0.logging)]));
      };
      return object(toUnfoldable4(map11(go)(secutiry)));
    };
    cPropertyName = function(name2) {
      return string(getPropertyName(name2));
    };
    cPropertyNameL = function(list) {
      return array(toUnfoldable4(map11(cPropertyName)(list)));
    };
    cSearch = function(v) {
      return collectionProperties([[objectProperty2("indexes")(cPropertyNameL(v.value0.indexes))], collectionPropertyM("placeholder")(string)(v.value0.placeholder)]);
    };
    cTable = function(table) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(table));
    };
    cTableMeta = function(tableMeta) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(tableMeta));
    };
    cWritable = function(writable) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(writable));
    };
    cPresets = function(presets) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(presets));
    };
    cOwned = function(v) {
      return $$boolean(v.value0);
    };
    cLiteral = /* @__PURE__ */ fix(lazyFn)(function(self) {
      return function(v) {
        if (v instanceof LUndefined) {
          return $$undefined;
        }
        ;
        if (v instanceof LNull) {
          return $$null3;
        }
        ;
        if (v instanceof LInteger) {
          return $$int(v.value1);
        }
        ;
        if (v instanceof LNum) {
          return $$float(v.value1);
        }
        ;
        if (v instanceof LString) {
          return string(v.value1);
        }
        ;
        if (v instanceof LBoolean) {
          return $$boolean(v.value1);
        }
        ;
        if (v instanceof LArray) {
          return array(toUnfoldable4(map11(self)(v.value1)));
        }
        ;
        if (v instanceof LProperty) {
          return cPropertyName(v.value1);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen (line 670, column 16 - line 678, column 59): " + [v.constructor.name]);
      };
    });
    cIndexes = function(indexes) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(indexes));
    };
    cImmutable = function(v) {
      if (v instanceof CollectionImmutableBool) {
        return $$boolean(v.value0);
      }
      ;
      if (v instanceof CollectionImmutableList) {
        return cPropertyNameL(map11(function(v1) {
          return v1.value1;
        })(v.value0));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen (line 272, column 1 - line 272, column 47): " + [v.constructor.name]);
    };
    cIcon = function(v) {
      return string(v.value0);
    };
    cFunctions = function(functions) {
      return object(toUnfoldable4(map11(function(v) {
        return objectProperty1(getFunctionName(v.value0.functionName));
      })(filter(function(v) {
        return !v.value0.custom;
      })(functions))));
    };
    cForm = function(form) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(form));
    };
    cFiltersPresets = function(filtersPresets) {
      var go = function(v) {
        return objectProperty2(getPropertyName(v.value0.name))(collectionProperties([collectionPropertyM("name")(string)(v.value0.label), collectionPropertyM("badgeFunction")(string)(v.value0.badgeFunction), collectionPropertyM("filters")(function(v1) {
          return code(v1.value1);
        })(v.value0.filters)]));
      };
      return object(toUnfoldable4(map11(go)(filtersPresets)));
    };
    cFilters = function(filters) {
      return cPropertyNameL(map11(function(v) {
        return v.value1;
      })(filters));
    };
    cExposedFunctions = function(functions) {
      return object(toUnfoldable4(map11(function(v) {
        if (v.value0.expose instanceof Just) {
          if (v.value0.expose.value0.value2 instanceof ALiteral) {
            return objectProperty2(getFunctionName(v.value0.functionName))(cLiteral(v.value0.expose.value0.value2.value1));
          }
          ;
          return objectProperty1(getFunctionName(v.value0.functionName));
        }
        ;
        if (v.value0.expose instanceof Nothing) {
          return objectProperty1(getFunctionName(v.value0.functionName));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen (line 471, column 7 - line 476, column 69): " + [v.value0.expose.constructor.name]);
      })(functions)));
    };
    cCollectionName = function(name2) {
      return string(getCollectionName(name2));
    };
    cBinaryExpr = function(oper) {
      return function(e1) {
        return function(e2) {
          return object([objectProperty2("operator")(string(oper)), objectProperty2("term1")(e1), objectProperty2("term2")(e2)]);
        };
      };
    };
    cExpr = function(v) {
      if (v instanceof ELiteral) {
        return cLiteral(v.value0);
      }
      ;
      if (v instanceof EExists) {
        return cUnaryExpr("exists")(cExpr(v.value0));
      }
      ;
      if (v instanceof ENot) {
        return cUnaryExpr("not")(cExpr(v.value0));
      }
      ;
      if (v instanceof EOr) {
        return object([objectProperty2("or")(array([cExpr(v.value0), cExpr(v.value1)]))]);
      }
      ;
      if (v instanceof EAnd) {
        return object([objectProperty2("and")(array([cExpr(v.value0), cExpr(v.value1)]))]);
      }
      ;
      if (v instanceof EIn) {
        return cBinaryExpr("in")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      if (v instanceof ELt) {
        return cBinaryExpr("lt")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      if (v instanceof EGt) {
        return cBinaryExpr("gt")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      if (v instanceof ELte) {
        return cBinaryExpr("lte")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      if (v instanceof EGte) {
        return cBinaryExpr("gte")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      if (v instanceof EEq) {
        return cBinaryExpr("eq")(cExpr(v.value0))(cExpr(v.value1));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen (line 538, column 1 - line 538, column 27): " + [v.constructor.name]);
    };
    cLayout = function(layout) {
      var cComponent = function(v) {
        return collectionProperties([collectionPropertyM("name")(string)(v.value0.name), collectionPropertyM("props")(function(v1) {
          return code(v1.value1);
        })(v.value0.props)]);
      };
      var go = function(v) {
        return objectProperty2(getPropertyName(v.value0.name))(collectionProperties([collectionPropertyM("span")($$float)(v.value0.span_), collectionPropertyM("verticalSpacing")($$float)(v.value0.verticalSpacing), collectionPropertyM("if")(function(v1) {
          return cExpr(v1.value1);
        })(v.value0.if_), collectionPropertyM("component")(cComponent)(v.value0.component)]));
      };
      return object(toUnfoldable4(map11(go)(layout)));
    };
    cRequired = function(required) {
      var hasCondition = all4(function(v) {
        return isNothing(v.value2);
      })(required);
      var cObject = function(v) {
        if (v instanceof Nothing) {
          return $$boolean(true);
        }
        ;
        if (v instanceof Just) {
          return cExpr(v.value0.value1);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen (line 520, column 3 - line 520, column 36): " + [v.constructor.name]);
      };
      if (hasCondition) {
        return array(toUnfoldable4(map11(function(v) {
          return cPropertyName(v.value1);
        })(required)));
      }
      ;
      return object(toUnfoldable4(map11(function(v) {
        return objectProperty2(getPropertyName(v.value1))(cObject(v.value2));
      })(required)));
    };
    cCollectionProperties = function(properties) {
      return function(getters) {
        var cProperties = function(properties$prime) {
          var cType = function(type_$prime) {
            return objectProperty2("type")(string(type_$prime));
          };
          var cEnumType = function(v) {
            var cvalues = function() {
              var v1 = find3(function(v2) {
                return getAttributeName(v2.value1) === "values";
              })(v.value0.attributes);
              if (v1 instanceof Just && (v1.value0.value2 instanceof ALiteral && v1.value0.value2.value1 instanceof LArray)) {
                return toUnfoldable4(map11(cLiteral)(v1.value0.value2.value1.value1));
              }
              ;
              return [];
            }();
            return array(cvalues);
          };
          var arrayAttributes = ["default", "minItems", "maxItems", "uniqueItems"];
          var cAttributes = /* @__PURE__ */ function() {
            var go$prime = function(v) {
              var attributeName$prime = getAttributeName(v.value1);
              if (v.value2 instanceof ALiteral) {
                return objectProperty2(attributeName$prime)(cLiteral(v.value2.value1));
              }
              ;
              if (v.value2 instanceof AExpr) {
                return objectProperty2(attributeName$prime)(cExpr(v.value2.value1));
              }
              ;
              throw new Error("Failed pattern match at Aeria.Codegen (line 644, column 18 - line 646, column 79): " + [v.value2.constructor.name]);
            };
            var go$prime$prime = function(type_) {
              return function(attributes) {
                if (type_ instanceof PArray) {
                  var arrayAttribute = filter(function(v) {
                    return elem3(getAttributeName(v.value1))(arrayAttributes);
                  })(attributes);
                  return toUnfoldable4(map11(go$prime)(arrayAttribute));
                }
                ;
                return toUnfoldable4(map11(go$prime)(attributes));
              };
            };
            return go$prime$prime;
          }();
          var cPropertyType = function(v) {
            return function(type_) {
              if (type_ instanceof PNum) {
                return [cType("number")];
              }
              ;
              if (type_ instanceof PInteger) {
                return [cType("integer")];
              }
              ;
              if (type_ instanceof PString) {
                return [cType("string")];
              }
              ;
              if (type_ instanceof PBoolean) {
                return [cType("boolean")];
              }
              ;
              if (type_ instanceof PConst) {
                var $$const2 = find3(function(v1) {
                  return getAttributeName(v1.value1) === "value";
                })(v.value0.attributes);
                if ($$const2 instanceof Just && $$const2.value0.value2 instanceof ALiteral) {
                  return [objectProperty2("const")(cLiteral($$const2.value0.value2.value1))];
                }
                ;
                return [];
              }
              ;
              if (type_ instanceof PEnum) {
                return [objectProperty2("enum")(cEnumType(v))];
              }
              ;
              if (type_ instanceof PArray) {
                var arrayAttribute = filter(function(v1) {
                  return !elem3(getAttributeName(v1.value1))(arrayAttributes);
                })(v.value0.attributes);
                return [cType("array"), cArrayType(v)(type_.value1)(arrayAttribute)];
              }
              ;
              if (type_ instanceof PObject) {
                return concat([collectionPropertyL("required")(cRequired)(type_.value1), [cType("object"), objectProperty2("properties")(object(cProperties(type_.value2)))]]);
              }
              ;
              if (type_ instanceof PRef) {
                return [objectProperty2("$ref")(cCollectionName(type_.value1))];
              }
              ;
              throw new Error("Failed pattern match at Aeria.Codegen (line 596, column 11 - line 627, column 16): " + [type_.constructor.name]);
            };
          };
          var cArrayType = function(property) {
            return function(type_$prime) {
              return function(attributes) {
                return objectProperty2("items")(object(concat([cPropertyType(property)(type_$prime), cAttributes(type_$prime)(attributes)])));
              };
            };
          };
          var cProperty = function(v) {
            var props = cPropertyType(v)(v.value0.type_);
            var attributes$prime = function() {
              var attributes$prime$prime = filter(function(v1) {
                var name2 = getAttributeName(v1.value1);
                return name2 !== "values" && name2 !== "value";
              })(v.value0.attributes);
              return cAttributes(v.value0.type_)(attributes$prime$prime);
            }();
            return collectionProperties([props, attributes$prime]);
          };
          var go = function(v) {
            return objectProperty2(getPropertyName(v.value0.name))(cProperty(v));
          };
          return toUnfoldable4(map11(go)(properties$prime));
        };
        var cGetters = function(getters$prime) {
          var cGetter = function(v) {
            return object([objectProperty2("getter")(arrowFunction([identifier("doc")])(code(v.value1)))]);
          };
          var go = function(v) {
            return objectProperty2(getPropertyName(v.value0.name))(cGetter(v.value0.macro));
          };
          return toUnfoldable4(map11(go)(getters$prime));
        };
        return object(union3(cProperties(properties))(cGetters(getters)));
      };
    };
    cActions = function(actions) {
      var go = function(v) {
        return objectProperty2(getPropertyName(v.value0.actionName))(collectionProperties([collectionPropertyM("label")(string)(v.value0.label), collectionPropertyM("icon")(string)(v.value0.icon), collectionPropertyM("ask")($$boolean)(v.value0.ask), collectionPropertyM("selection")($$boolean)(v.value0.selection), collectionPropertyM("effect")(string)(v.value0.effect), collectionPropertyM("translate")($$boolean)(v.value0.translate), collectionPropertyM("fetchItem")($$boolean)(v.value0.fetchItem), collectionPropertyM("button")($$boolean)(v.value0.button), collectionPropertyM("setItem")($$boolean)(v.value0.setItem), collectionPropertyM("clearItem")($$boolean)(v.value0.clearItem), collectionPropertyM("params")(function(v1) {
          return code(v1.value1);
        })(v.value0.params), collectionPropertyM("query")(function(v1) {
          return code(v1.value1);
        })(v.value0.query), collectionPropertyL("requires")(cPropertyNameL)(map11(function(v1) {
          return v1.value1;
        })(v.value0.requires))]));
      };
      return object(toUnfoldable4(map11(go)(actions)));
    };
    cTableLayout = function(tableLayout) {
      var cButton = function(v) {
        if (v instanceof Left) {
          return $$boolean(v.value0);
        }
        ;
        if (v instanceof Right) {
          return cExpr(v.value0.value1);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen (line 442, column 5 - line 442, column 42): " + [v.constructor.name]);
      };
      var go = function(v) {
        var baseObjectProperties = [collectionPropertyM("if")(function(v1) {
          return cExpr(v1.value1);
        })(v.value0.if_), collectionPropertyM("button")(cButton)(v.value0.button)];
        var properties = collectionProperties(function() {
          var v1 = cActions(singleton5(v.value0.action));
          if (v1 instanceof JSLiteral && v1.value0 instanceof JSObject) {
            var v2 = head(v1.value0.value0);
            if (v2 instanceof Just && (v2.value0 instanceof JsObjectProperty2 && (v2.value0.value1 instanceof JSLiteral && v2.value0.value1.value0 instanceof JSObject))) {
              return union1(baseObjectProperties)([v2.value0.value1.value0.value0]);
            }
            ;
            return baseObjectProperties;
          }
          ;
          return [];
        }());
        if (v.value0.route instanceof Just) {
          return objectProperty2$prime(string(v.value0.route.value0))(properties);
        }
        ;
        if (v.value0.route instanceof Nothing) {
          return objectProperty2(getPropertyName(v.value0.actionName))(properties);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen (line 438, column 10 - line 440, column 80): " + [v.value0.route.constructor.name]);
      };
      return object(toUnfoldable4(map11(go)(tableLayout)));
    };
    cPreferred = function(preferred) {
      var go = function(v) {
        return objectProperty2(v.value0.role)(collectionProperties([collectionPropertyL("tableMeta")(cTableMeta)(v.value0.tableMeta), collectionPropertyL("form")(cForm)(v.value0.form), collectionPropertyL("table")(cTable)(v.value0.table), collectionPropertyL("layout")(cLayout)(v.value0.layout), collectionPropertyL("tableLayout")(cTableLayout)(v.value0.tableLayout), collectionPropertyL("formLayout")(cLayout)(v.value0.formLayout), collectionPropertyL("actions")(cActions)(v.value0.actions), collectionPropertyL("individualActions")(cActions)(v.value0.individualActions), collectionPropertyL("filters")(cFilters)(v.value0.filters), collectionPropertyL("filtersPresets")(cFiltersPresets)(v.value0.filtersPresets)]));
      };
      return object(toUnfoldable4(map11(go)(preferred)));
    };
    cCollection = function(v) {
      var writableDescription = collectionPropertyL("writable")(cWritable)(v.value0.writable);
      var timestampsDescription = collectionPropertyM("timestamps")(cTimestamps)(v.value0.timestamps);
      var temporaryDescription = collectionPropertyM("temporary")(cTemporary)(v.value0.temporary);
      var tableMetaDescription = collectionPropertyL("tableMeta")(cTableMeta)(v.value0.tableMeta);
      var tableLayoutDescription = collectionPropertyL("tableLayout")(cTableLayout)(v.value0.tableLayout);
      var tableDescription = collectionPropertyL("table")(cTable)(v.value0.table);
      var searchDescription = collectionPropertyM("search")(cSearch)(v.value0.search);
      var requiredDescription = collectionPropertyL("required")(cRequired)(v.value0.required);
      var presetsDescription = collectionPropertyL("presets")(cPresets)(v.value0.presets);
      var preferredDescription = collectionPropertyL("preferred")(cPreferred)(v.value0.preferred);
      var ownedDescription = collectionPropertyM("owned")(cOwned)(v.value0.owned);
      var layoutDescription = collectionPropertyL("layout")(cLayout)(v.value0.layout);
      var individualActionsDescription = collectionPropertyL("individualActions")(cActions)(v.value0.individualActions);
      var indexesDescription = collectionPropertyL("indexes")(cIndexes)(v.value0.indexes);
      var immutableDescription = collectionPropertyM("immutable")(cImmutable)(v.value0.immutable);
      var iconDescription = collectionPropertyM("icon")(cIcon)(v.value0.icon);
      var formLayoutDescription = collectionPropertyL("formLayout")(cLayout)(v.value0.formLayout);
      var formDescription = collectionPropertyL("form")(cForm)(v.value0.form);
      var filtersPresetsDescription = collectionPropertyL("filtersPresets")(cFiltersPresets)(v.value0.filtersPresets);
      var filtersDescription = collectionPropertyL("filters")(cFilters)(v.value0.filters);
      var collectionSecurity = collectionPropertyL("security")(cSecurity)(v.value0.security);
      var collectionFunctions = collectionPropertyL("functions")(cFunctions)(v.value0.functions);
      var collectionExposedFunctions = collectionPropertyL("exposedFunctions")(cExposedFunctions)(filter(function(v1) {
        return isJust(v1.value0.expose);
      })(v.value0.functions));
      var baseDescription = [objectProperty2("$id")(cCollectionName(v.value0.name)), objectProperty2("properties")(cCollectionProperties(v.value0.properties)(v.value0.getters))];
      var actionsDescription = collectionPropertyL("actions")(cActions)(v.value0.actions);
      var collectionDescription = [objectProperty2("description")(collectionProperties([baseDescription, iconDescription, ownedDescription, timestampsDescription, tableDescription, writableDescription, tableMetaDescription, requiredDescription, filtersDescription, formDescription, presetsDescription, formLayoutDescription, indexesDescription, tableLayoutDescription, preferredDescription, temporaryDescription, searchDescription, immutableDescription, individualActionsDescription, filtersPresetsDescription, actionsDescription, layoutDescription]))];
      return collectionProperties([collectionDescription, collectionFunctions, collectionExposedFunctions, collectionSecurity]);
    };
    codegen = function(v) {
      var go = function(v1) {
        var functions$prime = toUnfoldable4(map11(function(v2) {
          return getFunctionName(v2.value0.functionName);
        })(filter(function(v2) {
          return !v2.value0.custom;
        })(v1.value0.functions)));
        var jsImportsFunctions = map1(function($453) {
          return importSpecifier1(identifier($453));
        })(functions$prime);
        var tsImportsFunctions = map1(function($454) {
          return importSpecifier(identifier2($454));
        })(functions$prime);
        var collectionName$prime = getCollectionName(v1.value0.name);
        var collection$prime = cCollection(v1);
        var collectionType = codegenType(collection$prime);
        var tsFile = statements2([import_2(specifiers2(concat([[importSpecifier(identifier2("Collection")), importSpecifier(identifier2("SchemaWithId")), importSpecifier(identifier2("ExtendCollection"))], tsImportsFunctions])))(identifier2("aeria")), function() {
          if (v1["value0"]["extends"] instanceof Just) {
            return import_2(specifiers2([importSpecifier22(identifier2(ucLower(v1["value0"]["extends"].value0.value1)))(identifier2("original"))]))(identifier2(v1["value0"]["extends"].value0.value0));
          }
          ;
          if (v1["value0"]["extends"] instanceof Nothing) {
            return emptyStatement2;
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen (line 51, column 12 - line 58, column 39): " + [v1["value0"]["extends"].constructor.name]);
        }(), exportNamed2(typeAlias(identifier2(collectionName$prime + "Collection"))(function() {
          var $438 = isJust(v1["value0"]["extends"]);
          if ($438) {
            return typeReference([typeParameter(typeQuery(identifier2("original"))), typeParameter(collectionType)])(identifier2("ExtendCollection"));
          }
          ;
          return collectionType;
        }())), exportNamed2(variable2([declareKeyword, constKeyword])(identifier2(collectionName$prime))(intersectionType(typeReference([])(identifier2(collectionName$prime + "Collection")))(typeLiteral(typeLitObject([typeObjectProperty(identifier2("item"))(typeReference([typeParameter(typeReference([])(identifier2(collectionName$prime + 'Collection["description"]')))])(identifier2("SchemaWithId")))]))))), exportNamed2(typeAlias(identifier2(v1.value0.name.value1))(typeReference([typeParameter(typeQuery(identifier2(collectionName$prime + ".description")))])(identifier2("SchemaWithId")))), exportNamed2(variable2([declareKeyword, constKeyword])(identifier2("extend" + (v1.value0.name.value1 + "Collection")))(functionType([typeParameter(typeExtends(typeReference([])(identifier2("const TCollection")))(typeReference([])(identifier2("{ [P in keyof Collection]?: Partial<Collection[P]> }"))))])([parameter(identifier2("collection"))(typeReference([])(identifier2("TCollection")))])(typeReference([typeParameter(typeQuery(identifier2(collectionName$prime))), typeParameter(typeReference([])(identifier2("TCollection")))])(identifier2("ExtendCollection")))))]);
        var jsFile = statements([import_(specifiers(concat([[importSpecifier1(identifier("extendCollection")), importSpecifier1(identifier("defineCollection"))], jsImportsFunctions])))(identifier("aeria")), function() {
          if (v1["value0"]["extends"] instanceof Just) {
            return import_(specifiers([importSpecifier2(identifier(ucLower(v1["value0"]["extends"].value0.value1)))(identifier("original"))]))(identifier(v1["value0"]["extends"].value0.value0));
          }
          ;
          if (v1["value0"]["extends"] instanceof Nothing) {
            return emptyStatement;
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen (line 125, column 12 - line 132, column 39): " + [v1["value0"]["extends"].constructor.name]);
        }(), exportNamed(variable(identifier(collectionName$prime))(function() {
          var $443 = isJust(v1["value0"]["extends"]);
          if ($443) {
            return call(identifier("extendCollection"))([identifier("original"), collection$prime]);
          }
          ;
          return call(identifier("defineCollection"))([collection$prime]);
        }())), exportNamed(variable(identifier("extend" + (v1.value0.name.value1 + "Collection")))(arrowFunction([identifier("collection")])(call(identifier("extendCollection"))([identifier(collectionName$prime), identifier("collection")]))))]);
        return new Codegen(collectionName$prime, jsFile, tsFile);
      };
      return map11(go)(v.value0.collections);
    };
    show3 = /* @__PURE__ */ show(showNumber);
    show1 = /* @__PURE__ */ show(showBoolean);
    foldr2 = /* @__PURE__ */ foldr(foldableArray);
    ppTree = function(v) {
      if (v instanceof JSLiteral) {
        return ppLiteral(v.value0);
      }
      ;
      if (v instanceof JSIdentifier) {
        return v.value0;
      }
      ;
      if (v instanceof JSCallExpression) {
        return ppTree(v.value0) + ("(" + (concatWith(v.value1)(ppTree) + ")"));
      }
      ;
      if (v instanceof JSArrowFunctionExpression) {
        return "(" + (concatWith(v.value0)(ppTree) + (") => " + ppTree(v.value1)));
      }
      ;
      if (v instanceof JSCode) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 33, column 3 - line 38, column 24): " + [v.constructor.name]);
    };
    ppLiteral = function(v) {
      if (v instanceof JSString) {
        return '"' + (v.value0 + '"');
      }
      ;
      if (v instanceof JSUndefined) {
        return "undefined";
      }
      ;
      if (v instanceof JSNull) {
        return "null";
      }
      ;
      if (v instanceof JSNumber) {
        return show3(v.value0);
      }
      ;
      if (v instanceof JSBoolean) {
        return show1(v.value0);
      }
      ;
      if (v instanceof JSArray) {
        return "[" + (concatWith(v.value0)(ppTree) + "]");
      }
      ;
      if (v instanceof JSObject) {
        return "{" + (concatWith(v.value0)(function(property) {
          if (property instanceof JsObjectProperty2) {
            return ppTree(property.value0) + (": " + ppTree(property.value1));
          }
          ;
          if (property instanceof JsObjectProperty1) {
            return ppTree(property.value0);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 51, column 9 - line 53, column 44): " + [property.constructor.name]);
        }) + "}");
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 42, column 3 - line 53, column 52): " + [v.constructor.name]);
    };
    ppImportSpecifier = function(targetModule) {
      return function(v) {
        if (v.value1 instanceof Just) {
          return ppTree(v.value0) + (function() {
            if (targetModule instanceof CommonJs) {
              return " : ";
            }
            ;
            if (targetModule instanceof EsNext) {
              return " as ";
            }
            ;
            throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 62, column 8 - line 64, column 25): " + [targetModule.constructor.name]);
          }() + ppTree(v.value1.value0));
        }
        ;
        if (v.value1 instanceof Nothing) {
          return ppTree(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 60, column 3 - line 66, column 38): " + [v.value1.constructor.name]);
      };
    };
    ppSpecifiers = function(targetModule) {
      return function(v) {
        return concatWith(v.value0)(ppImportSpecifier(targetModule));
      };
    };
    ppStatement = function(targetModule) {
      return function(v) {
        if (v instanceof JSImportDeclaration) {
          if (targetModule instanceof EsNext) {
            return "import { " + (ppSpecifiers(targetModule)(v.value0) + (' } from "' + (ppTree(v.value1) + '"')));
          }
          ;
          if (targetModule instanceof CommonJs) {
            return "const {" + (ppSpecifiers(targetModule)(v.value0) + (' } = require("' + (ppTree(v.value1) + '")')));
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 18, column 7 - line 20, column 116): " + [targetModule.constructor.name]);
        }
        ;
        if (v instanceof JSVariableDeclaration) {
          if (targetModule instanceof EsNext) {
            return "const " + (ppTree(v.value0) + (" = " + ppTree(v.value1)));
          }
          ;
          if (targetModule instanceof CommonJs) {
            return ppTree(v.value0) + (" = " + ppTree(v.value1));
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 22, column 7 - line 24, column 57): " + [targetModule.constructor.name]);
        }
        ;
        if (v instanceof JSExportNamedDeclaration) {
          if (targetModule instanceof EsNext) {
            return "export " + ppStatement(targetModule)(v.value0);
          }
          ;
          if (targetModule instanceof CommonJs) {
            return "exports." + ppStatement(targetModule)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 26, column 7 - line 28, column 69): " + [targetModule.constructor.name]);
        }
        ;
        if (v instanceof JSEmptyStatement) {
          return "";
        }
        ;
        throw new Error("Failed pattern match at Aeria.Codegen.Javascript.Pretty (line 16, column 3 - line 29, column 27): " + [v.constructor.name]);
      };
    };
    ppJavascript = function(targetModule) {
      return function(v) {
        return foldr2(function(s) {
          return function(r) {
            return ppStatement(targetModule)(s) + ("\n" + r);
          };
        })("")(v.value0);
      };
    };
    show4 = /* @__PURE__ */ show(showBoolean);
    show12 = /* @__PURE__ */ show(showNumber);
    foldr3 = /* @__PURE__ */ foldr(foldableArray);
    ppStatementSyntax = function(v) {
      if (v instanceof TsDeclareKeyword) {
        return "declare";
      }
      ;
      if (v instanceof TsConstKeyword) {
        return "const";
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 28, column 3 - line 30, column 30): " + [v.constructor.name]);
    };
    ppIdentifier = function(v) {
      return v.value0;
    };
    ppImportSpecifier2 = function(v) {
      if (v.value1 instanceof Nothing) {
        return ppIdentifier(v.value0);
      }
      ;
      if (v.value1 instanceof Just) {
        return ppIdentifier(v.value0) + (" as " + ppIdentifier(v.value1.value0));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 73, column 1 - line 73, column 49): " + [v.constructor.name]);
    };
    ppSpecifiers2 = function(v) {
      return concatWith(v.value0)(ppImportSpecifier2);
    };
    ppTypeParameters = function(list) {
      if (length(list) === 0) {
        return "";
      }
      ;
      if (otherwise) {
        return "<" + (concatWith(list)(ppTypeParameter) + ">");
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 49, column 1 - line 49, column 52): " + [list.constructor.name]);
    };
    ppTypeParameter = function(v) {
      return ppType(v.value0);
    };
    ppType = function(v) {
      if (v instanceof TSTypeAny) {
        return "any";
      }
      ;
      if (v instanceof TSTypeString) {
        return "string";
      }
      ;
      if (v instanceof TSTypeLiteral) {
        return ppLiteral2(v.value0);
      }
      ;
      if (v instanceof TSTypeQuery) {
        return "typeof " + ppIdentifier(v.value0);
      }
      ;
      if (v instanceof TSIntersectionType) {
        return ppType(v.value0) + (" & " + ppType(v.value1));
      }
      ;
      if (v instanceof TSCallExpression) {
        return ppIdentifier(v.value0) + ("(" + (concatWith(v.value1)(ppType) + ")"));
      }
      ;
      if (v instanceof TSTypeReference) {
        return ppIdentifier(v.value1) + ppTypeParameters(v.value0);
      }
      ;
      if (v instanceof TSFunctionType) {
        return ppTypeParameters(v.value0) + ("(" + (concatWith(v.value1)(function(v1) {
          return ppIdentifier(v1.value0) + (": " + ppType(v1.value1));
        }) + (") => " + ppType(v.value2))));
      }
      ;
      if (v instanceof TSTypeExtends) {
        return ppType(v.value0) + (" extends " + ppType(v.value1));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 34, column 3 - line 47, column 77): " + [v.constructor.name]);
    };
    ppLiteral2 = function(v) {
      if (v instanceof TSTypeLitString) {
        return '"' + (v.value0 + '"');
      }
      ;
      if (v instanceof TSTypeLitBoolean) {
        return show4(v.value0);
      }
      ;
      if (v instanceof TSTypeLitUndefined) {
        return "undefined";
      }
      ;
      if (v instanceof TSTypeLitNull) {
        return "null";
      }
      ;
      if (v instanceof TSTypeLitNumber) {
        return show12(v.value0);
      }
      ;
      if (v instanceof TSTypeLitArray) {
        return "[" + (concatWith(v.value0)(ppType) + "]");
      }
      ;
      if (v instanceof TSTypeLitObject) {
        return "{" + (concatWith(v.value0)(function(v1) {
          return ppIdentifier(v1.value0) + (": " + ppType(v1.value1));
        }) + "}");
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 59, column 3 - line 68, column 85): " + [v.constructor.name]);
    };
    ppStatement2 = function(v) {
      if (v instanceof TSImportDeclaration) {
        return "import { " + (ppSpecifiers2(v.value0) + (' } from "' + (ppIdentifier(v.value1) + '"')));
      }
      ;
      if (v instanceof TSVariableDeclaration) {
        return foldr3(function(s) {
          return function(r) {
            return ppStatementSyntax(s) + (" " + r);
          };
        })("")(v.value0) + (ppIdentifier(v.value1) + (": " + ppType(v.value2)));
      }
      ;
      if (v instanceof TSTypeAliasDeclaration) {
        return "declare type " + (ppIdentifier(v.value0) + (" = " + ppType(v.value1)));
      }
      ;
      if (v instanceof TSExportNamedDeclaration) {
        return "export " + ppStatement2(v.value0);
      }
      ;
      if (v instanceof TSEmptyStatement) {
        return "";
      }
      ;
      throw new Error("Failed pattern match at Aeria.Codegen.Typescript.Pretty (line 17, column 3 - line 24, column 27): " + [v.constructor.name]);
    };
    ppTypescript = function(v) {
      return foldr3(function(s) {
        return function(r) {
          return ppStatement2(s) + ("\n" + r);
        };
      })("")(v.value0);
    };
    ReaderT = function(x) {
      return x;
    };
    withReaderT = function(f) {
      return function(v) {
        return function($146) {
          return v(f($146));
        };
      };
    };
    runReaderT = function(v) {
      return v;
    };
    monadTransReaderT = {
      lift: function(dictMonad) {
        return function($147) {
          return ReaderT($$const($147));
        };
      }
    };
    lift3 = /* @__PURE__ */ lift(monadTransReaderT);
    mapReaderT = function(f) {
      return function(v) {
        return function($148) {
          return f(v($148));
        };
      };
    };
    functorReaderT = function(dictFunctor) {
      return {
        map: function() {
          var $149 = map(dictFunctor);
          return function($150) {
            return mapReaderT($149($150));
          };
        }()
      };
    };
    applyReaderT = function(dictApply) {
      var apply2 = apply(dictApply);
      var functorReaderT1 = functorReaderT(dictApply.Functor0());
      return {
        apply: function(v) {
          return function(v1) {
            return function(r) {
              return apply2(v(r))(v1(r));
            };
          };
        },
        Functor0: function() {
          return functorReaderT1;
        }
      };
    };
    bindReaderT = function(dictBind) {
      var bind7 = bind(dictBind);
      var applyReaderT1 = applyReaderT(dictBind.Apply0());
      return {
        bind: function(v) {
          return function(k) {
            return function(r) {
              return bind7(v(r))(function(a) {
                var v1 = k(a);
                return v1(r);
              });
            };
          };
        },
        Apply0: function() {
          return applyReaderT1;
        }
      };
    };
    applicativeReaderT = function(dictApplicative) {
      var applyReaderT1 = applyReaderT(dictApplicative.Apply0());
      return {
        pure: function() {
          var $154 = pure(dictApplicative);
          return function($155) {
            return ReaderT($$const($154($155)));
          };
        }(),
        Apply0: function() {
          return applyReaderT1;
        }
      };
    };
    monadReaderT = function(dictMonad) {
      var applicativeReaderT1 = applicativeReaderT(dictMonad.Applicative0());
      var bindReaderT1 = bindReaderT(dictMonad.Bind1());
      return {
        Applicative0: function() {
          return applicativeReaderT1;
        },
        Bind1: function() {
          return bindReaderT1;
        }
      };
    };
    monadAskReaderT = function(dictMonad) {
      var monadReaderT1 = monadReaderT(dictMonad);
      return {
        ask: pure(dictMonad.Applicative0()),
        Monad0: function() {
          return monadReaderT1;
        }
      };
    };
    monadReaderReaderT = function(dictMonad) {
      var monadAskReaderT1 = monadAskReaderT(dictMonad);
      return {
        local: withReaderT,
        MonadAsk0: function() {
          return monadAskReaderT1;
        }
      };
    };
    monadThrowReaderT = function(dictMonadThrow) {
      var Monad0 = dictMonadThrow.Monad0();
      var monadReaderT1 = monadReaderT(Monad0);
      return {
        throwError: function() {
          var $166 = lift3(Monad0);
          var $167 = throwError(dictMonadThrow);
          return function($168) {
            return $166($167($168));
          };
        }(),
        Monad0: function() {
          return monadReaderT1;
        }
      };
    };
    notEq2 = /* @__PURE__ */ notEq(eqTyp);
    bindReaderT2 = /* @__PURE__ */ bindReaderT(/* @__PURE__ */ bindExceptT(monadIdentity));
    bind2 = /* @__PURE__ */ bind(bindReaderT2);
    monadExceptT2 = /* @__PURE__ */ monadExceptT(monadIdentity);
    ask2 = /* @__PURE__ */ ask(/* @__PURE__ */ monadAskReaderT(monadExceptT2));
    throwError2 = /* @__PURE__ */ throwError(/* @__PURE__ */ monadThrowReaderT(/* @__PURE__ */ monadThrowExceptT(monadIdentity)));
    applicativeReaderT2 = /* @__PURE__ */ applicativeReaderT(/* @__PURE__ */ applicativeExceptT(monadIdentity));
    when3 = /* @__PURE__ */ when(applicativeReaderT2);
    traverse_2 = /* @__PURE__ */ traverse_(applicativeReaderT2)(foldableList);
    lookup3 = /* @__PURE__ */ lookup(ordString);
    pure2 = /* @__PURE__ */ pure(applicativeReaderT2);
    elem4 = /* @__PURE__ */ elem2(eqString);
    find4 = /* @__PURE__ */ find(foldableList);
    discard2 = /* @__PURE__ */ discard(discardUnit);
    discard1 = /* @__PURE__ */ discard2(bindReaderT2);
    when1 = /* @__PURE__ */ when(applicativeEither);
    discard22 = /* @__PURE__ */ discard2(bindEither);
    pure1 = /* @__PURE__ */ pure(applicativeEither);
    show5 = /* @__PURE__ */ show(showTyp);
    fromFoldable4 = /* @__PURE__ */ fromFoldable3(ordString)(foldableArray);
    elem1 = /* @__PURE__ */ elem2(eqTyp);
    insert5 = /* @__PURE__ */ insert2(ordString);
    foldM3 = /* @__PURE__ */ foldM(/* @__PURE__ */ monadReaderT(monadExceptT2));
    map12 = /* @__PURE__ */ map(functorList);
    show13 = /* @__PURE__ */ show(showInt);
    local2 = /* @__PURE__ */ local(/* @__PURE__ */ monadReaderReaderT(monadExceptT2));
    CollectionContext = /* @__PURE__ */ function() {
      function CollectionContext2(value0) {
        this.value0 = value0;
      }
      ;
      CollectionContext2.create = function(value0) {
        return new CollectionContext2(value0);
      };
      return CollectionContext2;
    }();
    Context = /* @__PURE__ */ function() {
      function Context2(value0) {
        this.value0 = value0;
      }
      ;
      Context2.create = function(value0) {
        return new Context2(value0);
      };
      return Context2;
    }();
    typeOf2 = function(v) {
      if (v instanceof LInteger) {
        return TInteger.value;
      }
      ;
      if (v instanceof LNum) {
        return TNum.value;
      }
      ;
      if (v instanceof LString) {
        return TString.value;
      }
      ;
      if (v instanceof LBoolean) {
        return TBoolean.value;
      }
      ;
      if (v instanceof LArray) {
        return TArray.value;
      }
      ;
      if (v instanceof LProperty) {
        return TProperty.value;
      }
      ;
      if (v instanceof LUndefined) {
        return TUndefined.value;
      }
      ;
      if (v instanceof LNull) {
        return TNull.value;
      }
      ;
      throw new Error("Failed pattern match at Aeria.Semantic (line 560, column 1 - line 560, column 25): " + [v.constructor.name]);
    };
    typeOfArray = function(v) {
      if (v instanceof Nil) {
        return Nothing.value;
      }
      ;
      if (v instanceof Cons) {
        var go = function($copy_v1) {
          return function($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v1, v2) {
              if (v1 instanceof Nil) {
                $tco_done = true;
                return new Just(v2);
              }
              ;
              if (v1 instanceof Cons) {
                if (notEq2(typeOf2(v1.value0))(v2)) {
                  $tco_done = true;
                  return Nothing.value;
                }
                ;
                if (otherwise) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = v2;
                  return;
                }
                ;
              }
              ;
              throw new Error("Failed pattern match at Aeria.Semantic (line 555, column 3 - line 555, column 22): " + [v1.constructor.name, v2.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }
            ;
            return $tco_result;
          };
        };
        return go(v.value1)(typeOf2(v.value0));
      }
      ;
      throw new Error("Failed pattern match at Aeria.Semantic (line 551, column 1 - line 551, column 43): " + [v.constructor.name]);
    };
    makeDiagnostic = function(v) {
      return function(span3) {
        return function(semanticError) {
          return new Diagnostic({
            filepath: v.value0.filepath,
            span: span3,
            source: v.value0.source,
            info: semanticError
          });
        };
      };
    };
    throwDiagnostic = function(span3) {
      return function(semanticError) {
        return bind2(ask2)(function(context) {
          var diagnostic = makeDiagnostic(context)(span3)(semanticError);
          return throwError2(diagnostic);
        });
      };
    };
    sActions = function(v) {
      var go = function(v1) {
        return when3(isNothing(v1.value0.label))(throwDiagnostic(v1.value0.span)('"label" property in "actions" is required'));
      };
      return traverse_2(go);
    };
    sAttributes = function(v) {
      return function(fl) {
        return function(fe) {
          var go = function(v1) {
            if (v1.value2 instanceof ALiteral) {
              var v2 = lookup3(v1.value1.value1)(fl);
              if (v2 instanceof Just) {
                return v2.value0(v)(v1.value2.value1);
              }
              ;
              if (v2 instanceof Nothing) {
                return throwDiagnostic(v1.value1.value0)('Attribute "' + (v1.value1.value1 + '" does not exist.'));
              }
              ;
              throw new Error("Failed pattern match at Aeria.Semantic (line 628, column 5 - line 630, column 95): " + [v2.constructor.name]);
            }
            ;
            if (v1.value2 instanceof AExpr) {
              var v2 = lookup3(v1.value1.value1)(fe);
              if (v2 instanceof Just) {
                return v2.value0(v)(v1.value2.value1);
              }
              ;
              if (v2 instanceof Nothing) {
                return throwDiagnostic(v1.value1.value0)('Attribute "' + (v1.value1.value1 + '" does not exist.'));
              }
              ;
              throw new Error("Failed pattern match at Aeria.Semantic (line 632, column 5 - line 634, column 95): " + [v2.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 627, column 3 - line 630, column 95): " + [v1.constructor.name]);
          };
          return traverse_2(go)(v.value0.attributes);
        };
      };
    };
    sFiltersPresets = function(v) {
      var go = function(v1) {
        return when3(isNothing(v1.value0.filters))(throwDiagnostic(v1.value0.span)('"filters" property in "filtersPresets" is required'));
      };
      return traverse_2(go);
    };
    sFormLayout = function(v) {
      var go = function(v1) {
        if (v1.value0.component instanceof Nothing) {
          return pure2(unit);
        }
        ;
        if (v1.value0.component instanceof Just) {
          return when3(isNothing(v1.value0.component.value0.value0.name))(throwDiagnostic(v1.value0.component.value0.value0.span)('"name" property in "formLayout" is required'));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Semantic (line 211, column 3 - line 211, column 53): " + [v1.constructor.name]);
      };
      return traverse_2(go);
    };
    sFunctions = function(v) {
      return function(collectionFunctions) {
        return traverse_2(function(v1) {
          if (v1.value0.expose instanceof Just && (v1.value0.expose.value0.value1.value1 === "expose" && (v1.value0.expose.value0.value2 instanceof ALiteral && v1.value0.expose.value0.value2.value1 instanceof LArray))) {
            return pure2(unit);
          }
          ;
          if (v1.value0.expose instanceof Just && (v1.value0.expose.value0.value1.value1 === "expose" && (v1.value0.expose.value0.value2 instanceof ALiteral && v1.value0.expose.value0.value2.value1 instanceof LBoolean))) {
            return pure2(unit);
          }
          ;
          if (v1.value0.expose instanceof Just && (v1.value0.expose.value0.value1.value1 === "expose" && (v1.value0.expose.value0.value2 instanceof ALiteral && v1.value0.expose.value0.value2.value1 instanceof LString))) {
            return pure2(unit);
          }
          ;
          if (v1.value0.expose instanceof Just) {
            return throwDiagnostic(v1.value0.expose.value0.value0)('Attribute "' + (v1.value0.expose.value0.value1.value1 + '" is not allowed'));
          }
          ;
          if (v1.value0.expose instanceof Nothing) {
            return pure2(unit);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 353, column 5 - line 360, column 27): " + [v1.value0.expose.constructor.name]);
        })(collectionFunctions);
      };
    };
    sIndividualActions = function(v) {
      var go = function(v1) {
        return when3(isNothing(v1.value0.label))(throwDiagnostic(v1.value0.span)('"label" property in "individualActions" is required'));
      };
      return traverse_2(go);
    };
    sLayout = function(v) {
      var go = function(v1) {
        if (v1.value0.component instanceof Nothing) {
          return pure2(unit);
        }
        ;
        if (v1.value0.component instanceof Just) {
          return when3(isNothing(v1.value0.component.value0.value0.name))(throwDiagnostic(v1.value0.component.value0.value0.span)('"name" property in "layout" is required'));
        }
        ;
        throw new Error("Failed pattern match at Aeria.Semantic (line 245, column 3 - line 245, column 53): " + [v1.constructor.name]);
      };
      return traverse_2(go);
    };
    sSecurity = function(functions) {
      var sRateLimiting = function(v) {
        if (v instanceof Just && v.value0.value0.strategy instanceof Just) {
          var $262 = elem4(v.value0.value0.strategy.value0)(["tenant", "ip"]);
          if ($262) {
            return pure2(unit);
          }
          ;
          return throwDiagnostic(v.value0.value0.span)('Value "' + (v.value0.value0.strategy.value0 + '" is not assignable to strategy.'));
        }
        ;
        return pure2(unit);
      };
      var sLogging = function(v) {
        if (v instanceof Just && v.value0.value0.strategy instanceof Just) {
          var $269 = elem4(v.value0.value0.strategy.value0)(["tenant", "ip"]);
          if ($269) {
            return pure2(unit);
          }
          ;
          return throwDiagnostic(v.value0.value0.span)('Value "' + (v.value0.value0.strategy.value0 + '" is not assignable to strategy.'));
        }
        ;
        return pure2(unit);
      };
      var sFunctionName = function(span3) {
        return function(v) {
          var v1 = find4(function(v2) {
            return v2.value0.functionName.value1 === v.value1;
          })(functions);
          if (v1 instanceof Just) {
            return pure2(unit);
          }
          ;
          if (v1 instanceof Nothing) {
            return throwDiagnostic(span3)('Cannot find function "' + (v.value1 + '"'));
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 288, column 5 - line 291, column 60): " + [v1.constructor.name]);
        };
      };
      var go = function(v) {
        return discard1(sFunctionName(v.value0.span)(v.value0.functionName))(function() {
          return discard1(sRateLimiting(v.value0.rateLimiting))(function() {
            return discard1(sLogging(v.value0.logging))(function() {
              return pure2(unit);
            });
          });
        });
      };
      return traverse_2(go);
    };
    lookupProperty = function(v) {
      return function(v1) {
        return function(v2) {
          var v3 = lookup3(v1.value1)(v.value0.collections);
          if (v3 instanceof Just) {
            return lookup3(v2.value1)(v3.value0.value0.properties);
          }
          ;
          if (v3 instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 78, column 3 - line 81, column 23): " + [v3.constructor.name]);
        };
      };
    };
    sExpr = function(context) {
      return function(v) {
        return function(expr) {
          var isStrictProperty = function(v1) {
            return when1(isNothing(lookupProperty(context)(v)(v1)))(new Left('Property "' + (v1.value1 + ('" does not exist on collection "' + (v.value1 + '"')))));
          };
          var sBinaryExpr = function(lft) {
            return function(rgt) {
              var v1 = new Tuple(lft, rgt);
              if (v1.value0 instanceof ELiteral && v1.value0.value0 instanceof LProperty) {
                return discard22(isStrictProperty(v1.value0.value0.value1))(function() {
                  return sExpr(context)(v)(rgt);
                });
              }
              ;
              if (v1.value1 instanceof ELiteral && v1.value1.value0 instanceof LProperty) {
                return discard22(isStrictProperty(v1.value1.value0.value1))(function() {
                  return sExpr(context)(v)(lft);
                });
              }
              ;
              return new Left("Expected property in this expression");
            };
          };
          var sExists = function(v1) {
            if (v1 instanceof ELiteral && v1.value0 instanceof LProperty) {
              return isStrictProperty(v1.value0.value1);
            }
            ;
            return new Left("Expected property in this expression");
          };
          if (expr instanceof EIn) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EEq) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof ELt) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EGt) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof ELte) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EGte) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EOr) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EAnd) {
            return sBinaryExpr(expr.value0)(expr.value1);
          }
          ;
          if (expr instanceof EExists) {
            return sExists(expr.value0);
          }
          ;
          if (expr instanceof ENot) {
            return sExpr(context)(v)(expr.value0);
          }
          ;
          if (expr instanceof ELiteral) {
            return pure1(unit);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 119, column 3 - line 130, column 31): " + [expr.constructor.name]);
        };
      };
    };
    sTableLayout = function(collectionName) {
      var go = function(v) {
        return bind2(ask2)(function(context) {
          if (v.value0.button instanceof Just && v.value0.button.value0 instanceof Right) {
            var v1 = sExpr(context)(collectionName)(v.value0.button.value0.value0.value1);
            if (v1 instanceof Left) {
              return throwDiagnostic(v.value0.span)("Invalid condition");
            }
            ;
            if (v1 instanceof Right) {
              return pure2(unit);
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 237, column 11 - line 239, column 33): " + [v1.constructor.name]);
          }
          ;
          return pure2(unit);
        });
      };
      return traverse_2(go);
    };
    sGetters = function(collectionName) {
      return traverse_2(function(v) {
        return bind2(ask2)(function(context) {
          return when3(isJust(lookupProperty(context)(collectionName)(v.value0.name)))(throwDiagnostic(v.value0.name.value0)('Property "' + (v.value0.name.value1 + '" is already defined')));
        });
      });
    };
    sRequired = function(v) {
      var sCond = function(v1) {
        return function(v2) {
          if (v2 instanceof Just) {
            var v3 = sExpr(v1)(v)(v2.value0.value1);
            if (v3 instanceof Right) {
              return pure2(v3.value0);
            }
            ;
            if (v3 instanceof Left) {
              return throwDiagnostic(v2.value0.value0)("Invalid condition");
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 315, column 7 - line 317, column 67): " + [v3.constructor.name]);
          }
          ;
          if (v2 instanceof Nothing) {
            return pure2(unit);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 314, column 5 - line 317, column 67): " + [v1.constructor.name, v2.constructor.name]);
        };
      };
      var go = function(v1) {
        return bind2(ask2)(function(context) {
          return discard1(when3(isNothing(lookupProperty(context)(v)(v1.value1)))(throwDiagnostic(v1.value1.value0)('Property "' + (v1.value1.value1 + ('" does not exist on collection "' + (v.value1 + '"'))))))(function() {
            return sCond(context)(v1.value2);
          });
        });
      };
      return traverse_2(go);
    };
    lookupGetter = function(v) {
      return function(v1) {
        return function(v2) {
          var v3 = lookup3(v1.value1)(v.value0.collections);
          if (v3 instanceof Just) {
            return lookup3(v2.value1)(v3.value0.value0.getters);
          }
          ;
          if (v3 instanceof Nothing) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 85, column 3 - line 88, column 23): " + [v3.constructor.name]);
        };
      };
    };
    lookupCollection = function(v) {
      return function(v1) {
        return lookup3(v1.value1)(v.value0.collections);
      };
    };
    literalPos = function(v) {
      if (v instanceof LUndefined) {
        return v.value0;
      }
      ;
      if (v instanceof LNull) {
        return v.value0;
      }
      ;
      if (v instanceof LInteger) {
        return v.value0;
      }
      ;
      if (v instanceof LNum) {
        return v.value0;
      }
      ;
      if (v instanceof LString) {
        return v.value0;
      }
      ;
      if (v instanceof LBoolean) {
        return v.value0;
      }
      ;
      if (v instanceof LArray) {
        return v.value0;
      }
      ;
      if (v instanceof LProperty) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Aeria.Semantic (line 570, column 1 - line 570, column 30): " + [v.constructor.name]);
    };
    sArrayType = function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof LArray && v2.value1 instanceof Cons) {
            var v3 = typeOfArray(v2.value1);
            if (v3 instanceof Just) {
              return when3(notEq2(v3.value0)(v))(throwDiagnostic(literalPos(v2.value1.value0))("Array type mismatch, expected array of " + (show5(v) + ("but received " + show5(v3.value0)))));
            }
            ;
            if (v3 instanceof Nothing) {
              return throwDiagnostic(literalPos(v2.value1.value0))("Array type mismatch, expected array of " + (show5(v) + ("but received " + show5(typeOf2(v2.value1.value0)))));
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 520, column 3 - line 525, column 136): " + [v3.constructor.name]);
          }
          ;
          return throwDiagnostic(literalPos(v2))("Array type mismatch, expected array of " + (show5(v) + ("but received " + show5(typeOf2(v2)))));
        };
      };
    };
    sFileProperty = function(property) {
      var literalAttributes = fromFoldable4([new Tuple("accept", sArrayType(TString.value))]);
      return sAttributes(property)(literalAttributes)(empty4);
    };
    sType = function(accepts) {
      return function(v) {
        return function(literal) {
          var type$prime = typeOf2(literal);
          var span3 = literalPos(literal);
          return when3(!elem1(type$prime)(accepts))(throwDiagnostic(span3)("Type mismatch"));
        };
      };
    };
    sBooleanProperty = /* @__PURE__ */ function() {
      var literalAttributes = fromFoldable4([new Tuple("default", sType([TBoolean.value]))]);
      var sAttributes$prime = function(property$prime) {
        return sAttributes(property$prime)(literalAttributes)(empty4);
      };
      return sAttributes$prime;
    }();
    sConstProperty = /* @__PURE__ */ function() {
      var literalAttributes = fromFoldable4([new Tuple("value", sType([TBoolean.value, TNum.value, TInteger.value, TString.value, TUndefined.value, TNull.value]))]);
      var sAttributes$prime = function(property$prime) {
        return sAttributes(property$prime)(literalAttributes)(empty4);
      };
      return sAttributes$prime;
    }();
    sEnumProperty = function(property) {
      var literalAttributes = fromFoldable4([new Tuple("values", sArrayType(TString.value)), new Tuple("default", sType([TString.value]))]);
      return sAttributes(property)(literalAttributes)(empty4);
    };
    sNumberProperty = function(property) {
      var literalAttributes = fromFoldable4([new Tuple("minimum", sType([TNum.value, TInteger.value])), new Tuple("maximum", sType([TNum.value, TInteger.value])), new Tuple("exclusiveMinimum", sType([TNum.value, TInteger.value])), new Tuple("exclusiveMaximum", sType([TNum.value, TInteger.value])), new Tuple("default", sType([TInteger.value, TNum.value]))]);
      return sAttributes(property)(literalAttributes)(empty4);
    };
    sStringProperty = function(property) {
      var typeOptions = ["text", "email", "password", "search", "time", "month"];
      var formatOptions = ["date", "date-time"];
      var checkType = function(v) {
        return function(v1) {
          if (v1 instanceof LString) {
            if (elem4(v1.value1)(typeOptions)) {
              return pure2(unit);
            }
            ;
            if (otherwise) {
              return throwDiagnostic(v1.value0)('Attribute "type" must be one of: "text", "email", "password", "search", "time" or "month"');
            }
            ;
          }
          ;
          return throwDiagnostic(literalPos(v1))('Atribute "type" must be a string');
        };
      };
      var checkMask = function(v) {
        return function(v1) {
          if (v1 instanceof LArray) {
            return sArrayType(TString.value)(v)(v1);
          }
          ;
          if (v1 instanceof LString) {
            return pure2(unit);
          }
          ;
          return throwDiagnostic(literalPos(v1))('Attribute "mask" must be a string or an array of strings');
        };
      };
      var checkFormat = function(v) {
        return function(v1) {
          if (v1 instanceof LString) {
            if (elem4(v1.value1)(formatOptions)) {
              return pure2(unit);
            }
            ;
            if (otherwise) {
              return throwDiagnostic(v1.value0)('Atribute "format" must be one of: "date" or "date-time"');
            }
            ;
          }
          ;
          return throwDiagnostic(literalPos(v1))('Atribute "format" must be a string');
        };
      };
      var literalAttributes = fromFoldable4([new Tuple("minLength", sType([TInteger.value])), new Tuple("maxLength", sType([TInteger.value])), new Tuple("format", checkFormat), new Tuple("type", checkType), new Tuple("mask", checkMask), new Tuple("default", sType([TString.value]))]);
      return sAttributes(property)(literalAttributes)(empty4);
    };
    extendContext = function(v) {
      return function(properties) {
        return function(getters) {
          return function(v1) {
            var extendProperties = function(v22) {
              var go = function(pts) {
                return function(v3) {
                  return bind2(ask2)(function(context) {
                    var v4 = lookup3(v3.value0.name.value1)(pts);
                    if (v4 instanceof Nothing) {
                      return pure2(insert5(v3.value0.name.value1)(v3)(pts));
                    }
                    ;
                    if (v4 instanceof Just) {
                      var diagnostic = makeDiagnostic(context)(v3.value0.name.value0)("");
                      return throwError2(diagnostic);
                    }
                    ;
                    throw new Error("Failed pattern match at Aeria.Semantic (line 57, column 11 - line 61, column 36): " + [v4.constructor.name]);
                  });
                };
              };
              return bind2(foldM3(go)(v22.value0.properties)(properties))(function(propertiesContext$prime) {
                return pure2(new CollectionContext({
                  properties: propertiesContext$prime,
                  getters: v22.value0.getters
                }));
              });
            };
            var extendGetters = function(v22) {
              var go = function(gts) {
                return function(v3) {
                  return bind2(ask2)(function(context) {
                    var v4 = lookup3(v3.value0.name.value1)(gts);
                    if (v4 instanceof Nothing) {
                      return pure2(insert5(v3.value0.name.value1)(v3)(gts));
                    }
                    ;
                    if (v4 instanceof Just) {
                      var diagnostic = makeDiagnostic(context)(v3.value0.name.value0)("");
                      return throwError2(diagnostic);
                    }
                    ;
                    throw new Error("Failed pattern match at Aeria.Semantic (line 70, column 11 - line 74, column 36): " + [v4.constructor.name]);
                  });
                };
              };
              return bind2(foldM3(go)(v22.value0.getters)(getters))(function(gettersContext$prime) {
                return pure2(new CollectionContext({
                  properties: v22.value0.properties,
                  getters: gettersContext$prime
                }));
              });
            };
            var v2 = lookup3(v.value1)(v1.value0.collections);
            if (v2 instanceof Just) {
              return bind2(extendGetters(v2.value0))(function(collectionContext$prime) {
                return bind2(extendProperties(collectionContext$prime))(function(collectionContext$prime$prime) {
                  return pure2(new Context({
                    collections: insert5(v.value1)(collectionContext$prime$prime)(v1.value0.collections),
                    filepath: v1.value0.filepath,
                    source: v1.value0.source
                  }));
                });
              });
            }
            ;
            if (v2 instanceof Nothing) {
              return bind2(extendProperties(new CollectionContext({
                getters: empty4,
                properties: empty4
              })))(function(collectionContext$prime) {
                return bind2(extendGetters(collectionContext$prime))(function(collectionContext$prime$prime) {
                  return pure2(new Context({
                    collections: insert5(v.value1)(collectionContext$prime$prime)(v1.value0.collections),
                    filepath: v1.value0.filepath,
                    source: v1.value0.source
                  }));
                });
              });
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 40, column 3 - line 48, column 112): " + [v2.constructor.name]);
          };
        };
      };
    };
    emptyContext = function(filepath) {
      return function(source2) {
        return new Context({
          collections: empty4,
          filepath,
          source: source2
        });
      };
    };
    collectionHasProperty = function(context) {
      return function(collectionName) {
        return function(propertyName) {
          var v = lookupGetter(context)(collectionName)(propertyName);
          if (v instanceof Nothing) {
            var v1 = lookupProperty(context)(collectionName)(propertyName);
            if (v1 instanceof Nothing) {
              return Nothing.value;
            }
            ;
            if (v1 instanceof Just) {
              return new Just(unit);
            }
            ;
            throw new Error("Failed pattern match at Aeria.Semantic (line 97, column 7 - line 99, column 28): " + [v1.constructor.name]);
          }
          ;
          if (v instanceof Just) {
            return new Just(unit);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 95, column 3 - line 100, column 24): " + [v.constructor.name]);
        };
      };
    };
    sCheckIfPropertiesIsValid = function(v) {
      return traverse_2(function(v1) {
        return bind2(ask2)(function(context) {
          var v2 = collectionHasProperty(context)(v)(v1);
          if (v2 instanceof Just) {
            return pure2(unit);
          }
          ;
          if (v2 instanceof Nothing) {
            return throwDiagnostic(v1.value0)('Property "' + (v1.value1 + ('" does not exist on collection "' + (v.value1 + '"'))));
          }
          ;
          throw new Error("Failed pattern match at Aeria.Semantic (line 373, column 3 - line 375, column 127): " + [v2.constructor.name]);
        });
      });
    };
    sFilters = function(collectionName) {
      return function(collectionFilters) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionFilters);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sForm = function(collectionName) {
      return function(collectionForm) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionForm);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sImmutable = function(v) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return pure2(unit);
        }
        ;
        if (v1 instanceof Just && v1.value0 instanceof CollectionImmutableBool) {
          return pure2(unit);
        }
        ;
        if (v1 instanceof Just && v1.value0 instanceof CollectionImmutableList) {
          var properties = map12(function(v2) {
            return v2.value1;
          })(v1.value0.value0);
          return sCheckIfPropertiesIsValid(v)(properties);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Semantic (line 363, column 1 - line 363, column 76): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    sIndexes = function(collectionName) {
      return function(collectionIndexes) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionIndexes);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sSearch = function(collectionName) {
      return function(v) {
        return sCheckIfPropertiesIsValid(collectionName)(v.value0.indexes);
      };
    };
    sTable = function(collectionName) {
      return function(collectionTable) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionTable);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sTableMeta = function(collectionName) {
      return function(collectionTable) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionTable);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sPreferred = function(collectionName) {
      var go = function(v) {
        return discard1(sTableMeta(collectionName)(v.value0.tableMeta))(function() {
          return discard1(sActions(collectionName)(v.value0.actions))(function() {
            return discard1(sIndividualActions(collectionName)(v.value0.individualActions))(function() {
              return discard1(sFilters(collectionName)(v.value0.filters))(function() {
                return discard1(sFiltersPresets(collectionName)(v.value0.filtersPresets))(function() {
                  return discard1(sLayout(collectionName)(v.value0.layout))(function() {
                    return discard1(sTable(collectionName)(v.value0.table))(function() {
                      return discard1(sForm(collectionName)(v.value0.form))(function() {
                        return discard1(sTableLayout(collectionName)(v.value0.tableLayout))(function() {
                          return sFormLayout(collectionName)(v.value0.formLayout);
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      };
      return traverse_2(go);
    };
    sWritable = function(collectionName) {
      return function(collectionWritable) {
        var properties = map12(function(v) {
          return v.value1;
        })(collectionWritable);
        return sCheckIfPropertiesIsValid(collectionName)(properties);
      };
    };
    sRefProperty = function(v) {
      return function(property) {
        var sConstraints = function(_property$prime) {
          return function(expr) {
            return bind2(ask2)(function(context) {
              var v1 = sExpr(context)(v)(expr);
              if (v1 instanceof Right) {
                return pure2(v1.value0);
              }
              ;
              if (v1 instanceof Left) {
                return throwDiagnostic(v.value0)(v1.value0);
              }
              ;
              throw new Error("Failed pattern match at Aeria.Semantic (line 500, column 7 - line 502, column 57): " + [v1.constructor.name]);
            });
          };
        };
        var exprAttributes = fromFoldable4([new Tuple("constraints", sConstraints)]);
        var collectionHasProperty$prime = function(v1) {
          if (v1 instanceof LProperty) {
            return bind2(ask2)(function(context) {
              var v2 = collectionHasProperty(context)(v)(v1.value1);
              if (v2 instanceof Nothing) {
                return throwDiagnostic(v1.value0)("");
              }
              ;
              if (v2 instanceof Just) {
                return pure2(unit);
              }
              ;
              throw new Error("Failed pattern match at Aeria.Semantic (line 491, column 7 - line 494, column 28): " + [v2.constructor.name]);
            });
          }
          ;
          return throwDiagnostic(literalPos(v1))("Expected property name");
        };
        var sArrayType$prime = function(v1) {
          return function(v2) {
            if (v2 instanceof LArray) {
              return discard1(sArrayType(TProperty.value)(v1)(v2))(function() {
                return traverse_2(collectionHasProperty$prime)(v2.value1);
              });
            }
            ;
            return throwDiagnostic(literalPos(v2))('Attribute "indexes" must be an array of property names');
          };
        };
        var literalAttributes = fromFoldable4([new Tuple("indexes", sArrayType$prime), new Tuple("populate", sArrayType$prime), new Tuple("inline", sType([TBoolean.value]))]);
        var sAttributes$prime = function(property$prime) {
          return sAttributes(property$prime)(literalAttributes)(exprAttributes);
        };
        return bind2(ask2)(function(context) {
          return discard1(when3(isNothing(lookupCollection(context)(v)))(throwDiagnostic(v.value0)('Cannot find collection "' + (v.value1 + '"'))))(function() {
            return sAttributes$prime(property);
          });
        });
      };
    };
    sProperty = function(collectionName) {
      return function(v) {
        if (v.value0.type_ instanceof PBoolean) {
          return sBooleanProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PArray) {
          return sArrayProperty(collectionName)(v);
        }
        ;
        if (v.value0.type_ instanceof PObject) {
          return sObjectProperty(collectionName)(v);
        }
        ;
        if (v.value0.type_ instanceof PEnum) {
          return sEnumProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PString) {
          return sStringProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PNum) {
          return sNumberProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PConst) {
          return sConstProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PInteger) {
          return sNumberProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PRef && v.value0.type_.value1.value1 === "File") {
          return sFileProperty(v);
        }
        ;
        if (v.value0.type_ instanceof PRef) {
          return sRefProperty(v.value0.type_.value1)(v);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Semantic (line 388, column 3 - line 398, column 44): " + [v.value0.type_.constructor.name]);
      };
    };
    sObjectProperty = function(v) {
      var sAttributes$prime = function(idx) {
        return function(v1) {
          return discard1(sAttributes(v1)(empty4)(empty4))(function() {
            if (v1.value0.type_ instanceof PObject) {
              var objectName = new CollectionName(v1.value0.span, v.value1 + show13(idx));
              return bind2(bind2(ask2)(extendContext(objectName)(v1.value0.type_.value2)(Nil.value)))(function(context) {
                return local2($$const(context))(discard1(sRequired(objectName)(v1.value0.type_.value1))(function() {
                  return traverse_2(sProperty(objectName))(v1.value0.type_.value2);
                }));
              });
            }
            ;
            return throwDiagnostic(v1.value0.span)("Object type mismatch");
          });
        };
      };
      return sAttributes$prime(0);
    };
    sArrayProperty = function(collectionName) {
      var literalAttributes = fromFoldable4([new Tuple("default", sType([TArray.value])), new Tuple("minItems", sType([TInteger.value])), new Tuple("maxItems", sType([TInteger.value])), new Tuple("uniqueItems", sType([TBoolean.value]))]);
      var isArrayAttribute = function(attribute) {
        var v = lookup3(attribute)(literalAttributes);
        if (v instanceof Just) {
          return true;
        }
        ;
        if (v instanceof Nothing) {
          return false;
        }
        ;
        throw new Error("Failed pattern match at Aeria.Semantic (line 443, column 7 - line 445, column 25): " + [v.constructor.name]);
      };
      var sAttributes$prime = function(v) {
        if (v.value0.type_ instanceof PArray) {
          var arrayAttributes = filter(function(v1) {
            return isArrayAttribute(v1.value1.value1);
          })(v.value0.attributes);
          var typeAttributes = filter(function(v1) {
            return !isArrayAttribute(v1.value1.value1);
          })(v.value0.attributes);
          return discard1(sAttributes(new Property({
            span: v.value0.span,
            name: v.value0.name,
            type_: new PArray(v.value0.type_.value0, v.value0.type_.value1),
            attributes: arrayAttributes
          }))(literalAttributes)(empty4))(function() {
            if (v.value0.type_.value1 instanceof PObject) {
              return sObjectProperty(collectionName)(new Property({
                span: v.value0.span,
                type_: v.value0.type_.value1,
                attributes: typeAttributes,
                name: v.value0.name
              }));
            }
            ;
            return sProperty(collectionName)(new Property({
              span: v.value0.span,
              type_: v.value0.type_.value1,
              attributes: typeAttributes,
              name: v.value0.name
            }));
          });
        }
        ;
        return throwDiagnostic(v.value0.span)("Expected array but received another type");
      };
      return sAttributes$prime;
    };
    sProperties = function(collectionName) {
      return traverse_2(sProperty(collectionName));
    };
    sCollection = function(v) {
      return bind2(bind2(ask2)(extendContext(v.value0.name)(v.value0.properties)(v.value0.getters)))(function(context) {
        return local2($$const(context))(discard1(sProperties(v.value0.name)(v.value0.properties))(function() {
          return discard1(sRequired(v.value0.name)(v.value0.required))(function() {
            return discard1(sGetters(v.value0.name)(v.value0.getters))(function() {
              return discard1(sTable(v.value0.name)(v.value0.table))(function() {
                return discard1(sTableMeta(v.value0.name)(v.value0.tableMeta))(function() {
                  return discard1(sForm(v.value0.name)(v.value0.form))(function() {
                    return discard1(sFilters(v.value0.name)(v.value0.filters))(function() {
                      return discard1(sIndexes(v.value0.name)(v.value0.indexes))(function() {
                        return discard1(sTableLayout(v.value0.name)(v.value0.tableLayout))(function() {
                          return discard1(sLayout(v.value0.name)(v.value0.layout))(function() {
                            return discard1(sFiltersPresets(v.value0.name)(v.value0.filtersPresets))(function() {
                              return discard1(sWritable(v.value0.name)(v.value0.writable))(function() {
                                return discard1(sFunctions(v.value0.name)(v.value0.functions))(function() {
                                  return discard1(sSecurity(v.value0.functions)(v.value0.security))(function() {
                                    return discard1(sActions(v.value0.name)(v.value0.actions))(function() {
                                      return discard1(sIndividualActions(v.value0.name)(v.value0.individualActions))(function() {
                                        return discard1(sFormLayout(v.value0.name)(v.value0.formLayout))(function() {
                                          return discard1(sImmutable(v.value0.name)(v.value0.immutable))(function() {
                                            return discard1(sPreferred(v.value0.name)(v.value0.preferred))(function() {
                                              return discard1(function() {
                                                if (v.value0.search instanceof Just) {
                                                  return sSearch(v.value0.name)(v.value0.search.value0);
                                                }
                                                ;
                                                if (v.value0.search instanceof Nothing) {
                                                  return pure2(unit);
                                                }
                                                ;
                                                throw new Error("Failed pattern match at Aeria.Semantic (line 197, column 5 - line 199, column 27): " + [v.value0.search.constructor.name]);
                                              }())(function() {
                                                return ask2;
                                              });
                                            });
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        }));
      });
    };
    sProgram = function(v) {
      var go = function(context) {
        return function(collection) {
          return local2($$const(context))(sCollection(collection));
        };
      };
      return bind2(ask2)(function(context) {
        return bind2(foldM3(go)(context)(v.value0.collections))(function() {
          return pure2(unit);
        });
      });
    };
    runSemantic = function(filepath) {
      return function(source2) {
        return function(program) {
          var semantic = runReaderT(sProgram(program))(emptyContext(filepath)(source2));
          return runExcept(semantic);
        };
      };
    };
    $runtime_lazy5 = function(name2, moduleName, init3) {
      var state2 = 0;
      var val;
      return function(lineNumber) {
        if (state2 === 2) return val;
        if (state2 === 1) throw new ReferenceError(name2 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state2 = 1;
        val = init3();
        state2 = 2;
        return val;
      };
    };
    unwrap3 = /* @__PURE__ */ unwrap();
    ParseState = /* @__PURE__ */ function() {
      function ParseState2(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
      }
      ;
      ParseState2.create = function(value0) {
        return function(value1) {
          return function(value2) {
            return new ParseState2(value0, value1, value2);
          };
        };
      };
      return ParseState2;
    }();
    ParseError = /* @__PURE__ */ function() {
      function ParseError2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      ParseError2.create = function(value0) {
        return function(value1) {
          return new ParseError2(value0, value1);
        };
      };
      return ParseError2;
    }();
    More = /* @__PURE__ */ function() {
      function More2(value0) {
        this.value0 = value0;
      }
      ;
      More2.create = function(value0) {
        return new More2(value0);
      };
      return More2;
    }();
    Lift = /* @__PURE__ */ function() {
      function Lift2(value0) {
        this.value0 = value0;
      }
      ;
      Lift2.create = function(value0) {
        return new Lift2(value0);
      };
      return Lift2;
    }();
    Stop = /* @__PURE__ */ function() {
      function Stop2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Stop2.create = function(value0) {
        return function(value1) {
          return new Stop2(value0, value1);
        };
      };
      return Stop2;
    }();
    lazyParserT = {
      defer: function(f) {
        var m = defer2(f);
        return function(state1, more, lift1, $$throw, done) {
          var v = force(m);
          return v(state1, more, lift1, $$throw, done);
        };
      }
    };
    functorParserT = {
      map: function(f) {
        return function(v) {
          return function(state1, more, lift1, $$throw, done) {
            return more(function(v1) {
              return v(state1, more, lift1, $$throw, function(state2, a) {
                return more(function(v2) {
                  return done(state2, f(a));
                });
              });
            });
          };
        };
      }
    };
    applyParserT = {
      apply: function(v) {
        return function(v1) {
          return function(state1, more, lift1, $$throw, done) {
            return more(function(v2) {
              return v(state1, more, lift1, $$throw, function(state2, f) {
                return more(function(v3) {
                  return v1(state2, more, lift1, $$throw, function(state3, a) {
                    return more(function(v4) {
                      return done(state3, f(a));
                    });
                  });
                });
              });
            });
          };
        };
      },
      Functor0: function() {
        return functorParserT;
      }
    };
    bindParserT = {
      bind: function(v) {
        return function(next) {
          return function(state1, more, lift1, $$throw, done) {
            return more(function(v1) {
              return v(state1, more, lift1, $$throw, function(state2, a) {
                return more(function(v2) {
                  var v3 = next(a);
                  return v3(state2, more, lift1, $$throw, done);
                });
              });
            });
          };
        };
      },
      Apply0: function() {
        return applyParserT;
      }
    };
    bindFlipped2 = /* @__PURE__ */ bindFlipped(bindParserT);
    applicativeParserT = {
      pure: function(a) {
        return function(state1, v, v1, v2, done) {
          return done(state1, a);
        };
      },
      Apply0: function() {
        return applyParserT;
      }
    };
    monadParserT = {
      Applicative0: function() {
        return applicativeParserT;
      },
      Bind1: function() {
        return bindParserT;
      }
    };
    monadRecParserT = {
      tailRecM: function(next) {
        return function(initArg) {
          return function(state1, more, lift1, $$throw, done) {
            var $lazy_loop = $runtime_lazy5("loop", "Parsing", function() {
              return function(state2, arg, gas) {
                var v = next(arg);
                return v(state2, more, lift1, $$throw, function(state3, step2) {
                  if (step2 instanceof Loop) {
                    var $206 = gas === 0;
                    if ($206) {
                      return more(function(v1) {
                        return $lazy_loop(277)(state3, step2.value0, 30);
                      });
                    }
                    ;
                    return $lazy_loop(279)(state3, step2.value0, gas - 1 | 0);
                  }
                  ;
                  if (step2 instanceof Done) {
                    return done(state3, step2.value0);
                  }
                  ;
                  throw new Error("Failed pattern match at Parsing (line 273, column 39 - line 281, column 43): " + [step2.constructor.name]);
                });
              };
            });
            var loop = $lazy_loop(270);
            return loop(state1, initArg, 30);
          };
        };
      },
      Monad0: function() {
        return monadParserT;
      }
    };
    monadThrowParseErrorParse = {
      throwError: function(err) {
        return function(state1, v, v1, $$throw, v2) {
          return $$throw(state1, err);
        };
      },
      Monad0: function() {
        return monadParserT;
      }
    };
    throwError3 = /* @__PURE__ */ throwError(monadThrowParseErrorParse);
    altParserT = {
      alt: function(v) {
        return function(v1) {
          return function(v2, more, lift1, $$throw, done) {
            return more(function(v3) {
              return v(new ParseState(v2.value0, v2.value1, false), more, lift1, function(v4, err) {
                return more(function(v5) {
                  if (v4.value2) {
                    return $$throw(v4, err);
                  }
                  ;
                  return v1(v2, more, lift1, $$throw, done);
                });
              }, done);
            });
          };
        };
      },
      Functor0: function() {
        return functorParserT;
      }
    };
    stateParserT = function(k) {
      return function(state1, v, v1, v2, done) {
        var v3 = k(state1);
        return done(v3.value1, v3.value0);
      };
    };
    runParserT$prime = function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var map19 = map(Monad0.Bind1().Apply0().Functor0());
      var pure14 = pure(Monad0.Applicative0());
      var tailRecM4 = tailRecM(dictMonadRec);
      return function(state1) {
        return function(v) {
          var go = function($copy_step) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(step2) {
              var v1 = step2(unit);
              if (v1 instanceof More) {
                $copy_step = v1.value0;
                return;
              }
              ;
              if (v1 instanceof Lift) {
                $tco_done = true;
                return map19(Loop.create)(v1.value0);
              }
              ;
              if (v1 instanceof Stop) {
                $tco_done = true;
                return pure14(new Done(new Tuple(v1.value1, v1.value0)));
              }
              ;
              throw new Error("Failed pattern match at Parsing (line 152, column 13 - line 158, column 32): " + [v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($copy_step);
            }
            ;
            return $tco_result;
          };
          return tailRecM4(go)(function(v1) {
            return v(state1, More.create, Lift.create, function(state2, err) {
              return new Stop(state2, new Left(err));
            }, function(state2, res) {
              return new Stop(state2, new Right(res));
            });
          });
        };
      };
    };
    position = /* @__PURE__ */ stateParserT(function(v) {
      return new Tuple(v.value1, v);
    });
    initialPos = {
      index: 0,
      line: 1,
      column: 1
    };
    runParserT = function(dictMonadRec) {
      var map19 = map(dictMonadRec.Monad0().Bind1().Apply0().Functor0());
      var runParserT$prime1 = runParserT$prime(dictMonadRec);
      return function(s) {
        return function(p) {
          var initialState = new ParseState(s, initialPos, false);
          return map19(fst)(runParserT$prime1(initialState)(p));
        };
      };
    };
    runParserT1 = /* @__PURE__ */ runParserT(monadRecIdentity);
    runParser = function(s) {
      var $281 = runParserT1(s);
      return function($282) {
        return unwrap3($281($282));
      };
    };
    failWithPosition = function(message2) {
      return function(pos) {
        return throwError3(new ParseError(message2, pos));
      };
    };
    fail2 = function(message2) {
      return bindFlipped2(failWithPosition(message2))(position);
    };
    plusParserT = {
      empty: /* @__PURE__ */ fail2("No alternative"),
      Alt0: function() {
        return altParserT;
      }
    };
    alternativeParserT = {
      Applicative0: function() {
        return applicativeParserT;
      },
      Plus1: function() {
        return plusParserT;
      }
    };
    alt2 = /* @__PURE__ */ alt(altParserT);
    defer3 = /* @__PURE__ */ defer(lazyParserT);
    voidLeft2 = /* @__PURE__ */ voidLeft(functorParserT);
    pure3 = /* @__PURE__ */ pure(applicativeParserT);
    applySecond2 = /* @__PURE__ */ applySecond(applyParserT);
    tailRecM3 = /* @__PURE__ */ tailRecM(monadRecParserT);
    bind3 = /* @__PURE__ */ bind(bindParserT);
    mapFlipped2 = /* @__PURE__ */ mapFlipped(functorParserT);
    map13 = /* @__PURE__ */ map(functorParserT);
    manyRec2 = /* @__PURE__ */ manyRec(monadRecParserT)(alternativeParserT);
    applyFirst2 = /* @__PURE__ */ applyFirst(applyParserT);
    empty6 = /* @__PURE__ */ empty(plusParserT);
    withLazyErrorMessage = function(p) {
      return function(msg) {
        return alt2(p)(defer3(function(v) {
          return fail2("Expected " + msg(unit));
        }));
      };
    };
    withErrorMessage = function(p) {
      return function(msg) {
        return alt2(p)(fail2("Expected " + msg));
      };
    };
    $$try2 = function(v) {
      return function(v1, more, lift4, $$throw, done) {
        return v(v1, more, lift4, function(v2, err) {
          return $$throw(new ParseState(v2.value0, v2.value1, v1.value2), err);
        }, done);
      };
    };
    skipMany1 = function(p) {
      var go = function(v) {
        return alt2(voidLeft2(p)(new Loop(unit)))(pure3(new Done(unit)));
      };
      return applySecond2(p)(tailRecM3(go)(unit));
    };
    skipMany = function(p) {
      return alt2(skipMany1(p))(pure3(unit));
    };
    sepBy1 = function(p) {
      return function(sep2) {
        return bind3(p)(function(a) {
          return bind3(manyRec2(applySecond2(sep2)(p)))(function(as) {
            return pure3(cons$prime(a)(as));
          });
        });
      };
    };
    sepBy = function(p) {
      return function(sep2) {
        return alt2(map13(toList)(sepBy1(p)(sep2)))(pure3(Nil.value));
      };
    };
    option = function(a) {
      return function(p) {
        return alt2(p)(pure3(a));
      };
    };
    optionMaybe = function(p) {
      return option(Nothing.value)(map13(Just.create)(p));
    };
    notFollowedBy = function(p) {
      return $$try2(alt2(applySecond2($$try2(p))(fail2("Negated parser succeeded")))(pure3(unit)));
    };
    manyTill = function(p) {
      return function(end) {
        var go = function(acc) {
          return alt2(mapFlipped2(end)(function(v) {
            return new Done(reverse2(acc));
          }))(mapFlipped2(p)(function(x) {
            return new Loop(new Cons(x, acc));
          }));
        };
        return tailRecM3(go)(Nil.value);
      };
    };
    many3 = manyRec2;
    choice = function(dictFoldable) {
      var go = function(p1) {
        return function(v) {
          if (v instanceof Nothing) {
            return new Just(p1);
          }
          ;
          if (v instanceof Just) {
            return new Just(alt2(p1)(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Parsing.Combinators (line 358, column 11 - line 360, column 32): " + [v.constructor.name]);
        };
      };
      var $95 = fromMaybe(empty6);
      var $96 = foldr(dictFoldable)(go)(Nothing.value);
      return function($97) {
        return $95($96($97));
      };
    };
    between = function(open2) {
      return function(close2) {
        return function(p) {
          return applyFirst2(applySecond2(open2)(p))(close2);
        };
      };
    };
    asErrorMessage = /* @__PURE__ */ flip(withErrorMessage);
    bind4 = /* @__PURE__ */ bind(bindParserT);
    pure4 = /* @__PURE__ */ pure(applicativeParserT);
    alt3 = /* @__PURE__ */ alt(altParserT);
    foldr4 = /* @__PURE__ */ foldr(foldableArray);
    choice2 = /* @__PURE__ */ choice(foldableList);
    identity4 = /* @__PURE__ */ identity(categoryFn);
    foldl3 = /* @__PURE__ */ foldl(foldableArray);
    AssocNone = /* @__PURE__ */ function() {
      function AssocNone2() {
      }
      ;
      AssocNone2.value = new AssocNone2();
      return AssocNone2;
    }();
    AssocLeft = /* @__PURE__ */ function() {
      function AssocLeft2() {
      }
      ;
      AssocLeft2.value = new AssocLeft2();
      return AssocLeft2;
    }();
    AssocRight = /* @__PURE__ */ function() {
      function AssocRight2() {
      }
      ;
      AssocRight2.value = new AssocRight2();
      return AssocRight2;
    }();
    Infix = /* @__PURE__ */ function() {
      function Infix2(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
      }
      ;
      Infix2.create = function(value0) {
        return function(value1) {
          return new Infix2(value0, value1);
        };
      };
      return Infix2;
    }();
    Prefix = /* @__PURE__ */ function() {
      function Prefix2(value0) {
        this.value0 = value0;
      }
      ;
      Prefix2.create = function(value0) {
        return new Prefix2(value0);
      };
      return Prefix2;
    }();
    Postfix = /* @__PURE__ */ function() {
      function Postfix2(value0) {
        this.value0 = value0;
      }
      ;
      Postfix2.create = function(value0) {
        return new Postfix2(value0);
      };
      return Postfix2;
    }();
    termP = function(prefixP) {
      return function(term) {
        return function(postfixP) {
          return bind4(prefixP)(function(pre) {
            return bind4(term)(function(x) {
              return bind4(postfixP)(function(post) {
                return pure4(post(pre(x)));
              });
            });
          });
        };
      };
    };
    splitOp = function(v) {
      return function(v1) {
        if (v instanceof Infix && v.value1 instanceof AssocNone) {
          return {
            rassoc: v1.rassoc,
            lassoc: v1.lassoc,
            prefix: v1.prefix,
            postfix: v1.postfix,
            nassoc: new Cons(v.value0, v1.nassoc)
          };
        }
        ;
        if (v instanceof Infix && v.value1 instanceof AssocLeft) {
          return {
            rassoc: v1.rassoc,
            nassoc: v1.nassoc,
            prefix: v1.prefix,
            postfix: v1.postfix,
            lassoc: new Cons(v.value0, v1.lassoc)
          };
        }
        ;
        if (v instanceof Infix && v.value1 instanceof AssocRight) {
          return {
            lassoc: v1.lassoc,
            nassoc: v1.nassoc,
            prefix: v1.prefix,
            postfix: v1.postfix,
            rassoc: new Cons(v.value0, v1.rassoc)
          };
        }
        ;
        if (v instanceof Prefix) {
          return {
            rassoc: v1.rassoc,
            lassoc: v1.lassoc,
            nassoc: v1.nassoc,
            postfix: v1.postfix,
            prefix: new Cons(v.value0, v1.prefix)
          };
        }
        ;
        if (v instanceof Postfix) {
          return {
            rassoc: v1.rassoc,
            lassoc: v1.lassoc,
            nassoc: v1.nassoc,
            prefix: v1.prefix,
            postfix: new Cons(v.value0, v1.postfix)
          };
        }
        ;
        throw new Error("Failed pattern match at Parsing.Expr (line 78, column 1 - line 78, column 80): " + [v.constructor.name, v1.constructor.name]);
      };
    };
    rassocP1 = function(x) {
      return function(rassocOp) {
        return function(prefixP) {
          return function(term) {
            return function(postfixP) {
              return alt3(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(pure4(x));
            };
          };
        };
      };
    };
    rassocP = function(x) {
      return function(rassocOp) {
        return function(prefixP) {
          return function(term) {
            return function(postfixP) {
              return bind4(rassocOp)(function(f) {
                return bind4(bind4(termP(prefixP)(term)(postfixP))(function(z) {
                  return rassocP1(z)(rassocOp)(prefixP)(term)(postfixP);
                }))(function(y) {
                  return pure4(f(x)(y));
                });
              });
            };
          };
        };
      };
    };
    nassocP = function(x) {
      return function(nassocOp) {
        return function(prefixP) {
          return function(term) {
            return function(postfixP) {
              return bind4(nassocOp)(function(f) {
                return bind4(termP(prefixP)(term)(postfixP))(function(y) {
                  return pure4(f(x)(y));
                });
              });
            };
          };
        };
      };
    };
    lassocP1 = function(x) {
      return function(lassocOp) {
        return function(prefixP) {
          return function(term) {
            return function(postfixP) {
              return alt3(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(pure4(x));
            };
          };
        };
      };
    };
    lassocP = function(x) {
      return function(lassocOp) {
        return function(prefixP) {
          return function(term) {
            return function(postfixP) {
              return bind4(lassocOp)(function(f) {
                return bind4(termP(prefixP)(term)(postfixP))(function(y) {
                  return lassocP1(f(x)(y))(lassocOp)(prefixP)(term)(postfixP);
                });
              });
            };
          };
        };
      };
    };
    makeParser = function(term) {
      return function(ops) {
        var accum = foldr4(splitOp)({
          rassoc: Nil.value,
          lassoc: Nil.value,
          nassoc: Nil.value,
          prefix: Nil.value,
          postfix: Nil.value
        })(ops);
        var lassocOp = choice2(accum.lassoc);
        var nassocOp = choice2(accum.nassoc);
        var postfixOp = withErrorMessage(choice2(accum.postfix))("");
        var postfixP = alt3(postfixOp)(pure4(identity4));
        var prefixOp = withErrorMessage(choice2(accum.prefix))("");
        var prefixP = alt3(prefixOp)(pure4(identity4));
        var rassocOp = choice2(accum.rassoc);
        return bind4(termP(prefixP)(term)(postfixP))(function(x) {
          return alt3(rassocP(x)(rassocOp)(prefixP)(term)(postfixP))(alt3(lassocP(x)(lassocOp)(prefixP)(term)(postfixP))(alt3(nassocP(x)(nassocOp)(prefixP)(term)(postfixP))(withErrorMessage(pure4(x))("operator"))));
        });
      };
    };
    buildExprParser = function(operators) {
      return function(simpleExpr) {
        return foldl3(makeParser)(simpleExpr)(operators);
      };
    };
    fromEnum4 = /* @__PURE__ */ fromEnum(boundedEnumCodePoint);
    mod3 = /* @__PURE__ */ mod(euclideanRingInt);
    fromJust5 = /* @__PURE__ */ fromJust();
    toEnum2 = /* @__PURE__ */ toEnum(boundedEnumChar);
    show14 = /* @__PURE__ */ show(showString);
    show22 = /* @__PURE__ */ show(showChar);
    updatePosSingle = function(v) {
      return function(cp) {
        return function(after) {
          var v1 = fromEnum4(cp);
          if (v1 === 10) {
            return {
              index: v.index + 1 | 0,
              line: v.line + 1 | 0,
              column: 1
            };
          }
          ;
          if (v1 === 13) {
            var v2 = codePointAt(0)(after);
            if (v2 instanceof Just && fromEnum4(v2.value0) === 10) {
              return {
                index: v.index + 1 | 0,
                line: v.line,
                column: v.column
              };
            }
            ;
            return {
              index: v.index + 1 | 0,
              line: v.line + 1 | 0,
              column: 1
            };
          }
          ;
          if (v1 === 9) {
            return {
              index: v.index + 1 | 0,
              line: v.line,
              column: (v.column + 8 | 0) - mod3(v.column - 1 | 0)(8) | 0
            };
          }
          ;
          return {
            index: v.index + 1 | 0,
            line: v.line,
            column: v.column + 1 | 0
          };
        };
      };
    };
    updatePosString = function($copy_pos) {
      return function($copy_before) {
        return function($copy_after) {
          var $tco_var_pos = $copy_pos;
          var $tco_var_before = $copy_before;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(pos, before, after) {
            var v = uncons3(before);
            if (v instanceof Nothing) {
              $tco_done = true;
              return pos;
            }
            ;
            if (v instanceof Just) {
              var newPos = function() {
                if ($$null2(v.value0.tail)) {
                  return updatePosSingle(pos)(v.value0.head)(after);
                }
                ;
                if (otherwise) {
                  return updatePosSingle(pos)(v.value0.head)(v.value0.tail);
                }
                ;
                throw new Error("Failed pattern match at Parsing.String (line 165, column 7 - line 167, column 52): ");
              }();
              $tco_var_pos = newPos;
              $tco_var_before = v.value0.tail;
              $copy_after = after;
              return;
            }
            ;
            throw new Error("Failed pattern match at Parsing.String (line 161, column 36 - line 168, column 38): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_pos, $tco_var_before, $copy_after);
          }
          ;
          return $tco_result;
        };
      };
    };
    satisfyCodePoint = function(f) {
      return mkFn5(function(v) {
        return function(v1) {
          return function(v2) {
            return function($$throw) {
              return function(done) {
                var v3 = uncons3(v.value0);
                if (v3 instanceof Nothing) {
                  return $$throw(v, new ParseError("Unexpected EOF", v.value1));
                }
                ;
                if (v3 instanceof Just) {
                  var $76 = f(v3.value0.head);
                  if ($76) {
                    return done(new ParseState(v3.value0.tail, updatePosSingle(v.value1)(v3.value0.head)(v3.value0.tail), true), v3.value0.head);
                  }
                  ;
                  return $$throw(v, new ParseError("Predicate unsatisfied", v.value1));
                }
                ;
                throw new Error("Failed pattern match at Parsing.String (line 136, column 7 - line 143, column 73): " + [v3.constructor.name]);
              };
            };
          };
        };
      });
    };
    satisfy = function(f) {
      return mkFn5(function(v) {
        return function(v1) {
          return function(v2) {
            return function($$throw) {
              return function(done) {
                var v3 = uncons3(v.value0);
                if (v3 instanceof Nothing) {
                  return $$throw(v, new ParseError("Unexpected EOF", v.value1));
                }
                ;
                if (v3 instanceof Just) {
                  var cp = fromEnum4(v3.value0.head);
                  var $85 = cp < 0 || cp > 65535;
                  if ($85) {
                    return $$throw(v, new ParseError("Expected Char", v.value1));
                  }
                  ;
                  var ch = fromJust5(toEnum2(cp));
                  var $86 = f(ch);
                  if ($86) {
                    return done(new ParseState(v3.value0.tail, updatePosSingle(v.value1)(v3.value0.head)(v3.value0.tail), true), ch);
                  }
                  ;
                  return $$throw(v, new ParseError("Predicate unsatisfied", v.value1));
                }
                ;
                throw new Error("Failed pattern match at Parsing.String (line 114, column 7 - line 129, column 75): " + [v3.constructor.name]);
              };
            };
          };
        };
      });
    };
    eof = /* @__PURE__ */ mkFn5(function(v) {
      return function(v1) {
        return function(v2) {
          return function($$throw) {
            return function(done) {
              var $133 = $$null2(v.value0);
              if ($133) {
                return done(new ParseState(v.value0, v.value1, true), unit);
              }
              ;
              return $$throw(v, new ParseError("Expected EOF", v.value1));
            };
          };
        };
      };
    });
    consumeWith = function(f) {
      return mkFn5(function(v) {
        return function(v1) {
          return function(v2) {
            return function($$throw) {
              return function(done) {
                var v3 = f(v.value0);
                if (v3 instanceof Left) {
                  return $$throw(v, new ParseError(v3.value0, v.value1));
                }
                ;
                if (v3 instanceof Right) {
                  return done(new ParseState(v3.value0.remainder, updatePosString(v.value1)(v3.value0.consumed)(v3.value0.remainder), !$$null2(v3.value0.consumed)), v3.value0.value);
                }
                ;
                throw new Error("Failed pattern match at Parsing.String (line 286, column 7 - line 290, column 121): " + [v3.constructor.name]);
              };
            };
          };
        };
      });
    };
    string2 = function(str) {
      return consumeWith(function(input) {
        var v = stripPrefix(str)(input);
        if (v instanceof Just) {
          return new Right({
            value: str,
            consumed: str,
            remainder: v.value0
          });
        }
        ;
        return new Left("Expected " + show14(str));
      });
    };
    $$char = function(c) {
      return withErrorMessage(satisfy(function(v) {
        return v === c;
      }))(show22(c));
    };
    anyChar = /* @__PURE__ */ satisfy(/* @__PURE__ */ $$const(true));
    elem12 = /* @__PURE__ */ elem2(eqChar);
    show15 = /* @__PURE__ */ show(/* @__PURE__ */ showArray(showChar));
    notElem1 = /* @__PURE__ */ notElem2(eqChar);
    takeWhile4 = function(predicate) {
      return consumeWith(function(s) {
        var value = takeWhile(predicate)(s);
        return new Right({
          consumed: value,
          remainder: drop(length2(value))(s),
          value
        });
      });
    };
    whiteSpace = /* @__PURE__ */ takeWhile4(isSpace);
    skipSpaces = /* @__PURE__ */ $$void(functorParserT)(whiteSpace);
    satisfyCP = function(p) {
      return satisfy(function($32) {
        return p(codePointFromChar($32));
      });
    };
    space = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isSpace))("space");
    upper2 = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isUpper))("uppercase letter");
    oneOf2 = function(ss) {
      return withLazyErrorMessage(satisfy(flip(elem12)(ss)))(function(v) {
        return "one of " + show15(ss);
      });
    };
    octDigit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isOctDigit))("oct digit");
    noneOf = function(ss) {
      return withLazyErrorMessage(satisfy(flip(notElem1)(ss)))(function(v) {
        return "none of " + show15(ss);
      });
    };
    letter = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isAlpha))("letter");
    hexDigit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isHexDigit))("hex digit");
    digit = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isDecDigit))("digit");
    alphaNum = /* @__PURE__ */ withErrorMessage(/* @__PURE__ */ satisfyCP(isAlphaNum))("letter or digit");
    map14 = /* @__PURE__ */ map(functorArray);
    convert = function(f) {
      var $6 = map14(f);
      return function($7) {
        return fromCodePointArray($6(toCodePointArray($7)));
      };
    };
    toLowerSimple2 = /* @__PURE__ */ convert(toLowerSimple);
    toUpperSimple2 = /* @__PURE__ */ convert(toUpperSimple);
    bind5 = /* @__PURE__ */ bind(bindParserT);
    pure5 = /* @__PURE__ */ pure(applicativeParserT);
    sort2 = /* @__PURE__ */ sort(ordString);
    map15 = /* @__PURE__ */ map(functorArray);
    applySecond3 = /* @__PURE__ */ applySecond(applyParserT);
    compare4 = /* @__PURE__ */ compare(ordString);
    append4 = /* @__PURE__ */ append(semigroupArray);
    fix2 = /* @__PURE__ */ fix(lazyParserT);
    alt4 = /* @__PURE__ */ alt(altParserT);
    $$void3 = /* @__PURE__ */ $$void(functorParserT);
    voidLeft3 = /* @__PURE__ */ voidLeft(functorParserT);
    identity5 = /* @__PURE__ */ identity(categoryFn);
    many4 = /* @__PURE__ */ many(alternativeParserT)(lazyParserT);
    map16 = /* @__PURE__ */ map(functorMaybe);
    some3 = /* @__PURE__ */ some(alternativeParserT)(lazyParserT);
    foldl4 = /* @__PURE__ */ foldl(foldableArray);
    applyFirst3 = /* @__PURE__ */ applyFirst(applyParserT);
    show6 = /* @__PURE__ */ show(showString);
    bind1 = /* @__PURE__ */ bind(bindMaybe);
    pure12 = /* @__PURE__ */ pure(applicativeMaybe);
    foldr5 = /* @__PURE__ */ foldr(foldableArray);
    map23 = /* @__PURE__ */ map(functorParserT);
    choice3 = /* @__PURE__ */ choice(foldableArray);
    many1 = /* @__PURE__ */ many2(alternativeParserT)(lazyParserT);
    toUnfoldable5 = /* @__PURE__ */ toUnfoldable(unfoldableArray);
    foldr12 = /* @__PURE__ */ foldr(foldableList);
    unGenLanguageDef = function(v) {
      return v;
    };
    theReservedNames = function(v) {
      if (v.caseSensitive) {
        return sort2(v.reservedNames);
      }
      ;
      if (otherwise) {
        return sort2(map15(toLower)(v.reservedNames));
      }
      ;
      throw new Error("Failed pattern match at Parsing.Token (line 825, column 1 - line 825, column 70): " + [v.constructor.name]);
    };
    simpleSpace = /* @__PURE__ */ skipMany1(/* @__PURE__ */ satisfyCodePoint(isSpace));
    oneLineComment = function(v) {
      return applySecond3($$try2(string2(v.commentLine)))(skipMany(satisfy(function(v1) {
        return v1 !== "\n";
      })));
    };
    isReserved = function($copy_names) {
      return function($copy_name) {
        var $tco_var_names = $copy_names;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(names, name2) {
          var v = uncons(names);
          if (v instanceof Nothing) {
            $tco_done = true;
            return false;
          }
          ;
          if (v instanceof Just) {
            var v1 = compare4(v.value0.head)(name2);
            if (v1 instanceof LT) {
              $tco_var_names = v.value0.tail;
              $copy_name = name2;
              return;
            }
            ;
            if (v1 instanceof EQ) {
              $tco_done = true;
              return true;
            }
            ;
            if (v1 instanceof GT) {
              $tco_done = true;
              return false;
            }
            ;
            throw new Error("Failed pattern match at Parsing.Token (line 820, column 35 - line 823, column 18): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Parsing.Token (line 818, column 3 - line 823, column 18): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_names, $copy_name);
        }
        ;
        return $tco_result;
      };
    };
    isReservedName = function(v) {
      return function(name2) {
        var caseName = function() {
          if (v.caseSensitive) {
            return name2;
          }
          ;
          if (otherwise) {
            return toLower(name2);
          }
          ;
          throw new Error("Failed pattern match at Parsing.Token (line 812, column 3 - line 814, column 31): ");
        }();
        return isReserved(theReservedNames(v))(caseName);
      };
    };
    inCommentSingle = function(v) {
      var startEnd = append4(toCharArray(v.commentEnd))(toCharArray(v.commentStart));
      return fix2(function(p) {
        return alt4($$void3($$try2(string2(v.commentEnd))))(alt4(applySecond3(skipMany1(noneOf(startEnd)))(p))(withErrorMessage(applySecond3(oneOf2(startEnd))(p))("end of comment")));
      });
    };
    multiLineComment = function(v) {
      return applySecond3($$try2(string2(v.commentStart)))(inComment(v));
    };
    inCommentMulti = function(v) {
      var startEnd = append4(toCharArray(v.commentEnd))(toCharArray(v.commentStart));
      return fix2(function(p) {
        return alt4($$void3($$try2(string2(v.commentEnd))))(alt4(applySecond3(multiLineComment(v))(p))(alt4(applySecond3(skipMany1(noneOf(startEnd)))(p))(withErrorMessage(applySecond3(oneOf2(startEnd))(p))("end of comment"))));
      });
    };
    inComment = function(v) {
      if (v.nestedComments) {
        return inCommentMulti(v);
      }
      ;
      return inCommentSingle(v);
    };
    whiteSpace$prime = function(v) {
      if ($$null2(v.commentLine) && $$null2(v.commentStart)) {
        return skipMany(withErrorMessage(simpleSpace)(""));
      }
      ;
      if ($$null2(v.commentLine)) {
        return skipMany(alt4(simpleSpace)(withErrorMessage(multiLineComment(v))("")));
      }
      ;
      if ($$null2(v.commentStart)) {
        return skipMany(alt4(simpleSpace)(withErrorMessage(oneLineComment(v))("")));
      }
      ;
      if (otherwise) {
        return skipMany(alt4(simpleSpace)(alt4(oneLineComment(v))(withErrorMessage(multiLineComment(v))(""))));
      }
      ;
      throw new Error("Failed pattern match at Parsing.Token (line 834, column 1 - line 834, column 74): " + [v.constructor.name]);
    };
    makeTokenParser = function(v) {
      var stringLetter = satisfy(function(c) {
        return c !== '"' && (c !== "\\" && c > "");
      });
      var sign2 = function(dictRing) {
        return alt4(voidLeft3($$char("-"))(negate(dictRing)))(alt4(voidLeft3($$char("+"))(identity5))(pure5(identity5)));
      };
      var sign1 = sign2(ringInt);
      var oper = function() {
        var go = bind5(v.opStart)(function(c) {
          return bind5(many4(v.opLetter))(function(cs) {
            return pure5(singleton2(c) + fromCharArray(cs));
          });
        });
        return withErrorMessage(go)("operator");
      }();
      var number = function(base) {
        return function(baseDigit) {
          var folder = function(v1) {
            return function(v2) {
              if (v1 instanceof Nothing) {
                return Nothing.value;
              }
              ;
              if (v1 instanceof Just) {
                return map16(function(v3) {
                  return (base * v1.value0 | 0) + v3 | 0;
                })(hexDigitToInt(codePointFromChar(v2)));
              }
              ;
              throw new Error("Failed pattern match at Parsing.Token (line 704, column 5 - line 704, column 45): " + [v1.constructor.name, v2.constructor.name]);
            };
          };
          return bind5(some3(baseDigit))(function(digits) {
            return maybe(fail2("not digits"))(pure5)(foldl4(folder)(new Just(0))(digits));
          });
        };
      };
      var octal2 = applySecond3(oneOf2(["o", "O"]))(number(8)(octDigit));
      var lexeme = function(p) {
        return applyFirst3(p)(whiteSpace$prime(v));
      };
      var reservedOp = function(name2) {
        var go = bind5(string2(name2))(function() {
          return withErrorMessage(notFollowedBy(v.opLetter))("end of " + name2);
        });
        return lexeme($$try2(go));
      };
      var symbol = function(name2) {
        return voidLeft3(lexeme(string2(name2)))(name2);
      };
      var parens = function(p) {
        return between(symbol("("))(symbol(")"))(p);
      };
      var semi = symbol(";");
      var semiSep = function(p) {
        return sepBy(p)(semi);
      };
      var semiSep1 = function(p) {
        return sepBy1(p)(semi);
      };
      var isReservedOp = function(name2) {
        return isReserved(sort2(v.reservedOpNames))(name2);
      };
      var operator = function() {
        var go = bind5(oper)(function(name2) {
          var $114 = isReservedOp(name2);
          if ($114) {
            return fail2("reserved operator " + name2);
          }
          ;
          return pure5(name2);
        });
        return lexeme($$try2(go));
      }();
      var ident = function() {
        var go = bind5(v.identStart)(function(c) {
          return bind5(many4(v.identLetter))(function(cs) {
            return pure5(singleton2(c) + fromCharArray(cs));
          });
        });
        return withErrorMessage(go)("identifier");
      }();
      var identifier3 = function() {
        var go = bind5(ident)(function(name2) {
          var $115 = isReservedName(v)(name2);
          if ($115) {
            return fail2("reserved word " + show6(name2));
          }
          ;
          return pure5(name2);
        });
        return lexeme($$try2(go));
      }();
      var hexadecimal2 = applySecond3(oneOf2(["x", "X"]))(number(16)(hexDigit));
      var fraction = function() {
        var op = function(v1) {
          return function(v2) {
            if (v2 instanceof Nothing) {
              return Nothing.value;
            }
            ;
            if (v2 instanceof Just) {
              return bind1(hexDigitToInt(codePointFromChar(v1)))(function(int$prime) {
                return pure12((v2.value0 + toNumber(int$prime)) / 10);
              });
            }
            ;
            throw new Error("Failed pattern match at Parsing.Token (line 651, column 5 - line 651, column 47): " + [v1.constructor.name, v2.constructor.name]);
          };
        };
        return asErrorMessage("fraction")(bind5($$char("."))(function() {
          return bind5(withErrorMessage(some3(digit))("fraction"))(function(digits) {
            return maybe(fail2("not digit"))(pure5)(foldr5(op)(new Just(0))(digits));
          });
        }));
      }();
      var escapeGap = withErrorMessage(applySecond3(some3(space))($$char("\\")))("end of string gap");
      var escapeEmpty = $$char("&");
      var escMap = zip(["a", "b", "f", "n", "r", "t", "v", "\\", '"', "'"])(["\x07", "\b", "\f", "\n", "\r", "	", "\v", "\\", '"', "'"]);
      var dot = symbol(".");
      var decimal2 = number(10)(digit);
      var exponent$prime = function() {
        var power2 = function(e) {
          if (e < 0) {
            return 1 / power2(-e | 0);
          }
          ;
          if (otherwise) {
            return pow(10)(toNumber(e));
          }
          ;
          throw new Error("Failed pattern match at Parsing.Token (line 664, column 5 - line 664, column 27): " + [e.constructor.name]);
        };
        return asErrorMessage("exponent")(bind5(oneOf2(["e", "E"]))(function() {
          return bind5(sign1)(function(f) {
            return bind5(withErrorMessage(decimal2)("exponent"))(function(e) {
              return pure5(power2(f(e)));
            });
          });
        }));
      }();
      var fractExponent = function(n) {
        var justExponent = bind5(exponent$prime)(function(expo) {
          return pure5(toNumber(n) * expo);
        });
        var fractExponent$prime = bind5(fraction)(function(fract) {
          return bind5(option(1)(exponent$prime))(function(expo) {
            return pure5((toNumber(n) + fract) * expo);
          });
        });
        return alt4(fractExponent$prime)(justExponent);
      };
      var fractFloat = function(n) {
        return map23(Right.create)(fractExponent(n));
      };
      var decimalFloat = bind5(decimal2)(function(n) {
        return option(new Left(n))(fractFloat(n));
      });
      var zeroNumFloat = alt4(map23(Left.create)(alt4(hexadecimal2)(octal2)))(alt4(decimalFloat)(alt4(fractFloat(0))(pure5(new Left(0)))));
      var natFloat = alt4(applySecond3($$char("0"))(zeroNumFloat))(decimalFloat);
      var naturalOrFloat = withErrorMessage(lexeme(natFloat))("number");
      var floating = bind5(decimal2)(fractExponent);
      var $$float2 = withErrorMessage(lexeme(floating))("float");
      var zeroNumber = withErrorMessage(applySecond3($$char("0"))(alt4(hexadecimal2)(alt4(octal2)(alt4(decimal2)(pure5(0))))))("");
      var nat = alt4(zeroNumber)(decimal2);
      var $$int2 = bind5(lexeme(sign1))(function(f) {
        return bind5(nat)(function(n) {
          return pure5(f(n));
        });
      });
      var integer = withErrorMessage(lexeme($$int2))("integer");
      var natural = withErrorMessage(lexeme(nat))("natural");
      var comma = symbol(",");
      var commaSep = function(p) {
        return sepBy(p)(comma);
      };
      var commaSep1 = function(p) {
        return sepBy1(p)(comma);
      };
      var colon = symbol(":");
      var charNum = bind5(alt4(decimal2)(alt4(applySecond3($$char("o"))(number(8)(octDigit)))(applySecond3($$char("x"))(number(16)(hexDigit)))))(function(code2) {
        var $120 = code2 > 1114111;
        if ($120) {
          return fail2("invalid escape sequence");
        }
        ;
        var v1 = fromCharCode2(code2);
        if (v1 instanceof Just) {
          return pure5(v1.value0);
        }
        ;
        if (v1 instanceof Nothing) {
          return fail2("invalid character code (should not happen)");
        }
        ;
        throw new Error("Failed pattern match at Parsing.Token (line 498, column 10 - line 500, column 67): " + [v1.constructor.name]);
      });
      var charLetter = satisfy(function(c) {
        return c !== "'" && (c !== "\\" && c > "");
      });
      var charEsc = function() {
        var parseEsc = function(v1) {
          return voidLeft3($$char(v1.value0))(v1.value1);
        };
        return choice3(map15(parseEsc)(escMap));
      }();
      var charControl = bind5($$char("^"))(function() {
        return bind5(upper2)(function(code2) {
          var v1 = fromCharCode2((toCharCode2(code2) - toCharCode2("A") | 0) + 1 | 0);
          if (v1 instanceof Just) {
            return pure5(v1.value0);
          }
          ;
          if (v1 instanceof Nothing) {
            return fail2("invalid character code (should not happen)");
          }
          ;
          throw new Error("Failed pattern match at Parsing.Token (line 488, column 5 - line 490, column 67): " + [v1.constructor.name]);
        });
      });
      var caseString = function(name2) {
        if (v.caseSensitive) {
          return voidLeft3(string2(name2))(name2);
        }
        ;
        if (otherwise) {
          var msg = show6(name2);
          var caseChar = function(c) {
            var v1 = function(v2) {
              if (otherwise) {
                return $$char(c);
              }
              ;
              throw new Error("Failed pattern match at Parsing.Token (line 355, column 1 - line 355, column 80): " + [c.constructor.name]);
            };
            var $131 = isAlpha(codePointFromChar(c));
            if ($131) {
              var $132 = toChar(toLowerSimple2(singleton2(c)));
              if ($132 instanceof Just) {
                var $133 = toChar(toUpperSimple2(singleton2(c)));
                if ($133 instanceof Just) {
                  return alt4($$char($132.value0))($$char($133.value0));
                }
                ;
                return v1(true);
              }
              ;
              return v1(true);
            }
            ;
            return v1(true);
          };
          var walk = function(name$prime) {
            var v1 = uncons2(name$prime);
            if (v1 instanceof Nothing) {
              return pure5(unit);
            }
            ;
            if (v1 instanceof Just) {
              return applySecond3(withErrorMessage(caseChar(v1.value0.head))(msg))(walk(v1.value0.tail));
            }
            ;
            throw new Error("Failed pattern match at Parsing.Token (line 757, column 22 - line 759, column 72): " + [v1.constructor.name]);
          };
          return voidLeft3(walk(name2))(name2);
        }
        ;
        throw new Error("Failed pattern match at Parsing.Token (line 751, column 3 - line 751, column 50): " + [name2.constructor.name]);
      };
      var reserved = function(name2) {
        var go = applySecond3(caseString(name2))(withErrorMessage(notFollowedBy(v.identLetter))("end of " + name2));
        return lexeme($$try2(go));
      };
      var brackets = function(p) {
        return between(symbol("["))(symbol("]"))(p);
      };
      var braces = function(p) {
        return between(symbol("{"))(symbol("}"))(p);
      };
      var ascii3codes = ["NUL", "SOH", "STX", "ETX", "EOT", "ENQ", "ACK", "BEL", "DLE", "DC1", "DC2", "DC3", "DC4", "NAK", "SYN", "ETB", "CAN", "SUB", "ESC", "DEL"];
      var ascii3 = ["\0", "", "", "", "", "", "", "\x07", "", "", "", "", "", "", "", "", "", "", "\x1B", "\x7F"];
      var ascii2codes = ["BS", "HT", "LF", "VT", "FF", "CR", "SO", "SI", "EM", "FS", "GS", "RS", "US", "SP"];
      var ascii2 = ["\b", "	", "\n", "\v", "\f", "\r", "", "", "", "", "", "", "", " "];
      var asciiMap = zip(append4(ascii3codes)(ascii2codes))(append4(ascii3)(ascii2));
      var charAscii = function() {
        var parseAscii = function(v1) {
          return $$try2(voidLeft3(string2(v1.value0))(v1.value1));
        };
        return choice3(map15(parseAscii)(asciiMap));
      }();
      var escapeCode = alt4(charEsc)(alt4(charNum)(alt4(charAscii)(withErrorMessage(charControl)("escape code"))));
      var charEscape = applySecond3($$char("\\"))(escapeCode);
      var characterChar = alt4(charLetter)(withErrorMessage(charEscape)("literal character"));
      var charLiteral = function() {
        var go = between($$char("'"))(withErrorMessage($$char("'"))("end of character"))(characterChar);
        return withErrorMessage(lexeme(go))("character");
      }();
      var stringEscape = bind5($$char("\\"))(function() {
        return alt4(voidLeft3(escapeGap)(Nothing.value))(alt4(voidLeft3(escapeEmpty)(Nothing.value))(map23(Just.create)(escapeCode)));
      });
      var stringChar = alt4(map23(Just.create)(stringLetter))(withErrorMessage(stringEscape)("string character"));
      var stringLiteral = function() {
        var folder = function(v1) {
          return function(v2) {
            if (v1 instanceof Nothing) {
              return v2;
            }
            ;
            if (v1 instanceof Just) {
              return new Cons(v1.value0, v2);
            }
            ;
            throw new Error("Failed pattern match at Parsing.Token (line 455, column 5 - line 455, column 51): " + [v1.constructor.name, v2.constructor.name]);
          };
        };
        var go = bind5(between($$char('"'))(withErrorMessage($$char('"'))("end of string"))(many1(stringChar)))(function(maybeChars) {
          return pure5(fromCharArray(toUnfoldable5(foldr12(folder)(Nil.value)(maybeChars))));
        });
        return lexeme(withErrorMessage(go)("literal string"));
      }();
      var angles = function(p) {
        return between(symbol("<"))(symbol(">"))(p);
      };
      return {
        identifier: identifier3,
        reserved,
        operator,
        reservedOp,
        charLiteral,
        stringLiteral,
        natural,
        integer,
        "float": $$float2,
        naturalOrFloat,
        decimal: decimal2,
        hexadecimal: hexadecimal2,
        octal: octal2,
        symbol,
        lexeme,
        whiteSpace: whiteSpace$prime(v),
        parens,
        braces,
        angles,
        brackets,
        semi,
        comma,
        colon,
        dot,
        semiSep,
        semiSep1,
        commaSep,
        commaSep1
      };
    };
    alt5 = /* @__PURE__ */ alt(altParserT);
    emptyDef = /* @__PURE__ */ function() {
      var op$prime = oneOf2([":", "!", "#", "$", "%", "&", "*", "+", ".", "/", "<", "=", ">", "?", "@", "\\", "^", "|", "-", "~"]);
      return {
        commentStart: "",
        commentEnd: "",
        commentLine: "",
        nestedComments: true,
        identStart: alt5(letter)($$char("_")),
        identLetter: alt5(alphaNum)(oneOf2(["_", "'"])),
        opStart: op$prime,
        opLetter: op$prime,
        reservedOpNames: [],
        reservedNames: [],
        caseSensitive: true
      };
    }();
    bind6 = /* @__PURE__ */ bind(bindParserT);
    pure6 = /* @__PURE__ */ pure(applicativeParserT);
    alt6 = /* @__PURE__ */ alt(altParserT);
    voidLeft4 = /* @__PURE__ */ voidLeft(functorParserT);
    map17 = /* @__PURE__ */ map(functorParserT);
    discard3 = /* @__PURE__ */ discard(discardUnit)(bindParserT);
    toUnfoldable6 = /* @__PURE__ */ toUnfoldable(unfoldableArray);
    applyFirst4 = /* @__PURE__ */ applyFirst(applyParserT);
    applySecond4 = /* @__PURE__ */ applySecond(applyParserT);
    fix3 = /* @__PURE__ */ fix(lazyParserT);
    choice4 = /* @__PURE__ */ choice(foldableArray);
    sourcePos = /* @__PURE__ */ bind6(position)(function(v) {
      return pure6(new SourcePos(v.index, v.line, v.column));
    });
    runParsers = function(ps) {
      var choice$prime = function(v) {
        if (v.length === 0) {
          return pure6(Nothing.value);
        }
        ;
        var v1 = uncons(v);
        if (v1 instanceof Just) {
          return bind6(optionMaybe(v1.value0.head.value1))(function(x) {
            if (x instanceof Just) {
              return pure6(new Just(new Tuple(v1.value0.head.value0, x.value0)));
            }
            ;
            if (x instanceof Nothing) {
              return choice$prime(v1.value0.tail);
            }
            ;
            throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 902, column 9 - line 904, column 34): " + [x.constructor.name]);
          });
        }
        ;
        if (v1 instanceof Nothing) {
          return pure6(Nothing.value);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 899, column 5 - line 905, column 30): " + [v1.constructor.name]);
      };
      var go$prime = function(v) {
        return function(v1) {
          return function(v2) {
            if (v2 === 0) {
              return pure6(v);
            }
            ;
            return bind6(choice$prime(v1))(function(maybeResult) {
              if (maybeResult instanceof Just) {
                return go$prime(snoc(v)(maybeResult.value0))(v1)(v2 - 1 | 0);
              }
              ;
              if (maybeResult instanceof Nothing) {
                return go$prime(v)(v1)(v2 - 1 | 0);
              }
              ;
              throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 891, column 5 - line 895, column 36): " + [maybeResult.constructor.name]);
            });
          };
        };
      };
      return go$prime([])(ps)(length(ps));
    };
    lang = /* @__PURE__ */ function() {
      var aeria = function() {
        var v = unGenLanguageDef(emptyDef);
        return {
          opStart: v.opStart,
          opLetter: v.opLetter,
          reservedNames: v.reservedNames,
          reservedOpNames: v.reservedOpNames,
          commentStart: "/*",
          commentEnd: "*/",
          commentLine: "//",
          nestedComments: true,
          identStart: letter,
          identLetter: alt6(alphaNum)(oneOf2(["_", "'"])),
          caseSensitive: true
        };
      }();
      return makeTokenParser(aeria);
    }();
    pBoolean = /* @__PURE__ */ function() {
      var pTrue = voidLeft4(lang.reserved("true"))(true);
      var pFalse = voidLeft4(lang.reserved("false"))(false);
      return alt6(pTrue)(withErrorMessage(pFalse)("Expected a boolean ('true' or 'false')"));
    }();
    pCollectionOwned = /* @__PURE__ */ function() {
      return map17(CollectionOwned.create)(pBoolean);
    }();
    pCollectionTimestamps = /* @__PURE__ */ function() {
      return map17(CollectionTimestamps.create)(pBoolean);
    }();
    pCollectionIcon = /* @__PURE__ */ function() {
      return map17(CollectionIcon.create)(lang.stringLiteral);
    }();
    pExtendsName = /* @__PURE__ */ function() {
      return bind6(lang.identifier)(function($$package) {
        return bind6($$char("."))(function() {
          return bind6(lang.identifier)(function(collection) {
            return pure6(new ExtendsName($$package, collection));
          });
        });
      });
    }();
    pMacro = function(prefix) {
      return bind6(sourcePos)(function(begin) {
        return discard3(lang.reserved(prefix))(function() {
          return bind6(manyTill(anyChar)(lang.reserved("@end")))(function(code2) {
            return bind6(sourcePos)(function(end) {
              return pure6(new Macro(new Span(begin, end), fromCharArray(toUnfoldable6(code2))));
            });
          });
        });
      });
    };
    pName = function(constructor) {
      return bind6(sourcePos)(function(begin) {
        return bind6(withErrorMessage(lang.identifier)("Expected an identifier"))(function(ident) {
          return bind6(sourcePos)(function(end) {
            return pure6(constructor(new Span(begin, end))(ident));
          });
        });
      });
    };
    pAttributeName = /* @__PURE__ */ function() {
      return pName(AttributeName.create);
    }();
    pCollectionName = /* @__PURE__ */ function() {
      return pName(CollectionName.create);
    }();
    pFunctionName = /* @__PURE__ */ function() {
      return pName(FunctionName.create);
    }();
    pPropertyName = /* @__PURE__ */ function() {
      return pName(PropertyName.create);
    }();
    pGetter = /* @__PURE__ */ bind6(sourcePos)(function(begin) {
      return bind6(pPropertyName)(function(name2) {
        return bind6(pMacro("@js (doc) =>"))(function(macro) {
          return bind6(sourcePos)(function(end) {
            return pure6(new Getter({
              span: new Span(begin, end),
              name: name2,
              macro
            }));
          });
        });
      });
    });
    pCollectionGetters = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pGetter)));
    }();
    pListProperty = function(f) {
      var item = bind6(sourcePos)(function(begin) {
        return bind6(pPropertyName)(function(propertyName) {
          return bind6(sourcePos)(function(end) {
            return pure6(f(new Span(begin, end))(propertyName));
          });
        });
      });
      return lang.braces(many3($$try2(item)));
    };
    pCollectionFilters = /* @__PURE__ */ function() {
      return pListProperty(FilterItem.create);
    }();
    pCollectionForm = /* @__PURE__ */ function() {
      return pListProperty(FormItem.create);
    }();
    pCollectionImmutable = /* @__PURE__ */ function() {
      return alt6($$try2(map17(CollectionImmutableBool.create)(pBoolean)))($$try2(map17(CollectionImmutableList.create)(pListProperty(ImmutableItem.create))));
    }();
    pCollectionIndexes = /* @__PURE__ */ function() {
      return pListProperty(IndexesItem.create);
    }();
    pCollectionPresets = /* @__PURE__ */ function() {
      return pListProperty(PresetItem.create);
    }();
    pCollectionTable = /* @__PURE__ */ function() {
      return pListProperty(TableItem.create);
    }();
    pCollectionTableMeta = /* @__PURE__ */ function() {
      return pListProperty(TableMetaItem.create);
    }();
    pCollectionWritable = /* @__PURE__ */ function() {
      return pListProperty(WritableItem.create);
    }();
    pLiteral = /* @__PURE__ */ function() {
      var pUndefined = bind6(sourcePos)(function(begin) {
        return discard3(lang.reserved("undefined"))(function() {
          return bind6(sourcePos)(function(end) {
            return pure6(new LUndefined(new Span(begin, end)));
          });
        });
      });
      var pNull = bind6(sourcePos)(function(begin) {
        return discard3(lang.reserved("null"))(function() {
          return bind6(sourcePos)(function(end) {
            return pure6(new LNull(new Span(begin, end)));
          });
        });
      });
      var pLiteralValue = function(constructor) {
        return function(parser) {
          return bind6(sourcePos)(function(begin) {
            return bind6(parser)(function(value) {
              return bind6(sourcePos)(function(end) {
                return pure6(constructor(new Span(begin, end))(value));
              });
            });
          });
        };
      };
      var pNum = pLiteralValue(LNum.create)(lang["float"]);
      var pProp = pLiteralValue(LProperty.create)(pPropertyName);
      var pString = pLiteralValue(LString.create)(lang.stringLiteral);
      var pInteger = pLiteralValue(LInteger.create)(lang.integer);
      var pBoolean$prime = pLiteralValue(LBoolean.create)(pBoolean);
      var pArray = function(p) {
        return bind6(sourcePos)(function(begin) {
          return bind6(lang.brackets(sepBy(applyFirst4(applySecond4(skipSpaces)(p))(skipSpaces))(lang.comma)))(function(arrayLiteral) {
            return bind6(sourcePos)(function(end) {
              return pure6(new LArray(new Span(begin, end), arrayLiteral));
            });
          });
        });
      };
      return fix3(function(self) {
        return withErrorMessage(choice4([$$try2(pUndefined), $$try2(pNull), $$try2(pNum), $$try2(pInteger), $$try2(pString), $$try2(pBoolean$prime), $$try2(pProp), pArray(self)]))("Expected a literal value");
      });
    }();
    pExpr = /* @__PURE__ */ function() {
      var value = map17(ELiteral.create)(pLiteral);
      var unary = function(name2) {
        return function(fun) {
          var go = discard3(withErrorMessage(lang.reservedOp(name2))("Expected unary operator '" + (name2 + "'")))(function() {
            return pure6(fun);
          });
          return new Prefix(go);
        };
      };
      var expr = function(self) {
        return alt6(lang.parens(self))(value);
      };
      var binary2 = function(name2) {
        return function(fun) {
          return function(assoc) {
            var go = discard3(withErrorMessage(lang.reservedOp(name2))("Expected binary operator '" + (name2 + "'")))(function() {
              return pure6(fun);
            });
            return new Infix(go, assoc);
          };
        };
      };
      var table = [[binary2("==")(EEq.create)(AssocLeft.value)], [binary2("in")(EIn.create)(AssocLeft.value)], [binary2(">")(EGt.create)(AssocLeft.value), binary2("<")(ELt.create)(AssocLeft.value), binary2(">=")(EGte.create)(AssocLeft.value), binary2("<=")(ELte.create)(AssocLeft.value)], [binary2("&&")(EAnd.create)(AssocLeft.value)], [binary2("||")(EOr.create)(AssocLeft.value)], [unary("exists")(EExists.create)], [unary("!")(ENot.create)]];
      return fix3(function(self) {
        return buildExprParser(table)(expr(self));
      });
    }();
    pAttribute = /* @__PURE__ */ bind6(sourcePos)(function(begin) {
      return bind6(withErrorMessage(applySecond4(lang.reservedOp("@"))(pAttributeName))("Expected attribute name starting with '@'"))(function(attributeName) {
        return bind6(function() {
          if (attributeName.value1 === "constraints") {
            return bind6(sourcePos)(function(beginAttributeValue) {
              return bind6(lang.parens(pExpr))(function(expr) {
                return bind6(sourcePos)(function(endAttributeValue) {
                  return pure6(new AExpr(new Span(beginAttributeValue, endAttributeValue), expr));
                });
              });
            });
          }
          ;
          return bind6(sourcePos)(function(beginAttributeValue) {
            return bind6(optionMaybe(lang.parens(pLiteral)))(function(literal) {
              return bind6(sourcePos)(function(endAttributeValue) {
                var span3 = new Span(beginAttributeValue, endAttributeValue);
                if (literal instanceof Nothing) {
                  return pure6(new ALiteral(span3, new LBoolean(span3, true)));
                }
                ;
                if (literal instanceof Just) {
                  return pure6(new ALiteral(span3, literal.value0));
                }
                ;
                throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 225, column 7 - line 227, column 55): " + [literal.constructor.name]);
              });
            });
          });
        }())(function(attributeValue) {
          return bind6(sourcePos)(function(end) {
            return pure6(new Attribute(new Span(begin, end), attributeName, attributeValue));
          });
        });
      });
    });
    pCollectionFunctions = /* @__PURE__ */ function() {
      var item = bind6(sourcePos)(function(begin) {
        return bind6(pFunctionName)(function(functionName) {
          return bind6(optionMaybe(lang.reserved("?")))(function(custom) {
            return bind6(optionMaybe(pAttribute))(function(attribute) {
              return bind6(sourcePos)(function(end) {
                return pure6(new FunctionItem({
                  span: new Span(begin, end),
                  functionName,
                  custom: isJust(custom),
                  expose: attribute
                }));
              });
            });
          });
        });
      });
      return lang.braces(many3($$try2(item)));
    }();
    pCond = /* @__PURE__ */ function() {
      return discard3(lang.reserved("@cond"))(function() {
        return bind6(sourcePos)(function(begin) {
          return bind6(withErrorMessage(lang.parens(pExpr))("Expected condition expression"))(function(expr) {
            return bind6(sourcePos)(function(end) {
              return pure6(new Cond(new Span(begin, end), expr));
            });
          });
        });
      });
    }();
    pRequired = /* @__PURE__ */ function() {
      var go = bind6(sourcePos)(function(begin) {
        return bind6(pPropertyName)(function(propertyName) {
          return bind6(optionMaybe(pCond))(function(cond) {
            return bind6(sourcePos)(function(end) {
              return pure6(new Required(new Span(begin, end), propertyName, cond));
            });
          });
        });
      });
      return go;
    }();
    pCollectionRequired = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pRequired)));
    }();
    pPropertyParser = function(key) {
      return function(value) {
        return applySecond4(lang.reserved(key))(value);
      };
    };
    pCollectionTemporary = /* @__PURE__ */ function() {
      return lang.braces(bind6(pPropertyParser("index")(pPropertyName))(function(index3) {
        return bind6(pPropertyParser("expireAfterSeconds")(lang.integer))(function(expireAfterSeconds) {
          return pure6(new CollectionTemporary({
            index: index3,
            expireAfterSeconds
          }));
        });
      }));
    }();
    getParserValue = function(key) {
      return function(results) {
        var v = find2(function(v1) {
          return v1.value0 === key;
        })(results);
        if (v instanceof Just) {
          return new Just(v.value0.value1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 881, column 3 - line 883, column 23): " + [v.constructor.name]);
      };
    };
    pActionItem = /* @__PURE__ */ function() {
      var pTranslate = pPropertyParser("translate")(pBoolean);
      var pSetItem = pPropertyParser("setItem")(pBoolean);
      var pSelection = pPropertyParser("selection")(pBoolean);
      var pRequires = pPropertyParser("requires")(pListProperty(RequireItem.create));
      var pQuery = pPropertyParser("query")(pMacro("@js () =>"));
      var pParams = pPropertyParser("params")(pMacro("@js () =>"));
      var pLabel = pPropertyParser("label")(lang.stringLiteral);
      var pIcon = pPropertyParser("icon")(lang.stringLiteral);
      var pFetchItem = pPropertyParser("fetchItem")(pBoolean);
      var pEffect = pPropertyParser("effect")(lang.stringLiteral);
      var pClearItem = pPropertyParser("clearItem")(pBoolean);
      var pButton = pPropertyParser("button")(pBoolean);
      var pAsk = pPropertyParser("ask")(pBoolean);
      var allParsers = [new Tuple("label", pLabel), new Tuple("icon", pIcon), new Tuple("ask", pAsk), new Tuple("selection", pSelection), new Tuple("effect", pEffect), new Tuple("button", pButton), new Tuple("translate", pTranslate), new Tuple("setItem", pSetItem), new Tuple("fetchItem", pFetchItem), new Tuple("clearItem", pClearItem), new Tuple("params", pParams), new Tuple("query", pQuery), new Tuple("requires", pRequires)];
      var go = function(actionName) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers))(function(results) {
            var label = getParserValue("label")(results);
            var icon = getParserValue("icon")(results);
            var ask3 = getParserValue("ask")(results);
            var selection = getParserValue("selection")(results);
            var effect = getParserValue("effect")(results);
            var button = getParserValue("button")(results);
            var translate = getParserValue("translate")(results);
            var setItem = getParserValue("setItem")(results);
            var fetchItem = getParserValue("fetchItem")(results);
            var clearItem = getParserValue("clearItem")(results);
            var params = getParserValue("params")(results);
            var query = getParserValue("query")(results);
            var requires = getParserValue("requires")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new ActionItem({
                span: new Span(begin, end),
                actionName,
                label,
                icon,
                ask: ask3,
                selection,
                effect,
                button,
                translate,
                setItem,
                fetchItem,
                clearItem,
                params,
                query,
                requires: fromMaybe(Nil.value)(requires)
              }));
            });
          });
        });
      };
      return bind6(pPropertyName)(function(name2) {
        return lang.braces(go(name2));
      });
    }();
    pCollectionActions = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pActionItem)));
    }();
    pCollectionIndividualActions = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pActionItem)));
    }();
    pCollectionFiltersPresets = /* @__PURE__ */ function() {
      var pLabel = pPropertyParser("name")(lang.stringLiteral);
      var pFilters = pPropertyParser("filters")(pMacro("@mongo"));
      var pBadgeFunction = pPropertyParser("badgeFunction")(lang.stringLiteral);
      var allParsers = [new Tuple("name", pLabel), new Tuple("badgeFunction", pBadgeFunction), new Tuple("filters", pFilters)];
      var pFiltersPresetsItem = function(name2) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers))(function(results) {
            var label = getParserValue("name")(results);
            var badgeFunction = getParserValue("badgeFunction")(results);
            var filters = getParserValue("filters")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new FiltersPresetsItem({
                span: new Span(begin, end),
                label,
                name: name2,
                badgeFunction,
                filters
              }));
            });
          });
        });
      };
      var go = bind6(pPropertyName)(function(name2) {
        return lang.braces(pFiltersPresetsItem(name2));
      });
      return lang.braces(many3($$try2(go)));
    }();
    pCollectionSearch = /* @__PURE__ */ function() {
      var pPlaceholder = pPropertyParser("placeholder")(lang.stringLiteral);
      var pIndexs = pPropertyParser("indexes")(lang.braces(many3($$try2(pPropertyName))));
      var allParsers = [new Tuple("indexes", pIndexs), new Tuple("placeholder", pPlaceholder)];
      return lang.braces(bind6(runParsers(allParsers))(function(results) {
        var placeholder = getParserValue("placeholder")(results);
        var indexes = getParserValue("indexes")(results);
        return pure6(new CollectionSearch({
          placeholder,
          indexes: fromMaybe(Nil.value)(indexes)
        }));
      }));
    }();
    pCollectionSecurity = /* @__PURE__ */ function() {
      var pStrategy = pPropertyParser("strategy")(lang.stringLiteral);
      var pScale = pPropertyParser("scale")(lang.integer);
      var pRateLimiting = lang.braces(bind6(sourcePos)(function(begin) {
        return bind6(runParsers([new Tuple("strategy", pStrategy), new Tuple("scale", pScale)]))(function(results) {
          return bind6(sourcePos)(function(end) {
            var strategy = getParserValue("strategy")(results);
            var scale = getParserValue("scale")(results);
            return pure6(new SecurityRateLimiting({
              span: new Span(begin, end),
              strategy,
              scale
            }));
          });
        });
      }));
      var pRateLimiting$prime = pPropertyParser("rateLimiting")(pRateLimiting);
      var pLogging = lang.braces(bind6(sourcePos)(function(begin) {
        return bind6(optionMaybe(pStrategy))(function(strategy) {
          return bind6(sourcePos)(function(end) {
            return pure6(new SecurityLogging({
              span: new Span(begin, end),
              strategy
            }));
          });
        });
      }));
      var pLogging$prime = pPropertyParser("logging")(pLogging);
      var pSecutiryItem = function(name2) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers([new Tuple("rateLimiting", pRateLimiting$prime), new Tuple("logging", pLogging$prime)]))(function(results) {
            var rateLimiting = getParserValue("rateLimiting")(results);
            var logging = getParserValue("logging")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new SecurityItem({
                span: new Span(begin, end),
                functionName: name2,
                rateLimiting,
                logging
              }));
            });
          });
        });
      };
      var go = bind6(pFunctionName)(function(functionName) {
        return lang.braces(pSecutiryItem(functionName));
      });
      return lang.braces(many3($$try2(go)));
    }();
    pCollectionTableLayout = /* @__PURE__ */ function() {
      var pTranslate = pPropertyParser("translate")(pBoolean);
      var pSetItem = pPropertyParser("setItem")(pBoolean);
      var pSelection = pPropertyParser("selection")(pBoolean);
      var pRoute = pPropertyParser("route")(lang.stringLiteral);
      var pRequires = pPropertyParser("requires")(pListProperty(RequireItem.create));
      var pQuery = pPropertyParser("query")(pMacro("@js () =>"));
      var pParams = pPropertyParser("params")(pMacro("@js () =>"));
      var pIf = pPropertyParser("if")(pCond);
      var pIcon = pPropertyParser("icon")(lang.stringLiteral);
      var pFetchItem = pPropertyParser("fetchItem")(pBoolean);
      var pEffect = pPropertyParser("effect")(lang.stringLiteral);
      var pClearItem = pPropertyParser("clearItem")(pBoolean);
      var pButton = pPropertyParser("button")(alt6($$try2(map17(Left.create)(pBoolean)))($$try2(map17(Right.create)(pCond))));
      var pAsk = pPropertyParser("ask")(pBoolean);
      var allParsers = [new Tuple("route", pRoute), new Tuple("icon", pIcon), new Tuple("icon", pIcon), new Tuple("if", pIf), new Tuple("ask", pAsk), new Tuple("selection", pSelection), new Tuple("effect", pEffect), new Tuple("button", pButton), new Tuple("translate", pTranslate), new Tuple("setItem", pSetItem), new Tuple("fetchItem", pFetchItem), new Tuple("clearItem", pClearItem), new Tuple("params", pParams), new Tuple("query", pQuery), new Tuple("requires", pRequires)];
      var pTableLayoutItem = function(actionName) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers))(function(results) {
            var route = getParserValue("route")(results);
            var icon = getParserValue("icon")(results);
            var ask3 = getParserValue("ask")(results);
            var if_ = getParserValue("if")(results);
            var selection = getParserValue("selection")(results);
            var effect = getParserValue("effect")(results);
            var button = getParserValue("button")(results);
            var translate = getParserValue("translate")(results);
            var setItem = getParserValue("setItem")(results);
            var fetchItem = getParserValue("fetchItem")(results);
            var clearItem = getParserValue("clearItem")(results);
            var params = getParserValue("params")(results);
            var query = getParserValue("query")(results);
            var requires = getParserValue("requires")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new TableLayoutItem({
                span: new Span(begin, end),
                actionName,
                route,
                if_,
                button,
                action: new ActionItem({
                  span: new Span(begin, end),
                  label: Nothing.value,
                  button: Nothing.value,
                  actionName,
                  icon,
                  ask: ask3,
                  selection,
                  effect,
                  translate,
                  setItem,
                  fetchItem,
                  clearItem,
                  params,
                  query,
                  requires
                })
              }));
            });
          });
        });
      };
      var go = bind6(pPropertyName)(function(name2) {
        return lang.braces(pTableLayoutItem(name2));
      });
      return lang.braces(many3($$try2(go)));
    }();
    pLayoutItem = /* @__PURE__ */ function() {
      var pVerticalSpacing = pPropertyParser("verticalSpacing")(lang["float"]);
      var pSpan = pPropertyParser("span")(lang["float"]);
      var pSeparator = pPropertyParser("separator")(lang.stringLiteral);
      var pLayoutItemComponent = function() {
        var pProps = pPropertyParser("props")(pMacro("@js () =>"));
        var pName$prime = pPropertyParser("name")(lang.stringLiteral);
        var allParsers$prime = [new Tuple("name", pName$prime), new Tuple("props", pProps)];
        return lang.braces(bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers$prime))(function(results) {
            var name2 = getParserValue("name")(results);
            var props = getParserValue("props")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new LayoutItemComponent({
                span: new Span(begin, end),
                name: name2,
                props
              }));
            });
          });
        }));
      }();
      var pIf = pPropertyParser("if")(pCond);
      var pComponent = pPropertyParser("component")(pLayoutItemComponent);
      var allParsers = [new Tuple("verticalSpacing", pVerticalSpacing), new Tuple("span", pSpan), new Tuple("component", pComponent), new Tuple("separator", pSeparator), new Tuple("if", pIf)];
      var go = function(name2) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers))(function(results) {
            var verticalSpacing = getParserValue("verticalSpacing")(results);
            var span_ = getParserValue("span")(results);
            var component = getParserValue("component")(results);
            var separator = getParserValue("separator")(results);
            var if_ = getParserValue("if")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new LayoutItem({
                span: new Span(begin, end),
                name: name2,
                verticalSpacing,
                span_,
                component,
                separator,
                if_
              }));
            });
          });
        });
      };
      return bind6(pPropertyName)(function(name2) {
        return lang.braces(go(name2));
      });
    }();
    pCollectionFormLayout = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pLayoutItem)));
    }();
    pCollectionLayout = /* @__PURE__ */ function() {
      return lang.braces(many3($$try2(pLayoutItem)));
    }();
    pPreferred = /* @__PURE__ */ function() {
      var pCollectionTableMeta$prime = pPropertyParser("tableMeta")(pCollectionTableMeta);
      var pCollectionTableLayout$prime = pPropertyParser("tableLayout")(pCollectionTableLayout);
      var pCollectionTable$prime = pPropertyParser("table")(pCollectionTable);
      var pCollectionLayout$prime = pPropertyParser("layout")(pCollectionLayout);
      var pCollectionIndividualActions$prime = pPropertyParser("individualActions")(pCollectionIndividualActions);
      var pCollectionFormLayout$prime = pPropertyParser("formLayout")(pCollectionFormLayout);
      var pCollectionForm$prime = pPropertyParser("form")(pCollectionForm);
      var pCollectionFiltersPresets$prime = pPropertyParser("filtersPresets")(pCollectionFiltersPresets);
      var pCollectionFilters$prime = pPropertyParser("filters")(pCollectionFilters);
      var pCollectionActions$prime = pPropertyParser("actions")(pCollectionActions);
      var allParsers = [new Tuple("actions", pCollectionActions$prime), new Tuple("individualActions", pCollectionIndividualActions$prime), new Tuple("filters", pCollectionFilters$prime), new Tuple("filtersPresets", pCollectionFiltersPresets$prime), new Tuple("layout", pCollectionLayout$prime), new Tuple("table", pCollectionTable$prime), new Tuple("tableMeta", pCollectionTableMeta$prime), new Tuple("form", pCollectionForm$prime), new Tuple("tableLayout", pCollectionTableLayout$prime), new Tuple("formLayout", pCollectionFormLayout$prime)];
      var pPreferred$prime = function(role) {
        return bind6(sourcePos)(function(begin) {
          return bind6(runParsers(allParsers))(function(results) {
            var actions = getParserValue("actions")(results);
            var individualActions = getParserValue("individualActions")(results);
            var filters = getParserValue("filters")(results);
            var filtersPresets = getParserValue("filtersPresets")(results);
            var layout = getParserValue("layout")(results);
            var table = getParserValue("table")(results);
            var tableMeta = getParserValue("tableMeta")(results);
            var form = getParserValue("form")(results);
            var tableLayout = getParserValue("tableLayout")(results);
            var formLayout = getParserValue("formLayout")(results);
            return bind6(sourcePos)(function(end) {
              return pure6(new PreferredItem({
                span: new Span(begin, end),
                role,
                actions: fromMaybe(Nil.value)(actions),
                individualActions: fromMaybe(Nil.value)(individualActions),
                filters: fromMaybe(Nil.value)(filters),
                filtersPresets: fromMaybe(Nil.value)(filtersPresets),
                layout: fromMaybe(Nil.value)(layout),
                table: fromMaybe(Nil.value)(table),
                tableMeta: fromMaybe(Nil.value)(tableMeta),
                form: fromMaybe(Nil.value)(form),
                tableLayout: fromMaybe(Nil.value)(tableLayout),
                formLayout: fromMaybe(Nil.value)(formLayout)
              }));
            });
          });
        });
      };
      var go = bind6(lang.identifier)(function(name2) {
        return lang.braces(pPreferred$prime(name2));
      });
      return lang.braces(many3($$try2(go)));
    }();
    pPropertyType = function(p) {
      var pSimpleType = function(constructor) {
        return function(keyword) {
          return bind6(sourcePos)(function(begin) {
            return bind6(withErrorMessage(lang.reservedOp(keyword))("Expected '" + (keyword + "'")))(function() {
              return bind6(sourcePos)(function(end) {
                return pure6(constructor(new Span(begin, end)));
              });
            });
          });
        };
      };
      var tBool = pSimpleType(PBoolean.create)("bool");
      var tConst = pSimpleType(PConst.create)("const");
      var tEnum = pSimpleType(PEnum.create)("enum");
      var tInt = pSimpleType(PInteger.create)("int");
      var tNum = pSimpleType(PNum.create)("num");
      var tStr = pSimpleType(PString.create)("str");
      var tPrimitives = choice4([tConst, tStr, tBool, tInt, tNum, tEnum]);
      var pObjectType = function(p$prime) {
        return function(constructor) {
          return lang.braces(bind6(sourcePos)(function(begin) {
            return bind6(runParsers([new Tuple("required", pPropertyParser("required")(pCollectionRequired)), new Tuple("properties", pPropertyParser("properties")(p$prime))]))(function(results) {
              var required = getParserValue("required")(results);
              var properties = getParserValue("properties")(results);
              return bind6(sourcePos)(function(end) {
                return pure6(constructor(new Span(begin, end))(fromMaybe(Nil.value)(required))(fromMaybe(Nil.value)(properties)));
              });
            });
          }));
        };
      };
      var tObject = pObjectType(p)(PObject.create);
      var pCollectionType = function(constructor) {
        return bind6(sourcePos)(function(begin) {
          return bind6(pCollectionName)(function(collectionName) {
            return bind6(sourcePos)(function(end) {
              return pure6(constructor(new Span(begin, end))(collectionName));
            });
          });
        });
      };
      var tCollection = pCollectionType(PRef.create);
      var pArrayType = function(self) {
        return function(constructor) {
          return bind6(sourcePos)(function(begin) {
            return bind6(withErrorMessage(string2("[]"))("Expected '[]' for array type"))(function() {
              return bind6(self)(function(arrType) {
                return bind6(sourcePos)(function(end) {
                  return pure6(constructor(new Span(begin, end))(arrType));
                });
              });
            });
          });
        };
      };
      var tArray = function(self) {
        return pArrayType(self)(PArray.create);
      };
      return fix3(function(self) {
        return withErrorMessage(choice4([$$try2(tArray(self)), $$try2(tPrimitives), $$try2(tCollection), $$try2(tObject)]))("Expected a property type");
      });
    };
    pProperty = function(p) {
      return bind6(sourcePos)(function(begin) {
        return bind6(pPropertyName)(function(name2) {
          return bind6(pPropertyType(p))(function(type_) {
            return bind6(many3(pAttribute))(function(attributes) {
              return bind6(sourcePos)(function(end) {
                return pure6(new Property({
                  span: new Span(begin, end),
                  name: name2,
                  type_,
                  attributes
                }));
              });
            });
          });
        });
      });
    };
    pCollectionProperties = /* @__PURE__ */ fix3(function(self) {
      return lang.braces(many3($$try2(pProperty(self))));
    });
    pCollection = /* @__PURE__ */ function() {
      var pPreferred$prime = pPropertyParser("preferred")(pPreferred);
      var pCollectionWritable$prime = pPropertyParser("writable")(pCollectionWritable);
      var pCollectionTimestamps$prime = pPropertyParser("timestamps")(pCollectionTimestamps);
      var pCollectionTemporary$prime = pPropertyParser("temporary")(pCollectionTemporary);
      var pCollectionTableMeta$prime = pPropertyParser("tableMeta")(pCollectionTableMeta);
      var pCollectionTableLayout$prime = pPropertyParser("tableLayout")(pCollectionTableLayout);
      var pCollectionTable$prime = pPropertyParser("table")(pCollectionTable);
      var pCollectionSecurity$prime = pPropertyParser("security")(pCollectionSecurity);
      var pCollectionSearch$prime = pPropertyParser("search")(pCollectionSearch);
      var pCollectionRequired$prime = pPropertyParser("required")(pCollectionRequired);
      var pCollectionProperties$prime = pPropertyParser("properties")(pCollectionProperties);
      var pCollectionPresets$prime = pPropertyParser("presets")(pCollectionPresets);
      var pCollectionOwned$prime = pPropertyParser("owned")(pCollectionOwned);
      var pCollectionLayout$prime = pPropertyParser("layout")(pCollectionLayout);
      var pCollectionIndividualActions$prime = pPropertyParser("individualActions")(pCollectionIndividualActions);
      var pCollectionIndexes$prime = pPropertyParser("indexes")(pCollectionIndexes);
      var pCollectionImmutable$prime = pPropertyParser("immutable")(pCollectionImmutable);
      var pCollectionIcon$prime = pPropertyParser("icon")(pCollectionIcon);
      var pCollectionGetters$prime = pPropertyParser("getters")(pCollectionGetters);
      var pCollectionFunctions$prime = pPropertyParser("functions")(pCollectionFunctions);
      var pCollectionFormLayout$prime = pPropertyParser("formLayout")(pCollectionFormLayout);
      var pCollectionForm$prime = pPropertyParser("form")(pCollectionForm);
      var pCollectionFiltersPresets$prime = pPropertyParser("filtersPresets")(pCollectionFiltersPresets);
      var pCollectionFilters$prime = pPropertyParser("filters")(pCollectionFilters);
      var pCollectionActions$prime = pPropertyParser("actions")(pCollectionActions);
      var allParsers = [new Tuple("tableMeta", pCollectionTableMeta$prime), new Tuple("properties", pCollectionProperties$prime), new Tuple("required", pCollectionRequired$prime), new Tuple("filters", pCollectionFilters$prime), new Tuple("getters", pCollectionGetters$prime), new Tuple("indexes", pCollectionIndexes$prime), new Tuple("table", pCollectionTable$prime), new Tuple("form", pCollectionForm$prime), new Tuple("icon", pCollectionIcon$prime), new Tuple("search", pCollectionSearch$prime), new Tuple("filtersPresets", pCollectionFiltersPresets$prime), new Tuple("layout", pCollectionLayout$prime), new Tuple("owned", pCollectionOwned$prime), new Tuple("timestamps", pCollectionTimestamps$prime), new Tuple("functions", pCollectionFunctions$prime), new Tuple("writable", pCollectionWritable$prime), new Tuple("immutable", pCollectionImmutable$prime), new Tuple("security", pCollectionSecurity$prime), new Tuple("presets", pCollectionPresets$prime), new Tuple("temporary", pCollectionTemporary$prime), new Tuple("actions", pCollectionActions$prime), new Tuple("formLayout", pCollectionFormLayout$prime), new Tuple("individualActions", pCollectionIndividualActions$prime), new Tuple("tableLayout", pCollectionTableLayout$prime), new Tuple("preferred", pPreferred$prime)];
      var pCollection$prime = function(name2) {
        return function($$extends) {
          return bind6(sourcePos)(function(begin) {
            return bind6(runParsers(allParsers))(function(results) {
              var properties = getParserValue("properties")(results);
              var required = getParserValue("required")(results);
              var table = getParserValue("table")(results);
              var getters = getParserValue("getters")(results);
              var tableMeta = getParserValue("tableMeta")(results);
              var filters = getParserValue("filters")(results);
              var form = getParserValue("form")(results);
              var indexes = getParserValue("indexes")(results);
              var icon = getParserValue("icon")(results);
              var search = getParserValue("search")(results);
              var filtersPresets = getParserValue("filtersPresets")(results);
              var layout = getParserValue("layout")(results);
              var owned = getParserValue("owned")(results);
              var timestamps = getParserValue("timestamps")(results);
              var functions = getParserValue("functions")(results);
              var writable = getParserValue("writable")(results);
              var immutable = getParserValue("immutable")(results);
              var security = getParserValue("security")(results);
              var presets = getParserValue("presets")(results);
              var temporary = getParserValue("temporary")(results);
              var actions = getParserValue("actions")(results);
              var formLayout = getParserValue("formLayout")(results);
              var individualActions = getParserValue("individualActions")(results);
              var tableLayout = getParserValue("tableLayout")(results);
              var preferred = getParserValue("preferred")(results);
              return bind6(sourcePos)(function(end) {
                return pure6(new Collection({
                  span: new Span(begin, end),
                  name: name2,
                  "extends": $$extends,
                  icon,
                  owned,
                  timestamps,
                  search,
                  immutable,
                  temporary,
                  preferred: fromMaybe(Nil.value)(preferred),
                  actions: fromMaybe(Nil.value)(actions),
                  formLayout: fromMaybe(Nil.value)(formLayout),
                  tableLayout: fromMaybe(Nil.value)(tableLayout),
                  presets: fromMaybe(Nil.value)(presets),
                  security: fromMaybe(Nil.value)(security),
                  functions: fromMaybe(Nil.value)(functions),
                  writable: fromMaybe(Nil.value)(writable),
                  properties: fromMaybe(Nil.value)(properties),
                  required: fromMaybe(Nil.value)(required),
                  table: fromMaybe(Nil.value)(table),
                  getters: fromMaybe(Nil.value)(getters),
                  tableMeta: fromMaybe(Nil.value)(tableMeta),
                  filters: fromMaybe(Nil.value)(filters),
                  form: fromMaybe(Nil.value)(form),
                  indexes: fromMaybe(Nil.value)(indexes),
                  filtersPresets: fromMaybe(Nil.value)(filtersPresets),
                  individualActions: fromMaybe(Nil.value)(individualActions),
                  layout: fromMaybe(Nil.value)(layout)
                }));
              });
            });
          });
        };
      };
      var go = discard3(lang.reserved("collection"))(function() {
        return bind6(pCollectionName)(function(name2) {
          return bind6(optionMaybe(discard3(lang.reserved("extends"))(function() {
            return pExtendsName;
          })))(function(extends$prime) {
            return lang.braces(pCollection$prime(name2)(extends$prime));
          });
        });
      });
      return go;
    }();
    pProgram = /* @__PURE__ */ bind6(/* @__PURE__ */ many3(pCollection))(function(collections) {
      return pure6(new Program({
        collections
      }));
    });
    contents = function(p) {
      return applyFirst4(applySecond4(lang.whiteSpace)(lang.lexeme(p)))(eof);
    };
    runParserProgram = function(filepath) {
      return function(source2) {
        var v = runParser(source2)(contents(pProgram));
        if (v instanceof Left) {
          return new Left(new Diagnostic({
            filepath,
            source: source2,
            info: v.value0.value0,
            span: new Span(new SourcePos(v.value0.value1.index, v.value0.value1.line, v.value0.value1.column), new SourcePos(v.value0.value1.index, v.value0.value1.line, v.value0.value1.column))
          }));
        }
        ;
        if (v instanceof Right) {
          return new Right(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Syntax.Parser (line 920, column 3 - line 928, column 35): " + [v.constructor.name]);
      };
    };
    Aff = function() {
      var EMPTY = {};
      var PURE = "Pure";
      var THROW = "Throw";
      var CATCH = "Catch";
      var SYNC = "Sync";
      var ASYNC2 = "Async";
      var BIND = "Bind";
      var BRACKET = "Bracket";
      var FORK = "Fork";
      var SEQ = "Sequential";
      var MAP = "Map";
      var APPLY = "Apply";
      var ALT = "Alt";
      var CONS = "Cons";
      var RESUME2 = "Resume";
      var RELEASE = "Release";
      var FINALIZER = "Finalizer";
      var FINALIZED = "Finalized";
      var FORKED = "Forked";
      var FIBER = "Fiber";
      var THUNK = "Thunk";
      function Aff2(tag, _1, _2, _3) {
        this.tag = tag;
        this._1 = _1;
        this._2 = _2;
        this._3 = _3;
      }
      function AffCtr(tag) {
        var fn = function(_1, _2, _3) {
          return new Aff2(tag, _1, _2, _3);
        };
        fn.tag = tag;
        return fn;
      }
      function nonCanceler2(error3) {
        return new Aff2(PURE, void 0);
      }
      function runEff(eff) {
        try {
          eff();
        } catch (error3) {
          setTimeout(function() {
            throw error3;
          }, 0);
        }
      }
      function runSync(left, right, eff) {
        try {
          return right(eff());
        } catch (error3) {
          return left(error3);
        }
      }
      function runAsync(left, eff, k) {
        try {
          return eff(k)();
        } catch (error3) {
          k(left(error3))();
          return nonCanceler2;
        }
      }
      var Scheduler = function() {
        var limit = 1024;
        var size4 = 0;
        var ix = 0;
        var queue = new Array(limit);
        var draining = false;
        function drain() {
          var thunk;
          draining = true;
          while (size4 !== 0) {
            size4--;
            thunk = queue[ix];
            queue[ix] = void 0;
            ix = (ix + 1) % limit;
            thunk();
          }
          draining = false;
        }
        return {
          isDraining: function() {
            return draining;
          },
          enqueue: function(cb) {
            var i, tmp;
            if (size4 === limit) {
              tmp = draining;
              drain();
              draining = tmp;
            }
            queue[(ix + size4) % limit] = cb;
            size4++;
            if (!draining) {
              drain();
            }
          }
        };
      }();
      function Supervisor(util) {
        var fibers = {};
        var fiberId = 0;
        var count = 0;
        return {
          register: function(fiber) {
            var fid = fiberId++;
            fiber.onComplete({
              rethrow: true,
              handler: function(result) {
                return function() {
                  count--;
                  delete fibers[fid];
                };
              }
            })();
            fibers[fid] = fiber;
            count++;
          },
          isEmpty: function() {
            return count === 0;
          },
          killAll: function(killError, cb) {
            return function() {
              if (count === 0) {
                return cb();
              }
              var killCount = 0;
              var kills = {};
              function kill(fid) {
                kills[fid] = fibers[fid].kill(killError, function(result) {
                  return function() {
                    delete kills[fid];
                    killCount--;
                    if (util.isLeft(result) && util.fromLeft(result)) {
                      setTimeout(function() {
                        throw util.fromLeft(result);
                      }, 0);
                    }
                    if (killCount === 0) {
                      cb();
                    }
                  };
                })();
              }
              for (var k in fibers) {
                if (fibers.hasOwnProperty(k)) {
                  killCount++;
                  kill(k);
                }
              }
              fibers = {};
              fiberId = 0;
              count = 0;
              return function(error3) {
                return new Aff2(SYNC, function() {
                  for (var k2 in kills) {
                    if (kills.hasOwnProperty(k2)) {
                      kills[k2]();
                    }
                  }
                });
              };
            };
          }
        };
      }
      var SUSPENDED = 0;
      var CONTINUE = 1;
      var STEP_BIND = 2;
      var STEP_RESULT = 3;
      var PENDING = 4;
      var RETURN = 5;
      var COMPLETED = 6;
      function Fiber(util, supervisor, aff) {
        var runTick = 0;
        var status = SUSPENDED;
        var step2 = aff;
        var fail3 = null;
        var interrupt = null;
        var bhead = null;
        var btail = null;
        var attempts = null;
        var bracketCount = 0;
        var joinId = 0;
        var joins = null;
        var rethrow = true;
        function run3(localRunTick) {
          var tmp, result, attempt;
          while (true) {
            tmp = null;
            result = null;
            attempt = null;
            switch (status) {
              case STEP_BIND:
                status = CONTINUE;
                try {
                  step2 = bhead(step2);
                  if (btail === null) {
                    bhead = null;
                  } else {
                    bhead = btail._1;
                    btail = btail._2;
                  }
                } catch (e) {
                  status = RETURN;
                  fail3 = util.left(e);
                  step2 = null;
                }
                break;
              case STEP_RESULT:
                if (util.isLeft(step2)) {
                  status = RETURN;
                  fail3 = step2;
                  step2 = null;
                } else if (bhead === null) {
                  status = RETURN;
                } else {
                  status = STEP_BIND;
                  step2 = util.fromRight(step2);
                }
                break;
              case CONTINUE:
                switch (step2.tag) {
                  case BIND:
                    if (bhead) {
                      btail = new Aff2(CONS, bhead, btail);
                    }
                    bhead = step2._2;
                    status = CONTINUE;
                    step2 = step2._1;
                    break;
                  case PURE:
                    if (bhead === null) {
                      status = RETURN;
                      step2 = util.right(step2._1);
                    } else {
                      status = STEP_BIND;
                      step2 = step2._1;
                    }
                    break;
                  case SYNC:
                    status = STEP_RESULT;
                    step2 = runSync(util.left, util.right, step2._1);
                    break;
                  case ASYNC2:
                    status = PENDING;
                    step2 = runAsync(util.left, step2._1, function(result2) {
                      return function() {
                        if (runTick !== localRunTick) {
                          return;
                        }
                        runTick++;
                        Scheduler.enqueue(function() {
                          if (runTick !== localRunTick + 1) {
                            return;
                          }
                          status = STEP_RESULT;
                          step2 = result2;
                          run3(runTick);
                        });
                      };
                    });
                    return;
                  case THROW:
                    status = RETURN;
                    fail3 = util.left(step2._1);
                    step2 = null;
                    break;
                  case CATCH:
                    if (bhead === null) {
                      attempts = new Aff2(CONS, step2, attempts, interrupt);
                    } else {
                      attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME2, bhead, btail), attempts, interrupt), interrupt);
                    }
                    bhead = null;
                    btail = null;
                    status = CONTINUE;
                    step2 = step2._1;
                    break;
                  case BRACKET:
                    bracketCount++;
                    if (bhead === null) {
                      attempts = new Aff2(CONS, step2, attempts, interrupt);
                    } else {
                      attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME2, bhead, btail), attempts, interrupt), interrupt);
                    }
                    bhead = null;
                    btail = null;
                    status = CONTINUE;
                    step2 = step2._1;
                    break;
                  case FORK:
                    status = STEP_RESULT;
                    tmp = Fiber(util, supervisor, step2._2);
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                    if (step2._1) {
                      tmp.run();
                    }
                    step2 = util.right(tmp);
                    break;
                  case SEQ:
                    status = CONTINUE;
                    step2 = sequential2(util, supervisor, step2._1);
                    break;
                }
                break;
              case RETURN:
                bhead = null;
                btail = null;
                if (attempts === null) {
                  status = COMPLETED;
                  step2 = interrupt || fail3 || step2;
                } else {
                  tmp = attempts._3;
                  attempt = attempts._1;
                  attempts = attempts._2;
                  switch (attempt.tag) {
                    case CATCH:
                      if (interrupt && interrupt !== tmp && bracketCount === 0) {
                        status = RETURN;
                      } else if (fail3) {
                        status = CONTINUE;
                        step2 = attempt._2(util.fromLeft(fail3));
                        fail3 = null;
                      }
                      break;
                    case RESUME2:
                      if (interrupt && interrupt !== tmp && bracketCount === 0 || fail3) {
                        status = RETURN;
                      } else {
                        bhead = attempt._1;
                        btail = attempt._2;
                        status = STEP_BIND;
                        step2 = util.fromRight(step2);
                      }
                      break;
                    case BRACKET:
                      bracketCount--;
                      if (fail3 === null) {
                        result = util.fromRight(step2);
                        attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                        if (interrupt === tmp || bracketCount > 0) {
                          status = CONTINUE;
                          step2 = attempt._3(result);
                        }
                      }
                      break;
                    case RELEASE:
                      attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail3), attempts, interrupt);
                      status = CONTINUE;
                      if (interrupt && interrupt !== tmp && bracketCount === 0) {
                        step2 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                      } else if (fail3) {
                        step2 = attempt._1.failed(util.fromLeft(fail3))(attempt._2);
                      } else {
                        step2 = attempt._1.completed(util.fromRight(step2))(attempt._2);
                      }
                      fail3 = null;
                      bracketCount++;
                      break;
                    case FINALIZER:
                      bracketCount++;
                      attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail3), attempts, interrupt);
                      status = CONTINUE;
                      step2 = attempt._1;
                      break;
                    case FINALIZED:
                      bracketCount--;
                      status = RETURN;
                      step2 = attempt._1;
                      fail3 = attempt._2;
                      break;
                  }
                }
                break;
              case COMPLETED:
                for (var k in joins) {
                  if (joins.hasOwnProperty(k)) {
                    rethrow = rethrow && joins[k].rethrow;
                    runEff(joins[k].handler(step2));
                  }
                }
                joins = null;
                if (interrupt && fail3) {
                  setTimeout(function() {
                    throw util.fromLeft(fail3);
                  }, 0);
                } else if (util.isLeft(step2) && rethrow) {
                  setTimeout(function() {
                    if (rethrow) {
                      throw util.fromLeft(step2);
                    }
                  }, 0);
                }
                return;
              case SUSPENDED:
                status = CONTINUE;
                break;
              case PENDING:
                return;
            }
          }
        }
        function onComplete(join3) {
          return function() {
            if (status === COMPLETED) {
              rethrow = rethrow && join3.rethrow;
              join3.handler(step2)();
              return function() {
              };
            }
            var jid = joinId++;
            joins = joins || {};
            joins[jid] = join3;
            return function() {
              if (joins !== null) {
                delete joins[jid];
              }
            };
          };
        }
        function kill(error3, cb) {
          return function() {
            if (status === COMPLETED) {
              cb(util.right(void 0))();
              return function() {
              };
            }
            var canceler = onComplete({
              rethrow: false,
              handler: function() {
                return cb(util.right(void 0));
              }
            })();
            switch (status) {
              case SUSPENDED:
                interrupt = util.left(error3);
                status = COMPLETED;
                step2 = interrupt;
                run3(runTick);
                break;
              case PENDING:
                if (interrupt === null) {
                  interrupt = util.left(error3);
                }
                if (bracketCount === 0) {
                  if (status === PENDING) {
                    attempts = new Aff2(CONS, new Aff2(FINALIZER, step2(error3)), attempts, interrupt);
                  }
                  status = RETURN;
                  step2 = null;
                  fail3 = null;
                  run3(++runTick);
                }
                break;
              default:
                if (interrupt === null) {
                  interrupt = util.left(error3);
                }
                if (bracketCount === 0) {
                  status = RETURN;
                  step2 = null;
                  fail3 = null;
                }
            }
            return canceler;
          };
        }
        function join2(cb) {
          return function() {
            var canceler = onComplete({
              rethrow: false,
              handler: cb
            })();
            if (status === SUSPENDED) {
              run3(runTick);
            }
            return canceler;
          };
        }
        return {
          kill,
          join: join2,
          onComplete,
          isSuspended: function() {
            return status === SUSPENDED;
          },
          run: function() {
            if (status === SUSPENDED) {
              if (!Scheduler.isDraining()) {
                Scheduler.enqueue(function() {
                  run3(runTick);
                });
              } else {
                run3(runTick);
              }
            }
          }
        };
      }
      function runPar(util, supervisor, par, cb) {
        var fiberId = 0;
        var fibers = {};
        var killId = 0;
        var kills = {};
        var early = new Error("[ParAff] Early exit");
        var interrupt = null;
        var root = EMPTY;
        function kill(error3, par2, cb2) {
          var step2 = par2;
          var head5 = null;
          var tail3 = null;
          var count = 0;
          var kills2 = {};
          var tmp, kid;
          loop: while (true) {
            tmp = null;
            switch (step2.tag) {
              case FORKED:
                if (step2._3 === EMPTY) {
                  tmp = fibers[step2._1];
                  kills2[count++] = tmp.kill(error3, function(result) {
                    return function() {
                      count--;
                      if (count === 0) {
                        cb2(result)();
                      }
                    };
                  });
                }
                if (head5 === null) {
                  break loop;
                }
                step2 = head5._2;
                if (tail3 === null) {
                  head5 = null;
                } else {
                  head5 = tail3._1;
                  tail3 = tail3._2;
                }
                break;
              case MAP:
                step2 = step2._2;
                break;
              case APPLY:
              case ALT:
                if (head5) {
                  tail3 = new Aff2(CONS, head5, tail3);
                }
                head5 = step2;
                step2 = step2._1;
                break;
            }
          }
          if (count === 0) {
            cb2(util.right(void 0))();
          } else {
            kid = 0;
            tmp = count;
            for (; kid < tmp; kid++) {
              kills2[kid] = kills2[kid]();
            }
          }
          return kills2;
        }
        function join2(result, head5, tail3) {
          var fail3, step2, lhs, rhs, tmp, kid;
          if (util.isLeft(result)) {
            fail3 = result;
            step2 = null;
          } else {
            step2 = result;
            fail3 = null;
          }
          loop: while (true) {
            lhs = null;
            rhs = null;
            tmp = null;
            kid = null;
            if (interrupt !== null) {
              return;
            }
            if (head5 === null) {
              cb(fail3 || step2)();
              return;
            }
            if (head5._3 !== EMPTY) {
              return;
            }
            switch (head5.tag) {
              case MAP:
                if (fail3 === null) {
                  head5._3 = util.right(head5._1(util.fromRight(step2)));
                  step2 = head5._3;
                } else {
                  head5._3 = fail3;
                }
                break;
              case APPLY:
                lhs = head5._1._3;
                rhs = head5._2._3;
                if (fail3) {
                  head5._3 = fail3;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, fail3 === lhs ? head5._2 : head5._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join2(fail3, null, null);
                      } else {
                        join2(fail3, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                } else if (lhs === EMPTY || rhs === EMPTY) {
                  return;
                } else {
                  step2 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                  head5._3 = step2;
                }
                break;
              case ALT:
                lhs = head5._1._3;
                rhs = head5._2._3;
                if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                  return;
                }
                if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                  fail3 = step2 === lhs ? rhs : lhs;
                  step2 = null;
                  head5._3 = fail3;
                } else {
                  head5._3 = step2;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, step2 === lhs ? head5._2 : head5._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join2(step2, null, null);
                      } else {
                        join2(step2, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                }
                break;
            }
            if (tail3 === null) {
              head5 = null;
            } else {
              head5 = tail3._1;
              tail3 = tail3._2;
            }
          }
        }
        function resolve(fiber) {
          return function(result) {
            return function() {
              delete fibers[fiber._1];
              fiber._3 = result;
              join2(result, fiber._2._1, fiber._2._2);
            };
          };
        }
        function run3() {
          var status = CONTINUE;
          var step2 = par;
          var head5 = null;
          var tail3 = null;
          var tmp, fid;
          loop: while (true) {
            tmp = null;
            fid = null;
            switch (status) {
              case CONTINUE:
                switch (step2.tag) {
                  case MAP:
                    if (head5) {
                      tail3 = new Aff2(CONS, head5, tail3);
                    }
                    head5 = new Aff2(MAP, step2._1, EMPTY, EMPTY);
                    step2 = step2._2;
                    break;
                  case APPLY:
                    if (head5) {
                      tail3 = new Aff2(CONS, head5, tail3);
                    }
                    head5 = new Aff2(APPLY, EMPTY, step2._2, EMPTY);
                    step2 = step2._1;
                    break;
                  case ALT:
                    if (head5) {
                      tail3 = new Aff2(CONS, head5, tail3);
                    }
                    head5 = new Aff2(ALT, EMPTY, step2._2, EMPTY);
                    step2 = step2._1;
                    break;
                  default:
                    fid = fiberId++;
                    status = RETURN;
                    tmp = step2;
                    step2 = new Aff2(FORKED, fid, new Aff2(CONS, head5, tail3), EMPTY);
                    tmp = Fiber(util, supervisor, tmp);
                    tmp.onComplete({
                      rethrow: false,
                      handler: resolve(step2)
                    })();
                    fibers[fid] = tmp;
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                }
                break;
              case RETURN:
                if (head5 === null) {
                  break loop;
                }
                if (head5._1 === EMPTY) {
                  head5._1 = step2;
                  status = CONTINUE;
                  step2 = head5._2;
                  head5._2 = EMPTY;
                } else {
                  head5._2 = step2;
                  step2 = head5;
                  if (tail3 === null) {
                    head5 = null;
                  } else {
                    head5 = tail3._1;
                    tail3 = tail3._2;
                  }
                }
            }
          }
          root = step2;
          for (fid = 0; fid < fiberId; fid++) {
            fibers[fid].run();
          }
        }
        function cancel(error3, cb2) {
          interrupt = util.left(error3);
          var innerKills;
          for (var kid in kills) {
            if (kills.hasOwnProperty(kid)) {
              innerKills = kills[kid];
              for (kid in innerKills) {
                if (innerKills.hasOwnProperty(kid)) {
                  innerKills[kid]();
                }
              }
            }
          }
          kills = null;
          var newKills = kill(error3, root, cb2);
          return function(killError) {
            return new Aff2(ASYNC2, function(killCb) {
              return function() {
                for (var kid2 in newKills) {
                  if (newKills.hasOwnProperty(kid2)) {
                    newKills[kid2]();
                  }
                }
                return nonCanceler2;
              };
            });
          };
        }
        run3();
        return function(killError) {
          return new Aff2(ASYNC2, function(killCb) {
            return function() {
              return cancel(killError, killCb);
            };
          });
        };
      }
      function sequential2(util, supervisor, par) {
        return new Aff2(ASYNC2, function(cb) {
          return function() {
            return runPar(util, supervisor, par, cb);
          };
        });
      }
      Aff2.EMPTY = EMPTY;
      Aff2.Pure = AffCtr(PURE);
      Aff2.Throw = AffCtr(THROW);
      Aff2.Catch = AffCtr(CATCH);
      Aff2.Sync = AffCtr(SYNC);
      Aff2.Async = AffCtr(ASYNC2);
      Aff2.Bind = AffCtr(BIND);
      Aff2.Bracket = AffCtr(BRACKET);
      Aff2.Fork = AffCtr(FORK);
      Aff2.Seq = AffCtr(SEQ);
      Aff2.ParMap = AffCtr(MAP);
      Aff2.ParApply = AffCtr(APPLY);
      Aff2.ParAlt = AffCtr(ALT);
      Aff2.Fiber = Fiber;
      Aff2.Supervisor = Supervisor;
      Aff2.Scheduler = Scheduler;
      Aff2.nonCanceler = nonCanceler2;
      return Aff2;
    }();
    _pure = Aff.Pure;
    _throwError = Aff.Throw;
    _liftEffect = Aff.Sync;
    makeAff = Aff.Async;
    _sequential = Aff.Seq;
    f_OK = import_node_fs.constants.F_OK;
    r_OK = import_node_fs.constants.R_OK;
    w_OK = import_node_fs.constants.W_OK;
    x_OK = import_node_fs.constants.X_OK;
    copyFile_EXCL = import_node_fs.constants.COPYFILE_EXCL;
    copyFile_FICLONE = import_node_fs.constants.COPYFILE_FICLONE;
    copyFile_FICLONE_FORCE = import_node_fs.constants.COPYFILE_FICLONE_FORCE;
    pure13 = /* @__PURE__ */ pure(applicativeEither);
    toUnfoldable7 = /* @__PURE__ */ toUnfoldable(unfoldableArray);
    map18 = /* @__PURE__ */ map(functorList);
    parseModule = function(v) {
      if (v === "commonjs") {
        return new Just(CommonJs.value);
      }
      ;
      if (v === "esnext") {
        return new Just(EsNext.value);
      }
      ;
      return Nothing.value;
    };
    compile$prime$prime = function(filepath) {
      return function(source2) {
        var v = runParserProgram(filepath)(source2);
        if (v instanceof Right) {
          var v1 = runSemantic(filepath)(source2)(v.value0);
          if (v1 instanceof Right) {
            return new Right(codegen(v.value0));
          }
          ;
          if (v1 instanceof Left) {
            return new Left(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Driver (line 82, column 7 - line 84, column 29): " + [v1.constructor.name]);
        }
        ;
        if (v instanceof Left) {
          return new Left(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Driver (line 80, column 3 - line 85, column 25): " + [v.constructor.name]);
      };
    };
    compile = function(filepath) {
      return function(source2) {
        return function(targetModule) {
          var v = parseModule(targetModule);
          if (v instanceof Just) {
            var v1 = compile$prime$prime(filepath)(source2);
            if (v1 instanceof Right) {
              return pure13(toUnfoldable7(map18(function(v2) {
                return ["collection", v2.value0, ppJavascript(v.value0)(v2.value1), ppTypescript(v2.value2)];
              })(v1.value0)));
            }
            ;
            if (v1 instanceof Left) {
              return new Left(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Aeria.Driver (line 51, column 7 - line 57, column 29): " + [v1.constructor.name]);
          }
          ;
          if (v instanceof Nothing) {
            return new Right([]);
          }
          ;
          throw new Error("Failed pattern match at Aeria.Driver (line 49, column 3 - line 58, column 24): " + [v.constructor.name]);
        };
      };
    };
    checker = function(filepath) {
      return function(source2) {
        var v = runParserProgram(filepath)(source2);
        if (v instanceof Right) {
          return runSemantic(filepath)(source2)(v.value0);
        }
        ;
        if (v instanceof Left) {
          return new Left(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Aeria.Driver (line 62, column 3 - line 64, column 25): " + [v.constructor.name]);
      };
    };
  }
});

// ../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/core.js
var compileSource, checkSource, getDeclarations, isLeft, unwrap4, getNormalizedSpan;
var init_core = __esm({
  "../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/core.js"() {
    init_importMeta();
    init_dist();
    compileSource = (target) => {
      return compile(target.filename)(target.source)(target.module);
    };
    checkSource = (target) => {
      return checker(target.filename)(target.source);
    };
    getDeclarations = (result) => {
      const declarations = /* @__PURE__ */ new Map();
      for (const [decltype, name, sourcejs, sourcets] of result) {
        const key = `${decltype}.${name}`;
        declarations.set(key, {
          name,
          type: decltype,
          js: sourcejs,
          ts: sourcets
        });
      }
      return Array.from(declarations.values());
    };
    isLeft = (obj) => {
      return obj instanceof Left;
    };
    unwrap4 = (obj) => {
      return obj.value0;
    };
    getNormalizedSpan = (span) => {
      return {
        start: {
          index: span.value0.value0,
          line: span.value0.value1 - 1,
          character: span.value0.value2
        },
        end: {
          index: span.value0.value0,
          line: span.value0.value1 - 1,
          character: span.value0.value2
        }
      };
    };
  }
});

// ../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js
var require_balanced_match = __commonJS({
  "../../node_modules/.pnpm/balanced-match@1.0.2/node_modules/balanced-match/index.js"(exports2, module2) {
    "use strict";
    init_importMeta();
    module2.exports = balanced;
    function balanced(a, b, str) {
      if (a instanceof RegExp) a = maybeMatch(a, str);
      if (b instanceof RegExp) b = maybeMatch(b, str);
      var r = range(a, b, str);
      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }
    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }
    balanced.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;
      if (ai >= 0 && bi > 0) {
        if (a === b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;
        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [begs.pop(), bi];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }
            bi = str.indexOf(b, i + 1);
          }
          i = ai < bi && ai >= 0 ? ai : bi;
        }
        if (begs.length) {
          result = [left, right];
        }
      }
      return result;
    }
  }
});

// ../../node_modules/.pnpm/brace-expansion@2.0.1/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS({
  "../../node_modules/.pnpm/brace-expansion@2.0.1/node_modules/brace-expansion/index.js"(exports2, module2) {
    init_importMeta();
    var balanced = require_balanced_match();
    module2.exports = expandTop;
    var escSlash = "\0SLASH" + Math.random() + "\0";
    var escOpen = "\0OPEN" + Math.random() + "\0";
    var escClose = "\0CLOSE" + Math.random() + "\0";
    var escComma = "\0COMMA" + Math.random() + "\0";
    var escPeriod = "\0PERIOD" + Math.random() + "\0";
    function numeric(str) {
      return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
    }
    function escapeBraces(str) {
      return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
    }
    function unescapeBraces(str) {
      return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
    }
    function parseCommaParts(str) {
      if (!str)
        return [""];
      var parts = [];
      var m = balanced("{", "}", str);
      if (!m)
        return str.split(",");
      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(",");
      p[p.length - 1] += "{" + body + "}";
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length - 1] += postParts.shift();
        p.push.apply(p, postParts);
      }
      parts.push.apply(parts, p);
      return parts;
    }
    function expandTop(str) {
      if (!str)
        return [];
      if (str.substr(0, 2) === "{}") {
        str = "\\{\\}" + str.substr(2);
      }
      return expand2(escapeBraces(str), true).map(unescapeBraces);
    }
    function embrace(str) {
      return "{" + str + "}";
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }
    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }
    function expand2(str, isTop) {
      var expansions = [];
      var m = balanced("{", "}", str);
      if (!m) return [str];
      var pre = m.pre;
      var post = m.post.length ? expand2(m.post, false) : [""];
      if (/\$$/.test(m.pre)) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + "{" + m.body + "}" + post[k];
          expansions.push(expansion);
        }
      } else {
        var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
        var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
        var isSequence = isNumericSequence || isAlphaSequence;
        var isOptions = m.body.indexOf(",") >= 0;
        if (!isSequence && !isOptions) {
          if (m.post.match(/,.*\}/)) {
            str = m.pre + "{" + m.body + escClose + m.post;
            return expand2(str);
          }
          return [str];
        }
        var n;
        if (isSequence) {
          n = m.body.split(/\.\./);
        } else {
          n = parseCommaParts(m.body);
          if (n.length === 1) {
            n = expand2(n[0], false).map(embrace);
            if (n.length === 1) {
              return post.map(function(p) {
                return m.pre + n[0] + p;
              });
            }
          }
        }
        var N;
        if (isSequence) {
          var x = numeric(n[0]);
          var y = numeric(n[1]);
          var width = Math.max(n[0].length, n[1].length);
          var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
          var test = lte;
          var reverse = y < x;
          if (reverse) {
            incr *= -1;
            test = gte;
          }
          var pad = n.some(isPadded);
          N = [];
          for (var i = x; test(i, y); i += incr) {
            var c;
            if (isAlphaSequence) {
              c = String.fromCharCode(i);
              if (c === "\\")
                c = "";
            } else {
              c = String(i);
              if (pad) {
                var need = width - c.length;
                if (need > 0) {
                  var z = new Array(need + 1).join("0");
                  if (i < 0)
                    c = "-" + z + c.slice(1);
                  else
                    c = z + c;
                }
              }
            }
            N.push(c);
          }
        } else {
          N = [];
          for (var j = 0; j < n.length; j++) {
            N.push.apply(N, expand2(n[j], false));
          }
        }
        for (var j = 0; j < N.length; j++) {
          for (var k = 0; k < post.length; k++) {
            var expansion = pre + N[j] + post[k];
            if (!isTop || isSequence || expansion)
              expansions.push(expansion);
          }
        }
      }
      return expansions;
    }
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/assert-valid-pattern.js
var MAX_PATTERN_LENGTH, assertValidPattern;
var init_assert_valid_pattern = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/assert-valid-pattern.js"() {
    init_importMeta();
    MAX_PATTERN_LENGTH = 1024 * 64;
    assertValidPattern = (pattern) => {
      if (typeof pattern !== "string") {
        throw new TypeError("invalid pattern");
      }
      if (pattern.length > MAX_PATTERN_LENGTH) {
        throw new TypeError("pattern is too long");
      }
    };
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/brace-expressions.js
var posixClasses, braceEscape, regexpEscape, rangesToString, parseClass;
var init_brace_expressions = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/brace-expressions.js"() {
    init_importMeta();
    posixClasses = {
      "[:alnum:]": ["\\p{L}\\p{Nl}\\p{Nd}", true],
      "[:alpha:]": ["\\p{L}\\p{Nl}", true],
      "[:ascii:]": ["\\x00-\\x7f", false],
      "[:blank:]": ["\\p{Zs}\\t", true],
      "[:cntrl:]": ["\\p{Cc}", true],
      "[:digit:]": ["\\p{Nd}", true],
      "[:graph:]": ["\\p{Z}\\p{C}", true, true],
      "[:lower:]": ["\\p{Ll}", true],
      "[:print:]": ["\\p{C}", true],
      "[:punct:]": ["\\p{P}", true],
      "[:space:]": ["\\p{Z}\\t\\r\\n\\v\\f", true],
      "[:upper:]": ["\\p{Lu}", true],
      "[:word:]": ["\\p{L}\\p{Nl}\\p{Nd}\\p{Pc}", true],
      "[:xdigit:]": ["A-Fa-f0-9", false]
    };
    braceEscape = (s) => s.replace(/[[\]\\-]/g, "\\$&");
    regexpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    rangesToString = (ranges) => ranges.join("");
    parseClass = (glob2, position2) => {
      const pos = position2;
      if (glob2.charAt(pos) !== "[") {
        throw new Error("not in a brace expression");
      }
      const ranges = [];
      const negs = [];
      let i = pos + 1;
      let sawStart = false;
      let uflag = false;
      let escaping = false;
      let negate2 = false;
      let endPos = pos;
      let rangeStart = "";
      WHILE: while (i < glob2.length) {
        const c = glob2.charAt(i);
        if ((c === "!" || c === "^") && i === pos + 1) {
          negate2 = true;
          i++;
          continue;
        }
        if (c === "]" && sawStart && !escaping) {
          endPos = i + 1;
          break;
        }
        sawStart = true;
        if (c === "\\") {
          if (!escaping) {
            escaping = true;
            i++;
            continue;
          }
        }
        if (c === "[" && !escaping) {
          for (const [cls, [unip, u, neg]] of Object.entries(posixClasses)) {
            if (glob2.startsWith(cls, i)) {
              if (rangeStart) {
                return ["$.", false, glob2.length - pos, true];
              }
              i += cls.length;
              if (neg)
                negs.push(unip);
              else
                ranges.push(unip);
              uflag = uflag || u;
              continue WHILE;
            }
          }
        }
        escaping = false;
        if (rangeStart) {
          if (c > rangeStart) {
            ranges.push(braceEscape(rangeStart) + "-" + braceEscape(c));
          } else if (c === rangeStart) {
            ranges.push(braceEscape(c));
          }
          rangeStart = "";
          i++;
          continue;
        }
        if (glob2.startsWith("-]", i + 1)) {
          ranges.push(braceEscape(c + "-"));
          i += 2;
          continue;
        }
        if (glob2.startsWith("-", i + 1)) {
          rangeStart = c;
          i += 2;
          continue;
        }
        ranges.push(braceEscape(c));
        i++;
      }
      if (endPos < i) {
        return ["", false, 0, false];
      }
      if (!ranges.length && !negs.length) {
        return ["$.", false, glob2.length - pos, true];
      }
      if (negs.length === 0 && ranges.length === 1 && /^\\?.$/.test(ranges[0]) && !negate2) {
        const r = ranges[0].length === 2 ? ranges[0].slice(-1) : ranges[0];
        return [regexpEscape(r), false, endPos - pos, false];
      }
      const sranges = "[" + (negate2 ? "^" : "") + rangesToString(ranges) + "]";
      const snegs = "[" + (negate2 ? "" : "^") + rangesToString(negs) + "]";
      const comb = ranges.length && negs.length ? "(" + sranges + "|" + snegs + ")" : ranges.length ? sranges : snegs;
      return [comb, uflag, endPos - pos, true];
    };
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/unescape.js
var unescape;
var init_unescape = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/unescape.js"() {
    init_importMeta();
    unescape = (s, { windowsPathsNoEscape = false } = {}) => {
      return windowsPathsNoEscape ? s.replace(/\[([^\/\\])\]/g, "$1") : s.replace(/((?!\\).|^)\[([^\/\\])\]/g, "$1$2").replace(/\\([^\/])/g, "$1");
    };
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/ast.js
var types, isExtglobType, startNoTraversal, startNoDot, addPatternStart, justDots, reSpecials, regExpEscape, qmark, star, starNoEmpty, AST;
var init_ast = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/ast.js"() {
    init_importMeta();
    init_brace_expressions();
    init_unescape();
    types = /* @__PURE__ */ new Set(["!", "?", "+", "*", "@"]);
    isExtglobType = (c) => types.has(c);
    startNoTraversal = "(?!(?:^|/)\\.\\.?(?:$|/))";
    startNoDot = "(?!\\.)";
    addPatternStart = /* @__PURE__ */ new Set(["[", "."]);
    justDots = /* @__PURE__ */ new Set(["..", "."]);
    reSpecials = new Set("().*{}+?[]^$\\!");
    regExpEscape = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    qmark = "[^/]";
    star = qmark + "*?";
    starNoEmpty = qmark + "+?";
    AST = class _AST {
      type;
      #root;
      #hasMagic;
      #uflag = false;
      #parts = [];
      #parent;
      #parentIndex;
      #negs;
      #filledNegs = false;
      #options;
      #toString;
      // set to true if it's an extglob with no children
      // (which really means one child of '')
      #emptyExt = false;
      constructor(type, parent, options = {}) {
        this.type = type;
        if (type)
          this.#hasMagic = true;
        this.#parent = parent;
        this.#root = this.#parent ? this.#parent.#root : this;
        this.#options = this.#root === this ? options : this.#root.#options;
        this.#negs = this.#root === this ? [] : this.#root.#negs;
        if (type === "!" && !this.#root.#filledNegs)
          this.#negs.push(this);
        this.#parentIndex = this.#parent ? this.#parent.#parts.length : 0;
      }
      get hasMagic() {
        if (this.#hasMagic !== void 0)
          return this.#hasMagic;
        for (const p of this.#parts) {
          if (typeof p === "string")
            continue;
          if (p.type || p.hasMagic)
            return this.#hasMagic = true;
        }
        return this.#hasMagic;
      }
      // reconstructs the pattern
      toString() {
        if (this.#toString !== void 0)
          return this.#toString;
        if (!this.type) {
          return this.#toString = this.#parts.map((p) => String(p)).join("");
        } else {
          return this.#toString = this.type + "(" + this.#parts.map((p) => String(p)).join("|") + ")";
        }
      }
      #fillNegs() {
        if (this !== this.#root)
          throw new Error("should only call on root");
        if (this.#filledNegs)
          return this;
        this.toString();
        this.#filledNegs = true;
        let n;
        while (n = this.#negs.pop()) {
          if (n.type !== "!")
            continue;
          let p = n;
          let pp = p.#parent;
          while (pp) {
            for (let i = p.#parentIndex + 1; !pp.type && i < pp.#parts.length; i++) {
              for (const part of n.#parts) {
                if (typeof part === "string") {
                  throw new Error("string part in extglob AST??");
                }
                part.copyIn(pp.#parts[i]);
              }
            }
            p = pp;
            pp = p.#parent;
          }
        }
        return this;
      }
      push(...parts) {
        for (const p of parts) {
          if (p === "")
            continue;
          if (typeof p !== "string" && !(p instanceof _AST && p.#parent === this)) {
            throw new Error("invalid part: " + p);
          }
          this.#parts.push(p);
        }
      }
      toJSON() {
        const ret = this.type === null ? this.#parts.slice().map((p) => typeof p === "string" ? p : p.toJSON()) : [this.type, ...this.#parts.map((p) => p.toJSON())];
        if (this.isStart() && !this.type)
          ret.unshift([]);
        if (this.isEnd() && (this === this.#root || this.#root.#filledNegs && this.#parent?.type === "!")) {
          ret.push({});
        }
        return ret;
      }
      isStart() {
        if (this.#root === this)
          return true;
        if (!this.#parent?.isStart())
          return false;
        if (this.#parentIndex === 0)
          return true;
        const p = this.#parent;
        for (let i = 0; i < this.#parentIndex; i++) {
          const pp = p.#parts[i];
          if (!(pp instanceof _AST && pp.type === "!")) {
            return false;
          }
        }
        return true;
      }
      isEnd() {
        if (this.#root === this)
          return true;
        if (this.#parent?.type === "!")
          return true;
        if (!this.#parent?.isEnd())
          return false;
        if (!this.type)
          return this.#parent?.isEnd();
        const pl = this.#parent ? this.#parent.#parts.length : 0;
        return this.#parentIndex === pl - 1;
      }
      copyIn(part) {
        if (typeof part === "string")
          this.push(part);
        else
          this.push(part.clone(this));
      }
      clone(parent) {
        const c = new _AST(this.type, parent);
        for (const p of this.#parts) {
          c.copyIn(p);
        }
        return c;
      }
      static #parseAST(str, ast, pos, opt) {
        let escaping = false;
        let inBrace = false;
        let braceStart = -1;
        let braceNeg = false;
        if (ast.type === null) {
          let i2 = pos;
          let acc2 = "";
          while (i2 < str.length) {
            const c = str.charAt(i2++);
            if (escaping || c === "\\") {
              escaping = !escaping;
              acc2 += c;
              continue;
            }
            if (inBrace) {
              if (i2 === braceStart + 1) {
                if (c === "^" || c === "!") {
                  braceNeg = true;
                }
              } else if (c === "]" && !(i2 === braceStart + 2 && braceNeg)) {
                inBrace = false;
              }
              acc2 += c;
              continue;
            } else if (c === "[") {
              inBrace = true;
              braceStart = i2;
              braceNeg = false;
              acc2 += c;
              continue;
            }
            if (!opt.noext && isExtglobType(c) && str.charAt(i2) === "(") {
              ast.push(acc2);
              acc2 = "";
              const ext2 = new _AST(c, ast);
              i2 = _AST.#parseAST(str, ext2, i2, opt);
              ast.push(ext2);
              continue;
            }
            acc2 += c;
          }
          ast.push(acc2);
          return i2;
        }
        let i = pos + 1;
        let part = new _AST(null, ast);
        const parts = [];
        let acc = "";
        while (i < str.length) {
          const c = str.charAt(i++);
          if (escaping || c === "\\") {
            escaping = !escaping;
            acc += c;
            continue;
          }
          if (inBrace) {
            if (i === braceStart + 1) {
              if (c === "^" || c === "!") {
                braceNeg = true;
              }
            } else if (c === "]" && !(i === braceStart + 2 && braceNeg)) {
              inBrace = false;
            }
            acc += c;
            continue;
          } else if (c === "[") {
            inBrace = true;
            braceStart = i;
            braceNeg = false;
            acc += c;
            continue;
          }
          if (isExtglobType(c) && str.charAt(i) === "(") {
            part.push(acc);
            acc = "";
            const ext2 = new _AST(c, part);
            part.push(ext2);
            i = _AST.#parseAST(str, ext2, i, opt);
            continue;
          }
          if (c === "|") {
            part.push(acc);
            acc = "";
            parts.push(part);
            part = new _AST(null, ast);
            continue;
          }
          if (c === ")") {
            if (acc === "" && ast.#parts.length === 0) {
              ast.#emptyExt = true;
            }
            part.push(acc);
            acc = "";
            ast.push(...parts, part);
            return i;
          }
          acc += c;
        }
        ast.type = null;
        ast.#hasMagic = void 0;
        ast.#parts = [str.substring(pos - 1)];
        return i;
      }
      static fromGlob(pattern, options = {}) {
        const ast = new _AST(null, void 0, options);
        _AST.#parseAST(pattern, ast, 0, options);
        return ast;
      }
      // returns the regular expression if there's magic, or the unescaped
      // string if not.
      toMMPattern() {
        if (this !== this.#root)
          return this.#root.toMMPattern();
        const glob2 = this.toString();
        const [re, body, hasMagic2, uflag] = this.toRegExpSource();
        const anyMagic = hasMagic2 || this.#hasMagic || this.#options.nocase && !this.#options.nocaseMagicOnly && glob2.toUpperCase() !== glob2.toLowerCase();
        if (!anyMagic) {
          return body;
        }
        const flags = (this.#options.nocase ? "i" : "") + (uflag ? "u" : "");
        return Object.assign(new RegExp(`^${re}$`, flags), {
          _src: re,
          _glob: glob2
        });
      }
      get options() {
        return this.#options;
      }
      // returns the string match, the regexp source, whether there's magic
      // in the regexp (so a regular expression is required) and whether or
      // not the uflag is needed for the regular expression (for posix classes)
      // TODO: instead of injecting the start/end at this point, just return
      // the BODY of the regexp, along with the start/end portions suitable
      // for binding the start/end in either a joined full-path makeRe context
      // (where we bind to (^|/), or a standalone matchPart context (where
      // we bind to ^, and not /).  Otherwise slashes get duped!
      //
      // In part-matching mode, the start is:
      // - if not isStart: nothing
      // - if traversal possible, but not allowed: ^(?!\.\.?$)
      // - if dots allowed or not possible: ^
      // - if dots possible and not allowed: ^(?!\.)
      // end is:
      // - if not isEnd(): nothing
      // - else: $
      //
      // In full-path matching mode, we put the slash at the START of the
      // pattern, so start is:
      // - if first pattern: same as part-matching mode
      // - if not isStart(): nothing
      // - if traversal possible, but not allowed: /(?!\.\.?(?:$|/))
      // - if dots allowed or not possible: /
      // - if dots possible and not allowed: /(?!\.)
      // end is:
      // - if last pattern, same as part-matching mode
      // - else nothing
      //
      // Always put the (?:$|/) on negated tails, though, because that has to be
      // there to bind the end of the negated pattern portion, and it's easier to
      // just stick it in now rather than try to inject it later in the middle of
      // the pattern.
      //
      // We can just always return the same end, and leave it up to the caller
      // to know whether it's going to be used joined or in parts.
      // And, if the start is adjusted slightly, can do the same there:
      // - if not isStart: nothing
      // - if traversal possible, but not allowed: (?:/|^)(?!\.\.?$)
      // - if dots allowed or not possible: (?:/|^)
      // - if dots possible and not allowed: (?:/|^)(?!\.)
      //
      // But it's better to have a simpler binding without a conditional, for
      // performance, so probably better to return both start options.
      //
      // Then the caller just ignores the end if it's not the first pattern,
      // and the start always gets applied.
      //
      // But that's always going to be $ if it's the ending pattern, or nothing,
      // so the caller can just attach $ at the end of the pattern when building.
      //
      // So the todo is:
      // - better detect what kind of start is needed
      // - return both flavors of starting pattern
      // - attach $ at the end of the pattern when creating the actual RegExp
      //
      // Ah, but wait, no, that all only applies to the root when the first pattern
      // is not an extglob. If the first pattern IS an extglob, then we need all
      // that dot prevention biz to live in the extglob portions, because eg
      // +(*|.x*) can match .xy but not .yx.
      //
      // So, return the two flavors if it's #root and the first child is not an
      // AST, otherwise leave it to the child AST to handle it, and there,
      // use the (?:^|/) style of start binding.
      //
      // Even simplified further:
      // - Since the start for a join is eg /(?!\.) and the start for a part
      // is ^(?!\.), we can just prepend (?!\.) to the pattern (either root
      // or start or whatever) and prepend ^ or / at the Regexp construction.
      toRegExpSource(allowDot) {
        const dot = allowDot ?? !!this.#options.dot;
        if (this.#root === this)
          this.#fillNegs();
        if (!this.type) {
          const noEmpty = this.isStart() && this.isEnd();
          const src = this.#parts.map((p) => {
            const [re, _, hasMagic2, uflag] = typeof p === "string" ? _AST.#parseGlob(p, this.#hasMagic, noEmpty) : p.toRegExpSource(allowDot);
            this.#hasMagic = this.#hasMagic || hasMagic2;
            this.#uflag = this.#uflag || uflag;
            return re;
          }).join("");
          let start2 = "";
          if (this.isStart()) {
            if (typeof this.#parts[0] === "string") {
              const dotTravAllowed = this.#parts.length === 1 && justDots.has(this.#parts[0]);
              if (!dotTravAllowed) {
                const aps = addPatternStart;
                const needNoTrav = (
                  // dots are allowed, and the pattern starts with [ or .
                  dot && aps.has(src.charAt(0)) || // the pattern starts with \., and then [ or .
                  src.startsWith("\\.") && aps.has(src.charAt(2)) || // the pattern starts with \.\., and then [ or .
                  src.startsWith("\\.\\.") && aps.has(src.charAt(4))
                );
                const needNoDot = !dot && !allowDot && aps.has(src.charAt(0));
                start2 = needNoTrav ? startNoTraversal : needNoDot ? startNoDot : "";
              }
            }
          }
          let end = "";
          if (this.isEnd() && this.#root.#filledNegs && this.#parent?.type === "!") {
            end = "(?:$|\\/)";
          }
          const final2 = start2 + src + end;
          return [
            final2,
            unescape(src),
            this.#hasMagic = !!this.#hasMagic,
            this.#uflag
          ];
        }
        const repeated = this.type === "*" || this.type === "+";
        const start = this.type === "!" ? "(?:(?!(?:" : "(?:";
        let body = this.#partsToRegExp(dot);
        if (this.isStart() && this.isEnd() && !body && this.type !== "!") {
          const s = this.toString();
          this.#parts = [s];
          this.type = null;
          this.#hasMagic = void 0;
          return [s, unescape(this.toString()), false, false];
        }
        let bodyDotAllowed = !repeated || allowDot || dot || !startNoDot ? "" : this.#partsToRegExp(true);
        if (bodyDotAllowed === body) {
          bodyDotAllowed = "";
        }
        if (bodyDotAllowed) {
          body = `(?:${body})(?:${bodyDotAllowed})*?`;
        }
        let final = "";
        if (this.type === "!" && this.#emptyExt) {
          final = (this.isStart() && !dot ? startNoDot : "") + starNoEmpty;
        } else {
          const close = this.type === "!" ? (
            // !() must match something,but !(x) can match ''
            "))" + (this.isStart() && !dot && !allowDot ? startNoDot : "") + star + ")"
          ) : this.type === "@" ? ")" : this.type === "?" ? ")?" : this.type === "+" && bodyDotAllowed ? ")" : this.type === "*" && bodyDotAllowed ? `)?` : `)${this.type}`;
          final = start + body + close;
        }
        return [
          final,
          unescape(body),
          this.#hasMagic = !!this.#hasMagic,
          this.#uflag
        ];
      }
      #partsToRegExp(dot) {
        return this.#parts.map((p) => {
          if (typeof p === "string") {
            throw new Error("string type in extglob ast??");
          }
          const [re, _, _hasMagic, uflag] = p.toRegExpSource(dot);
          this.#uflag = this.#uflag || uflag;
          return re;
        }).filter((p) => !(this.isStart() && this.isEnd()) || !!p).join("|");
      }
      static #parseGlob(glob2, hasMagic2, noEmpty = false) {
        let escaping = false;
        let re = "";
        let uflag = false;
        for (let i = 0; i < glob2.length; i++) {
          const c = glob2.charAt(i);
          if (escaping) {
            escaping = false;
            re += (reSpecials.has(c) ? "\\" : "") + c;
            continue;
          }
          if (c === "\\") {
            if (i === glob2.length - 1) {
              re += "\\\\";
            } else {
              escaping = true;
            }
            continue;
          }
          if (c === "[") {
            const [src, needUflag, consumed, magic] = parseClass(glob2, i);
            if (consumed) {
              re += src;
              uflag = uflag || needUflag;
              i += consumed - 1;
              hasMagic2 = hasMagic2 || magic;
              continue;
            }
          }
          if (c === "*") {
            if (noEmpty && glob2 === "*")
              re += starNoEmpty;
            else
              re += star;
            hasMagic2 = true;
            continue;
          }
          if (c === "?") {
            re += qmark;
            hasMagic2 = true;
            continue;
          }
          re += regExpEscape(c);
        }
        return [re, unescape(glob2), !!hasMagic2, uflag];
      }
    };
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/escape.js
var escape;
var init_escape = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/escape.js"() {
    init_importMeta();
    escape = (s, { windowsPathsNoEscape = false } = {}) => {
      return windowsPathsNoEscape ? s.replace(/[?*()[\]]/g, "[$&]") : s.replace(/[?*()[\]\\]/g, "\\$&");
    };
  }
});

// ../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/index.js
var import_brace_expansion, minimatch, starDotExtRE, starDotExtTest, starDotExtTestDot, starDotExtTestNocase, starDotExtTestNocaseDot, starDotStarRE, starDotStarTest, starDotStarTestDot, dotStarRE, dotStarTest, starRE, starTest, starTestDot, qmarksRE, qmarksTestNocase, qmarksTestNocaseDot, qmarksTestDot, qmarksTest, qmarksTestNoExt, qmarksTestNoExtDot, defaultPlatform, path, sep, GLOBSTAR, qmark2, star2, twoStarDot, twoStarNoDot, filter2, ext, defaults, braceExpand, makeRe, match, globMagic, regExpEscape2, Minimatch;
var init_esm = __esm({
  "../../node_modules/.pnpm/minimatch@9.0.5/node_modules/minimatch/dist/esm/index.js"() {
    init_importMeta();
    import_brace_expansion = __toESM(require_brace_expansion(), 1);
    init_assert_valid_pattern();
    init_ast();
    init_escape();
    init_unescape();
    init_ast();
    init_escape();
    init_unescape();
    minimatch = (p, pattern, options = {}) => {
      assertValidPattern(pattern);
      if (!options.nocomment && pattern.charAt(0) === "#") {
        return false;
      }
      return new Minimatch(pattern, options).match(p);
    };
    starDotExtRE = /^\*+([^+@!?\*\[\(]*)$/;
    starDotExtTest = (ext2) => (f) => !f.startsWith(".") && f.endsWith(ext2);
    starDotExtTestDot = (ext2) => (f) => f.endsWith(ext2);
    starDotExtTestNocase = (ext2) => {
      ext2 = ext2.toLowerCase();
      return (f) => !f.startsWith(".") && f.toLowerCase().endsWith(ext2);
    };
    starDotExtTestNocaseDot = (ext2) => {
      ext2 = ext2.toLowerCase();
      return (f) => f.toLowerCase().endsWith(ext2);
    };
    starDotStarRE = /^\*+\.\*+$/;
    starDotStarTest = (f) => !f.startsWith(".") && f.includes(".");
    starDotStarTestDot = (f) => f !== "." && f !== ".." && f.includes(".");
    dotStarRE = /^\.\*+$/;
    dotStarTest = (f) => f !== "." && f !== ".." && f.startsWith(".");
    starRE = /^\*+$/;
    starTest = (f) => f.length !== 0 && !f.startsWith(".");
    starTestDot = (f) => f.length !== 0 && f !== "." && f !== "..";
    qmarksRE = /^\?+([^+@!?\*\[\(]*)?$/;
    qmarksTestNocase = ([$0, ext2 = ""]) => {
      const noext = qmarksTestNoExt([$0]);
      if (!ext2)
        return noext;
      ext2 = ext2.toLowerCase();
      return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
    };
    qmarksTestNocaseDot = ([$0, ext2 = ""]) => {
      const noext = qmarksTestNoExtDot([$0]);
      if (!ext2)
        return noext;
      ext2 = ext2.toLowerCase();
      return (f) => noext(f) && f.toLowerCase().endsWith(ext2);
    };
    qmarksTestDot = ([$0, ext2 = ""]) => {
      const noext = qmarksTestNoExtDot([$0]);
      return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
    };
    qmarksTest = ([$0, ext2 = ""]) => {
      const noext = qmarksTestNoExt([$0]);
      return !ext2 ? noext : (f) => noext(f) && f.endsWith(ext2);
    };
    qmarksTestNoExt = ([$0]) => {
      const len = $0.length;
      return (f) => f.length === len && !f.startsWith(".");
    };
    qmarksTestNoExtDot = ([$0]) => {
      const len = $0.length;
      return (f) => f.length === len && f !== "." && f !== "..";
    };
    defaultPlatform = typeof process === "object" && process ? typeof process.env === "object" && process.env && process.env.__MINIMATCH_TESTING_PLATFORM__ || process.platform : "posix";
    path = {
      win32: { sep: "\\" },
      posix: { sep: "/" }
    };
    sep = defaultPlatform === "win32" ? path.win32.sep : path.posix.sep;
    minimatch.sep = sep;
    GLOBSTAR = Symbol("globstar **");
    minimatch.GLOBSTAR = GLOBSTAR;
    qmark2 = "[^/]";
    star2 = qmark2 + "*?";
    twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
    twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
    filter2 = (pattern, options = {}) => (p) => minimatch(p, pattern, options);
    minimatch.filter = filter2;
    ext = (a, b = {}) => Object.assign({}, a, b);
    defaults = (def) => {
      if (!def || typeof def !== "object" || !Object.keys(def).length) {
        return minimatch;
      }
      const orig = minimatch;
      const m = (p, pattern, options = {}) => orig(p, pattern, ext(def, options));
      return Object.assign(m, {
        Minimatch: class Minimatch extends orig.Minimatch {
          constructor(pattern, options = {}) {
            super(pattern, ext(def, options));
          }
          static defaults(options) {
            return orig.defaults(ext(def, options)).Minimatch;
          }
        },
        AST: class AST extends orig.AST {
          /* c8 ignore start */
          constructor(type, parent, options = {}) {
            super(type, parent, ext(def, options));
          }
          /* c8 ignore stop */
          static fromGlob(pattern, options = {}) {
            return orig.AST.fromGlob(pattern, ext(def, options));
          }
        },
        unescape: (s, options = {}) => orig.unescape(s, ext(def, options)),
        escape: (s, options = {}) => orig.escape(s, ext(def, options)),
        filter: (pattern, options = {}) => orig.filter(pattern, ext(def, options)),
        defaults: (options) => orig.defaults(ext(def, options)),
        makeRe: (pattern, options = {}) => orig.makeRe(pattern, ext(def, options)),
        braceExpand: (pattern, options = {}) => orig.braceExpand(pattern, ext(def, options)),
        match: (list, pattern, options = {}) => orig.match(list, pattern, ext(def, options)),
        sep: orig.sep,
        GLOBSTAR
      });
    };
    minimatch.defaults = defaults;
    braceExpand = (pattern, options = {}) => {
      assertValidPattern(pattern);
      if (options.nobrace || !/\{(?:(?!\{).)*\}/.test(pattern)) {
        return [pattern];
      }
      return (0, import_brace_expansion.default)(pattern);
    };
    minimatch.braceExpand = braceExpand;
    makeRe = (pattern, options = {}) => new Minimatch(pattern, options).makeRe();
    minimatch.makeRe = makeRe;
    match = (list, pattern, options = {}) => {
      const mm = new Minimatch(pattern, options);
      list = list.filter((f) => mm.match(f));
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list;
    };
    minimatch.match = match;
    globMagic = /[?*]|[+@!]\(.*?\)|\[|\]/;
    regExpEscape2 = (s) => s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    Minimatch = class {
      options;
      set;
      pattern;
      windowsPathsNoEscape;
      nonegate;
      negate;
      comment;
      empty;
      preserveMultipleSlashes;
      partial;
      globSet;
      globParts;
      nocase;
      isWindows;
      platform;
      windowsNoMagicRoot;
      regexp;
      constructor(pattern, options = {}) {
        assertValidPattern(pattern);
        options = options || {};
        this.options = options;
        this.pattern = pattern;
        this.platform = options.platform || defaultPlatform;
        this.isWindows = this.platform === "win32";
        this.windowsPathsNoEscape = !!options.windowsPathsNoEscape || options.allowWindowsEscape === false;
        if (this.windowsPathsNoEscape) {
          this.pattern = this.pattern.replace(/\\/g, "/");
        }
        this.preserveMultipleSlashes = !!options.preserveMultipleSlashes;
        this.regexp = null;
        this.negate = false;
        this.nonegate = !!options.nonegate;
        this.comment = false;
        this.empty = false;
        this.partial = !!options.partial;
        this.nocase = !!this.options.nocase;
        this.windowsNoMagicRoot = options.windowsNoMagicRoot !== void 0 ? options.windowsNoMagicRoot : !!(this.isWindows && this.nocase);
        this.globSet = [];
        this.globParts = [];
        this.set = [];
        this.make();
      }
      hasMagic() {
        if (this.options.magicalBraces && this.set.length > 1) {
          return true;
        }
        for (const pattern of this.set) {
          for (const part of pattern) {
            if (typeof part !== "string")
              return true;
          }
        }
        return false;
      }
      debug(..._) {
      }
      make() {
        const pattern = this.pattern;
        const options = this.options;
        if (!options.nocomment && pattern.charAt(0) === "#") {
          this.comment = true;
          return;
        }
        if (!pattern) {
          this.empty = true;
          return;
        }
        this.parseNegate();
        this.globSet = [...new Set(this.braceExpand())];
        if (options.debug) {
          this.debug = (...args) => console.error(...args);
        }
        this.debug(this.pattern, this.globSet);
        const rawGlobParts = this.globSet.map((s) => this.slashSplit(s));
        this.globParts = this.preprocess(rawGlobParts);
        this.debug(this.pattern, this.globParts);
        let set = this.globParts.map((s, _, __) => {
          if (this.isWindows && this.windowsNoMagicRoot) {
            const isUNC = s[0] === "" && s[1] === "" && (s[2] === "?" || !globMagic.test(s[2])) && !globMagic.test(s[3]);
            const isDrive = /^[a-z]:/i.test(s[0]);
            if (isUNC) {
              return [...s.slice(0, 4), ...s.slice(4).map((ss) => this.parse(ss))];
            } else if (isDrive) {
              return [s[0], ...s.slice(1).map((ss) => this.parse(ss))];
            }
          }
          return s.map((ss) => this.parse(ss));
        });
        this.debug(this.pattern, set);
        this.set = set.filter((s) => s.indexOf(false) === -1);
        if (this.isWindows) {
          for (let i = 0; i < this.set.length; i++) {
            const p = this.set[i];
            if (p[0] === "" && p[1] === "" && this.globParts[i][2] === "?" && typeof p[3] === "string" && /^[a-z]:$/i.test(p[3])) {
              p[2] = "?";
            }
          }
        }
        this.debug(this.pattern, this.set);
      }
      // various transforms to equivalent pattern sets that are
      // faster to process in a filesystem walk.  The goal is to
      // eliminate what we can, and push all ** patterns as far
      // to the right as possible, even if it increases the number
      // of patterns that we have to process.
      preprocess(globParts) {
        if (this.options.noglobstar) {
          for (let i = 0; i < globParts.length; i++) {
            for (let j = 0; j < globParts[i].length; j++) {
              if (globParts[i][j] === "**") {
                globParts[i][j] = "*";
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options;
        if (optimizationLevel >= 2) {
          globParts = this.firstPhasePreProcess(globParts);
          globParts = this.secondPhasePreProcess(globParts);
        } else if (optimizationLevel >= 1) {
          globParts = this.levelOneOptimize(globParts);
        } else {
          globParts = this.adjascentGlobstarOptimize(globParts);
        }
        return globParts;
      }
      // just get rid of adjascent ** portions
      adjascentGlobstarOptimize(globParts) {
        return globParts.map((parts) => {
          let gs = -1;
          while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
            let i = gs;
            while (parts[i + 1] === "**") {
              i++;
            }
            if (i !== gs) {
              parts.splice(gs, i - gs);
            }
          }
          return parts;
        });
      }
      // get rid of adjascent ** and resolve .. portions
      levelOneOptimize(globParts) {
        return globParts.map((parts) => {
          parts = parts.reduce((set, part) => {
            const prev = set[set.length - 1];
            if (part === "**" && prev === "**") {
              return set;
            }
            if (part === "..") {
              if (prev && prev !== ".." && prev !== "." && prev !== "**") {
                set.pop();
                return set;
              }
            }
            set.push(part);
            return set;
          }, []);
          return parts.length === 0 ? [""] : parts;
        });
      }
      levelTwoFileOptimize(parts) {
        if (!Array.isArray(parts)) {
          parts = this.slashSplit(parts);
        }
        let didSomething = false;
        do {
          didSomething = false;
          if (!this.preserveMultipleSlashes) {
            for (let i = 1; i < parts.length - 1; i++) {
              const p = parts[i];
              if (i === 1 && p === "" && parts[0] === "")
                continue;
              if (p === "." || p === "") {
                didSomething = true;
                parts.splice(i, 1);
                i--;
              }
            }
            if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
              didSomething = true;
              parts.pop();
            }
          }
          let dd = 0;
          while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
            const p = parts[dd - 1];
            if (p && p !== "." && p !== ".." && p !== "**") {
              didSomething = true;
              parts.splice(dd - 1, 2);
              dd -= 2;
            }
          }
        } while (didSomething);
        return parts.length === 0 ? [""] : parts;
      }
      // First phase: single-pattern processing
      // <pre> is 1 or more portions
      // <rest> is 1 or more portions
      // <p> is any portion other than ., .., '', or **
      // <e> is . or ''
      //
      // **/.. is *brutal* for filesystem walking performance, because
      // it effectively resets the recursive walk each time it occurs,
      // and ** cannot be reduced out by a .. pattern part like a regexp
      // or most strings (other than .., ., and '') can be.
      //
      // <pre>/**/../<p>/<p>/<rest> -> {<pre>/../<p>/<p>/<rest>,<pre>/**/<p>/<p>/<rest>}
      // <pre>/<e>/<rest> -> <pre>/<rest>
      // <pre>/<p>/../<rest> -> <pre>/<rest>
      // **/**/<rest> -> **/<rest>
      //
      // **/*/<rest> -> */**/<rest> <== not valid because ** doesn't follow
      // this WOULD be allowed if ** did follow symlinks, or * didn't
      firstPhasePreProcess(globParts) {
        let didSomething = false;
        do {
          didSomething = false;
          for (let parts of globParts) {
            let gs = -1;
            while (-1 !== (gs = parts.indexOf("**", gs + 1))) {
              let gss = gs;
              while (parts[gss + 1] === "**") {
                gss++;
              }
              if (gss > gs) {
                parts.splice(gs + 1, gss - gs);
              }
              let next = parts[gs + 1];
              const p = parts[gs + 2];
              const p2 = parts[gs + 3];
              if (next !== "..")
                continue;
              if (!p || p === "." || p === ".." || !p2 || p2 === "." || p2 === "..") {
                continue;
              }
              didSomething = true;
              parts.splice(gs, 1);
              const other = parts.slice(0);
              other[gs] = "**";
              globParts.push(other);
              gs--;
            }
            if (!this.preserveMultipleSlashes) {
              for (let i = 1; i < parts.length - 1; i++) {
                const p = parts[i];
                if (i === 1 && p === "" && parts[0] === "")
                  continue;
                if (p === "." || p === "") {
                  didSomething = true;
                  parts.splice(i, 1);
                  i--;
                }
              }
              if (parts[0] === "." && parts.length === 2 && (parts[1] === "." || parts[1] === "")) {
                didSomething = true;
                parts.pop();
              }
            }
            let dd = 0;
            while (-1 !== (dd = parts.indexOf("..", dd + 1))) {
              const p = parts[dd - 1];
              if (p && p !== "." && p !== ".." && p !== "**") {
                didSomething = true;
                const needDot = dd === 1 && parts[dd + 1] === "**";
                const splin = needDot ? ["."] : [];
                parts.splice(dd - 1, 2, ...splin);
                if (parts.length === 0)
                  parts.push("");
                dd -= 2;
              }
            }
          }
        } while (didSomething);
        return globParts;
      }
      // second phase: multi-pattern dedupes
      // {<pre>/*/<rest>,<pre>/<p>/<rest>} -> <pre>/*/<rest>
      // {<pre>/<rest>,<pre>/<rest>} -> <pre>/<rest>
      // {<pre>/**/<rest>,<pre>/<rest>} -> <pre>/**/<rest>
      //
      // {<pre>/**/<rest>,<pre>/**/<p>/<rest>} -> <pre>/**/<rest>
      // ^-- not valid because ** doens't follow symlinks
      secondPhasePreProcess(globParts) {
        for (let i = 0; i < globParts.length - 1; i++) {
          for (let j = i + 1; j < globParts.length; j++) {
            const matched = this.partsMatch(globParts[i], globParts[j], !this.preserveMultipleSlashes);
            if (matched) {
              globParts[i] = [];
              globParts[j] = matched;
              break;
            }
          }
        }
        return globParts.filter((gs) => gs.length);
      }
      partsMatch(a, b, emptyGSMatch = false) {
        let ai = 0;
        let bi = 0;
        let result = [];
        let which = "";
        while (ai < a.length && bi < b.length) {
          if (a[ai] === b[bi]) {
            result.push(which === "b" ? b[bi] : a[ai]);
            ai++;
            bi++;
          } else if (emptyGSMatch && a[ai] === "**" && b[bi] === a[ai + 1]) {
            result.push(a[ai]);
            ai++;
          } else if (emptyGSMatch && b[bi] === "**" && a[ai] === b[bi + 1]) {
            result.push(b[bi]);
            bi++;
          } else if (a[ai] === "*" && b[bi] && (this.options.dot || !b[bi].startsWith(".")) && b[bi] !== "**") {
            if (which === "b")
              return false;
            which = "a";
            result.push(a[ai]);
            ai++;
            bi++;
          } else if (b[bi] === "*" && a[ai] && (this.options.dot || !a[ai].startsWith(".")) && a[ai] !== "**") {
            if (which === "a")
              return false;
            which = "b";
            result.push(b[bi]);
            ai++;
            bi++;
          } else {
            return false;
          }
        }
        return a.length === b.length && result;
      }
      parseNegate() {
        if (this.nonegate)
          return;
        const pattern = this.pattern;
        let negate2 = false;
        let negateOffset = 0;
        for (let i = 0; i < pattern.length && pattern.charAt(i) === "!"; i++) {
          negate2 = !negate2;
          negateOffset++;
        }
        if (negateOffset)
          this.pattern = pattern.slice(negateOffset);
        this.negate = negate2;
      }
      // set partial to true to test if, for example,
      // "/a/b" matches the start of "/*/b/*/d"
      // Partial means, if you run out of file before you run
      // out of pattern, then that's fine, as long as all
      // the parts match.
      matchOne(file, pattern, partial = false) {
        const options = this.options;
        if (this.isWindows) {
          const fileDrive = typeof file[0] === "string" && /^[a-z]:$/i.test(file[0]);
          const fileUNC = !fileDrive && file[0] === "" && file[1] === "" && file[2] === "?" && /^[a-z]:$/i.test(file[3]);
          const patternDrive = typeof pattern[0] === "string" && /^[a-z]:$/i.test(pattern[0]);
          const patternUNC = !patternDrive && pattern[0] === "" && pattern[1] === "" && pattern[2] === "?" && typeof pattern[3] === "string" && /^[a-z]:$/i.test(pattern[3]);
          const fdi = fileUNC ? 3 : fileDrive ? 0 : void 0;
          const pdi = patternUNC ? 3 : patternDrive ? 0 : void 0;
          if (typeof fdi === "number" && typeof pdi === "number") {
            const [fd, pd] = [file[fdi], pattern[pdi]];
            if (fd.toLowerCase() === pd.toLowerCase()) {
              pattern[pdi] = fd;
              if (pdi > fdi) {
                pattern = pattern.slice(pdi);
              } else if (fdi > pdi) {
                file = file.slice(fdi);
              }
            }
          }
        }
        const { optimizationLevel = 1 } = this.options;
        if (optimizationLevel >= 2) {
          file = this.levelTwoFileOptimize(file);
        }
        this.debug("matchOne", this, { file, pattern });
        this.debug("matchOne", file.length, pattern.length);
        for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
          this.debug("matchOne loop");
          var p = pattern[pi];
          var f = file[fi];
          this.debug(pattern, p, f);
          if (p === false) {
            return false;
          }
          if (p === GLOBSTAR) {
            this.debug("GLOBSTAR", [pattern, p, f]);
            var fr = fi;
            var pr = pi + 1;
            if (pr === pl) {
              this.debug("** at the end");
              for (; fi < fl; fi++) {
                if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
                  return false;
              }
              return true;
            }
            while (fr < fl) {
              var swallowee = file[fr];
              this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
              if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                this.debug("globstar found match!", fr, fl, swallowee);
                return true;
              } else {
                if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
                  this.debug("dot detected!", file, fr, pattern, pr);
                  break;
                }
                this.debug("globstar swallow a segment, and continue");
                fr++;
              }
            }
            if (partial) {
              this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
              if (fr === fl) {
                return true;
              }
            }
            return false;
          }
          let hit;
          if (typeof p === "string") {
            hit = f === p;
            this.debug("string match", p, f, hit);
          } else {
            hit = p.test(f);
            this.debug("pattern match", p, f, hit);
          }
          if (!hit)
            return false;
        }
        if (fi === fl && pi === pl) {
          return true;
        } else if (fi === fl) {
          return partial;
        } else if (pi === pl) {
          return fi === fl - 1 && file[fi] === "";
        } else {
          throw new Error("wtf?");
        }
      }
      braceExpand() {
        return braceExpand(this.pattern, this.options);
      }
      parse(pattern) {
        assertValidPattern(pattern);
        const options = this.options;
        if (pattern === "**")
          return GLOBSTAR;
        if (pattern === "")
          return "";
        let m;
        let fastTest = null;
        if (m = pattern.match(starRE)) {
          fastTest = options.dot ? starTestDot : starTest;
        } else if (m = pattern.match(starDotExtRE)) {
          fastTest = (options.nocase ? options.dot ? starDotExtTestNocaseDot : starDotExtTestNocase : options.dot ? starDotExtTestDot : starDotExtTest)(m[1]);
        } else if (m = pattern.match(qmarksRE)) {
          fastTest = (options.nocase ? options.dot ? qmarksTestNocaseDot : qmarksTestNocase : options.dot ? qmarksTestDot : qmarksTest)(m);
        } else if (m = pattern.match(starDotStarRE)) {
          fastTest = options.dot ? starDotStarTestDot : starDotStarTest;
        } else if (m = pattern.match(dotStarRE)) {
          fastTest = dotStarTest;
        }
        const re = AST.fromGlob(pattern, this.options).toMMPattern();
        if (fastTest && typeof re === "object") {
          Reflect.defineProperty(re, "test", { value: fastTest });
        }
        return re;
      }
      makeRe() {
        if (this.regexp || this.regexp === false)
          return this.regexp;
        const set = this.set;
        if (!set.length) {
          this.regexp = false;
          return this.regexp;
        }
        const options = this.options;
        const twoStar = options.noglobstar ? star2 : options.dot ? twoStarDot : twoStarNoDot;
        const flags = new Set(options.nocase ? ["i"] : []);
        let re = set.map((pattern) => {
          const pp = pattern.map((p) => {
            if (p instanceof RegExp) {
              for (const f of p.flags.split(""))
                flags.add(f);
            }
            return typeof p === "string" ? regExpEscape2(p) : p === GLOBSTAR ? GLOBSTAR : p._src;
          });
          pp.forEach((p, i) => {
            const next = pp[i + 1];
            const prev = pp[i - 1];
            if (p !== GLOBSTAR || prev === GLOBSTAR) {
              return;
            }
            if (prev === void 0) {
              if (next !== void 0 && next !== GLOBSTAR) {
                pp[i + 1] = "(?:\\/|" + twoStar + "\\/)?" + next;
              } else {
                pp[i] = twoStar;
              }
            } else if (next === void 0) {
              pp[i - 1] = prev + "(?:\\/|" + twoStar + ")?";
            } else if (next !== GLOBSTAR) {
              pp[i - 1] = prev + "(?:\\/|\\/" + twoStar + "\\/)" + next;
              pp[i + 1] = GLOBSTAR;
            }
          });
          return pp.filter((p) => p !== GLOBSTAR).join("/");
        }).join("|");
        const [open, close] = set.length > 1 ? ["(?:", ")"] : ["", ""];
        re = "^" + open + re + close + "$";
        if (this.negate)
          re = "^(?!" + re + ").+$";
        try {
          this.regexp = new RegExp(re, [...flags].join(""));
        } catch (ex) {
          this.regexp = false;
        }
        return this.regexp;
      }
      slashSplit(p) {
        if (this.preserveMultipleSlashes) {
          return p.split("/");
        } else if (this.isWindows && /^\/\/[^\/]+/.test(p)) {
          return ["", ...p.split(/\/+/)];
        } else {
          return p.split(/\/+/);
        }
      }
      match(f, partial = this.partial) {
        this.debug("match", f, this.pattern);
        if (this.comment) {
          return false;
        }
        if (this.empty) {
          return f === "";
        }
        if (f === "/" && partial) {
          return true;
        }
        const options = this.options;
        if (this.isWindows) {
          f = f.split("\\").join("/");
        }
        const ff = this.slashSplit(f);
        this.debug(this.pattern, "split", ff);
        const set = this.set;
        this.debug(this.pattern, "set", set);
        let filename = ff[ff.length - 1];
        if (!filename) {
          for (let i = ff.length - 2; !filename && i >= 0; i--) {
            filename = ff[i];
          }
        }
        for (let i = 0; i < set.length; i++) {
          const pattern = set[i];
          let file = ff;
          if (options.matchBase && pattern.length === 1) {
            file = [filename];
          }
          const hit = this.matchOne(file, pattern, partial);
          if (hit) {
            if (options.flipNegate) {
              return true;
            }
            return !this.negate;
          }
        }
        if (options.flipNegate) {
          return false;
        }
        return this.negate;
      }
      static defaults(def) {
        return minimatch.defaults(def).Minimatch;
      }
    };
    minimatch.AST = AST;
    minimatch.Minimatch = Minimatch;
    minimatch.escape = escape;
    minimatch.unescape = unescape;
  }
});

// ../../node_modules/.pnpm/lru-cache@10.4.0/node_modules/lru-cache/dist/esm/index.js
var perf, warned, PROCESS, emitWarning, AC, AS, shouldWarn, TYPE, isPosInt, getUintArray, ZeroArray, Stack, LRUCache;
var init_esm2 = __esm({
  "../../node_modules/.pnpm/lru-cache@10.4.0/node_modules/lru-cache/dist/esm/index.js"() {
    init_importMeta();
    perf = typeof performance === "object" && performance && typeof performance.now === "function" ? performance : Date;
    warned = /* @__PURE__ */ new Set();
    PROCESS = typeof process === "object" && !!process ? process : {};
    emitWarning = (msg, type, code2, fn) => {
      typeof PROCESS.emitWarning === "function" ? PROCESS.emitWarning(msg, type, code2, fn) : console.error(`[${code2}] ${type}: ${msg}`);
    };
    AC = globalThis.AbortController;
    AS = globalThis.AbortSignal;
    if (typeof AC === "undefined") {
      AS = class AbortSignal {
        onabort;
        _onabort = [];
        reason;
        aborted = false;
        addEventListener(_, fn) {
          this._onabort.push(fn);
        }
      };
      AC = class AbortController {
        constructor() {
          warnACPolyfill();
        }
        signal = new AS();
        abort(reason) {
          if (this.signal.aborted)
            return;
          this.signal.reason = reason;
          this.signal.aborted = true;
          for (const fn of this.signal._onabort) {
            fn(reason);
          }
          this.signal.onabort?.(reason);
        }
      };
      let printACPolyfillWarning = PROCESS.env?.LRU_CACHE_IGNORE_AC_WARNING !== "1";
      const warnACPolyfill = () => {
        if (!printACPolyfillWarning)
          return;
        printACPolyfillWarning = false;
        emitWarning("AbortController is not defined. If using lru-cache in node 14, load an AbortController polyfill from the `node-abort-controller` package. A minimal polyfill is provided for use by LRUCache.fetch(), but it should not be relied upon in other contexts (eg, passing it to other APIs that use AbortController/AbortSignal might have undesirable effects). You may disable this with LRU_CACHE_IGNORE_AC_WARNING=1 in the env.", "NO_ABORT_CONTROLLER", "ENOTSUP", warnACPolyfill);
      };
    }
    shouldWarn = (code2) => !warned.has(code2);
    TYPE = Symbol("type");
    isPosInt = (n) => n && n === Math.floor(n) && n > 0 && isFinite(n);
    getUintArray = (max2) => !isPosInt(max2) ? null : max2 <= Math.pow(2, 8) ? Uint8Array : max2 <= Math.pow(2, 16) ? Uint16Array : max2 <= Math.pow(2, 32) ? Uint32Array : max2 <= Number.MAX_SAFE_INTEGER ? ZeroArray : null;
    ZeroArray = class extends Array {
      constructor(size) {
        super(size);
        this.fill(0);
      }
    };
    Stack = class _Stack {
      heap;
      length;
      // private constructor
      static #constructing = false;
      static create(max2) {
        const HeapCls = getUintArray(max2);
        if (!HeapCls)
          return [];
        _Stack.#constructing = true;
        const s = new _Stack(max2, HeapCls);
        _Stack.#constructing = false;
        return s;
      }
      constructor(max2, HeapCls) {
        if (!_Stack.#constructing) {
          throw new TypeError("instantiate Stack using Stack.create(n)");
        }
        this.heap = new HeapCls(max2);
        this.length = 0;
      }
      push(n) {
        this.heap[this.length++] = n;
      }
      pop() {
        return this.heap[--this.length];
      }
    };
    LRUCache = class _LRUCache {
      // options that cannot be changed without disaster
      #max;
      #maxSize;
      #dispose;
      #disposeAfter;
      #fetchMethod;
      #memoMethod;
      /**
       * {@link LRUCache.OptionsBase.ttl}
       */
      ttl;
      /**
       * {@link LRUCache.OptionsBase.ttlResolution}
       */
      ttlResolution;
      /**
       * {@link LRUCache.OptionsBase.ttlAutopurge}
       */
      ttlAutopurge;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnGet}
       */
      updateAgeOnGet;
      /**
       * {@link LRUCache.OptionsBase.updateAgeOnHas}
       */
      updateAgeOnHas;
      /**
       * {@link LRUCache.OptionsBase.allowStale}
       */
      allowStale;
      /**
       * {@link LRUCache.OptionsBase.noDisposeOnSet}
       */
      noDisposeOnSet;
      /**
       * {@link LRUCache.OptionsBase.noUpdateTTL}
       */
      noUpdateTTL;
      /**
       * {@link LRUCache.OptionsBase.maxEntrySize}
       */
      maxEntrySize;
      /**
       * {@link LRUCache.OptionsBase.sizeCalculation}
       */
      sizeCalculation;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnFetchRejection}
       */
      noDeleteOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.noDeleteOnStaleGet}
       */
      noDeleteOnStaleGet;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchAbort}
       */
      allowStaleOnFetchAbort;
      /**
       * {@link LRUCache.OptionsBase.allowStaleOnFetchRejection}
       */
      allowStaleOnFetchRejection;
      /**
       * {@link LRUCache.OptionsBase.ignoreFetchAbort}
       */
      ignoreFetchAbort;
      // computed properties
      #size;
      #calculatedSize;
      #keyMap;
      #keyList;
      #valList;
      #next;
      #prev;
      #head;
      #tail;
      #free;
      #disposed;
      #sizes;
      #starts;
      #ttls;
      #hasDispose;
      #hasFetchMethod;
      #hasDisposeAfter;
      /**
       * Do not call this method unless you need to inspect the
       * inner workings of the cache.  If anything returned by this
       * object is modified in any way, strange breakage may occur.
       *
       * These fields are private for a reason!
       *
       * @internal
       */
      static unsafeExposeInternals(c) {
        return {
          // properties
          starts: c.#starts,
          ttls: c.#ttls,
          sizes: c.#sizes,
          keyMap: c.#keyMap,
          keyList: c.#keyList,
          valList: c.#valList,
          next: c.#next,
          prev: c.#prev,
          get head() {
            return c.#head;
          },
          get tail() {
            return c.#tail;
          },
          free: c.#free,
          // methods
          isBackgroundFetch: (p) => c.#isBackgroundFetch(p),
          backgroundFetch: (k, index2, options, context) => c.#backgroundFetch(k, index2, options, context),
          moveToTail: (index2) => c.#moveToTail(index2),
          indexes: (options) => c.#indexes(options),
          rindexes: (options) => c.#rindexes(options),
          isStale: (index2) => c.#isStale(index2)
        };
      }
      // Protected read-only members
      /**
       * {@link LRUCache.OptionsBase.max} (read-only)
       */
      get max() {
        return this.#max;
      }
      /**
       * {@link LRUCache.OptionsBase.maxSize} (read-only)
       */
      get maxSize() {
        return this.#maxSize;
      }
      /**
       * The total computed size of items in the cache (read-only)
       */
      get calculatedSize() {
        return this.#calculatedSize;
      }
      /**
       * The number of items stored in the cache (read-only)
       */
      get size() {
        return this.#size;
      }
      /**
       * {@link LRUCache.OptionsBase.fetchMethod} (read-only)
       */
      get fetchMethod() {
        return this.#fetchMethod;
      }
      get memoMethod() {
        return this.#memoMethod;
      }
      /**
       * {@link LRUCache.OptionsBase.dispose} (read-only)
       */
      get dispose() {
        return this.#dispose;
      }
      /**
       * {@link LRUCache.OptionsBase.disposeAfter} (read-only)
       */
      get disposeAfter() {
        return this.#disposeAfter;
      }
      constructor(options) {
        const { max: max2 = 0, ttl, ttlResolution = 1, ttlAutopurge, updateAgeOnGet, updateAgeOnHas, allowStale, dispose, disposeAfter, noDisposeOnSet, noUpdateTTL, maxSize = 0, maxEntrySize = 0, sizeCalculation, fetchMethod, memoMethod, noDeleteOnFetchRejection, noDeleteOnStaleGet, allowStaleOnFetchRejection, allowStaleOnFetchAbort, ignoreFetchAbort } = options;
        if (max2 !== 0 && !isPosInt(max2)) {
          throw new TypeError("max option must be a nonnegative integer");
        }
        const UintArray = max2 ? getUintArray(max2) : Array;
        if (!UintArray) {
          throw new Error("invalid max value: " + max2);
        }
        this.#max = max2;
        this.#maxSize = maxSize;
        this.maxEntrySize = maxEntrySize || this.#maxSize;
        this.sizeCalculation = sizeCalculation;
        if (this.sizeCalculation) {
          if (!this.#maxSize && !this.maxEntrySize) {
            throw new TypeError("cannot set sizeCalculation without setting maxSize or maxEntrySize");
          }
          if (typeof this.sizeCalculation !== "function") {
            throw new TypeError("sizeCalculation set to non-function");
          }
        }
        if (memoMethod !== void 0 && typeof memoMethod !== "function") {
          throw new TypeError("memoMethod must be a function if defined");
        }
        this.#memoMethod = memoMethod;
        if (fetchMethod !== void 0 && typeof fetchMethod !== "function") {
          throw new TypeError("fetchMethod must be a function if specified");
        }
        this.#fetchMethod = fetchMethod;
        this.#hasFetchMethod = !!fetchMethod;
        this.#keyMap = /* @__PURE__ */ new Map();
        this.#keyList = new Array(max2).fill(void 0);
        this.#valList = new Array(max2).fill(void 0);
        this.#next = new UintArray(max2);
        this.#prev = new UintArray(max2);
        this.#head = 0;
        this.#tail = 0;
        this.#free = Stack.create(max2);
        this.#size = 0;
        this.#calculatedSize = 0;
        if (typeof dispose === "function") {
          this.#dispose = dispose;
        }
        if (typeof disposeAfter === "function") {
          this.#disposeAfter = disposeAfter;
          this.#disposed = [];
        } else {
          this.#disposeAfter = void 0;
          this.#disposed = void 0;
        }
        this.#hasDispose = !!this.#dispose;
        this.#hasDisposeAfter = !!this.#disposeAfter;
        this.noDisposeOnSet = !!noDisposeOnSet;
        this.noUpdateTTL = !!noUpdateTTL;
        this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection;
        this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection;
        this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort;
        this.ignoreFetchAbort = !!ignoreFetchAbort;
        if (this.maxEntrySize !== 0) {
          if (this.#maxSize !== 0) {
            if (!isPosInt(this.#maxSize)) {
              throw new TypeError("maxSize must be a positive integer if specified");
            }
          }
          if (!isPosInt(this.maxEntrySize)) {
            throw new TypeError("maxEntrySize must be a positive integer if specified");
          }
          this.#initializeSizeTracking();
        }
        this.allowStale = !!allowStale;
        this.noDeleteOnStaleGet = !!noDeleteOnStaleGet;
        this.updateAgeOnGet = !!updateAgeOnGet;
        this.updateAgeOnHas = !!updateAgeOnHas;
        this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0 ? ttlResolution : 1;
        this.ttlAutopurge = !!ttlAutopurge;
        this.ttl = ttl || 0;
        if (this.ttl) {
          if (!isPosInt(this.ttl)) {
            throw new TypeError("ttl must be a positive integer if specified");
          }
          this.#initializeTTLTracking();
        }
        if (this.#max === 0 && this.ttl === 0 && this.#maxSize === 0) {
          throw new TypeError("At least one of max, maxSize, or ttl is required");
        }
        if (!this.ttlAutopurge && !this.#max && !this.#maxSize) {
          const code2 = "LRU_CACHE_UNBOUNDED";
          if (shouldWarn(code2)) {
            warned.add(code2);
            const msg = "TTL caching without ttlAutopurge, max, or maxSize can result in unbounded memory consumption.";
            emitWarning(msg, "UnboundedCacheWarning", code2, _LRUCache);
          }
        }
      }
      /**
       * Return the number of ms left in the item's TTL. If item is not in cache,
       * returns `0`. Returns `Infinity` if item is in cache without a defined TTL.
       */
      getRemainingTTL(key) {
        return this.#keyMap.has(key) ? Infinity : 0;
      }
      #initializeTTLTracking() {
        const ttls = new ZeroArray(this.#max);
        const starts = new ZeroArray(this.#max);
        this.#ttls = ttls;
        this.#starts = starts;
        this.#setItemTTL = (index2, ttl, start = perf.now()) => {
          starts[index2] = ttl !== 0 ? start : 0;
          ttls[index2] = ttl;
          if (ttl !== 0 && this.ttlAutopurge) {
            const t = setTimeout(() => {
              if (this.#isStale(index2)) {
                this.#delete(this.#keyList[index2], "expire");
              }
            }, ttl + 1);
            if (t.unref) {
              t.unref();
            }
          }
        };
        this.#updateItemAge = (index2) => {
          starts[index2] = ttls[index2] !== 0 ? perf.now() : 0;
        };
        this.#statusTTL = (status, index2) => {
          if (ttls[index2]) {
            const ttl = ttls[index2];
            const start = starts[index2];
            if (!ttl || !start)
              return;
            status.ttl = ttl;
            status.start = start;
            status.now = cachedNow || getNow();
            const age = status.now - start;
            status.remainingTTL = ttl - age;
          }
        };
        let cachedNow = 0;
        const getNow = () => {
          const n = perf.now();
          if (this.ttlResolution > 0) {
            cachedNow = n;
            const t = setTimeout(() => cachedNow = 0, this.ttlResolution);
            if (t.unref) {
              t.unref();
            }
          }
          return n;
        };
        this.getRemainingTTL = (key) => {
          const index2 = this.#keyMap.get(key);
          if (index2 === void 0) {
            return 0;
          }
          const ttl = ttls[index2];
          const start = starts[index2];
          if (!ttl || !start) {
            return Infinity;
          }
          const age = (cachedNow || getNow()) - start;
          return ttl - age;
        };
        this.#isStale = (index2) => {
          const s = starts[index2];
          const t = ttls[index2];
          return !!t && !!s && (cachedNow || getNow()) - s > t;
        };
      }
      // conditionally set private methods related to TTL
      #updateItemAge = () => {
      };
      #statusTTL = () => {
      };
      #setItemTTL = () => {
      };
      /* c8 ignore stop */
      #isStale = () => false;
      #initializeSizeTracking() {
        const sizes = new ZeroArray(this.#max);
        this.#calculatedSize = 0;
        this.#sizes = sizes;
        this.#removeItemSize = (index2) => {
          this.#calculatedSize -= sizes[index2];
          sizes[index2] = 0;
        };
        this.#requireSize = (k, v, size, sizeCalculation) => {
          if (this.#isBackgroundFetch(v)) {
            return 0;
          }
          if (!isPosInt(size)) {
            if (sizeCalculation) {
              if (typeof sizeCalculation !== "function") {
                throw new TypeError("sizeCalculation must be a function");
              }
              size = sizeCalculation(v, k);
              if (!isPosInt(size)) {
                throw new TypeError("sizeCalculation return invalid (expect positive integer)");
              }
            } else {
              throw new TypeError("invalid size value (must be positive integer). When maxSize or maxEntrySize is used, sizeCalculation or size must be set.");
            }
          }
          return size;
        };
        this.#addItemSize = (index2, size, status) => {
          sizes[index2] = size;
          if (this.#maxSize) {
            const maxSize = this.#maxSize - sizes[index2];
            while (this.#calculatedSize > maxSize) {
              this.#evict(true);
            }
          }
          this.#calculatedSize += sizes[index2];
          if (status) {
            status.entrySize = size;
            status.totalCalculatedSize = this.#calculatedSize;
          }
        };
      }
      #removeItemSize = (_i) => {
      };
      #addItemSize = (_i, _s, _st) => {
      };
      #requireSize = (_k, _v, size, sizeCalculation) => {
        if (size || sizeCalculation) {
          throw new TypeError("cannot set size without setting maxSize or maxEntrySize on cache");
        }
        return 0;
      };
      *#indexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i = this.#tail; true; ) {
            if (!this.#isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.#isStale(i)) {
              yield i;
            }
            if (i === this.#head) {
              break;
            } else {
              i = this.#prev[i];
            }
          }
        }
      }
      *#rindexes({ allowStale = this.allowStale } = {}) {
        if (this.#size) {
          for (let i = this.#head; true; ) {
            if (!this.#isValidIndex(i)) {
              break;
            }
            if (allowStale || !this.#isStale(i)) {
              yield i;
            }
            if (i === this.#tail) {
              break;
            } else {
              i = this.#next[i];
            }
          }
        }
      }
      #isValidIndex(index2) {
        return index2 !== void 0 && this.#keyMap.get(this.#keyList[index2]) === index2;
      }
      /**
       * Return a generator yielding `[key, value]` pairs,
       * in order from most recently used to least recently used.
       */
      *entries() {
        for (const i of this.#indexes()) {
          if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield [this.#keyList[i], this.#valList[i]];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.entries}
       *
       * Return a generator yielding `[key, value]` pairs,
       * in order from least recently used to most recently used.
       */
      *rentries() {
        for (const i of this.#rindexes()) {
          if (this.#valList[i] !== void 0 && this.#keyList[i] !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield [this.#keyList[i], this.#valList[i]];
          }
        }
      }
      /**
       * Return a generator yielding the keys in the cache,
       * in order from most recently used to least recently used.
       */
      *keys() {
        for (const i of this.#indexes()) {
          const k = this.#keyList[i];
          if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield k;
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.keys}
       *
       * Return a generator yielding the keys in the cache,
       * in order from least recently used to most recently used.
       */
      *rkeys() {
        for (const i of this.#rindexes()) {
          const k = this.#keyList[i];
          if (k !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield k;
          }
        }
      }
      /**
       * Return a generator yielding the values in the cache,
       * in order from most recently used to least recently used.
       */
      *values() {
        for (const i of this.#indexes()) {
          const v = this.#valList[i];
          if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield this.#valList[i];
          }
        }
      }
      /**
       * Inverse order version of {@link LRUCache.values}
       *
       * Return a generator yielding the values in the cache,
       * in order from least recently used to most recently used.
       */
      *rvalues() {
        for (const i of this.#rindexes()) {
          const v = this.#valList[i];
          if (v !== void 0 && !this.#isBackgroundFetch(this.#valList[i])) {
            yield this.#valList[i];
          }
        }
      }
      /**
       * Iterating over the cache itself yields the same results as
       * {@link LRUCache.entries}
       */
      [Symbol.iterator]() {
        return this.entries();
      }
      /**
       * A String value that is used in the creation of the default string
       * description of an object. Called by the built-in method
       * `Object.prototype.toString`.
       */
      [Symbol.toStringTag] = "LRUCache";
      /**
       * Find a value for which the supplied fn method returns a truthy value,
       * similar to `Array.find()`. fn is called as `fn(value, key, cache)`.
       */
      find(fn, getOptions = {}) {
        for (const i of this.#indexes()) {
          const v = this.#valList[i];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          if (fn(value, this.#keyList[i], this)) {
            return this.get(this.#keyList[i], getOptions);
          }
        }
      }
      /**
       * Call the supplied function on each item in the cache, in order from most
       * recently used to least recently used.
       *
       * `fn` is called as `fn(value, key, cache)`.
       *
       * If `thisp` is provided, function will be called in the `this`-context of
       * the provided object, or the cache if no `thisp` object is provided.
       *
       * Does not update age or recenty of use, or iterate over stale values.
       */
      forEach(fn, thisp = this) {
        for (const i of this.#indexes()) {
          const v = this.#valList[i];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i], this);
        }
      }
      /**
       * The same as {@link LRUCache.forEach} but items are iterated over in
       * reverse order.  (ie, less recently used items are iterated over first.)
       */
      rforEach(fn, thisp = this) {
        for (const i of this.#rindexes()) {
          const v = this.#valList[i];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0)
            continue;
          fn.call(thisp, value, this.#keyList[i], this);
        }
      }
      /**
       * Delete any stale entries. Returns true if anything was removed,
       * false otherwise.
       */
      purgeStale() {
        let deleted = false;
        for (const i of this.#rindexes({ allowStale: true })) {
          if (this.#isStale(i)) {
            this.#delete(this.#keyList[i], "expire");
            deleted = true;
          }
        }
        return deleted;
      }
      /**
       * Get the extended info about a given entry, to get its value, size, and
       * TTL info simultaneously. Returns `undefined` if the key is not present.
       *
       * Unlike {@link LRUCache#dump}, which is designed to be portable and survive
       * serialization, the `start` value is always the current timestamp, and the
       * `ttl` is a calculated remaining time to live (negative if expired).
       *
       * Always returns stale values, if their info is found in the cache, so be
       * sure to check for expirations (ie, a negative {@link LRUCache.Entry#ttl})
       * if relevant.
       */
      info(key) {
        const i = this.#keyMap.get(key);
        if (i === void 0)
          return void 0;
        const v = this.#valList[i];
        const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
        if (value === void 0)
          return void 0;
        const entry = { value };
        if (this.#ttls && this.#starts) {
          const ttl = this.#ttls[i];
          const start = this.#starts[i];
          if (ttl && start) {
            const remain = ttl - (perf.now() - start);
            entry.ttl = remain;
            entry.start = Date.now();
          }
        }
        if (this.#sizes) {
          entry.size = this.#sizes[i];
        }
        return entry;
      }
      /**
       * Return an array of [key, {@link LRUCache.Entry}] tuples which can be
       * passed to {@link LRLUCache#load}.
       *
       * The `start` fields are calculated relative to a portable `Date.now()`
       * timestamp, even if `performance.now()` is available.
       *
       * Stale entries are always included in the `dump`, even if
       * {@link LRUCache.OptionsBase.allowStale} is false.
       *
       * Note: this returns an actual array, not a generator, so it can be more
       * easily passed around.
       */
      dump() {
        const arr = [];
        for (const i of this.#indexes({ allowStale: true })) {
          const key = this.#keyList[i];
          const v = this.#valList[i];
          const value = this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
          if (value === void 0 || key === void 0)
            continue;
          const entry = { value };
          if (this.#ttls && this.#starts) {
            entry.ttl = this.#ttls[i];
            const age = perf.now() - this.#starts[i];
            entry.start = Math.floor(Date.now() - age);
          }
          if (this.#sizes) {
            entry.size = this.#sizes[i];
          }
          arr.unshift([key, entry]);
        }
        return arr;
      }
      /**
       * Reset the cache and load in the items in entries in the order listed.
       *
       * The shape of the resulting cache may be different if the same options are
       * not used in both caches.
       *
       * The `start` fields are assumed to be calculated relative to a portable
       * `Date.now()` timestamp, even if `performance.now()` is available.
       */
      load(arr) {
        this.clear();
        for (const [key, entry] of arr) {
          if (entry.start) {
            const age = Date.now() - entry.start;
            entry.start = perf.now() - age;
          }
          this.set(key, entry.value, entry);
        }
      }
      /**
       * Add a value to the cache.
       *
       * Note: if `undefined` is specified as a value, this is an alias for
       * {@link LRUCache#delete}
       *
       * Fields on the {@link LRUCache.SetOptions} options param will override
       * their corresponding values in the constructor options for the scope
       * of this single `set()` operation.
       *
       * If `start` is provided, then that will set the effective start
       * time for the TTL calculation. Note that this must be a previous
       * value of `performance.now()` if supported, or a previous value of
       * `Date.now()` if not.
       *
       * Options object may also include `size`, which will prevent
       * calling the `sizeCalculation` function and just use the specified
       * number if it is a positive integer, and `noDisposeOnSet` which
       * will prevent calling a `dispose` function in the case of
       * overwrites.
       *
       * If the `size` (or return value of `sizeCalculation`) for a given
       * entry is greater than `maxEntrySize`, then the item will not be
       * added to the cache.
       *
       * Will update the recency of the entry.
       *
       * If the value is `undefined`, then this is an alias for
       * `cache.delete(key)`. `undefined` is never stored in the cache.
       */
      set(k, v, setOptions = {}) {
        if (v === void 0) {
          this.delete(k);
          return this;
        }
        const { ttl = this.ttl, start, noDisposeOnSet = this.noDisposeOnSet, sizeCalculation = this.sizeCalculation, status } = setOptions;
        let { noUpdateTTL = this.noUpdateTTL } = setOptions;
        const size = this.#requireSize(k, v, setOptions.size || 0, sizeCalculation);
        if (this.maxEntrySize && size > this.maxEntrySize) {
          if (status) {
            status.set = "miss";
            status.maxEntrySizeExceeded = true;
          }
          this.#delete(k, "set");
          return this;
        }
        let index2 = this.#size === 0 ? void 0 : this.#keyMap.get(k);
        if (index2 === void 0) {
          index2 = this.#size === 0 ? this.#tail : this.#free.length !== 0 ? this.#free.pop() : this.#size === this.#max ? this.#evict(false) : this.#size;
          this.#keyList[index2] = k;
          this.#valList[index2] = v;
          this.#keyMap.set(k, index2);
          this.#next[this.#tail] = index2;
          this.#prev[index2] = this.#tail;
          this.#tail = index2;
          this.#size++;
          this.#addItemSize(index2, size, status);
          if (status)
            status.set = "add";
          noUpdateTTL = false;
        } else {
          this.#moveToTail(index2);
          const oldVal = this.#valList[index2];
          if (v !== oldVal) {
            if (this.#hasFetchMethod && this.#isBackgroundFetch(oldVal)) {
              oldVal.__abortController.abort(new Error("replaced"));
              const { __staleWhileFetching: s } = oldVal;
              if (s !== void 0 && !noDisposeOnSet) {
                if (this.#hasDispose) {
                  this.#dispose?.(s, k, "set");
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([s, k, "set"]);
                }
              }
            } else if (!noDisposeOnSet) {
              if (this.#hasDispose) {
                this.#dispose?.(oldVal, k, "set");
              }
              if (this.#hasDisposeAfter) {
                this.#disposed?.push([oldVal, k, "set"]);
              }
            }
            this.#removeItemSize(index2);
            this.#addItemSize(index2, size, status);
            this.#valList[index2] = v;
            if (status) {
              status.set = "replace";
              const oldValue = oldVal && this.#isBackgroundFetch(oldVal) ? oldVal.__staleWhileFetching : oldVal;
              if (oldValue !== void 0)
                status.oldValue = oldValue;
            }
          } else if (status) {
            status.set = "update";
          }
        }
        if (ttl !== 0 && !this.#ttls) {
          this.#initializeTTLTracking();
        }
        if (this.#ttls) {
          if (!noUpdateTTL) {
            this.#setItemTTL(index2, ttl, start);
          }
          if (status)
            this.#statusTTL(status, index2);
        }
        if (!noDisposeOnSet && this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
        return this;
      }
      /**
       * Evict the least recently used item, returning its value or
       * `undefined` if cache is empty.
       */
      pop() {
        try {
          while (this.#size) {
            const val = this.#valList[this.#head];
            this.#evict(true);
            if (this.#isBackgroundFetch(val)) {
              if (val.__staleWhileFetching) {
                return val.__staleWhileFetching;
              }
            } else if (val !== void 0) {
              return val;
            }
          }
        } finally {
          if (this.#hasDisposeAfter && this.#disposed) {
            const dt = this.#disposed;
            let task;
            while (task = dt?.shift()) {
              this.#disposeAfter?.(...task);
            }
          }
        }
      }
      #evict(free) {
        const head2 = this.#head;
        const k = this.#keyList[head2];
        const v = this.#valList[head2];
        if (this.#hasFetchMethod && this.#isBackgroundFetch(v)) {
          v.__abortController.abort(new Error("evicted"));
        } else if (this.#hasDispose || this.#hasDisposeAfter) {
          if (this.#hasDispose) {
            this.#dispose?.(v, k, "evict");
          }
          if (this.#hasDisposeAfter) {
            this.#disposed?.push([v, k, "evict"]);
          }
        }
        this.#removeItemSize(head2);
        if (free) {
          this.#keyList[head2] = void 0;
          this.#valList[head2] = void 0;
          this.#free.push(head2);
        }
        if (this.#size === 1) {
          this.#head = this.#tail = 0;
          this.#free.length = 0;
        } else {
          this.#head = this.#next[head2];
        }
        this.#keyMap.delete(k);
        this.#size--;
        return head2;
      }
      /**
       * Check if a key is in the cache, without updating the recency of use.
       * Will return false if the item is stale, even though it is technically
       * in the cache.
       *
       * Check if a key is in the cache, without updating the recency of
       * use. Age is updated if {@link LRUCache.OptionsBase.updateAgeOnHas} is set
       * to `true` in either the options or the constructor.
       *
       * Will return `false` if the item is stale, even though it is technically in
       * the cache. The difference can be determined (if it matters) by using a
       * `status` argument, and inspecting the `has` field.
       *
       * Will not update item age unless
       * {@link LRUCache.OptionsBase.updateAgeOnHas} is set.
       */
      has(k, hasOptions = {}) {
        const { updateAgeOnHas = this.updateAgeOnHas, status } = hasOptions;
        const index2 = this.#keyMap.get(k);
        if (index2 !== void 0) {
          const v = this.#valList[index2];
          if (this.#isBackgroundFetch(v) && v.__staleWhileFetching === void 0) {
            return false;
          }
          if (!this.#isStale(index2)) {
            if (updateAgeOnHas) {
              this.#updateItemAge(index2);
            }
            if (status) {
              status.has = "hit";
              this.#statusTTL(status, index2);
            }
            return true;
          } else if (status) {
            status.has = "stale";
            this.#statusTTL(status, index2);
          }
        } else if (status) {
          status.has = "miss";
        }
        return false;
      }
      /**
       * Like {@link LRUCache#get} but doesn't update recency or delete stale
       * items.
       *
       * Returns `undefined` if the item is stale, unless
       * {@link LRUCache.OptionsBase.allowStale} is set.
       */
      peek(k, peekOptions = {}) {
        const { allowStale = this.allowStale } = peekOptions;
        const index2 = this.#keyMap.get(k);
        if (index2 === void 0 || !allowStale && this.#isStale(index2)) {
          return;
        }
        const v = this.#valList[index2];
        return this.#isBackgroundFetch(v) ? v.__staleWhileFetching : v;
      }
      #backgroundFetch(k, index2, options, context) {
        const v = index2 === void 0 ? void 0 : this.#valList[index2];
        if (this.#isBackgroundFetch(v)) {
          return v;
        }
        const ac = new AC();
        const { signal } = options;
        signal?.addEventListener("abort", () => ac.abort(signal.reason), {
          signal: ac.signal
        });
        const fetchOpts = {
          signal: ac.signal,
          options,
          context
        };
        const cb = (v2, updateCache = false) => {
          const { aborted } = ac.signal;
          const ignoreAbort = options.ignoreFetchAbort && v2 !== void 0;
          if (options.status) {
            if (aborted && !updateCache) {
              options.status.fetchAborted = true;
              options.status.fetchError = ac.signal.reason;
              if (ignoreAbort)
                options.status.fetchAbortIgnored = true;
            } else {
              options.status.fetchResolved = true;
            }
          }
          if (aborted && !ignoreAbort && !updateCache) {
            return fetchFail(ac.signal.reason);
          }
          const bf2 = p;
          if (this.#valList[index2] === p) {
            if (v2 === void 0) {
              if (bf2.__staleWhileFetching) {
                this.#valList[index2] = bf2.__staleWhileFetching;
              } else {
                this.#delete(k, "fetch");
              }
            } else {
              if (options.status)
                options.status.fetchUpdated = true;
              this.set(k, v2, fetchOpts.options);
            }
          }
          return v2;
        };
        const eb = (er) => {
          if (options.status) {
            options.status.fetchRejected = true;
            options.status.fetchError = er;
          }
          return fetchFail(er);
        };
        const fetchFail = (er) => {
          const { aborted } = ac.signal;
          const allowStaleAborted = aborted && options.allowStaleOnFetchAbort;
          const allowStale = allowStaleAborted || options.allowStaleOnFetchRejection;
          const noDelete = allowStale || options.noDeleteOnFetchRejection;
          const bf2 = p;
          if (this.#valList[index2] === p) {
            const del = !noDelete || bf2.__staleWhileFetching === void 0;
            if (del) {
              this.#delete(k, "fetch");
            } else if (!allowStaleAborted) {
              this.#valList[index2] = bf2.__staleWhileFetching;
            }
          }
          if (allowStale) {
            if (options.status && bf2.__staleWhileFetching !== void 0) {
              options.status.returnedStale = true;
            }
            return bf2.__staleWhileFetching;
          } else if (bf2.__returned === bf2) {
            throw er;
          }
        };
        const pcall = (res, rej) => {
          const fmp = this.#fetchMethod?.(k, v, fetchOpts);
          if (fmp && fmp instanceof Promise) {
            fmp.then((v2) => res(v2 === void 0 ? void 0 : v2), rej);
          }
          ac.signal.addEventListener("abort", () => {
            if (!options.ignoreFetchAbort || options.allowStaleOnFetchAbort) {
              res(void 0);
              if (options.allowStaleOnFetchAbort) {
                res = (v2) => cb(v2, true);
              }
            }
          });
        };
        if (options.status)
          options.status.fetchDispatched = true;
        const p = new Promise(pcall).then(cb, eb);
        const bf = Object.assign(p, {
          __abortController: ac,
          __staleWhileFetching: v,
          __returned: void 0
        });
        if (index2 === void 0) {
          this.set(k, bf, { ...fetchOpts.options, status: void 0 });
          index2 = this.#keyMap.get(k);
        } else {
          this.#valList[index2] = bf;
        }
        return bf;
      }
      #isBackgroundFetch(p) {
        if (!this.#hasFetchMethod)
          return false;
        const b = p;
        return !!b && b instanceof Promise && b.hasOwnProperty("__staleWhileFetching") && b.__abortController instanceof AC;
      }
      async fetch(k, fetchOptions = {}) {
        const {
          // get options
          allowStale = this.allowStale,
          updateAgeOnGet = this.updateAgeOnGet,
          noDeleteOnStaleGet = this.noDeleteOnStaleGet,
          // set options
          ttl = this.ttl,
          noDisposeOnSet = this.noDisposeOnSet,
          size = 0,
          sizeCalculation = this.sizeCalculation,
          noUpdateTTL = this.noUpdateTTL,
          // fetch exclusive options
          noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,
          allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,
          ignoreFetchAbort = this.ignoreFetchAbort,
          allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,
          context,
          forceRefresh = false,
          status,
          signal
        } = fetchOptions;
        if (!this.#hasFetchMethod) {
          if (status)
            status.fetch = "get";
          return this.get(k, {
            allowStale,
            updateAgeOnGet,
            noDeleteOnStaleGet,
            status
          });
        }
        const options = {
          allowStale,
          updateAgeOnGet,
          noDeleteOnStaleGet,
          ttl,
          noDisposeOnSet,
          size,
          sizeCalculation,
          noUpdateTTL,
          noDeleteOnFetchRejection,
          allowStaleOnFetchRejection,
          allowStaleOnFetchAbort,
          ignoreFetchAbort,
          status,
          signal
        };
        let index2 = this.#keyMap.get(k);
        if (index2 === void 0) {
          if (status)
            status.fetch = "miss";
          const p = this.#backgroundFetch(k, index2, options, context);
          return p.__returned = p;
        } else {
          const v = this.#valList[index2];
          if (this.#isBackgroundFetch(v)) {
            const stale = allowStale && v.__staleWhileFetching !== void 0;
            if (status) {
              status.fetch = "inflight";
              if (stale)
                status.returnedStale = true;
            }
            return stale ? v.__staleWhileFetching : v.__returned = v;
          }
          const isStale = this.#isStale(index2);
          if (!forceRefresh && !isStale) {
            if (status)
              status.fetch = "hit";
            this.#moveToTail(index2);
            if (updateAgeOnGet) {
              this.#updateItemAge(index2);
            }
            if (status)
              this.#statusTTL(status, index2);
            return v;
          }
          const p = this.#backgroundFetch(k, index2, options, context);
          const hasStale = p.__staleWhileFetching !== void 0;
          const staleVal = hasStale && allowStale;
          if (status) {
            status.fetch = isStale ? "stale" : "refresh";
            if (staleVal && isStale)
              status.returnedStale = true;
          }
          return staleVal ? p.__staleWhileFetching : p.__returned = p;
        }
      }
      async forceFetch(k, fetchOptions = {}) {
        const v = await this.fetch(k, fetchOptions);
        if (v === void 0)
          throw new Error("fetch() returned undefined");
        return v;
      }
      memo(k, memoOptions = {}) {
        const memoMethod = this.#memoMethod;
        if (!memoMethod) {
          throw new Error("no memoMethod provided to constructor");
        }
        const { context, forceRefresh, ...options } = memoOptions;
        const v = this.get(k, options);
        if (!forceRefresh && v !== void 0)
          return v;
        const vv = memoMethod(k, v, {
          options,
          context
        });
        this.set(k, vv, options);
        return vv;
      }
      /**
       * Return a value from the cache. Will update the recency of the cache
       * entry found.
       *
       * If the key is not found, get() will return `undefined`.
       */
      get(k, getOptions = {}) {
        const { allowStale = this.allowStale, updateAgeOnGet = this.updateAgeOnGet, noDeleteOnStaleGet = this.noDeleteOnStaleGet, status } = getOptions;
        const index2 = this.#keyMap.get(k);
        if (index2 !== void 0) {
          const value = this.#valList[index2];
          const fetching = this.#isBackgroundFetch(value);
          if (status)
            this.#statusTTL(status, index2);
          if (this.#isStale(index2)) {
            if (status)
              status.get = "stale";
            if (!fetching) {
              if (!noDeleteOnStaleGet) {
                this.#delete(k, "expire");
              }
              if (status && allowStale)
                status.returnedStale = true;
              return allowStale ? value : void 0;
            } else {
              if (status && allowStale && value.__staleWhileFetching !== void 0) {
                status.returnedStale = true;
              }
              return allowStale ? value.__staleWhileFetching : void 0;
            }
          } else {
            if (status)
              status.get = "hit";
            if (fetching) {
              return value.__staleWhileFetching;
            }
            this.#moveToTail(index2);
            if (updateAgeOnGet) {
              this.#updateItemAge(index2);
            }
            return value;
          }
        } else if (status) {
          status.get = "miss";
        }
      }
      #connect(p, n) {
        this.#prev[n] = p;
        this.#next[p] = n;
      }
      #moveToTail(index2) {
        if (index2 !== this.#tail) {
          if (index2 === this.#head) {
            this.#head = this.#next[index2];
          } else {
            this.#connect(this.#prev[index2], this.#next[index2]);
          }
          this.#connect(this.#tail, index2);
          this.#tail = index2;
        }
      }
      /**
       * Deletes a key out of the cache.
       *
       * Returns true if the key was deleted, false otherwise.
       */
      delete(k) {
        return this.#delete(k, "delete");
      }
      #delete(k, reason) {
        let deleted = false;
        if (this.#size !== 0) {
          const index2 = this.#keyMap.get(k);
          if (index2 !== void 0) {
            deleted = true;
            if (this.#size === 1) {
              this.#clear(reason);
            } else {
              this.#removeItemSize(index2);
              const v = this.#valList[index2];
              if (this.#isBackgroundFetch(v)) {
                v.__abortController.abort(new Error("deleted"));
              } else if (this.#hasDispose || this.#hasDisposeAfter) {
                if (this.#hasDispose) {
                  this.#dispose?.(v, k, reason);
                }
                if (this.#hasDisposeAfter) {
                  this.#disposed?.push([v, k, reason]);
                }
              }
              this.#keyMap.delete(k);
              this.#keyList[index2] = void 0;
              this.#valList[index2] = void 0;
              if (index2 === this.#tail) {
                this.#tail = this.#prev[index2];
              } else if (index2 === this.#head) {
                this.#head = this.#next[index2];
              } else {
                const pi = this.#prev[index2];
                this.#next[pi] = this.#next[index2];
                const ni = this.#next[index2];
                this.#prev[ni] = this.#prev[index2];
              }
              this.#size--;
              this.#free.push(index2);
            }
          }
        }
        if (this.#hasDisposeAfter && this.#disposed?.length) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
        return deleted;
      }
      /**
       * Clear the cache entirely, throwing away all values.
       */
      clear() {
        return this.#clear("delete");
      }
      #clear(reason) {
        for (const index2 of this.#rindexes({ allowStale: true })) {
          const v = this.#valList[index2];
          if (this.#isBackgroundFetch(v)) {
            v.__abortController.abort(new Error("deleted"));
          } else {
            const k = this.#keyList[index2];
            if (this.#hasDispose) {
              this.#dispose?.(v, k, reason);
            }
            if (this.#hasDisposeAfter) {
              this.#disposed?.push([v, k, reason]);
            }
          }
        }
        this.#keyMap.clear();
        this.#valList.fill(void 0);
        this.#keyList.fill(void 0);
        if (this.#ttls && this.#starts) {
          this.#ttls.fill(0);
          this.#starts.fill(0);
        }
        if (this.#sizes) {
          this.#sizes.fill(0);
        }
        this.#head = 0;
        this.#tail = 0;
        this.#free.length = 0;
        this.#calculatedSize = 0;
        this.#size = 0;
        if (this.#hasDisposeAfter && this.#disposed) {
          const dt = this.#disposed;
          let task;
          while (task = dt?.shift()) {
            this.#disposeAfter?.(...task);
          }
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/minipass@7.1.2/node_modules/minipass/dist/esm/index.js
var import_node_events, import_node_stream, import_node_string_decoder, proc, isStream, isReadable, isWritable, EOF, MAYBE_EMIT_END, EMITTED_END, EMITTING_END, EMITTED_ERROR, CLOSED, READ, FLUSH, FLUSHCHUNK, ENCODING, DECODER, FLOWING, PAUSED, RESUME, BUFFER, PIPES, BUFFERLENGTH, BUFFERPUSH, BUFFERSHIFT, OBJECTMODE, DESTROYED, ERROR, EMITDATA, EMITEND, EMITEND2, ASYNC, ABORT, ABORTED, SIGNAL, DATALISTENERS, DISCARDED, defer4, nodefer, isEndish, isArrayBufferLike, isArrayBufferView, Pipe, PipeProxyErrors, isObjectModeOptions, isEncodingOptions, Minipass;
var init_esm3 = __esm({
  "../../node_modules/.pnpm/minipass@7.1.2/node_modules/minipass/dist/esm/index.js"() {
    init_importMeta();
    import_node_events = require("node:events");
    import_node_stream = __toESM(require("node:stream"), 1);
    import_node_string_decoder = require("node:string_decoder");
    proc = typeof process === "object" && process ? process : {
      stdout: null,
      stderr: null
    };
    isStream = (s) => !!s && typeof s === "object" && (s instanceof Minipass || s instanceof import_node_stream.default || isReadable(s) || isWritable(s));
    isReadable = (s) => !!s && typeof s === "object" && s instanceof import_node_events.EventEmitter && typeof s.pipe === "function" && // node core Writable streams have a pipe() method, but it throws
    s.pipe !== import_node_stream.default.Writable.prototype.pipe;
    isWritable = (s) => !!s && typeof s === "object" && s instanceof import_node_events.EventEmitter && typeof s.write === "function" && typeof s.end === "function";
    EOF = Symbol("EOF");
    MAYBE_EMIT_END = Symbol("maybeEmitEnd");
    EMITTED_END = Symbol("emittedEnd");
    EMITTING_END = Symbol("emittingEnd");
    EMITTED_ERROR = Symbol("emittedError");
    CLOSED = Symbol("closed");
    READ = Symbol("read");
    FLUSH = Symbol("flush");
    FLUSHCHUNK = Symbol("flushChunk");
    ENCODING = Symbol("encoding");
    DECODER = Symbol("decoder");
    FLOWING = Symbol("flowing");
    PAUSED = Symbol("paused");
    RESUME = Symbol("resume");
    BUFFER = Symbol("buffer");
    PIPES = Symbol("pipes");
    BUFFERLENGTH = Symbol("bufferLength");
    BUFFERPUSH = Symbol("bufferPush");
    BUFFERSHIFT = Symbol("bufferShift");
    OBJECTMODE = Symbol("objectMode");
    DESTROYED = Symbol("destroyed");
    ERROR = Symbol("error");
    EMITDATA = Symbol("emitData");
    EMITEND = Symbol("emitEnd");
    EMITEND2 = Symbol("emitEnd2");
    ASYNC = Symbol("async");
    ABORT = Symbol("abort");
    ABORTED = Symbol("aborted");
    SIGNAL = Symbol("signal");
    DATALISTENERS = Symbol("dataListeners");
    DISCARDED = Symbol("discarded");
    defer4 = (fn) => Promise.resolve().then(fn);
    nodefer = (fn) => fn();
    isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
    isArrayBufferLike = (b) => b instanceof ArrayBuffer || !!b && typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
    isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
    Pipe = class {
      src;
      dest;
      opts;
      ondrain;
      constructor(src, dest, opts) {
        this.src = src;
        this.dest = dest;
        this.opts = opts;
        this.ondrain = () => src[RESUME]();
        this.dest.on("drain", this.ondrain);
      }
      unpipe() {
        this.dest.removeListener("drain", this.ondrain);
      }
      // only here for the prototype
      /* c8 ignore start */
      proxyErrors(_er) {
      }
      /* c8 ignore stop */
      end() {
        this.unpipe();
        if (this.opts.end)
          this.dest.end();
      }
    };
    PipeProxyErrors = class extends Pipe {
      unpipe() {
        this.src.removeListener("error", this.proxyErrors);
        super.unpipe();
      }
      constructor(src, dest, opts) {
        super(src, dest, opts);
        this.proxyErrors = (er) => dest.emit("error", er);
        src.on("error", this.proxyErrors);
      }
    };
    isObjectModeOptions = (o) => !!o.objectMode;
    isEncodingOptions = (o) => !o.objectMode && !!o.encoding && o.encoding !== "buffer";
    Minipass = class extends import_node_events.EventEmitter {
      [FLOWING] = false;
      [PAUSED] = false;
      [PIPES] = [];
      [BUFFER] = [];
      [OBJECTMODE];
      [ENCODING];
      [ASYNC];
      [DECODER];
      [EOF] = false;
      [EMITTED_END] = false;
      [EMITTING_END] = false;
      [CLOSED] = false;
      [EMITTED_ERROR] = null;
      [BUFFERLENGTH] = 0;
      [DESTROYED] = false;
      [SIGNAL];
      [ABORTED] = false;
      [DATALISTENERS] = 0;
      [DISCARDED] = false;
      /**
       * true if the stream can be written
       */
      writable = true;
      /**
       * true if the stream can be read
       */
      readable = true;
      /**
       * If `RType` is Buffer, then options do not need to be provided.
       * Otherwise, an options object must be provided to specify either
       * {@link Minipass.SharedOptions.objectMode} or
       * {@link Minipass.SharedOptions.encoding}, as appropriate.
       */
      constructor(...args) {
        const options = args[0] || {};
        super();
        if (options.objectMode && typeof options.encoding === "string") {
          throw new TypeError("Encoding and objectMode may not be used together");
        }
        if (isObjectModeOptions(options)) {
          this[OBJECTMODE] = true;
          this[ENCODING] = null;
        } else if (isEncodingOptions(options)) {
          this[ENCODING] = options.encoding;
          this[OBJECTMODE] = false;
        } else {
          this[OBJECTMODE] = false;
          this[ENCODING] = null;
        }
        this[ASYNC] = !!options.async;
        this[DECODER] = this[ENCODING] ? new import_node_string_decoder.StringDecoder(this[ENCODING]) : null;
        if (options && options.debugExposeBuffer === true) {
          Object.defineProperty(this, "buffer", { get: () => this[BUFFER] });
        }
        if (options && options.debugExposePipes === true) {
          Object.defineProperty(this, "pipes", { get: () => this[PIPES] });
        }
        const { signal } = options;
        if (signal) {
          this[SIGNAL] = signal;
          if (signal.aborted) {
            this[ABORT]();
          } else {
            signal.addEventListener("abort", () => this[ABORT]());
          }
        }
      }
      /**
       * The amount of data stored in the buffer waiting to be read.
       *
       * For Buffer strings, this will be the total byte length.
       * For string encoding streams, this will be the string character length,
       * according to JavaScript's `string.length` logic.
       * For objectMode streams, this is a count of the items waiting to be
       * emitted.
       */
      get bufferLength() {
        return this[BUFFERLENGTH];
      }
      /**
       * The `BufferEncoding` currently in use, or `null`
       */
      get encoding() {
        return this[ENCODING];
      }
      /**
       * @deprecated - This is a read only property
       */
      set encoding(_enc) {
        throw new Error("Encoding must be set at instantiation time");
      }
      /**
       * @deprecated - Encoding may only be set at instantiation time
       */
      setEncoding(_enc) {
        throw new Error("Encoding must be set at instantiation time");
      }
      /**
       * True if this is an objectMode stream
       */
      get objectMode() {
        return this[OBJECTMODE];
      }
      /**
       * @deprecated - This is a read-only property
       */
      set objectMode(_om) {
        throw new Error("objectMode must be set at instantiation time");
      }
      /**
       * true if this is an async stream
       */
      get ["async"]() {
        return this[ASYNC];
      }
      /**
       * Set to true to make this stream async.
       *
       * Once set, it cannot be unset, as this would potentially cause incorrect
       * behavior.  Ie, a sync stream can be made async, but an async stream
       * cannot be safely made sync.
       */
      set ["async"](a) {
        this[ASYNC] = this[ASYNC] || !!a;
      }
      // drop everything and get out of the flow completely
      [ABORT]() {
        this[ABORTED] = true;
        this.emit("abort", this[SIGNAL]?.reason);
        this.destroy(this[SIGNAL]?.reason);
      }
      /**
       * True if the stream has been aborted.
       */
      get aborted() {
        return this[ABORTED];
      }
      /**
       * No-op setter. Stream aborted status is set via the AbortSignal provided
       * in the constructor options.
       */
      set aborted(_) {
      }
      write(chunk, encoding, cb) {
        if (this[ABORTED])
          return false;
        if (this[EOF])
          throw new Error("write after end");
        if (this[DESTROYED]) {
          this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), { code: "ERR_STREAM_DESTROYED" }));
          return true;
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = "utf8";
        }
        if (!encoding)
          encoding = "utf8";
        const fn = this[ASYNC] ? defer4 : nodefer;
        if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
          if (isArrayBufferView(chunk)) {
            chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
          } else if (isArrayBufferLike(chunk)) {
            chunk = Buffer.from(chunk);
          } else if (typeof chunk !== "string") {
            throw new Error("Non-contiguous data written to non-objectMode stream");
          }
        }
        if (this[OBJECTMODE]) {
          if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
            this[FLUSH](true);
          if (this[FLOWING])
            this.emit("data", chunk);
          else
            this[BUFFERPUSH](chunk);
          if (this[BUFFERLENGTH] !== 0)
            this.emit("readable");
          if (cb)
            fn(cb);
          return this[FLOWING];
        }
        if (!chunk.length) {
          if (this[BUFFERLENGTH] !== 0)
            this.emit("readable");
          if (cb)
            fn(cb);
          return this[FLOWING];
        }
        if (typeof chunk === "string" && // unless it is a string already ready for us to use
        !(encoding === this[ENCODING] && !this[DECODER]?.lastNeed)) {
          chunk = Buffer.from(chunk, encoding);
        }
        if (Buffer.isBuffer(chunk) && this[ENCODING]) {
          chunk = this[DECODER].write(chunk);
        }
        if (this[FLOWING] && this[BUFFERLENGTH] !== 0)
          this[FLUSH](true);
        if (this[FLOWING])
          this.emit("data", chunk);
        else
          this[BUFFERPUSH](chunk);
        if (this[BUFFERLENGTH] !== 0)
          this.emit("readable");
        if (cb)
          fn(cb);
        return this[FLOWING];
      }
      /**
       * Low-level explicit read method.
       *
       * In objectMode, the argument is ignored, and one item is returned if
       * available.
       *
       * `n` is the number of bytes (or in the case of encoding streams,
       * characters) to consume. If `n` is not provided, then the entire buffer
       * is returned, or `null` is returned if no data is available.
       *
       * If `n` is greater that the amount of data in the internal buffer,
       * then `null` is returned.
       */
      read(n) {
        if (this[DESTROYED])
          return null;
        this[DISCARDED] = false;
        if (this[BUFFERLENGTH] === 0 || n === 0 || n && n > this[BUFFERLENGTH]) {
          this[MAYBE_EMIT_END]();
          return null;
        }
        if (this[OBJECTMODE])
          n = null;
        if (this[BUFFER].length > 1 && !this[OBJECTMODE]) {
          this[BUFFER] = [
            this[ENCODING] ? this[BUFFER].join("") : Buffer.concat(this[BUFFER], this[BUFFERLENGTH])
          ];
        }
        const ret = this[READ](n || null, this[BUFFER][0]);
        this[MAYBE_EMIT_END]();
        return ret;
      }
      [READ](n, chunk) {
        if (this[OBJECTMODE])
          this[BUFFERSHIFT]();
        else {
          const c = chunk;
          if (n === c.length || n === null)
            this[BUFFERSHIFT]();
          else if (typeof c === "string") {
            this[BUFFER][0] = c.slice(n);
            chunk = c.slice(0, n);
            this[BUFFERLENGTH] -= n;
          } else {
            this[BUFFER][0] = c.subarray(n);
            chunk = c.subarray(0, n);
            this[BUFFERLENGTH] -= n;
          }
        }
        this.emit("data", chunk);
        if (!this[BUFFER].length && !this[EOF])
          this.emit("drain");
        return chunk;
      }
      end(chunk, encoding, cb) {
        if (typeof chunk === "function") {
          cb = chunk;
          chunk = void 0;
        }
        if (typeof encoding === "function") {
          cb = encoding;
          encoding = "utf8";
        }
        if (chunk !== void 0)
          this.write(chunk, encoding);
        if (cb)
          this.once("end", cb);
        this[EOF] = true;
        this.writable = false;
        if (this[FLOWING] || !this[PAUSED])
          this[MAYBE_EMIT_END]();
        return this;
      }
      // don't let the internal resume be overwritten
      [RESUME]() {
        if (this[DESTROYED])
          return;
        if (!this[DATALISTENERS] && !this[PIPES].length) {
          this[DISCARDED] = true;
        }
        this[PAUSED] = false;
        this[FLOWING] = true;
        this.emit("resume");
        if (this[BUFFER].length)
          this[FLUSH]();
        else if (this[EOF])
          this[MAYBE_EMIT_END]();
        else
          this.emit("drain");
      }
      /**
       * Resume the stream if it is currently in a paused state
       *
       * If called when there are no pipe destinations or `data` event listeners,
       * this will place the stream in a "discarded" state, where all data will
       * be thrown away. The discarded state is removed if a pipe destination or
       * data handler is added, if pause() is called, or if any synchronous or
       * asynchronous iteration is started.
       */
      resume() {
        return this[RESUME]();
      }
      /**
       * Pause the stream
       */
      pause() {
        this[FLOWING] = false;
        this[PAUSED] = true;
        this[DISCARDED] = false;
      }
      /**
       * true if the stream has been forcibly destroyed
       */
      get destroyed() {
        return this[DESTROYED];
      }
      /**
       * true if the stream is currently in a flowing state, meaning that
       * any writes will be immediately emitted.
       */
      get flowing() {
        return this[FLOWING];
      }
      /**
       * true if the stream is currently in a paused state
       */
      get paused() {
        return this[PAUSED];
      }
      [BUFFERPUSH](chunk) {
        if (this[OBJECTMODE])
          this[BUFFERLENGTH] += 1;
        else
          this[BUFFERLENGTH] += chunk.length;
        this[BUFFER].push(chunk);
      }
      [BUFFERSHIFT]() {
        if (this[OBJECTMODE])
          this[BUFFERLENGTH] -= 1;
        else
          this[BUFFERLENGTH] -= this[BUFFER][0].length;
        return this[BUFFER].shift();
      }
      [FLUSH](noDrain = false) {
        do {
        } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()) && this[BUFFER].length);
        if (!noDrain && !this[BUFFER].length && !this[EOF])
          this.emit("drain");
      }
      [FLUSHCHUNK](chunk) {
        this.emit("data", chunk);
        return this[FLOWING];
      }
      /**
       * Pipe all data emitted by this stream into the destination provided.
       *
       * Triggers the flow of data.
       */
      pipe(dest, opts) {
        if (this[DESTROYED])
          return dest;
        this[DISCARDED] = false;
        const ended = this[EMITTED_END];
        opts = opts || {};
        if (dest === proc.stdout || dest === proc.stderr)
          opts.end = false;
        else
          opts.end = opts.end !== false;
        opts.proxyErrors = !!opts.proxyErrors;
        if (ended) {
          if (opts.end)
            dest.end();
        } else {
          this[PIPES].push(!opts.proxyErrors ? new Pipe(this, dest, opts) : new PipeProxyErrors(this, dest, opts));
          if (this[ASYNC])
            defer4(() => this[RESUME]());
          else
            this[RESUME]();
        }
        return dest;
      }
      /**
       * Fully unhook a piped destination stream.
       *
       * If the destination stream was the only consumer of this stream (ie,
       * there are no other piped destinations or `'data'` event listeners)
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      unpipe(dest) {
        const p = this[PIPES].find((p2) => p2.dest === dest);
        if (p) {
          if (this[PIPES].length === 1) {
            if (this[FLOWING] && this[DATALISTENERS] === 0) {
              this[FLOWING] = false;
            }
            this[PIPES] = [];
          } else
            this[PIPES].splice(this[PIPES].indexOf(p), 1);
          p.unpipe();
        }
      }
      /**
       * Alias for {@link Minipass#on}
       */
      addListener(ev, handler) {
        return this.on(ev, handler);
      }
      /**
       * Mostly identical to `EventEmitter.on`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * - Adding a 'data' event handler will trigger the flow of data
       *
       * - Adding a 'readable' event handler when there is data waiting to be read
       *   will cause 'readable' to be emitted immediately.
       *
       * - Adding an 'endish' event handler ('end', 'finish', etc.) which has
       *   already passed will cause the event to be emitted immediately and all
       *   handlers removed.
       *
       * - Adding an 'error' event handler after an error has been emitted will
       *   cause the event to be re-emitted immediately with the error previously
       *   raised.
       */
      on(ev, handler) {
        const ret = super.on(ev, handler);
        if (ev === "data") {
          this[DISCARDED] = false;
          this[DATALISTENERS]++;
          if (!this[PIPES].length && !this[FLOWING]) {
            this[RESUME]();
          }
        } else if (ev === "readable" && this[BUFFERLENGTH] !== 0) {
          super.emit("readable");
        } else if (isEndish(ev) && this[EMITTED_END]) {
          super.emit(ev);
          this.removeAllListeners(ev);
        } else if (ev === "error" && this[EMITTED_ERROR]) {
          const h = handler;
          if (this[ASYNC])
            defer4(() => h.call(this, this[EMITTED_ERROR]));
          else
            h.call(this, this[EMITTED_ERROR]);
        }
        return ret;
      }
      /**
       * Alias for {@link Minipass#off}
       */
      removeListener(ev, handler) {
        return this.off(ev, handler);
      }
      /**
       * Mostly identical to `EventEmitter.off`
       *
       * If a 'data' event handler is removed, and it was the last consumer
       * (ie, there are no pipe destinations or other 'data' event listeners),
       * then the flow of data will stop until there is another consumer or
       * {@link Minipass#resume} is explicitly called.
       */
      off(ev, handler) {
        const ret = super.off(ev, handler);
        if (ev === "data") {
          this[DATALISTENERS] = this.listeners("data").length;
          if (this[DATALISTENERS] === 0 && !this[DISCARDED] && !this[PIPES].length) {
            this[FLOWING] = false;
          }
        }
        return ret;
      }
      /**
       * Mostly identical to `EventEmitter.removeAllListeners`
       *
       * If all 'data' event handlers are removed, and they were the last consumer
       * (ie, there are no pipe destinations), then the flow of data will stop
       * until there is another consumer or {@link Minipass#resume} is explicitly
       * called.
       */
      removeAllListeners(ev) {
        const ret = super.removeAllListeners(ev);
        if (ev === "data" || ev === void 0) {
          this[DATALISTENERS] = 0;
          if (!this[DISCARDED] && !this[PIPES].length) {
            this[FLOWING] = false;
          }
        }
        return ret;
      }
      /**
       * true if the 'end' event has been emitted
       */
      get emittedEnd() {
        return this[EMITTED_END];
      }
      [MAYBE_EMIT_END]() {
        if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this[BUFFER].length === 0 && this[EOF]) {
          this[EMITTING_END] = true;
          this.emit("end");
          this.emit("prefinish");
          this.emit("finish");
          if (this[CLOSED])
            this.emit("close");
          this[EMITTING_END] = false;
        }
      }
      /**
       * Mostly identical to `EventEmitter.emit`, with the following
       * behavior differences to prevent data loss and unnecessary hangs:
       *
       * If the stream has been destroyed, and the event is something other
       * than 'close' or 'error', then `false` is returned and no handlers
       * are called.
       *
       * If the event is 'end', and has already been emitted, then the event
       * is ignored. If the stream is in a paused or non-flowing state, then
       * the event will be deferred until data flow resumes. If the stream is
       * async, then handlers will be called on the next tick rather than
       * immediately.
       *
       * If the event is 'close', and 'end' has not yet been emitted, then
       * the event will be deferred until after 'end' is emitted.
       *
       * If the event is 'error', and an AbortSignal was provided for the stream,
       * and there are no listeners, then the event is ignored, matching the
       * behavior of node core streams in the presense of an AbortSignal.
       *
       * If the event is 'finish' or 'prefinish', then all listeners will be
       * removed after emitting the event, to prevent double-firing.
       */
      emit(ev, ...args) {
        const data = args[0];
        if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED]) {
          return false;
        } else if (ev === "data") {
          return !this[OBJECTMODE] && !data ? false : this[ASYNC] ? (defer4(() => this[EMITDATA](data)), true) : this[EMITDATA](data);
        } else if (ev === "end") {
          return this[EMITEND]();
        } else if (ev === "close") {
          this[CLOSED] = true;
          if (!this[EMITTED_END] && !this[DESTROYED])
            return false;
          const ret2 = super.emit("close");
          this.removeAllListeners("close");
          return ret2;
        } else if (ev === "error") {
          this[EMITTED_ERROR] = data;
          super.emit(ERROR, data);
          const ret2 = !this[SIGNAL] || this.listeners("error").length ? super.emit("error", data) : false;
          this[MAYBE_EMIT_END]();
          return ret2;
        } else if (ev === "resume") {
          const ret2 = super.emit("resume");
          this[MAYBE_EMIT_END]();
          return ret2;
        } else if (ev === "finish" || ev === "prefinish") {
          const ret2 = super.emit(ev);
          this.removeAllListeners(ev);
          return ret2;
        }
        const ret = super.emit(ev, ...args);
        this[MAYBE_EMIT_END]();
        return ret;
      }
      [EMITDATA](data) {
        for (const p of this[PIPES]) {
          if (p.dest.write(data) === false)
            this.pause();
        }
        const ret = this[DISCARDED] ? false : super.emit("data", data);
        this[MAYBE_EMIT_END]();
        return ret;
      }
      [EMITEND]() {
        if (this[EMITTED_END])
          return false;
        this[EMITTED_END] = true;
        this.readable = false;
        return this[ASYNC] ? (defer4(() => this[EMITEND2]()), true) : this[EMITEND2]();
      }
      [EMITEND2]() {
        if (this[DECODER]) {
          const data = this[DECODER].end();
          if (data) {
            for (const p of this[PIPES]) {
              p.dest.write(data);
            }
            if (!this[DISCARDED])
              super.emit("data", data);
          }
        }
        for (const p of this[PIPES]) {
          p.end();
        }
        const ret = super.emit("end");
        this.removeAllListeners("end");
        return ret;
      }
      /**
       * Return a Promise that resolves to an array of all emitted data once
       * the stream ends.
       */
      async collect() {
        const buf = Object.assign([], {
          dataLength: 0
        });
        if (!this[OBJECTMODE])
          buf.dataLength = 0;
        const p = this.promise();
        this.on("data", (c) => {
          buf.push(c);
          if (!this[OBJECTMODE])
            buf.dataLength += c.length;
        });
        await p;
        return buf;
      }
      /**
       * Return a Promise that resolves to the concatenation of all emitted data
       * once the stream ends.
       *
       * Not allowed on objectMode streams.
       */
      async concat() {
        if (this[OBJECTMODE]) {
          throw new Error("cannot concat in objectMode");
        }
        const buf = await this.collect();
        return this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength);
      }
      /**
       * Return a void Promise that resolves once the stream ends.
       */
      async promise() {
        return new Promise((resolve, reject) => {
          this.on(DESTROYED, () => reject(new Error("stream destroyed")));
          this.on("error", (er) => reject(er));
          this.on("end", () => resolve());
        });
      }
      /**
       * Asynchronous `for await of` iteration.
       *
       * This will continue emitting all chunks until the stream terminates.
       */
      [Symbol.asyncIterator]() {
        this[DISCARDED] = false;
        let stopped = false;
        const stop = async () => {
          this.pause();
          stopped = true;
          return { value: void 0, done: true };
        };
        const next = () => {
          if (stopped)
            return stop();
          const res = this.read();
          if (res !== null)
            return Promise.resolve({ done: false, value: res });
          if (this[EOF])
            return stop();
          let resolve;
          let reject;
          const onerr = (er) => {
            this.off("data", ondata);
            this.off("end", onend);
            this.off(DESTROYED, ondestroy);
            stop();
            reject(er);
          };
          const ondata = (value) => {
            this.off("error", onerr);
            this.off("end", onend);
            this.off(DESTROYED, ondestroy);
            this.pause();
            resolve({ value, done: !!this[EOF] });
          };
          const onend = () => {
            this.off("error", onerr);
            this.off("data", ondata);
            this.off(DESTROYED, ondestroy);
            stop();
            resolve({ done: true, value: void 0 });
          };
          const ondestroy = () => onerr(new Error("stream destroyed"));
          return new Promise((res2, rej) => {
            reject = rej;
            resolve = res2;
            this.once(DESTROYED, ondestroy);
            this.once("error", onerr);
            this.once("end", onend);
            this.once("data", ondata);
          });
        };
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.asyncIterator]() {
            return this;
          }
        };
      }
      /**
       * Synchronous `for of` iteration.
       *
       * The iteration will terminate when the internal buffer runs out, even
       * if the stream has not yet terminated.
       */
      [Symbol.iterator]() {
        this[DISCARDED] = false;
        let stopped = false;
        const stop = () => {
          this.pause();
          this.off(ERROR, stop);
          this.off(DESTROYED, stop);
          this.off("end", stop);
          stopped = true;
          return { done: true, value: void 0 };
        };
        const next = () => {
          if (stopped)
            return stop();
          const value = this.read();
          return value === null ? stop() : { done: false, value };
        };
        this.once("end", stop);
        this.once(ERROR, stop);
        this.once(DESTROYED, stop);
        return {
          next,
          throw: stop,
          return: stop,
          [Symbol.iterator]() {
            return this;
          }
        };
      }
      /**
       * Destroy a stream, preventing it from being used for any further purpose.
       *
       * If the stream has a `close()` method, then it will be called on
       * destruction.
       *
       * After destruction, any attempt to write data, read data, or emit most
       * events will be ignored.
       *
       * If an error argument is provided, then it will be emitted in an
       * 'error' event.
       */
      destroy(er) {
        if (this[DESTROYED]) {
          if (er)
            this.emit("error", er);
          else
            this.emit(DESTROYED);
          return this;
        }
        this[DESTROYED] = true;
        this[DISCARDED] = true;
        this[BUFFER].length = 0;
        this[BUFFERLENGTH] = 0;
        const wc = this;
        if (typeof wc.close === "function" && !this[CLOSED])
          wc.close();
        if (er)
          this.emit("error", er);
        else
          this.emit(DESTROYED);
        return this;
      }
      /**
       * Alias for {@link isStream}
       *
       * Former export location, maintained for backwards compatibility.
       *
       * @deprecated
       */
      static get isStream() {
        return isStream;
      }
    };
  }
});

// ../../node_modules/.pnpm/path-scurry@1.11.1/node_modules/path-scurry/dist/esm/index.js
var import_node_path, import_node_url, import_fs, actualFS, import_promises, realpathSync, defaultFS, fsFromOption, uncDriveRegexp, uncToDrive, eitherSep, UNKNOWN, IFIFO, IFCHR, IFDIR, IFBLK, IFREG, IFLNK, IFSOCK, IFMT, IFMT_UNKNOWN, READDIR_CALLED, LSTAT_CALLED, ENOTDIR, ENOENT, ENOREADLINK, ENOREALPATH, ENOCHILD, TYPEMASK, entToType, normalizeCache, normalize, normalizeNocaseCache, normalizeNocase, ResolveCache, ChildrenCache, setAsCwd, PathBase, PathWin32, PathPosix, PathScurryBase, PathScurryWin32, PathScurryPosix, PathScurryDarwin, Path, PathScurry;
var init_esm4 = __esm({
  "../../node_modules/.pnpm/path-scurry@1.11.1/node_modules/path-scurry/dist/esm/index.js"() {
    init_importMeta();
    init_esm2();
    import_node_path = require("node:path");
    import_node_url = require("node:url");
    import_fs = require("fs");
    actualFS = __toESM(require("node:fs"), 1);
    import_promises = require("node:fs/promises");
    init_esm3();
    realpathSync = import_fs.realpathSync.native;
    defaultFS = {
      lstatSync: import_fs.lstatSync,
      readdir: import_fs.readdir,
      readdirSync: import_fs.readdirSync,
      readlinkSync: import_fs.readlinkSync,
      realpathSync,
      promises: {
        lstat: import_promises.lstat,
        readdir: import_promises.readdir,
        readlink: import_promises.readlink,
        realpath: import_promises.realpath
      }
    };
    fsFromOption = (fsOption) => !fsOption || fsOption === defaultFS || fsOption === actualFS ? defaultFS : {
      ...defaultFS,
      ...fsOption,
      promises: {
        ...defaultFS.promises,
        ...fsOption.promises || {}
      }
    };
    uncDriveRegexp = /^\\\\\?\\([a-z]:)\\?$/i;
    uncToDrive = (rootPath) => rootPath.replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
    eitherSep = /[\\\/]/;
    UNKNOWN = 0;
    IFIFO = 1;
    IFCHR = 2;
    IFDIR = 4;
    IFBLK = 6;
    IFREG = 8;
    IFLNK = 10;
    IFSOCK = 12;
    IFMT = 15;
    IFMT_UNKNOWN = ~IFMT;
    READDIR_CALLED = 16;
    LSTAT_CALLED = 32;
    ENOTDIR = 64;
    ENOENT = 128;
    ENOREADLINK = 256;
    ENOREALPATH = 512;
    ENOCHILD = ENOTDIR | ENOENT | ENOREALPATH;
    TYPEMASK = 1023;
    entToType = (s) => s.isFile() ? IFREG : s.isDirectory() ? IFDIR : s.isSymbolicLink() ? IFLNK : s.isCharacterDevice() ? IFCHR : s.isBlockDevice() ? IFBLK : s.isSocket() ? IFSOCK : s.isFIFO() ? IFIFO : UNKNOWN;
    normalizeCache = /* @__PURE__ */ new Map();
    normalize = (s) => {
      const c = normalizeCache.get(s);
      if (c)
        return c;
      const n = s.normalize("NFKD");
      normalizeCache.set(s, n);
      return n;
    };
    normalizeNocaseCache = /* @__PURE__ */ new Map();
    normalizeNocase = (s) => {
      const c = normalizeNocaseCache.get(s);
      if (c)
        return c;
      const n = normalize(s.toLowerCase());
      normalizeNocaseCache.set(s, n);
      return n;
    };
    ResolveCache = class extends LRUCache {
      constructor() {
        super({ max: 256 });
      }
    };
    ChildrenCache = class extends LRUCache {
      constructor(maxSize = 16 * 1024) {
        super({
          maxSize,
          // parent + children
          sizeCalculation: (a) => a.length + 1
        });
      }
    };
    setAsCwd = Symbol("PathScurry setAsCwd");
    PathBase = class {
      /**
       * the basename of this path
       *
       * **Important**: *always* test the path name against any test string
       * usingthe {@link isNamed} method, and not by directly comparing this
       * string. Otherwise, unicode path strings that the system sees as identical
       * will not be properly treated as the same path, leading to incorrect
       * behavior and possible security issues.
       */
      name;
      /**
       * the Path entry corresponding to the path root.
       *
       * @internal
       */
      root;
      /**
       * All roots found within the current PathScurry family
       *
       * @internal
       */
      roots;
      /**
       * a reference to the parent path, or undefined in the case of root entries
       *
       * @internal
       */
      parent;
      /**
       * boolean indicating whether paths are compared case-insensitively
       * @internal
       */
      nocase;
      /**
       * boolean indicating that this path is the current working directory
       * of the PathScurry collection that contains it.
       */
      isCWD = false;
      // potential default fs override
      #fs;
      // Stats fields
      #dev;
      get dev() {
        return this.#dev;
      }
      #mode;
      get mode() {
        return this.#mode;
      }
      #nlink;
      get nlink() {
        return this.#nlink;
      }
      #uid;
      get uid() {
        return this.#uid;
      }
      #gid;
      get gid() {
        return this.#gid;
      }
      #rdev;
      get rdev() {
        return this.#rdev;
      }
      #blksize;
      get blksize() {
        return this.#blksize;
      }
      #ino;
      get ino() {
        return this.#ino;
      }
      #size;
      get size() {
        return this.#size;
      }
      #blocks;
      get blocks() {
        return this.#blocks;
      }
      #atimeMs;
      get atimeMs() {
        return this.#atimeMs;
      }
      #mtimeMs;
      get mtimeMs() {
        return this.#mtimeMs;
      }
      #ctimeMs;
      get ctimeMs() {
        return this.#ctimeMs;
      }
      #birthtimeMs;
      get birthtimeMs() {
        return this.#birthtimeMs;
      }
      #atime;
      get atime() {
        return this.#atime;
      }
      #mtime;
      get mtime() {
        return this.#mtime;
      }
      #ctime;
      get ctime() {
        return this.#ctime;
      }
      #birthtime;
      get birthtime() {
        return this.#birthtime;
      }
      #matchName;
      #depth;
      #fullpath;
      #fullpathPosix;
      #relative;
      #relativePosix;
      #type;
      #children;
      #linkTarget;
      #realpath;
      /**
       * This property is for compatibility with the Dirent class as of
       * Node v20, where Dirent['parentPath'] refers to the path of the
       * directory that was passed to readdir. For root entries, it's the path
       * to the entry itself.
       */
      get parentPath() {
        return (this.parent || this).fullpath();
      }
      /**
       * Deprecated alias for Dirent['parentPath'] Somewhat counterintuitively,
       * this property refers to the *parent* path, not the path object itself.
       */
      get path() {
        return this.parentPath;
      }
      /**
       * Do not create new Path objects directly.  They should always be accessed
       * via the PathScurry class or other methods on the Path class.
       *
       * @internal
       */
      constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
        this.name = name;
        this.#matchName = nocase ? normalizeNocase(name) : normalize(name);
        this.#type = type & TYPEMASK;
        this.nocase = nocase;
        this.roots = roots;
        this.root = root || this;
        this.#children = children;
        this.#fullpath = opts.fullpath;
        this.#relative = opts.relative;
        this.#relativePosix = opts.relativePosix;
        this.parent = opts.parent;
        if (this.parent) {
          this.#fs = this.parent.#fs;
        } else {
          this.#fs = fsFromOption(opts.fs);
        }
      }
      /**
       * Returns the depth of the Path object from its root.
       *
       * For example, a path at `/foo/bar` would have a depth of 2.
       */
      depth() {
        if (this.#depth !== void 0)
          return this.#depth;
        if (!this.parent)
          return this.#depth = 0;
        return this.#depth = this.parent.depth() + 1;
      }
      /**
       * @internal
       */
      childrenCache() {
        return this.#children;
      }
      /**
       * Get the Path object referenced by the string path, resolved from this Path
       */
      resolve(path3) {
        if (!path3) {
          return this;
        }
        const rootPath = this.getRootString(path3);
        const dir = path3.substring(rootPath.length);
        const dirParts = dir.split(this.splitSep);
        const result = rootPath ? this.getRoot(rootPath).#resolveParts(dirParts) : this.#resolveParts(dirParts);
        return result;
      }
      #resolveParts(dirParts) {
        let p = this;
        for (const part of dirParts) {
          p = p.child(part);
        }
        return p;
      }
      /**
       * Returns the cached children Path objects, if still available.  If they
       * have fallen out of the cache, then returns an empty array, and resets the
       * READDIR_CALLED bit, so that future calls to readdir() will require an fs
       * lookup.
       *
       * @internal
       */
      children() {
        const cached = this.#children.get(this);
        if (cached) {
          return cached;
        }
        const children = Object.assign([], { provisional: 0 });
        this.#children.set(this, children);
        this.#type &= ~READDIR_CALLED;
        return children;
      }
      /**
       * Resolves a path portion and returns or creates the child Path.
       *
       * Returns `this` if pathPart is `''` or `'.'`, or `parent` if pathPart is
       * `'..'`.
       *
       * This should not be called directly.  If `pathPart` contains any path
       * separators, it will lead to unsafe undefined behavior.
       *
       * Use `Path.resolve()` instead.
       *
       * @internal
       */
      child(pathPart, opts) {
        if (pathPart === "" || pathPart === ".") {
          return this;
        }
        if (pathPart === "..") {
          return this.parent || this;
        }
        const children = this.children();
        const name = this.nocase ? normalizeNocase(pathPart) : normalize(pathPart);
        for (const p of children) {
          if (p.#matchName === name) {
            return p;
          }
        }
        const s = this.parent ? this.sep : "";
        const fullpath = this.#fullpath ? this.#fullpath + s + pathPart : void 0;
        const pchild = this.newChild(pathPart, UNKNOWN, {
          ...opts,
          parent: this,
          fullpath
        });
        if (!this.canReaddir()) {
          pchild.#type |= ENOENT;
        }
        children.push(pchild);
        return pchild;
      }
      /**
       * The relative path from the cwd. If it does not share an ancestor with
       * the cwd, then this ends up being equivalent to the fullpath()
       */
      relative() {
        if (this.isCWD)
          return "";
        if (this.#relative !== void 0) {
          return this.#relative;
        }
        const name = this.name;
        const p = this.parent;
        if (!p) {
          return this.#relative = this.name;
        }
        const pv = p.relative();
        return pv + (!pv || !p.parent ? "" : this.sep) + name;
      }
      /**
       * The relative path from the cwd, using / as the path separator.
       * If it does not share an ancestor with
       * the cwd, then this ends up being equivalent to the fullpathPosix()
       * On posix systems, this is identical to relative().
       */
      relativePosix() {
        if (this.sep === "/")
          return this.relative();
        if (this.isCWD)
          return "";
        if (this.#relativePosix !== void 0)
          return this.#relativePosix;
        const name = this.name;
        const p = this.parent;
        if (!p) {
          return this.#relativePosix = this.fullpathPosix();
        }
        const pv = p.relativePosix();
        return pv + (!pv || !p.parent ? "" : "/") + name;
      }
      /**
       * The fully resolved path string for this Path entry
       */
      fullpath() {
        if (this.#fullpath !== void 0) {
          return this.#fullpath;
        }
        const name = this.name;
        const p = this.parent;
        if (!p) {
          return this.#fullpath = this.name;
        }
        const pv = p.fullpath();
        const fp = pv + (!p.parent ? "" : this.sep) + name;
        return this.#fullpath = fp;
      }
      /**
       * On platforms other than windows, this is identical to fullpath.
       *
       * On windows, this is overridden to return the forward-slash form of the
       * full UNC path.
       */
      fullpathPosix() {
        if (this.#fullpathPosix !== void 0)
          return this.#fullpathPosix;
        if (this.sep === "/")
          return this.#fullpathPosix = this.fullpath();
        if (!this.parent) {
          const p2 = this.fullpath().replace(/\\/g, "/");
          if (/^[a-z]:\//i.test(p2)) {
            return this.#fullpathPosix = `//?/${p2}`;
          } else {
            return this.#fullpathPosix = p2;
          }
        }
        const p = this.parent;
        const pfpp = p.fullpathPosix();
        const fpp = pfpp + (!pfpp || !p.parent ? "" : "/") + this.name;
        return this.#fullpathPosix = fpp;
      }
      /**
       * Is the Path of an unknown type?
       *
       * Note that we might know *something* about it if there has been a previous
       * filesystem operation, for example that it does not exist, or is not a
       * link, or whether it has child entries.
       */
      isUnknown() {
        return (this.#type & IFMT) === UNKNOWN;
      }
      isType(type) {
        return this[`is${type}`]();
      }
      getType() {
        return this.isUnknown() ? "Unknown" : this.isDirectory() ? "Directory" : this.isFile() ? "File" : this.isSymbolicLink() ? "SymbolicLink" : this.isFIFO() ? "FIFO" : this.isCharacterDevice() ? "CharacterDevice" : this.isBlockDevice() ? "BlockDevice" : (
          /* c8 ignore start */
          this.isSocket() ? "Socket" : "Unknown"
        );
      }
      /**
       * Is the Path a regular file?
       */
      isFile() {
        return (this.#type & IFMT) === IFREG;
      }
      /**
       * Is the Path a directory?
       */
      isDirectory() {
        return (this.#type & IFMT) === IFDIR;
      }
      /**
       * Is the path a character device?
       */
      isCharacterDevice() {
        return (this.#type & IFMT) === IFCHR;
      }
      /**
       * Is the path a block device?
       */
      isBlockDevice() {
        return (this.#type & IFMT) === IFBLK;
      }
      /**
       * Is the path a FIFO pipe?
       */
      isFIFO() {
        return (this.#type & IFMT) === IFIFO;
      }
      /**
       * Is the path a socket?
       */
      isSocket() {
        return (this.#type & IFMT) === IFSOCK;
      }
      /**
       * Is the path a symbolic link?
       */
      isSymbolicLink() {
        return (this.#type & IFLNK) === IFLNK;
      }
      /**
       * Return the entry if it has been subject of a successful lstat, or
       * undefined otherwise.
       *
       * Does not read the filesystem, so an undefined result *could* simply
       * mean that we haven't called lstat on it.
       */
      lstatCached() {
        return this.#type & LSTAT_CALLED ? this : void 0;
      }
      /**
       * Return the cached link target if the entry has been the subject of a
       * successful readlink, or undefined otherwise.
       *
       * Does not read the filesystem, so an undefined result *could* just mean we
       * don't have any cached data. Only use it if you are very sure that a
       * readlink() has been called at some point.
       */
      readlinkCached() {
        return this.#linkTarget;
      }
      /**
       * Returns the cached realpath target if the entry has been the subject
       * of a successful realpath, or undefined otherwise.
       *
       * Does not read the filesystem, so an undefined result *could* just mean we
       * don't have any cached data. Only use it if you are very sure that a
       * realpath() has been called at some point.
       */
      realpathCached() {
        return this.#realpath;
      }
      /**
       * Returns the cached child Path entries array if the entry has been the
       * subject of a successful readdir(), or [] otherwise.
       *
       * Does not read the filesystem, so an empty array *could* just mean we
       * don't have any cached data. Only use it if you are very sure that a
       * readdir() has been called recently enough to still be valid.
       */
      readdirCached() {
        const children = this.children();
        return children.slice(0, children.provisional);
      }
      /**
       * Return true if it's worth trying to readlink.  Ie, we don't (yet) have
       * any indication that readlink will definitely fail.
       *
       * Returns false if the path is known to not be a symlink, if a previous
       * readlink failed, or if the entry does not exist.
       */
      canReadlink() {
        if (this.#linkTarget)
          return true;
        if (!this.parent)
          return false;
        const ifmt = this.#type & IFMT;
        return !(ifmt !== UNKNOWN && ifmt !== IFLNK || this.#type & ENOREADLINK || this.#type & ENOENT);
      }
      /**
       * Return true if readdir has previously been successfully called on this
       * path, indicating that cachedReaddir() is likely valid.
       */
      calledReaddir() {
        return !!(this.#type & READDIR_CALLED);
      }
      /**
       * Returns true if the path is known to not exist. That is, a previous lstat
       * or readdir failed to verify its existence when that would have been
       * expected, or a parent entry was marked either enoent or enotdir.
       */
      isENOENT() {
        return !!(this.#type & ENOENT);
      }
      /**
       * Return true if the path is a match for the given path name.  This handles
       * case sensitivity and unicode normalization.
       *
       * Note: even on case-sensitive systems, it is **not** safe to test the
       * equality of the `.name` property to determine whether a given pathname
       * matches, due to unicode normalization mismatches.
       *
       * Always use this method instead of testing the `path.name` property
       * directly.
       */
      isNamed(n) {
        return !this.nocase ? this.#matchName === normalize(n) : this.#matchName === normalizeNocase(n);
      }
      /**
       * Return the Path object corresponding to the target of a symbolic link.
       *
       * If the Path is not a symbolic link, or if the readlink call fails for any
       * reason, `undefined` is returned.
       *
       * Result is cached, and thus may be outdated if the filesystem is mutated.
       */
      async readlink() {
        const target = this.#linkTarget;
        if (target) {
          return target;
        }
        if (!this.canReadlink()) {
          return void 0;
        }
        if (!this.parent) {
          return void 0;
        }
        try {
          const read = await this.#fs.promises.readlink(this.fullpath());
          const linkTarget = (await this.parent.realpath())?.resolve(read);
          if (linkTarget) {
            return this.#linkTarget = linkTarget;
          }
        } catch (er) {
          this.#readlinkFail(er.code);
          return void 0;
        }
      }
      /**
       * Synchronous {@link PathBase.readlink}
       */
      readlinkSync() {
        const target = this.#linkTarget;
        if (target) {
          return target;
        }
        if (!this.canReadlink()) {
          return void 0;
        }
        if (!this.parent) {
          return void 0;
        }
        try {
          const read = this.#fs.readlinkSync(this.fullpath());
          const linkTarget = this.parent.realpathSync()?.resolve(read);
          if (linkTarget) {
            return this.#linkTarget = linkTarget;
          }
        } catch (er) {
          this.#readlinkFail(er.code);
          return void 0;
        }
      }
      #readdirSuccess(children) {
        this.#type |= READDIR_CALLED;
        for (let p = children.provisional; p < children.length; p++) {
          const c = children[p];
          if (c)
            c.#markENOENT();
        }
      }
      #markENOENT() {
        if (this.#type & ENOENT)
          return;
        this.#type = (this.#type | ENOENT) & IFMT_UNKNOWN;
        this.#markChildrenENOENT();
      }
      #markChildrenENOENT() {
        const children = this.children();
        children.provisional = 0;
        for (const p of children) {
          p.#markENOENT();
        }
      }
      #markENOREALPATH() {
        this.#type |= ENOREALPATH;
        this.#markENOTDIR();
      }
      // save the information when we know the entry is not a dir
      #markENOTDIR() {
        if (this.#type & ENOTDIR)
          return;
        let t = this.#type;
        if ((t & IFMT) === IFDIR)
          t &= IFMT_UNKNOWN;
        this.#type = t | ENOTDIR;
        this.#markChildrenENOENT();
      }
      #readdirFail(code2 = "") {
        if (code2 === "ENOTDIR" || code2 === "EPERM") {
          this.#markENOTDIR();
        } else if (code2 === "ENOENT") {
          this.#markENOENT();
        } else {
          this.children().provisional = 0;
        }
      }
      #lstatFail(code2 = "") {
        if (code2 === "ENOTDIR") {
          const p = this.parent;
          p.#markENOTDIR();
        } else if (code2 === "ENOENT") {
          this.#markENOENT();
        }
      }
      #readlinkFail(code2 = "") {
        let ter = this.#type;
        ter |= ENOREADLINK;
        if (code2 === "ENOENT")
          ter |= ENOENT;
        if (code2 === "EINVAL" || code2 === "UNKNOWN") {
          ter &= IFMT_UNKNOWN;
        }
        this.#type = ter;
        if (code2 === "ENOTDIR" && this.parent) {
          this.parent.#markENOTDIR();
        }
      }
      #readdirAddChild(e, c) {
        return this.#readdirMaybePromoteChild(e, c) || this.#readdirAddNewChild(e, c);
      }
      #readdirAddNewChild(e, c) {
        const type = entToType(e);
        const child = this.newChild(e.name, type, { parent: this });
        const ifmt = child.#type & IFMT;
        if (ifmt !== IFDIR && ifmt !== IFLNK && ifmt !== UNKNOWN) {
          child.#type |= ENOTDIR;
        }
        c.unshift(child);
        c.provisional++;
        return child;
      }
      #readdirMaybePromoteChild(e, c) {
        for (let p = c.provisional; p < c.length; p++) {
          const pchild = c[p];
          const name = this.nocase ? normalizeNocase(e.name) : normalize(e.name);
          if (name !== pchild.#matchName) {
            continue;
          }
          return this.#readdirPromoteChild(e, pchild, p, c);
        }
      }
      #readdirPromoteChild(e, p, index2, c) {
        const v = p.name;
        p.#type = p.#type & IFMT_UNKNOWN | entToType(e);
        if (v !== e.name)
          p.name = e.name;
        if (index2 !== c.provisional) {
          if (index2 === c.length - 1)
            c.pop();
          else
            c.splice(index2, 1);
          c.unshift(p);
        }
        c.provisional++;
        return p;
      }
      /**
       * Call lstat() on this Path, and update all known information that can be
       * determined.
       *
       * Note that unlike `fs.lstat()`, the returned value does not contain some
       * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
       * information is required, you will need to call `fs.lstat` yourself.
       *
       * If the Path refers to a nonexistent file, or if the lstat call fails for
       * any reason, `undefined` is returned.  Otherwise the updated Path object is
       * returned.
       *
       * Results are cached, and thus may be out of date if the filesystem is
       * mutated.
       */
      async lstat() {
        if ((this.#type & ENOENT) === 0) {
          try {
            this.#applyStat(await this.#fs.promises.lstat(this.fullpath()));
            return this;
          } catch (er) {
            this.#lstatFail(er.code);
          }
        }
      }
      /**
       * synchronous {@link PathBase.lstat}
       */
      lstatSync() {
        if ((this.#type & ENOENT) === 0) {
          try {
            this.#applyStat(this.#fs.lstatSync(this.fullpath()));
            return this;
          } catch (er) {
            this.#lstatFail(er.code);
          }
        }
      }
      #applyStat(st) {
        const { atime, atimeMs, birthtime, birthtimeMs, blksize, blocks, ctime, ctimeMs, dev, gid, ino, mode, mtime, mtimeMs, nlink, rdev, size, uid } = st;
        this.#atime = atime;
        this.#atimeMs = atimeMs;
        this.#birthtime = birthtime;
        this.#birthtimeMs = birthtimeMs;
        this.#blksize = blksize;
        this.#blocks = blocks;
        this.#ctime = ctime;
        this.#ctimeMs = ctimeMs;
        this.#dev = dev;
        this.#gid = gid;
        this.#ino = ino;
        this.#mode = mode;
        this.#mtime = mtime;
        this.#mtimeMs = mtimeMs;
        this.#nlink = nlink;
        this.#rdev = rdev;
        this.#size = size;
        this.#uid = uid;
        const ifmt = entToType(st);
        this.#type = this.#type & IFMT_UNKNOWN | ifmt | LSTAT_CALLED;
        if (ifmt !== UNKNOWN && ifmt !== IFDIR && ifmt !== IFLNK) {
          this.#type |= ENOTDIR;
        }
      }
      #onReaddirCB = [];
      #readdirCBInFlight = false;
      #callOnReaddirCB(children) {
        this.#readdirCBInFlight = false;
        const cbs = this.#onReaddirCB.slice();
        this.#onReaddirCB.length = 0;
        cbs.forEach((cb) => cb(null, children));
      }
      /**
       * Standard node-style callback interface to get list of directory entries.
       *
       * If the Path cannot or does not contain any children, then an empty array
       * is returned.
       *
       * Results are cached, and thus may be out of date if the filesystem is
       * mutated.
       *
       * @param cb The callback called with (er, entries).  Note that the `er`
       * param is somewhat extraneous, as all readdir() errors are handled and
       * simply result in an empty set of entries being returned.
       * @param allowZalgo Boolean indicating that immediately known results should
       * *not* be deferred with `queueMicrotask`. Defaults to `false`. Release
       * zalgo at your peril, the dark pony lord is devious and unforgiving.
       */
      readdirCB(cb, allowZalgo = false) {
        if (!this.canReaddir()) {
          if (allowZalgo)
            cb(null, []);
          else
            queueMicrotask(() => cb(null, []));
          return;
        }
        const children = this.children();
        if (this.calledReaddir()) {
          const c = children.slice(0, children.provisional);
          if (allowZalgo)
            cb(null, c);
          else
            queueMicrotask(() => cb(null, c));
          return;
        }
        this.#onReaddirCB.push(cb);
        if (this.#readdirCBInFlight) {
          return;
        }
        this.#readdirCBInFlight = true;
        const fullpath = this.fullpath();
        this.#fs.readdir(fullpath, { withFileTypes: true }, (er, entries) => {
          if (er) {
            this.#readdirFail(er.code);
            children.provisional = 0;
          } else {
            for (const e of entries) {
              this.#readdirAddChild(e, children);
            }
            this.#readdirSuccess(children);
          }
          this.#callOnReaddirCB(children.slice(0, children.provisional));
          return;
        });
      }
      #asyncReaddirInFlight;
      /**
       * Return an array of known child entries.
       *
       * If the Path cannot or does not contain any children, then an empty array
       * is returned.
       *
       * Results are cached, and thus may be out of date if the filesystem is
       * mutated.
       */
      async readdir() {
        if (!this.canReaddir()) {
          return [];
        }
        const children = this.children();
        if (this.calledReaddir()) {
          return children.slice(0, children.provisional);
        }
        const fullpath = this.fullpath();
        if (this.#asyncReaddirInFlight) {
          await this.#asyncReaddirInFlight;
        } else {
          let resolve = () => {
          };
          this.#asyncReaddirInFlight = new Promise((res) => resolve = res);
          try {
            for (const e of await this.#fs.promises.readdir(fullpath, {
              withFileTypes: true
            })) {
              this.#readdirAddChild(e, children);
            }
            this.#readdirSuccess(children);
          } catch (er) {
            this.#readdirFail(er.code);
            children.provisional = 0;
          }
          this.#asyncReaddirInFlight = void 0;
          resolve();
        }
        return children.slice(0, children.provisional);
      }
      /**
       * synchronous {@link PathBase.readdir}
       */
      readdirSync() {
        if (!this.canReaddir()) {
          return [];
        }
        const children = this.children();
        if (this.calledReaddir()) {
          return children.slice(0, children.provisional);
        }
        const fullpath = this.fullpath();
        try {
          for (const e of this.#fs.readdirSync(fullpath, {
            withFileTypes: true
          })) {
            this.#readdirAddChild(e, children);
          }
          this.#readdirSuccess(children);
        } catch (er) {
          this.#readdirFail(er.code);
          children.provisional = 0;
        }
        return children.slice(0, children.provisional);
      }
      canReaddir() {
        if (this.#type & ENOCHILD)
          return false;
        const ifmt = IFMT & this.#type;
        if (!(ifmt === UNKNOWN || ifmt === IFDIR || ifmt === IFLNK)) {
          return false;
        }
        return true;
      }
      shouldWalk(dirs, walkFilter) {
        return (this.#type & IFDIR) === IFDIR && !(this.#type & ENOCHILD) && !dirs.has(this) && (!walkFilter || walkFilter(this));
      }
      /**
       * Return the Path object corresponding to path as resolved
       * by realpath(3).
       *
       * If the realpath call fails for any reason, `undefined` is returned.
       *
       * Result is cached, and thus may be outdated if the filesystem is mutated.
       * On success, returns a Path object.
       */
      async realpath() {
        if (this.#realpath)
          return this.#realpath;
        if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
          return void 0;
        try {
          const rp = await this.#fs.promises.realpath(this.fullpath());
          return this.#realpath = this.resolve(rp);
        } catch (_) {
          this.#markENOREALPATH();
        }
      }
      /**
       * Synchronous {@link realpath}
       */
      realpathSync() {
        if (this.#realpath)
          return this.#realpath;
        if ((ENOREALPATH | ENOREADLINK | ENOENT) & this.#type)
          return void 0;
        try {
          const rp = this.#fs.realpathSync(this.fullpath());
          return this.#realpath = this.resolve(rp);
        } catch (_) {
          this.#markENOREALPATH();
        }
      }
      /**
       * Internal method to mark this Path object as the scurry cwd,
       * called by {@link PathScurry#chdir}
       *
       * @internal
       */
      [setAsCwd](oldCwd) {
        if (oldCwd === this)
          return;
        oldCwd.isCWD = false;
        this.isCWD = true;
        const changed = /* @__PURE__ */ new Set([]);
        let rp = [];
        let p = this;
        while (p && p.parent) {
          changed.add(p);
          p.#relative = rp.join(this.sep);
          p.#relativePosix = rp.join("/");
          p = p.parent;
          rp.push("..");
        }
        p = oldCwd;
        while (p && p.parent && !changed.has(p)) {
          p.#relative = void 0;
          p.#relativePosix = void 0;
          p = p.parent;
        }
      }
    };
    PathWin32 = class _PathWin32 extends PathBase {
      /**
       * Separator for generating path strings.
       */
      sep = "\\";
      /**
       * Separator for parsing path strings.
       */
      splitSep = eitherSep;
      /**
       * Do not create new Path objects directly.  They should always be accessed
       * via the PathScurry class or other methods on the Path class.
       *
       * @internal
       */
      constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
        super(name, type, root, roots, nocase, children, opts);
      }
      /**
       * @internal
       */
      newChild(name, type = UNKNOWN, opts = {}) {
        return new _PathWin32(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
      }
      /**
       * @internal
       */
      getRootString(path3) {
        return import_node_path.win32.parse(path3).root;
      }
      /**
       * @internal
       */
      getRoot(rootPath) {
        rootPath = uncToDrive(rootPath.toUpperCase());
        if (rootPath === this.root.name) {
          return this.root;
        }
        for (const [compare5, root] of Object.entries(this.roots)) {
          if (this.sameRoot(rootPath, compare5)) {
            return this.roots[rootPath] = root;
          }
        }
        return this.roots[rootPath] = new PathScurryWin32(rootPath, this).root;
      }
      /**
       * @internal
       */
      sameRoot(rootPath, compare5 = this.root.name) {
        rootPath = rootPath.toUpperCase().replace(/\//g, "\\").replace(uncDriveRegexp, "$1\\");
        return rootPath === compare5;
      }
    };
    PathPosix = class _PathPosix extends PathBase {
      /**
       * separator for parsing path strings
       */
      splitSep = "/";
      /**
       * separator for generating path strings
       */
      sep = "/";
      /**
       * Do not create new Path objects directly.  They should always be accessed
       * via the PathScurry class or other methods on the Path class.
       *
       * @internal
       */
      constructor(name, type = UNKNOWN, root, roots, nocase, children, opts) {
        super(name, type, root, roots, nocase, children, opts);
      }
      /**
       * @internal
       */
      getRootString(path3) {
        return path3.startsWith("/") ? "/" : "";
      }
      /**
       * @internal
       */
      getRoot(_rootPath) {
        return this.root;
      }
      /**
       * @internal
       */
      newChild(name, type = UNKNOWN, opts = {}) {
        return new _PathPosix(name, type, this.root, this.roots, this.nocase, this.childrenCache(), opts);
      }
    };
    PathScurryBase = class {
      /**
       * The root Path entry for the current working directory of this Scurry
       */
      root;
      /**
       * The string path for the root of this Scurry's current working directory
       */
      rootPath;
      /**
       * A collection of all roots encountered, referenced by rootPath
       */
      roots;
      /**
       * The Path entry corresponding to this PathScurry's current working directory.
       */
      cwd;
      #resolveCache;
      #resolvePosixCache;
      #children;
      /**
       * Perform path comparisons case-insensitively.
       *
       * Defaults true on Darwin and Windows systems, false elsewhere.
       */
      nocase;
      #fs;
      /**
       * This class should not be instantiated directly.
       *
       * Use PathScurryWin32, PathScurryDarwin, PathScurryPosix, or PathScurry
       *
       * @internal
       */
      constructor(cwd = process.cwd(), pathImpl, sep2, { nocase, childrenCacheSize = 16 * 1024, fs: fs2 = defaultFS } = {}) {
        this.#fs = fsFromOption(fs2);
        if (cwd instanceof URL || cwd.startsWith("file://")) {
          cwd = (0, import_node_url.fileURLToPath)(cwd);
        }
        const cwdPath = pathImpl.resolve(cwd);
        this.roots = /* @__PURE__ */ Object.create(null);
        this.rootPath = this.parseRootPath(cwdPath);
        this.#resolveCache = new ResolveCache();
        this.#resolvePosixCache = new ResolveCache();
        this.#children = new ChildrenCache(childrenCacheSize);
        const split2 = cwdPath.substring(this.rootPath.length).split(sep2);
        if (split2.length === 1 && !split2[0]) {
          split2.pop();
        }
        if (nocase === void 0) {
          throw new TypeError("must provide nocase setting to PathScurryBase ctor");
        }
        this.nocase = nocase;
        this.root = this.newRoot(this.#fs);
        this.roots[this.rootPath] = this.root;
        let prev = this.root;
        let len = split2.length - 1;
        const joinSep = pathImpl.sep;
        let abs = this.rootPath;
        let sawFirst = false;
        for (const part of split2) {
          const l = len--;
          prev = prev.child(part, {
            relative: new Array(l).fill("..").join(joinSep),
            relativePosix: new Array(l).fill("..").join("/"),
            fullpath: abs += (sawFirst ? "" : joinSep) + part
          });
          sawFirst = true;
        }
        this.cwd = prev;
      }
      /**
       * Get the depth of a provided path, string, or the cwd
       */
      depth(path3 = this.cwd) {
        if (typeof path3 === "string") {
          path3 = this.cwd.resolve(path3);
        }
        return path3.depth();
      }
      /**
       * Return the cache of child entries.  Exposed so subclasses can create
       * child Path objects in a platform-specific way.
       *
       * @internal
       */
      childrenCache() {
        return this.#children;
      }
      /**
       * Resolve one or more path strings to a resolved string
       *
       * Same interface as require('path').resolve.
       *
       * Much faster than path.resolve() when called multiple times for the same
       * path, because the resolved Path objects are cached.  Much slower
       * otherwise.
       */
      resolve(...paths) {
        let r = "";
        for (let i = paths.length - 1; i >= 0; i--) {
          const p = paths[i];
          if (!p || p === ".")
            continue;
          r = r ? `${p}/${r}` : p;
          if (this.isAbsolute(p)) {
            break;
          }
        }
        const cached = this.#resolveCache.get(r);
        if (cached !== void 0) {
          return cached;
        }
        const result = this.cwd.resolve(r).fullpath();
        this.#resolveCache.set(r, result);
        return result;
      }
      /**
       * Resolve one or more path strings to a resolved string, returning
       * the posix path.  Identical to .resolve() on posix systems, but on
       * windows will return a forward-slash separated UNC path.
       *
       * Same interface as require('path').resolve.
       *
       * Much faster than path.resolve() when called multiple times for the same
       * path, because the resolved Path objects are cached.  Much slower
       * otherwise.
       */
      resolvePosix(...paths) {
        let r = "";
        for (let i = paths.length - 1; i >= 0; i--) {
          const p = paths[i];
          if (!p || p === ".")
            continue;
          r = r ? `${p}/${r}` : p;
          if (this.isAbsolute(p)) {
            break;
          }
        }
        const cached = this.#resolvePosixCache.get(r);
        if (cached !== void 0) {
          return cached;
        }
        const result = this.cwd.resolve(r).fullpathPosix();
        this.#resolvePosixCache.set(r, result);
        return result;
      }
      /**
       * find the relative path from the cwd to the supplied path string or entry
       */
      relative(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return entry.relative();
      }
      /**
       * find the relative path from the cwd to the supplied path string or
       * entry, using / as the path delimiter, even on Windows.
       */
      relativePosix(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return entry.relativePosix();
      }
      /**
       * Return the basename for the provided string or Path object
       */
      basename(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return entry.name;
      }
      /**
       * Return the dirname for the provided string or Path object
       */
      dirname(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return (entry.parent || entry).fullpath();
      }
      async readdir(entry = this.cwd, opts = {
        withFileTypes: true
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes } = opts;
        if (!entry.canReaddir()) {
          return [];
        } else {
          const p = await entry.readdir();
          return withFileTypes ? p : p.map((e) => e.name);
        }
      }
      readdirSync(entry = this.cwd, opts = {
        withFileTypes: true
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true } = opts;
        if (!entry.canReaddir()) {
          return [];
        } else if (withFileTypes) {
          return entry.readdirSync();
        } else {
          return entry.readdirSync().map((e) => e.name);
        }
      }
      /**
       * Call lstat() on the string or Path object, and update all known
       * information that can be determined.
       *
       * Note that unlike `fs.lstat()`, the returned value does not contain some
       * information, such as `mode`, `dev`, `nlink`, and `ino`.  If that
       * information is required, you will need to call `fs.lstat` yourself.
       *
       * If the Path refers to a nonexistent file, or if the lstat call fails for
       * any reason, `undefined` is returned.  Otherwise the updated Path object is
       * returned.
       *
       * Results are cached, and thus may be out of date if the filesystem is
       * mutated.
       */
      async lstat(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return entry.lstat();
      }
      /**
       * synchronous {@link PathScurryBase.lstat}
       */
      lstatSync(entry = this.cwd) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        }
        return entry.lstatSync();
      }
      async readlink(entry = this.cwd, { withFileTypes } = {
        withFileTypes: false
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          withFileTypes = entry.withFileTypes;
          entry = this.cwd;
        }
        const e = await entry.readlink();
        return withFileTypes ? e : e?.fullpath();
      }
      readlinkSync(entry = this.cwd, { withFileTypes } = {
        withFileTypes: false
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          withFileTypes = entry.withFileTypes;
          entry = this.cwd;
        }
        const e = entry.readlinkSync();
        return withFileTypes ? e : e?.fullpath();
      }
      async realpath(entry = this.cwd, { withFileTypes } = {
        withFileTypes: false
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          withFileTypes = entry.withFileTypes;
          entry = this.cwd;
        }
        const e = await entry.realpath();
        return withFileTypes ? e : e?.fullpath();
      }
      realpathSync(entry = this.cwd, { withFileTypes } = {
        withFileTypes: false
      }) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          withFileTypes = entry.withFileTypes;
          entry = this.cwd;
        }
        const e = entry.realpathSync();
        return withFileTypes ? e : e?.fullpath();
      }
      async walk(entry = this.cwd, opts = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true, follow = false, filter: filter3, walkFilter } = opts;
        const results = [];
        if (!filter3 || filter3(entry)) {
          results.push(withFileTypes ? entry : entry.fullpath());
        }
        const dirs = /* @__PURE__ */ new Set();
        const walk = (dir, cb) => {
          dirs.add(dir);
          dir.readdirCB((er, entries) => {
            if (er) {
              return cb(er);
            }
            let len = entries.length;
            if (!len)
              return cb();
            const next = () => {
              if (--len === 0) {
                cb();
              }
            };
            for (const e of entries) {
              if (!filter3 || filter3(e)) {
                results.push(withFileTypes ? e : e.fullpath());
              }
              if (follow && e.isSymbolicLink()) {
                e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r).then((r) => r?.shouldWalk(dirs, walkFilter) ? walk(r, next) : next());
              } else {
                if (e.shouldWalk(dirs, walkFilter)) {
                  walk(e, next);
                } else {
                  next();
                }
              }
            }
          }, true);
        };
        const start = entry;
        return new Promise((res, rej) => {
          walk(start, (er) => {
            if (er)
              return rej(er);
            res(results);
          });
        });
      }
      walkSync(entry = this.cwd, opts = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true, follow = false, filter: filter3, walkFilter } = opts;
        const results = [];
        if (!filter3 || filter3(entry)) {
          results.push(withFileTypes ? entry : entry.fullpath());
        }
        const dirs = /* @__PURE__ */ new Set([entry]);
        for (const dir of dirs) {
          const entries = dir.readdirSync();
          for (const e of entries) {
            if (!filter3 || filter3(e)) {
              results.push(withFileTypes ? e : e.fullpath());
            }
            let r = e;
            if (e.isSymbolicLink()) {
              if (!(follow && (r = e.realpathSync())))
                continue;
              if (r.isUnknown())
                r.lstatSync();
            }
            if (r.shouldWalk(dirs, walkFilter)) {
              dirs.add(r);
            }
          }
        }
        return results;
      }
      /**
       * Support for `for await`
       *
       * Alias for {@link PathScurryBase.iterate}
       *
       * Note: As of Node 19, this is very slow, compared to other methods of
       * walking.  Consider using {@link PathScurryBase.stream} if memory overhead
       * and backpressure are concerns, or {@link PathScurryBase.walk} if not.
       */
      [Symbol.asyncIterator]() {
        return this.iterate();
      }
      iterate(entry = this.cwd, options = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          options = entry;
          entry = this.cwd;
        }
        return this.stream(entry, options)[Symbol.asyncIterator]();
      }
      /**
       * Iterating over a PathScurry performs a synchronous walk.
       *
       * Alias for {@link PathScurryBase.iterateSync}
       */
      [Symbol.iterator]() {
        return this.iterateSync();
      }
      *iterateSync(entry = this.cwd, opts = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true, follow = false, filter: filter3, walkFilter } = opts;
        if (!filter3 || filter3(entry)) {
          yield withFileTypes ? entry : entry.fullpath();
        }
        const dirs = /* @__PURE__ */ new Set([entry]);
        for (const dir of dirs) {
          const entries = dir.readdirSync();
          for (const e of entries) {
            if (!filter3 || filter3(e)) {
              yield withFileTypes ? e : e.fullpath();
            }
            let r = e;
            if (e.isSymbolicLink()) {
              if (!(follow && (r = e.realpathSync())))
                continue;
              if (r.isUnknown())
                r.lstatSync();
            }
            if (r.shouldWalk(dirs, walkFilter)) {
              dirs.add(r);
            }
          }
        }
      }
      stream(entry = this.cwd, opts = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true, follow = false, filter: filter3, walkFilter } = opts;
        const results = new Minipass({ objectMode: true });
        if (!filter3 || filter3(entry)) {
          results.write(withFileTypes ? entry : entry.fullpath());
        }
        const dirs = /* @__PURE__ */ new Set();
        const queue = [entry];
        let processing = 0;
        const process2 = () => {
          let paused = false;
          while (!paused) {
            const dir = queue.shift();
            if (!dir) {
              if (processing === 0)
                results.end();
              return;
            }
            processing++;
            dirs.add(dir);
            const onReaddir = (er, entries, didRealpaths = false) => {
              if (er)
                return results.emit("error", er);
              if (follow && !didRealpaths) {
                const promises2 = [];
                for (const e of entries) {
                  if (e.isSymbolicLink()) {
                    promises2.push(e.realpath().then((r) => r?.isUnknown() ? r.lstat() : r));
                  }
                }
                if (promises2.length) {
                  Promise.all(promises2).then(() => onReaddir(null, entries, true));
                  return;
                }
              }
              for (const e of entries) {
                if (e && (!filter3 || filter3(e))) {
                  if (!results.write(withFileTypes ? e : e.fullpath())) {
                    paused = true;
                  }
                }
              }
              processing--;
              for (const e of entries) {
                const r = e.realpathCached() || e;
                if (r.shouldWalk(dirs, walkFilter)) {
                  queue.push(r);
                }
              }
              if (paused && !results.flowing) {
                results.once("drain", process2);
              } else if (!sync2) {
                process2();
              }
            };
            let sync2 = true;
            dir.readdirCB(onReaddir, true);
            sync2 = false;
          }
        };
        process2();
        return results;
      }
      streamSync(entry = this.cwd, opts = {}) {
        if (typeof entry === "string") {
          entry = this.cwd.resolve(entry);
        } else if (!(entry instanceof PathBase)) {
          opts = entry;
          entry = this.cwd;
        }
        const { withFileTypes = true, follow = false, filter: filter3, walkFilter } = opts;
        const results = new Minipass({ objectMode: true });
        const dirs = /* @__PURE__ */ new Set();
        if (!filter3 || filter3(entry)) {
          results.write(withFileTypes ? entry : entry.fullpath());
        }
        const queue = [entry];
        let processing = 0;
        const process2 = () => {
          let paused = false;
          while (!paused) {
            const dir = queue.shift();
            if (!dir) {
              if (processing === 0)
                results.end();
              return;
            }
            processing++;
            dirs.add(dir);
            const entries = dir.readdirSync();
            for (const e of entries) {
              if (!filter3 || filter3(e)) {
                if (!results.write(withFileTypes ? e : e.fullpath())) {
                  paused = true;
                }
              }
            }
            processing--;
            for (const e of entries) {
              let r = e;
              if (e.isSymbolicLink()) {
                if (!(follow && (r = e.realpathSync())))
                  continue;
                if (r.isUnknown())
                  r.lstatSync();
              }
              if (r.shouldWalk(dirs, walkFilter)) {
                queue.push(r);
              }
            }
          }
          if (paused && !results.flowing)
            results.once("drain", process2);
        };
        process2();
        return results;
      }
      chdir(path3 = this.cwd) {
        const oldCwd = this.cwd;
        this.cwd = typeof path3 === "string" ? this.cwd.resolve(path3) : path3;
        this.cwd[setAsCwd](oldCwd);
      }
    };
    PathScurryWin32 = class extends PathScurryBase {
      /**
       * separator for generating path strings
       */
      sep = "\\";
      constructor(cwd = process.cwd(), opts = {}) {
        const { nocase = true } = opts;
        super(cwd, import_node_path.win32, "\\", { ...opts, nocase });
        this.nocase = nocase;
        for (let p = this.cwd; p; p = p.parent) {
          p.nocase = this.nocase;
        }
      }
      /**
       * @internal
       */
      parseRootPath(dir) {
        return import_node_path.win32.parse(dir).root.toUpperCase();
      }
      /**
       * @internal
       */
      newRoot(fs2) {
        return new PathWin32(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs2 });
      }
      /**
       * Return true if the provided path string is an absolute path
       */
      isAbsolute(p) {
        return p.startsWith("/") || p.startsWith("\\") || /^[a-z]:(\/|\\)/i.test(p);
      }
    };
    PathScurryPosix = class extends PathScurryBase {
      /**
       * separator for generating path strings
       */
      sep = "/";
      constructor(cwd = process.cwd(), opts = {}) {
        const { nocase = false } = opts;
        super(cwd, import_node_path.posix, "/", { ...opts, nocase });
        this.nocase = nocase;
      }
      /**
       * @internal
       */
      parseRootPath(_dir) {
        return "/";
      }
      /**
       * @internal
       */
      newRoot(fs2) {
        return new PathPosix(this.rootPath, IFDIR, void 0, this.roots, this.nocase, this.childrenCache(), { fs: fs2 });
      }
      /**
       * Return true if the provided path string is an absolute path
       */
      isAbsolute(p) {
        return p.startsWith("/");
      }
    };
    PathScurryDarwin = class extends PathScurryPosix {
      constructor(cwd = process.cwd(), opts = {}) {
        const { nocase = true } = opts;
        super(cwd, { ...opts, nocase });
      }
    };
    Path = process.platform === "win32" ? PathWin32 : PathPosix;
    PathScurry = process.platform === "win32" ? PathScurryWin32 : process.platform === "darwin" ? PathScurryDarwin : PathScurryPosix;
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/pattern.js
var isPatternList, isGlobList, Pattern;
var init_pattern = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/pattern.js"() {
    init_importMeta();
    init_esm();
    isPatternList = (pl) => pl.length >= 1;
    isGlobList = (gl) => gl.length >= 1;
    Pattern = class _Pattern {
      #patternList;
      #globList;
      #index;
      length;
      #platform;
      #rest;
      #globString;
      #isDrive;
      #isUNC;
      #isAbsolute;
      #followGlobstar = true;
      constructor(patternList, globList, index2, platform) {
        if (!isPatternList(patternList)) {
          throw new TypeError("empty pattern list");
        }
        if (!isGlobList(globList)) {
          throw new TypeError("empty glob list");
        }
        if (globList.length !== patternList.length) {
          throw new TypeError("mismatched pattern list and glob list lengths");
        }
        this.length = patternList.length;
        if (index2 < 0 || index2 >= this.length) {
          throw new TypeError("index out of range");
        }
        this.#patternList = patternList;
        this.#globList = globList;
        this.#index = index2;
        this.#platform = platform;
        if (this.#index === 0) {
          if (this.isUNC()) {
            const [p0, p1, p2, p3, ...prest] = this.#patternList;
            const [g0, g1, g2, g3, ...grest] = this.#globList;
            if (prest[0] === "") {
              prest.shift();
              grest.shift();
            }
            const p = [p0, p1, p2, p3, ""].join("/");
            const g = [g0, g1, g2, g3, ""].join("/");
            this.#patternList = [p, ...prest];
            this.#globList = [g, ...grest];
            this.length = this.#patternList.length;
          } else if (this.isDrive() || this.isAbsolute()) {
            const [p1, ...prest] = this.#patternList;
            const [g1, ...grest] = this.#globList;
            if (prest[0] === "") {
              prest.shift();
              grest.shift();
            }
            const p = p1 + "/";
            const g = g1 + "/";
            this.#patternList = [p, ...prest];
            this.#globList = [g, ...grest];
            this.length = this.#patternList.length;
          }
        }
      }
      /**
       * The first entry in the parsed list of patterns
       */
      pattern() {
        return this.#patternList[this.#index];
      }
      /**
       * true of if pattern() returns a string
       */
      isString() {
        return typeof this.#patternList[this.#index] === "string";
      }
      /**
       * true of if pattern() returns GLOBSTAR
       */
      isGlobstar() {
        return this.#patternList[this.#index] === GLOBSTAR;
      }
      /**
       * true if pattern() returns a regexp
       */
      isRegExp() {
        return this.#patternList[this.#index] instanceof RegExp;
      }
      /**
       * The /-joined set of glob parts that make up this pattern
       */
      globString() {
        return this.#globString = this.#globString || (this.#index === 0 ? this.isAbsolute() ? this.#globList[0] + this.#globList.slice(1).join("/") : this.#globList.join("/") : this.#globList.slice(this.#index).join("/"));
      }
      /**
       * true if there are more pattern parts after this one
       */
      hasMore() {
        return this.length > this.#index + 1;
      }
      /**
       * The rest of the pattern after this part, or null if this is the end
       */
      rest() {
        if (this.#rest !== void 0)
          return this.#rest;
        if (!this.hasMore())
          return this.#rest = null;
        this.#rest = new _Pattern(this.#patternList, this.#globList, this.#index + 1, this.#platform);
        this.#rest.#isAbsolute = this.#isAbsolute;
        this.#rest.#isUNC = this.#isUNC;
        this.#rest.#isDrive = this.#isDrive;
        return this.#rest;
      }
      /**
       * true if the pattern represents a //unc/path/ on windows
       */
      isUNC() {
        const pl = this.#patternList;
        return this.#isUNC !== void 0 ? this.#isUNC : this.#isUNC = this.#platform === "win32" && this.#index === 0 && pl[0] === "" && pl[1] === "" && typeof pl[2] === "string" && !!pl[2] && typeof pl[3] === "string" && !!pl[3];
      }
      // pattern like C:/...
      // split = ['C:', ...]
      // XXX: would be nice to handle patterns like `c:*` to test the cwd
      // in c: for *, but I don't know of a way to even figure out what that
      // cwd is without actually chdir'ing into it?
      /**
       * True if the pattern starts with a drive letter on Windows
       */
      isDrive() {
        const pl = this.#patternList;
        return this.#isDrive !== void 0 ? this.#isDrive : this.#isDrive = this.#platform === "win32" && this.#index === 0 && this.length > 1 && typeof pl[0] === "string" && /^[a-z]:$/i.test(pl[0]);
      }
      // pattern = '/' or '/...' or '/x/...'
      // split = ['', ''] or ['', ...] or ['', 'x', ...]
      // Drive and UNC both considered absolute on windows
      /**
       * True if the pattern is rooted on an absolute path
       */
      isAbsolute() {
        const pl = this.#patternList;
        return this.#isAbsolute !== void 0 ? this.#isAbsolute : this.#isAbsolute = pl[0] === "" && pl.length > 1 || this.isDrive() || this.isUNC();
      }
      /**
       * consume the root of the pattern, and return it
       */
      root() {
        const p = this.#patternList[0];
        return typeof p === "string" && this.isAbsolute() && this.#index === 0 ? p : "";
      }
      /**
       * Check to see if the current globstar pattern is allowed to follow
       * a symbolic link.
       */
      checkFollowGlobstar() {
        return !(this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar);
      }
      /**
       * Mark that the current globstar pattern is following a symbolic link
       */
      markFollowGlobstar() {
        if (this.#index === 0 || !this.isGlobstar() || !this.#followGlobstar)
          return false;
        this.#followGlobstar = false;
        return true;
      }
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/ignore.js
var defaultPlatform2, Ignore;
var init_ignore = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/ignore.js"() {
    init_importMeta();
    init_esm();
    init_pattern();
    defaultPlatform2 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
    Ignore = class {
      relative;
      relativeChildren;
      absolute;
      absoluteChildren;
      platform;
      mmopts;
      constructor(ignored, { nobrace, nocase, noext, noglobstar, platform = defaultPlatform2 }) {
        this.relative = [];
        this.absolute = [];
        this.relativeChildren = [];
        this.absoluteChildren = [];
        this.platform = platform;
        this.mmopts = {
          dot: true,
          nobrace,
          nocase,
          noext,
          noglobstar,
          optimizationLevel: 2,
          platform,
          nocomment: true,
          nonegate: true
        };
        for (const ign of ignored)
          this.add(ign);
      }
      add(ign) {
        const mm = new Minimatch(ign, this.mmopts);
        for (let i = 0; i < mm.set.length; i++) {
          const parsed = mm.set[i];
          const globParts = mm.globParts[i];
          if (!parsed || !globParts) {
            throw new Error("invalid pattern object");
          }
          while (parsed[0] === "." && globParts[0] === ".") {
            parsed.shift();
            globParts.shift();
          }
          const p = new Pattern(parsed, globParts, 0, this.platform);
          const m = new Minimatch(p.globString(), this.mmopts);
          const children = globParts[globParts.length - 1] === "**";
          const absolute = p.isAbsolute();
          if (absolute)
            this.absolute.push(m);
          else
            this.relative.push(m);
          if (children) {
            if (absolute)
              this.absoluteChildren.push(m);
            else
              this.relativeChildren.push(m);
          }
        }
      }
      ignored(p) {
        const fullpath = p.fullpath();
        const fullpaths = `${fullpath}/`;
        const relative = p.relative() || ".";
        const relatives = `${relative}/`;
        for (const m of this.relative) {
          if (m.match(relative) || m.match(relatives))
            return true;
        }
        for (const m of this.absolute) {
          if (m.match(fullpath) || m.match(fullpaths))
            return true;
        }
        return false;
      }
      childrenIgnored(p) {
        const fullpath = p.fullpath() + "/";
        const relative = (p.relative() || ".") + "/";
        for (const m of this.relativeChildren) {
          if (m.match(relative))
            return true;
        }
        for (const m of this.absoluteChildren) {
          if (m.match(fullpath))
            return true;
        }
        return false;
      }
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/processor.js
var HasWalkedCache, MatchRecord, SubWalks, Processor;
var init_processor = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/processor.js"() {
    init_importMeta();
    init_esm();
    HasWalkedCache = class _HasWalkedCache {
      store;
      constructor(store = /* @__PURE__ */ new Map()) {
        this.store = store;
      }
      copy() {
        return new _HasWalkedCache(new Map(this.store));
      }
      hasWalked(target, pattern) {
        return this.store.get(target.fullpath())?.has(pattern.globString());
      }
      storeWalked(target, pattern) {
        const fullpath = target.fullpath();
        const cached = this.store.get(fullpath);
        if (cached)
          cached.add(pattern.globString());
        else
          this.store.set(fullpath, /* @__PURE__ */ new Set([pattern.globString()]));
      }
    };
    MatchRecord = class {
      store = /* @__PURE__ */ new Map();
      add(target, absolute, ifDir) {
        const n = (absolute ? 2 : 0) | (ifDir ? 1 : 0);
        const current = this.store.get(target);
        this.store.set(target, current === void 0 ? n : n & current);
      }
      // match, absolute, ifdir
      entries() {
        return [...this.store.entries()].map(([path3, n]) => [
          path3,
          !!(n & 2),
          !!(n & 1)
        ]);
      }
    };
    SubWalks = class {
      store = /* @__PURE__ */ new Map();
      add(target, pattern) {
        if (!target.canReaddir()) {
          return;
        }
        const subs = this.store.get(target);
        if (subs) {
          if (!subs.find((p) => p.globString() === pattern.globString())) {
            subs.push(pattern);
          }
        } else
          this.store.set(target, [pattern]);
      }
      get(target) {
        const subs = this.store.get(target);
        if (!subs) {
          throw new Error("attempting to walk unknown path");
        }
        return subs;
      }
      entries() {
        return this.keys().map((k) => [k, this.store.get(k)]);
      }
      keys() {
        return [...this.store.keys()].filter((t) => t.canReaddir());
      }
    };
    Processor = class _Processor {
      hasWalkedCache;
      matches = new MatchRecord();
      subwalks = new SubWalks();
      patterns;
      follow;
      dot;
      opts;
      constructor(opts, hasWalkedCache) {
        this.opts = opts;
        this.follow = !!opts.follow;
        this.dot = !!opts.dot;
        this.hasWalkedCache = hasWalkedCache ? hasWalkedCache.copy() : new HasWalkedCache();
      }
      processPatterns(target, patterns) {
        this.patterns = patterns;
        const processingSet = patterns.map((p) => [target, p]);
        for (let [t, pattern] of processingSet) {
          this.hasWalkedCache.storeWalked(t, pattern);
          const root = pattern.root();
          const absolute = pattern.isAbsolute() && this.opts.absolute !== false;
          if (root) {
            t = t.resolve(root === "/" && this.opts.root !== void 0 ? this.opts.root : root);
            const rest2 = pattern.rest();
            if (!rest2) {
              this.matches.add(t, true, false);
              continue;
            } else {
              pattern = rest2;
            }
          }
          if (t.isENOENT())
            continue;
          let p;
          let rest;
          let changed = false;
          while (typeof (p = pattern.pattern()) === "string" && (rest = pattern.rest())) {
            const c = t.resolve(p);
            t = c;
            pattern = rest;
            changed = true;
          }
          p = pattern.pattern();
          rest = pattern.rest();
          if (changed) {
            if (this.hasWalkedCache.hasWalked(t, pattern))
              continue;
            this.hasWalkedCache.storeWalked(t, pattern);
          }
          if (typeof p === "string") {
            const ifDir = p === ".." || p === "" || p === ".";
            this.matches.add(t.resolve(p), absolute, ifDir);
            continue;
          } else if (p === GLOBSTAR) {
            if (!t.isSymbolicLink() || this.follow || pattern.checkFollowGlobstar()) {
              this.subwalks.add(t, pattern);
            }
            const rp = rest?.pattern();
            const rrest = rest?.rest();
            if (!rest || (rp === "" || rp === ".") && !rrest) {
              this.matches.add(t, absolute, rp === "" || rp === ".");
            } else {
              if (rp === "..") {
                const tp = t.parent || t;
                if (!rrest)
                  this.matches.add(tp, absolute, true);
                else if (!this.hasWalkedCache.hasWalked(tp, rrest)) {
                  this.subwalks.add(tp, rrest);
                }
              }
            }
          } else if (p instanceof RegExp) {
            this.subwalks.add(t, pattern);
          }
        }
        return this;
      }
      subwalkTargets() {
        return this.subwalks.keys();
      }
      child() {
        return new _Processor(this.opts, this.hasWalkedCache);
      }
      // return a new Processor containing the subwalks for each
      // child entry, and a set of matches, and
      // a hasWalkedCache that's a copy of this one
      // then we're going to call
      filterEntries(parent, entries) {
        const patterns = this.subwalks.get(parent);
        const results = this.child();
        for (const e of entries) {
          for (const pattern of patterns) {
            const absolute = pattern.isAbsolute();
            const p = pattern.pattern();
            const rest = pattern.rest();
            if (p === GLOBSTAR) {
              results.testGlobstar(e, pattern, rest, absolute);
            } else if (p instanceof RegExp) {
              results.testRegExp(e, p, rest, absolute);
            } else {
              results.testString(e, p, rest, absolute);
            }
          }
        }
        return results;
      }
      testGlobstar(e, pattern, rest, absolute) {
        if (this.dot || !e.name.startsWith(".")) {
          if (!pattern.hasMore()) {
            this.matches.add(e, absolute, false);
          }
          if (e.canReaddir()) {
            if (this.follow || !e.isSymbolicLink()) {
              this.subwalks.add(e, pattern);
            } else if (e.isSymbolicLink()) {
              if (rest && pattern.checkFollowGlobstar()) {
                this.subwalks.add(e, rest);
              } else if (pattern.markFollowGlobstar()) {
                this.subwalks.add(e, pattern);
              }
            }
          }
        }
        if (rest) {
          const rp = rest.pattern();
          if (typeof rp === "string" && // dots and empty were handled already
          rp !== ".." && rp !== "" && rp !== ".") {
            this.testString(e, rp, rest.rest(), absolute);
          } else if (rp === "..") {
            const ep = e.parent || e;
            this.subwalks.add(ep, rest);
          } else if (rp instanceof RegExp) {
            this.testRegExp(e, rp, rest.rest(), absolute);
          }
        }
      }
      testRegExp(e, p, rest, absolute) {
        if (!p.test(e.name))
          return;
        if (!rest) {
          this.matches.add(e, absolute, false);
        } else {
          this.subwalks.add(e, rest);
        }
      }
      testString(e, p, rest, absolute) {
        if (!e.isNamed(p))
          return;
        if (!rest) {
          this.matches.add(e, absolute, false);
        } else {
          this.subwalks.add(e, rest);
        }
      }
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/walker.js
var makeIgnore, GlobUtil, GlobWalker, GlobStream;
var init_walker = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/walker.js"() {
    init_importMeta();
    init_esm3();
    init_ignore();
    init_processor();
    makeIgnore = (ignore, opts) => typeof ignore === "string" ? new Ignore([ignore], opts) : Array.isArray(ignore) ? new Ignore(ignore, opts) : ignore;
    GlobUtil = class {
      path;
      patterns;
      opts;
      seen = /* @__PURE__ */ new Set();
      paused = false;
      aborted = false;
      #onResume = [];
      #ignore;
      #sep;
      signal;
      maxDepth;
      includeChildMatches;
      constructor(patterns, path3, opts) {
        this.patterns = patterns;
        this.path = path3;
        this.opts = opts;
        this.#sep = !opts.posix && opts.platform === "win32" ? "\\" : "/";
        this.includeChildMatches = opts.includeChildMatches !== false;
        if (opts.ignore || !this.includeChildMatches) {
          this.#ignore = makeIgnore(opts.ignore ?? [], opts);
          if (!this.includeChildMatches && typeof this.#ignore.add !== "function") {
            const m = "cannot ignore child matches, ignore lacks add() method.";
            throw new Error(m);
          }
        }
        this.maxDepth = opts.maxDepth || Infinity;
        if (opts.signal) {
          this.signal = opts.signal;
          this.signal.addEventListener("abort", () => {
            this.#onResume.length = 0;
          });
        }
      }
      #ignored(path3) {
        return this.seen.has(path3) || !!this.#ignore?.ignored?.(path3);
      }
      #childrenIgnored(path3) {
        return !!this.#ignore?.childrenIgnored?.(path3);
      }
      // backpressure mechanism
      pause() {
        this.paused = true;
      }
      resume() {
        if (this.signal?.aborted)
          return;
        this.paused = false;
        let fn = void 0;
        while (!this.paused && (fn = this.#onResume.shift())) {
          fn();
        }
      }
      onResume(fn) {
        if (this.signal?.aborted)
          return;
        if (!this.paused) {
          fn();
        } else {
          this.#onResume.push(fn);
        }
      }
      // do the requisite realpath/stat checking, and return the path
      // to add or undefined to filter it out.
      async matchCheck(e, ifDir) {
        if (ifDir && this.opts.nodir)
          return void 0;
        let rpc;
        if (this.opts.realpath) {
          rpc = e.realpathCached() || await e.realpath();
          if (!rpc)
            return void 0;
          e = rpc;
        }
        const needStat = e.isUnknown() || this.opts.stat;
        const s = needStat ? await e.lstat() : e;
        if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
          const target = await s.realpath();
          if (target && (target.isUnknown() || this.opts.stat)) {
            await target.lstat();
          }
        }
        return this.matchCheckTest(s, ifDir);
      }
      matchCheckTest(e, ifDir) {
        return e && (this.maxDepth === Infinity || e.depth() <= this.maxDepth) && (!ifDir || e.canReaddir()) && (!this.opts.nodir || !e.isDirectory()) && (!this.opts.nodir || !this.opts.follow || !e.isSymbolicLink() || !e.realpathCached()?.isDirectory()) && !this.#ignored(e) ? e : void 0;
      }
      matchCheckSync(e, ifDir) {
        if (ifDir && this.opts.nodir)
          return void 0;
        let rpc;
        if (this.opts.realpath) {
          rpc = e.realpathCached() || e.realpathSync();
          if (!rpc)
            return void 0;
          e = rpc;
        }
        const needStat = e.isUnknown() || this.opts.stat;
        const s = needStat ? e.lstatSync() : e;
        if (this.opts.follow && this.opts.nodir && s?.isSymbolicLink()) {
          const target = s.realpathSync();
          if (target && (target?.isUnknown() || this.opts.stat)) {
            target.lstatSync();
          }
        }
        return this.matchCheckTest(s, ifDir);
      }
      matchFinish(e, absolute) {
        if (this.#ignored(e))
          return;
        if (!this.includeChildMatches && this.#ignore?.add) {
          const ign = `${e.relativePosix()}/**`;
          this.#ignore.add(ign);
        }
        const abs = this.opts.absolute === void 0 ? absolute : this.opts.absolute;
        this.seen.add(e);
        const mark = this.opts.mark && e.isDirectory() ? this.#sep : "";
        if (this.opts.withFileTypes) {
          this.matchEmit(e);
        } else if (abs) {
          const abs2 = this.opts.posix ? e.fullpathPosix() : e.fullpath();
          this.matchEmit(abs2 + mark);
        } else {
          const rel = this.opts.posix ? e.relativePosix() : e.relative();
          const pre = this.opts.dotRelative && !rel.startsWith(".." + this.#sep) ? "." + this.#sep : "";
          this.matchEmit(!rel ? "." + mark : pre + rel + mark);
        }
      }
      async match(e, absolute, ifDir) {
        const p = await this.matchCheck(e, ifDir);
        if (p)
          this.matchFinish(p, absolute);
      }
      matchSync(e, absolute, ifDir) {
        const p = this.matchCheckSync(e, ifDir);
        if (p)
          this.matchFinish(p, absolute);
      }
      walkCB(target, patterns, cb) {
        if (this.signal?.aborted)
          cb();
        this.walkCB2(target, patterns, new Processor(this.opts), cb);
      }
      walkCB2(target, patterns, processor, cb) {
        if (this.#childrenIgnored(target))
          return cb();
        if (this.signal?.aborted)
          cb();
        if (this.paused) {
          this.onResume(() => this.walkCB2(target, patterns, processor, cb));
          return;
        }
        processor.processPatterns(target, patterns);
        let tasks = 1;
        const next = () => {
          if (--tasks === 0)
            cb();
        };
        for (const [m, absolute, ifDir] of processor.matches.entries()) {
          if (this.#ignored(m))
            continue;
          tasks++;
          this.match(m, absolute, ifDir).then(() => next());
        }
        for (const t of processor.subwalkTargets()) {
          if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
            continue;
          }
          tasks++;
          const childrenCached = t.readdirCached();
          if (t.calledReaddir())
            this.walkCB3(t, childrenCached, processor, next);
          else {
            t.readdirCB((_, entries) => this.walkCB3(t, entries, processor, next), true);
          }
        }
        next();
      }
      walkCB3(target, entries, processor, cb) {
        processor = processor.filterEntries(target, entries);
        let tasks = 1;
        const next = () => {
          if (--tasks === 0)
            cb();
        };
        for (const [m, absolute, ifDir] of processor.matches.entries()) {
          if (this.#ignored(m))
            continue;
          tasks++;
          this.match(m, absolute, ifDir).then(() => next());
        }
        for (const [target2, patterns] of processor.subwalks.entries()) {
          tasks++;
          this.walkCB2(target2, patterns, processor.child(), next);
        }
        next();
      }
      walkCBSync(target, patterns, cb) {
        if (this.signal?.aborted)
          cb();
        this.walkCB2Sync(target, patterns, new Processor(this.opts), cb);
      }
      walkCB2Sync(target, patterns, processor, cb) {
        if (this.#childrenIgnored(target))
          return cb();
        if (this.signal?.aborted)
          cb();
        if (this.paused) {
          this.onResume(() => this.walkCB2Sync(target, patterns, processor, cb));
          return;
        }
        processor.processPatterns(target, patterns);
        let tasks = 1;
        const next = () => {
          if (--tasks === 0)
            cb();
        };
        for (const [m, absolute, ifDir] of processor.matches.entries()) {
          if (this.#ignored(m))
            continue;
          this.matchSync(m, absolute, ifDir);
        }
        for (const t of processor.subwalkTargets()) {
          if (this.maxDepth !== Infinity && t.depth() >= this.maxDepth) {
            continue;
          }
          tasks++;
          const children = t.readdirSync();
          this.walkCB3Sync(t, children, processor, next);
        }
        next();
      }
      walkCB3Sync(target, entries, processor, cb) {
        processor = processor.filterEntries(target, entries);
        let tasks = 1;
        const next = () => {
          if (--tasks === 0)
            cb();
        };
        for (const [m, absolute, ifDir] of processor.matches.entries()) {
          if (this.#ignored(m))
            continue;
          this.matchSync(m, absolute, ifDir);
        }
        for (const [target2, patterns] of processor.subwalks.entries()) {
          tasks++;
          this.walkCB2Sync(target2, patterns, processor.child(), next);
        }
        next();
      }
    };
    GlobWalker = class extends GlobUtil {
      matches = /* @__PURE__ */ new Set();
      constructor(patterns, path3, opts) {
        super(patterns, path3, opts);
      }
      matchEmit(e) {
        this.matches.add(e);
      }
      async walk() {
        if (this.signal?.aborted)
          throw this.signal.reason;
        if (this.path.isUnknown()) {
          await this.path.lstat();
        }
        await new Promise((res, rej) => {
          this.walkCB(this.path, this.patterns, () => {
            if (this.signal?.aborted) {
              rej(this.signal.reason);
            } else {
              res(this.matches);
            }
          });
        });
        return this.matches;
      }
      walkSync() {
        if (this.signal?.aborted)
          throw this.signal.reason;
        if (this.path.isUnknown()) {
          this.path.lstatSync();
        }
        this.walkCBSync(this.path, this.patterns, () => {
          if (this.signal?.aborted)
            throw this.signal.reason;
        });
        return this.matches;
      }
    };
    GlobStream = class extends GlobUtil {
      results;
      constructor(patterns, path3, opts) {
        super(patterns, path3, opts);
        this.results = new Minipass({
          signal: this.signal,
          objectMode: true
        });
        this.results.on("drain", () => this.resume());
        this.results.on("resume", () => this.resume());
      }
      matchEmit(e) {
        this.results.write(e);
        if (!this.results.flowing)
          this.pause();
      }
      stream() {
        const target = this.path;
        if (target.isUnknown()) {
          target.lstat().then(() => {
            this.walkCB(target, this.patterns, () => this.results.end());
          });
        } else {
          this.walkCB(target, this.patterns, () => this.results.end());
        }
        return this.results;
      }
      streamSync() {
        if (this.path.isUnknown()) {
          this.path.lstatSync();
        }
        this.walkCBSync(this.path, this.patterns, () => this.results.end());
        return this.results;
      }
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/glob.js
var import_node_url2, defaultPlatform3, Glob;
var init_glob = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/glob.js"() {
    init_importMeta();
    init_esm();
    import_node_url2 = require("node:url");
    init_esm4();
    init_pattern();
    init_walker();
    defaultPlatform3 = typeof process === "object" && process && typeof process.platform === "string" ? process.platform : "linux";
    Glob = class {
      absolute;
      cwd;
      root;
      dot;
      dotRelative;
      follow;
      ignore;
      magicalBraces;
      mark;
      matchBase;
      maxDepth;
      nobrace;
      nocase;
      nodir;
      noext;
      noglobstar;
      pattern;
      platform;
      realpath;
      scurry;
      stat;
      signal;
      windowsPathsNoEscape;
      withFileTypes;
      includeChildMatches;
      /**
       * The options provided to the constructor.
       */
      opts;
      /**
       * An array of parsed immutable {@link Pattern} objects.
       */
      patterns;
      /**
       * All options are stored as properties on the `Glob` object.
       *
       * See {@link GlobOptions} for full options descriptions.
       *
       * Note that a previous `Glob` object can be passed as the
       * `GlobOptions` to another `Glob` instantiation to re-use settings
       * and caches with a new pattern.
       *
       * Traversal functions can be called multiple times to run the walk
       * again.
       */
      constructor(pattern, opts) {
        if (!opts)
          throw new TypeError("glob options required");
        this.withFileTypes = !!opts.withFileTypes;
        this.signal = opts.signal;
        this.follow = !!opts.follow;
        this.dot = !!opts.dot;
        this.dotRelative = !!opts.dotRelative;
        this.nodir = !!opts.nodir;
        this.mark = !!opts.mark;
        if (!opts.cwd) {
          this.cwd = "";
        } else if (opts.cwd instanceof URL || opts.cwd.startsWith("file://")) {
          opts.cwd = (0, import_node_url2.fileURLToPath)(opts.cwd);
        }
        this.cwd = opts.cwd || "";
        this.root = opts.root;
        this.magicalBraces = !!opts.magicalBraces;
        this.nobrace = !!opts.nobrace;
        this.noext = !!opts.noext;
        this.realpath = !!opts.realpath;
        this.absolute = opts.absolute;
        this.includeChildMatches = opts.includeChildMatches !== false;
        this.noglobstar = !!opts.noglobstar;
        this.matchBase = !!opts.matchBase;
        this.maxDepth = typeof opts.maxDepth === "number" ? opts.maxDepth : Infinity;
        this.stat = !!opts.stat;
        this.ignore = opts.ignore;
        if (this.withFileTypes && this.absolute !== void 0) {
          throw new Error("cannot set absolute and withFileTypes:true");
        }
        if (typeof pattern === "string") {
          pattern = [pattern];
        }
        this.windowsPathsNoEscape = !!opts.windowsPathsNoEscape || opts.allowWindowsEscape === false;
        if (this.windowsPathsNoEscape) {
          pattern = pattern.map((p) => p.replace(/\\/g, "/"));
        }
        if (this.matchBase) {
          if (opts.noglobstar) {
            throw new TypeError("base matching requires globstar");
          }
          pattern = pattern.map((p) => p.includes("/") ? p : `./**/${p}`);
        }
        this.pattern = pattern;
        this.platform = opts.platform || defaultPlatform3;
        this.opts = { ...opts, platform: this.platform };
        if (opts.scurry) {
          this.scurry = opts.scurry;
          if (opts.nocase !== void 0 && opts.nocase !== opts.scurry.nocase) {
            throw new Error("nocase option contradicts provided scurry option");
          }
        } else {
          const Scurry = opts.platform === "win32" ? PathScurryWin32 : opts.platform === "darwin" ? PathScurryDarwin : opts.platform ? PathScurryPosix : PathScurry;
          this.scurry = new Scurry(this.cwd, {
            nocase: opts.nocase,
            fs: opts.fs
          });
        }
        this.nocase = this.scurry.nocase;
        const nocaseMagicOnly = this.platform === "darwin" || this.platform === "win32";
        const mmo = {
          // default nocase based on platform
          ...opts,
          dot: this.dot,
          matchBase: this.matchBase,
          nobrace: this.nobrace,
          nocase: this.nocase,
          nocaseMagicOnly,
          nocomment: true,
          noext: this.noext,
          nonegate: true,
          optimizationLevel: 2,
          platform: this.platform,
          windowsPathsNoEscape: this.windowsPathsNoEscape,
          debug: !!this.opts.debug
        };
        const mms = this.pattern.map((p) => new Minimatch(p, mmo));
        const [matchSet, globParts] = mms.reduce((set, m) => {
          set[0].push(...m.set);
          set[1].push(...m.globParts);
          return set;
        }, [[], []]);
        this.patterns = matchSet.map((set, i) => {
          const g = globParts[i];
          if (!g)
            throw new Error("invalid pattern object");
          return new Pattern(set, g, 0, this.platform);
        });
      }
      async walk() {
        return [
          ...await new GlobWalker(this.patterns, this.scurry.cwd, {
            ...this.opts,
            maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
            platform: this.platform,
            nocase: this.nocase,
            includeChildMatches: this.includeChildMatches
          }).walk()
        ];
      }
      walkSync() {
        return [
          ...new GlobWalker(this.patterns, this.scurry.cwd, {
            ...this.opts,
            maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
            platform: this.platform,
            nocase: this.nocase,
            includeChildMatches: this.includeChildMatches
          }).walkSync()
        ];
      }
      stream() {
        return new GlobStream(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).stream();
      }
      streamSync() {
        return new GlobStream(this.patterns, this.scurry.cwd, {
          ...this.opts,
          maxDepth: this.maxDepth !== Infinity ? this.maxDepth + this.scurry.cwd.depth() : Infinity,
          platform: this.platform,
          nocase: this.nocase,
          includeChildMatches: this.includeChildMatches
        }).streamSync();
      }
      /**
       * Default sync iteration function. Returns a Generator that
       * iterates over the results.
       */
      iterateSync() {
        return this.streamSync()[Symbol.iterator]();
      }
      [Symbol.iterator]() {
        return this.iterateSync();
      }
      /**
       * Default async iteration function. Returns an AsyncGenerator that
       * iterates over the results.
       */
      iterate() {
        return this.stream()[Symbol.asyncIterator]();
      }
      [Symbol.asyncIterator]() {
        return this.iterate();
      }
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/has-magic.js
var hasMagic;
var init_has_magic = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/has-magic.js"() {
    init_importMeta();
    init_esm();
    hasMagic = (pattern, options = {}) => {
      if (!Array.isArray(pattern)) {
        pattern = [pattern];
      }
      for (const p of pattern) {
        if (new Minimatch(p, options).hasMagic())
          return true;
      }
      return false;
    };
  }
});

// ../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/index.js
function globStreamSync(pattern, options = {}) {
  return new Glob(pattern, options).streamSync();
}
function globStream(pattern, options = {}) {
  return new Glob(pattern, options).stream();
}
function globSync(pattern, options = {}) {
  return new Glob(pattern, options).walkSync();
}
async function glob_(pattern, options = {}) {
  return new Glob(pattern, options).walk();
}
function globIterateSync(pattern, options = {}) {
  return new Glob(pattern, options).iterateSync();
}
function globIterate(pattern, options = {}) {
  return new Glob(pattern, options).iterate();
}
var streamSync, stream, iterateSync, iterate, sync, glob;
var init_esm5 = __esm({
  "../../node_modules/.pnpm/glob@10.4.3/node_modules/glob/dist/esm/index.js"() {
    init_importMeta();
    init_esm();
    init_glob();
    init_has_magic();
    init_esm();
    init_glob();
    init_has_magic();
    init_ignore();
    streamSync = globStreamSync;
    stream = Object.assign(globStream, { sync: globStreamSync });
    iterateSync = globIterateSync;
    iterate = Object.assign(globIterate, {
      sync: globIterateSync
    });
    sync = Object.assign(globSync, {
      stream: globStreamSync,
      iterate: globIterateSync
    });
    glob = Object.assign(glob_, {
      glob: glob_,
      globSync,
      sync,
      globStream,
      stream,
      globStreamSync,
      streamSync,
      globIterate,
      iterate,
      globIterateSync,
      iterateSync,
      Glob,
      hasMagic,
      escape,
      unescape
    });
    glob.glob = glob;
  }
});

// ../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/filesystem.js
var fs, path2, generateScaffolding, writeBaseFiles, build;
var init_filesystem = __esm({
  "../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/filesystem.js"() {
    init_importMeta();
    fs = __toESM(require("fs"), 1);
    path2 = __toESM(require("path"), 1);
    init_esm5();
    init_core();
    init_codegen();
    generateScaffolding = async (options) => {
      const directories = [path2.join(options.outDir, "collections")];
      if (!options.dryRun) {
        for (const dir of directories) {
          await fs.promises.mkdir(dir, {
            recursive: true
          });
        }
      }
      return directories;
    };
    writeBaseFiles = async (declarations, options) => {
      const result = {};
      const write = async (path3, content) => {
        result[path3] = content;
        if (!options.dryRun) {
          return fs.promises.writeFile(path3, content);
        }
      };
      await write(path2.join(options.outDir, "package.json"), JSON.stringify(generateRootPackageJson(options), null, 2));
      await write(path2.join(options.outDir, addJsExtension("index", options)), generateRootIndexJs(declarations, options));
      await write(path2.join(options.outDir, addDtsExtension("index", options)), generateRootIndexDts(declarations, options));
      await write(path2.join(options.outDir, "collections", addJsExtension("index", options)), generateCollectionsIndexJs(declarations, options));
      await write(path2.join(options.outDir, "collections", addDtsExtension("index", options)), generateCollectionsIndexDts(declarations, options));
      return result;
    };
    build = async (patterns, options) => {
      const compilationResults = [];
      const emittedFiles = [];
      const inputs = await glob(patterns);
      if (inputs.length === 0) {
        return {
          success: true,
          emittedFiles: []
        };
      }
      for (const input of inputs) {
        const source = await fs.promises.readFile(input, {
          encoding: "utf-8"
        });
        const resultEither = compileSource({
          filename: input,
          source,
          module: options.module
        });
        if (isLeft(resultEither)) {
          return {
            success: false,
            diagnostics: unwrap4(resultEither)
          };
        }
        const result = unwrap4(resultEither);
        compilationResults.push(result);
      }
      const flatResults = compilationResults.flat();
      const declarations = getDeclarations(flatResults);
      await generateScaffolding(options);
      await writeBaseFiles(declarations, options);
      for (const decl of declarations) {
        const declPath = getDeclarationPath(decl, options.outDir);
        const jsPath = addJsExtension(declPath, options);
        const tsPath = addDtsExtension(declPath, options);
        await fs.promises.writeFile(jsPath, decl.js);
        await fs.promises.writeFile(tsPath, decl.ts);
        emittedFiles.push(...[
          jsPath,
          tsPath
        ]);
      }
      return {
        success: true,
        emittedFiles
      };
    };
  }
});

// ../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/types.js
var init_types = __esm({
  "../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/types.js"() {
    init_importMeta();
  }
});

// ../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/index.js
var init_dist2 = __esm({
  "../../node_modules/.pnpm/@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7/node_modules/@aeria-lang/build/dist/index.js"() {
    init_importMeta();
    init_codegen();
    init_core();
    init_filesystem();
    init_types();
  }
});

// ../../node_modules/.pnpm/aeria-lang@0.0.10_@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7__@aeria-lang+compiler@0.0.7/node_modules/aeria-lang/dist/index.js
var dist_exports2 = {};
__export(dist_exports2, {
  Left: () => Left,
  Right: () => Right,
  addDtsExtension: () => addDtsExtension,
  addJsExtension: () => addJsExtension,
  build: () => build,
  checkSource: () => checkSource,
  checker: () => checker,
  compile: () => compile,
  compileSource: () => compileSource,
  generateCollectionsIndexDts: () => generateCollectionsIndexDts,
  generateCollectionsIndexJs: () => generateCollectionsIndexJs,
  generateRootIndexDts: () => generateRootIndexDts,
  generateRootIndexJs: () => generateRootIndexJs,
  generateRootPackageJson: () => generateRootPackageJson,
  generateScaffolding: () => generateScaffolding,
  getDeclarationPath: () => getDeclarationPath,
  getDeclarations: () => getDeclarations,
  getNormalizedSpan: () => getNormalizedSpan,
  isLeft: () => isLeft,
  ppDiagnostic: () => ppDiagnostic,
  unwrap: () => unwrap4,
  writeBaseFiles: () => writeBaseFiles
});
var init_dist3 = __esm({
  "../../node_modules/.pnpm/aeria-lang@0.0.10_@aeria-lang+build@0.0.13_@aeria-lang+compiler@0.0.7__@aeria-lang+compiler@0.0.7/node_modules/aeria-lang/dist/index.js"() {
    init_importMeta();
    init_dist2();
    init_dist();
  }
});

// src/index.ts
init_importMeta();
var import_node = __toESM(require_node3());

// ../../node_modules/.pnpm/vscode-languageserver-textdocument@1.0.11/node_modules/vscode-languageserver-textdocument/lib/esm/main.js
init_importMeta();
var FullTextDocument = class _FullTextDocument {
  constructor(uri, languageId, version, content) {
    this._uri = uri;
    this._languageId = languageId;
    this._version = version;
    this._content = content;
    this._lineOffsets = void 0;
  }
  get uri() {
    return this._uri;
  }
  get languageId() {
    return this._languageId;
  }
  get version() {
    return this._version;
  }
  getText(range) {
    if (range) {
      const start = this.offsetAt(range.start);
      const end = this.offsetAt(range.end);
      return this._content.substring(start, end);
    }
    return this._content;
  }
  update(changes, version) {
    for (let change of changes) {
      if (_FullTextDocument.isIncremental(change)) {
        const range = getWellformedRange(change.range);
        const startOffset = this.offsetAt(range.start);
        const endOffset = this.offsetAt(range.end);
        this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
        const startLine = Math.max(range.start.line, 0);
        const endLine = Math.max(range.end.line, 0);
        let lineOffsets = this._lineOffsets;
        const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
        if (endLine - startLine === addedLineOffsets.length) {
          for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
            lineOffsets[i + startLine + 1] = addedLineOffsets[i];
          }
        } else {
          if (addedLineOffsets.length < 1e4) {
            lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
          } else {
            this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
          }
        }
        const diff = change.text.length - (endOffset - startOffset);
        if (diff !== 0) {
          for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
            lineOffsets[i] = lineOffsets[i] + diff;
          }
        }
      } else if (_FullTextDocument.isFull(change)) {
        this._content = change.text;
        this._lineOffsets = void 0;
      } else {
        throw new Error("Unknown change event received");
      }
    }
    this._version = version;
  }
  getLineOffsets() {
    if (this._lineOffsets === void 0) {
      this._lineOffsets = computeLineOffsets(this._content, true);
    }
    return this._lineOffsets;
  }
  positionAt(offset) {
    offset = Math.max(Math.min(offset, this._content.length), 0);
    let lineOffsets = this.getLineOffsets();
    let low = 0, high = lineOffsets.length;
    if (high === 0) {
      return { line: 0, character: offset };
    }
    while (low < high) {
      let mid = Math.floor((low + high) / 2);
      if (lineOffsets[mid] > offset) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    let line = low - 1;
    return { line, character: offset - lineOffsets[line] };
  }
  offsetAt(position2) {
    let lineOffsets = this.getLineOffsets();
    if (position2.line >= lineOffsets.length) {
      return this._content.length;
    } else if (position2.line < 0) {
      return 0;
    }
    let lineOffset = lineOffsets[position2.line];
    let nextLineOffset = position2.line + 1 < lineOffsets.length ? lineOffsets[position2.line + 1] : this._content.length;
    return Math.max(Math.min(lineOffset + position2.character, nextLineOffset), lineOffset);
  }
  get lineCount() {
    return this.getLineOffsets().length;
  }
  static isIncremental(event) {
    let candidate = event;
    return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range !== void 0 && (candidate.rangeLength === void 0 || typeof candidate.rangeLength === "number");
  }
  static isFull(event) {
    let candidate = event;
    return candidate !== void 0 && candidate !== null && typeof candidate.text === "string" && candidate.range === void 0 && candidate.rangeLength === void 0;
  }
};
var TextDocument;
(function(TextDocument2) {
  function create(uri, languageId, version, content) {
    return new FullTextDocument(uri, languageId, version, content);
  }
  TextDocument2.create = create;
  function update(document, changes, version) {
    if (document instanceof FullTextDocument) {
      document.update(changes, version);
      return document;
    } else {
      throw new Error("TextDocument.update: document must be created by TextDocument.create");
    }
  }
  TextDocument2.update = update;
  function applyEdits(document, edits) {
    let text = document.getText();
    let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
      let diff = a.range.start.line - b.range.start.line;
      if (diff === 0) {
        return a.range.start.character - b.range.start.character;
      }
      return diff;
    });
    let lastModifiedOffset = 0;
    const spans = [];
    for (const e of sortedEdits) {
      let startOffset = document.offsetAt(e.range.start);
      if (startOffset < lastModifiedOffset) {
        throw new Error("Overlapping edit");
      } else if (startOffset > lastModifiedOffset) {
        spans.push(text.substring(lastModifiedOffset, startOffset));
      }
      if (e.newText.length) {
        spans.push(e.newText);
      }
      lastModifiedOffset = document.offsetAt(e.range.end);
    }
    spans.push(text.substr(lastModifiedOffset));
    return spans.join("");
  }
  TextDocument2.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare5) {
  if (data.length <= 1) {
    return data;
  }
  const p = data.length / 2 | 0;
  const left = data.slice(0, p);
  const right = data.slice(p);
  mergeSort(left, compare5);
  mergeSort(right, compare5);
  let leftIdx = 0;
  let rightIdx = 0;
  let i = 0;
  while (leftIdx < left.length && rightIdx < right.length) {
    let ret = compare5(left[leftIdx], right[rightIdx]);
    if (ret <= 0) {
      data[i++] = left[leftIdx++];
    } else {
      data[i++] = right[rightIdx++];
    }
  }
  while (leftIdx < left.length) {
    data[i++] = left[leftIdx++];
  }
  while (rightIdx < right.length) {
    data[i++] = right[rightIdx++];
  }
  return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
  const result = isAtLineStart ? [textOffset] : [];
  for (let i = 0; i < text.length; i++) {
    let ch = text.charCodeAt(i);
    if (ch === 13 || ch === 10) {
      if (ch === 13 && i + 1 < text.length && text.charCodeAt(i + 1) === 10) {
        i++;
      }
      result.push(textOffset + i + 1);
    }
  }
  return result;
}
function getWellformedRange(range) {
  const start = range.start;
  const end = range.end;
  if (start.line > end.line || start.line === end.line && start.character > end.character) {
    return { start: end, end: start };
  }
  return range;
}
function getWellformedEdit(textEdit) {
  const range = getWellformedRange(textEdit.range);
  if (range !== textEdit.range) {
    return { newText: textEdit.newText, range };
  }
  return textEdit;
}

// src/lib.ts
init_importMeta();
var import_url = require("url");
var reportDiagnostics = async ({ document }, connection2) => {
  const lang2 = await Promise.resolve().then(() => (init_dist3(), dist_exports2));
  const source = document.getText();
  const resultEither = lang2.checkSource({
    filename: (0, import_url.fileURLToPath)(document.uri),
    source
  });
  if (lang2.isLeft(resultEither)) {
    const diagnostic = lang2.unwrap(lang2.unwrap(resultEither));
    const range = lang2.getNormalizedSpan(diagnostic.span);
    connection2.sendDiagnostics({
      uri: (0, import_url.pathToFileURL)(diagnostic.filepath).href,
      diagnostics: [
        {
          message: diagnostic.info,
          range
        }
      ]
    });
    return;
  }
  connection2.sendDiagnostics({
    uri: document.uri,
    diagnostics: []
  });
};

// src/index.ts
var connection = (0, import_node.createConnection)(import_node.ProposedFeatures.all);
var documents = new import_node.TextDocuments(TextDocument);
connection.onInitialize(() => {
  const result = {
    capabilities: {}
  };
  return result;
});
documents.onDidChangeContent(async (event) => {
  return reportDiagnostics(event, connection);
});
documents.listen(connection);
connection.listen();
